; *****************************************************************************
; *****************************************************************************
;
;		Name :		fornext.src
;		Purpose :	For/Next handlers and encoders
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		8th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;			Repeat does nothing when executed, it is just a label
;
; *****************************************************************************

ForHandler:	;; for <0> 
		inc 	rsp 						; bump the RSP
		ldy 	rsp 						; get return stack and push TOS/$FF on it.
		cpy 	#$40 						; overflow
		beq 	_FHOverflow
		lda 	TOS+1
		sta 	returnStackHigh,y
		lda 	TOS
		sta 	returnStackLow,y
		lda 	#$FF
		sta 	returnStackX,y
		popTOS 								; update TOS, losing loop variable
		doNext 						
_FHOverflow:
		rerror	"STRUCTURE OVERFLOW"

; *****************************************************************************
;
;			 Until is a marker, the code is 'branch if tos zero back'
;
; *****************************************************************************

NextHandler:	;; next <1> 
		phx
		ldx 	rsp 						; get current stack ptr
		lda 	returnStackX,x 				; check it's a FOR Loop
		cmp 	#$FF
		bne 	NHNoFor
		;
		lda 	returnStackLow,x 			; decrement the count
		bne 	_NHNoBorrow
		dec 	returnStackHigh,x
_NHNoBorrow:
		dec 	returnStackLow,x
		;
		lda 	returnStackLow,x 			; have we reached the end ?
		ora 	returnStackHigh,x
		plx 								; restore X and re-test
		ora 	#0
		beq 	_NHComplete 				; if so then complete, else loop.
		inx 								; advance to branch
		inx 
		jmp 	BranchAlways
		;
_NHComplete:
		inx 								; skip over the branch quantity
		dec 	rsp 						; drop the indx
		doNext

NHNoFor:
		rerror 	"OUT OF FOR SCOPE"
		
; *****************************************************************************
;
;								Access current index
;
; *****************************************************************************

GetIndex: 	;; index <0>
		ldy 	rsp 						; get current stack ptr
		lda 	returnStackX,y 				; check it's a FOR Loop
		cmp 	#$FF
		bne 	NHNoFor
		;
		pushTOS
		;
		lda 	returnStackLow,y 			; put counter-1 out
		sec
		sbc 	#1
		sta 	TOS
		lda 	returnStackHigh,y
		sbc 	#0
		sta 	TOS+1
		;
		doNext
		