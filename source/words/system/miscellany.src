; *****************************************************************************
; *****************************************************************************
;
;		Name :		miscellany.src
;		Purpose :	Miscellaneous words
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

RunProgram: 	;; run <0>
		resetStack
		jsr 		ClearVariableSpace 		; clear variables etc.
		ldx			#ProgramMemory & $FF	; boot address
		ldy 		#ProgramMemory >>8
		jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
		jmp 		Next

; *****************************************************************************
;
;						Call a machine code routine
;
; *****************************************************************************

Call6502: 	;; sys <0>
		lda 	TOS 						; copy call address
		sta 	temp1
		lda 	TOS+1
		sta 	temp1+1
		popTOS
		jsr 	_CallTemp1 					; call it		
		jmp 	Next
_CallTemp1:
		jmp 	(temp1)		

; *****************************************************************************
;
;					Stop a program running if assertion fails
;
; *****************************************************************************

AssertCode:	;; assert <0>
		lda 	TOS 						; TOS = 0
		ora 	TOS+1
		beq 	_ASFail 					; if zero fail
		popTOS 								; pop TOS off
		jmp 	Next
_ASFail:rerror	"ASSERT"
		
; *****************************************************************************
;
;							Stop a program running
;
; *****************************************************************************

StopCode:	;; stop <0>
		rerror	"STOP"

; *****************************************************************************
;
;						End a program (warm start)
;
; *****************************************************************************

EndProgram:	;; end <0>
		jmp 	WarmStart

; *****************************************************************************
;
;								Vocabulary List
;
; *****************************************************************************

VlistCode: ;; vlist <0>
		set16 	temp1,Dictionary 			; work down the dictionary
_VLLoop:ldy 	#1							; type byte
		lda 	(temp1),y
		ldy 	#4 							; Y = 4
		lsr 	a 							; shift bits 4 and 5 to 0,1
		lsr 	a
		lsr		a
		lsr 	a

		lsr 	a 							; add those bits in
		bcc 	_VLNoDec
		iny
		iny
_VLNoDec:		
		lsr 	a
		bcc 	_VLNoEnc
		iny
		iny
_VLNoEnc:		
		lda 	(temp1),y 					; remove $$ words
		cmp 	#"$"
		bne 	_VLPrint
		iny
		eor 	(temp1),y
		beq 	_VLNext
		dey
		;
_VLPrint:									; print name out
		lda 	(temp1),y
		pha
		iny
		and 	#$7F
		jsr 	ExternPrint
		pla
		asl 	a	
		bcc 	_VLPrint
		lda 	#32
		jsr 	ExternPrint
		;
_VLNext:		
		clc 								; go to next
		lda 	(temp1)	
		adc 	temp1
		sta 	temp1
		bcc 	_VLNoCarry
		inc 	temp1+1
_VLNoCarry:
		lda 	(temp1)
		bne 	_VLLoop
		lda 	#13
		jsr 	ExternPrint
		jmp 	Next
