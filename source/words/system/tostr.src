; *****************************************************************************
; *****************************************************************************
;
;		Name :		tostr.src
;		Purpose :	Convert integer to ASCIIZ
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;				Convert TOS to string in buffer on TOS (decimal only)
;
; *****************************************************************************

IntToString: 	;; to.string 
		set16 	temp2,textBuffer 			; where it goes.	
		lda 	TOS 						; value in YA
		ldy 	TOS+1
		jsr 	ConvertToString
		set16 	TOS,textBuffer				; return this value.
		jmp 	Next

; *****************************************************************************
;
;					Convert YA to ASCIIZ string at temp2
;						 Return # chars conveted in A
;
; *****************************************************************************

ConvertToString:
		sec
		bra 	ConvertToStringMain
ConvertToStringUnsigned:
		clc
ConvertToStringMain:
		phx									; save XY
		phy
		stz 	SignCount 					; this is zero suppression
		sta 	temp1 						; save YA in temp1
		sty 	temp1+1
		ldy 	#0 							; index to result.
		bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
		lda 	temp1+1 					; is it negative
		bpl 	_CTSUnsigned
		;
		lda 	#"-"						; output - sign
		sta 	(temp2),y
		iny
		sec 								; negate temp1
		lda 	#0
		sbc 	temp1
		sta 	temp1
		lda 	#0
		sbc 	temp1+1
		sta 	temp1+1
_CTSUnsigned:
		ldx 	#0 							; index into subtraction table
;
_CTSLoop:
		lda 	#"0"-1						; set the digit to '0' code.
		sta 	(temp2),y
_CTSSubLoop:
		lda 	(temp2),y 					; bump the count
		inc 	a
		sta 	(temp2),y
		;
		sec 								; do subtraction saving interim result
		lda 	temp1
		sbc 	_CTSTable,x
		pha
		lda 	temp1+1
		sbc 	_CTSTable+1,x
		bcc 	_CTSCantSubtract 			; end of subtraction.
		;
		sta 	temp1+1 					; save result back
		pla
		sta 	temp1
		bra 	_CTSSubLoop
		;
_CTSCantSubtract:
		pla 								; throw away interim
		inx 								; next subtractor
		inx				
		lda 	(temp2),y 					; update leading zero
		eor 	#"0"
		ora 	SignCount
		sta 	SignCount
		beq		_CTSLZ 						; if all zeros so far suppress.
		iny 								; next character
_CTSLZ:		
		cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
		bne 	_CTSLoop
_CTSComplete:
		lda		temp1 						; get remainder 0-9
		ora 	#48 						; ASCII
		sta 	(temp2),y					; write out
		iny
		lda 	#0							; make ASCIIZ
		sta 	(temp2),y
		tya 								; size in A
		ply									; pull and exit.
		plx
		rts

_CTSTable:
		.word 	10000,1000,100,10 			; subtractors, this is a simple version.
_CTSTableEnd:

