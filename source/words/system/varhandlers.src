; *****************************************************************************
; *****************************************************************************
;
;		Name :		varhandlers.src
;		Purpose :	Handlers for @var !var &var
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;					Push the variable address on the stack
;
; *****************************************************************************

VarAddressHandler:	;; 	$$&handler noexec <2>
		clc 								; find variable, error if it doesn't exist.
		jsr 	VariableFind 				
		pushTOS 							; push stack top on the stack.

		lda 	temp1 						; the address is the new value
		sta 	TOS
		lda		temp1+1
		sta 	TOS+1
		jmp 	Next

VarAddrHandlerDecode: ;; $$&handler decode
		lda 	#"&"
		jmp 	VarHandlerDecode

; *****************************************************************************
;
;					Push the variable value on the stack
;
; *****************************************************************************

VarReadHandler:		;; 	$$@handler 	noexec <2>
		clc 								; find variable, error if it doesn't exist.
		jsr 	VariableFind 				
		;
		pushTOS 							; push stack top on the stack.

		lda 	(temp1)						; read variable address to TOS
		sta 	TOS
		ldy 	#1
		lda 	(temp1),y
		sta 	TOS+1
		jmp 	Next

VarReadHandlerDecode: ;; $$@handler decode
		lda 	#"@"
		jmp 	VarHandlerDecode

; *****************************************************************************
;
;						Store the TOS at the variable
;
; *****************************************************************************

VarWriteHandler:	;; 	$$!handler 	noexec <2>
		sec 								; find variable, create it if it doesn't exist.
		jsr 	VariableFind 							

		lda 	TOS 						; write TOS to that address.
		sta 	(temp1)
		lda 	TOS+1
		ldy 	#1
		sta 	(temp1),y

		popTOS 								; get the next value off the stack and loop
		jmp 	Next

VarWriteHandlerDecode: ;; $$!handler decode
		lda 	#"!"
		jmp 	VarHandlerDecode

; *****************************************************************************
;
;		Extract the variable name, find where it is and place address of 
;		data in temp1. If CS on entry, create it if it doesn't exist, else
;		report an error.
;
; *****************************************************************************

VariableFind:
		php 								; save autocreate flag.
		;
		;		Extract the name of the variable
		;
		inx 								; advance to/over the variable name.
		inx
		txa 								; put in Y
		tay
		lda 	(IP),y 						; copy name word into temp2
		sta 	temp2
		iny 	
		lda 	(IP),y
		sta 	temp2+1
		;
		; 		Check for, and handle A-Z single letter fixed.
		;
		cmp 	#27 						; check for A-Z
		bcs 	_VFLong
		lda 	temp2+1
		bne 	_VFLong
		;
		lda 	temp2						; this is the index
		asl 	a 							; double it
		sta 	temp1
		lda 	#azVariables >> 8			; set the MSB
		sta 	temp1+1
		plp 								; throw creation flag, it always exists.
		rts
		;
		;		Legal variable, but not A-Z, so look for it in the hash tables.
		;
_VFLong:
		lda 	temp2 						; built a hash table index into temp3/temp4
		ror 	a
		ror 	a
		ror 	a
		ror 	a
		eor 	temp2
		eor 	temp2+1
		and 	#(hashTableSize-1)			; force into range
		asl 	a
		adc 	#hashTable & $FF 			; make an address of the head => temp1/3
		sta 	temp1
		sta 	temp3
		lda 	#hashTable >> 8
		sta 	temp1+1
		sta 	temp3+1
		;
		;		Search the variable list at temp3 for the value in temp2. The list element
		;		is +0:address of next +2: data +4: name (right way round)
		;
_VFSearch:	
		ldy 	#1							; read MSB of first record
		lda 	(temp1),y 
		beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
		tay 								; follow the link through.
		lda 	(temp1)
		sta 	temp1
		sty 	temp1+1
		ldy 	#4							; check if the name matches
		lda 	(temp1),y
		cmp 	temp2
		bne 	_VFSearch 					; if it doesn't, follow the next link.
		iny 								; same for 2nd byte of name
		lda 	(temp1),y
		cmp 	temp2+1
		bne 	_VFSearch
		;
		clc
		lda 	temp1 						; make temp1 point to the data at offset 2
		adc 	#2
		sta 	temp1
		bcc 	_VFNoPage1
		inc 	temp1+1
_VFNoPage1:
		plp 								; don't need to worry about creation flag
		rts		
		;
		;		Variable not found, check for autocreate, if not report error.
		;
_VFNotFound:
		plp 								; was carry set, e.g. create a new record if not found ?
		bcs 	_VFCreate
		rerror 	"VARIABLE?"					; no such variable created.
		;
		;		Create variable, name in temp2.
		;				
_VFCreate:		
		ldy 	#1 							
		;
		lda 	(temp3) 					; copy the head link to the first 2 bytes
		sta 	(nextFreeMem)
		lda 	(temp3),y
		sta 	(nextFreeMem),y
		iny
		;
		lda 	#0	 						; write zero initialised data out.
		sta 	(nextFreeMem),y
		iny
		sta 	(nextFreeMem),y
		iny
		;
		lda 	temp2 						; copy the name out
		sta 	(nextFreeMem),y
		iny
		lda 	temp2+1
		sta 	(nextFreeMem),y
		;
		ldy 	#1
		lda 	nextFreeMem 				; update the head link
		sta 	(temp3)
		lda 	nextFreeMem+1
		sta 	(temp3),y
		;
		clc
		lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
		adc 	#2
		sta 	temp1
		lda 	nextFreeMem+1
		adc 	#0
		sta 	temp1+1
		;
		lda 	#6							; shift freemem pointer up 6
		ldy 	#0
		jsr 	AdvanceFreeMem
		rts

; *****************************************************************************
;
;				Common Decoder code - A contains type (! & @)
;
; *****************************************************************************

VarHandlerDecode:
		pha 								; save, leading space
		lda 	#" "
		jsr 	DecodeWriteBuffer
		pla 								; restore and write type
		jsr 	DecodeWriteBuffer

		lda 	(srcPtr),y 					; copy to temp1
		sta 	temp1
		iny
		lda 	(srcPtr),y
		sta 	temp1+1
		;
		lda 	temp1 						; output the first character
		and 	#31
		jsr 	VHOutVarChar
		ldx 	#5 							; divide temp1 by 32
_VHDShift:
		lsr 	temp1+1
		ror 	temp1
		dex 
		bne 	_VHDShift
		;
		ldx 	#255 						; now divide that by 40 by repeated subtraction.
_VHDDiv40:
		inx
		sec
		lda 	temp1
		sbc 	#40
		tay
		lda 	temp1+1
		sbc 	#0
		bcc 	_VHDivDone
		sta 	temp1+1
		sty 	temp1
		bra 	_VHDDiv40
_VHDivDone:
		lda 	temp1 						; remainder
		jsr 	VHOutVarChar		
		txa
		jsr 	VHOutVarChar 				; and result.
		rts

VHOutVarChar:
		cmp 	#0
		beq 	_VHOExit
		clc
		adc 	#64 						; 65-90 A-Z 91-100 0-9
		cmp 	#91 						; convert back ?
		bcc 	_VHOOut
		sbc 	#91-48 						; adjust to digit
_VHOOut:
		jsr 	DecodeWriteBuffer		
_VHOExit:
		rts