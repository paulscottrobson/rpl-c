; *****************************************************************************
; *****************************************************************************
;
;		Name :		toint.src
;		Purpose :	Convert ASCIIZ to integer. 
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;	  Convert word at YA to a number in temp3. CS if okay, CC if bad.
;	  Characters consumed in A. Goes as far as <= space, ignores bit 7.
;
; *****************************************************************************

dbltemp3 .macro	
		asl 	temp3
		rol 	temp3+1
		.endm

ConvertToInteger:	
		sty 	temp4+1
		sta 	temp4
		stz 	temp3 						; reset value
		stz 	temp3+1	
		stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
		ldy 	#0 							; look at first character
		lda 	(temp4),y
		eor 	#"-"						; zero if '-'
		sta 	temp1+1 					; save this in temp1+1
		bne 	_CTINotMinus
		iny									; skip -
_CTINotMinus:										
		lda 	(temp4),y 	
		cmp		#'$'						; if $ then skip it and set hex flag
		bne 	_CTILoop
		dec 	temp1
		iny
		;
_CTILoop: 									; multiply temp1 by 10 or 16
		lda 	(temp4),y 					; next digit
		;
		and 	#$7F 						; drop end of word flag
		sec
		sbc 	#'0' 						; put in range '0'+
		bcc 	_CTIFail 					; out of range.
		cmp 	#10 						; in 0-9 ?
		bcc 	_CTILegal
		cmp 	#'A'-'0'					; between 9 and A ?
		bcc 	_CTIFail
		sec
		sbc 	#7 							; hex adjust
		cmp 	#16 						; out of range ?
		bcs 	_CTIFail		
_CTILegal:
		pha 								; save digit value.
		dbltemp3 							; x 2
		lda 	temp3 						; copy x2 into temp2
		sta 	temp2
		lda 	temp3+1
		sta 	temp2+1
		dbltemp3 							; x 4
		dbltemp3 							; x 8
		bit 	temp1 						; hexadecimal
		bpl 	_CTIDecimal
		dbltemp3 							; x 16
		pla 								; get digit back
		bra 	_CTIAddLoop
_CTIDecimal:
		clc 								; x 8 + x 2 = x 10
		lda 	temp3		
		adc 	temp2
		sta 	temp3
		lda 	temp3+1
		adc 	temp2+1
		sta 	temp3+1
		pla 								; check digit 0-9
		cmp 	#10
		bcs 	_CTIFail
		;
_CTIAddLoop:								; add digit value.
		clc
		adc 	temp3
		sta 	temp3
		bcc 	_CTINoCarry
		inc 	temp3+1
_CTINoCarry:
		iny
		lda 	(temp4),y 					; was this the last character
		cmp 	#32+1
		bcs 	_CTILoop 					; no, go back.
		lda 	temp1+1 					; was it - ?
		bne 	_CTIOkay
		sec
		lda 	#0 							; negate temp3.
		sbc 	temp3
		sta 	temp3
		lda 	#0
		sbc 	temp3+1
		sta 	temp3+1
_CTIOkay:
		tya
		sec
		rts

_CTIFail:									; fail.
		clc
		rts
