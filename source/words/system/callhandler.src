; *****************************************************************************
; *****************************************************************************
;
;		Name :		callhandler.src
;		Purpose :	Handlers for call and return
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;				Push IP.H IP.L X on the stack, and jump to routine.
;
; *****************************************************************************

CallHandler: 	;; 	$$call noexec <2>
		inx									; bump X to the call address.
		inx 
		inc 	rsp 						; bump the RSP (first time to zero)
		ldy 	rsp 						; get return stack and push IP/X on it.
		cpy 	#$40 						; overflow
		beq 	_CHOverflow
		lda 	IP+1
		sta 	returnStackHigh,y
		lda 	IP
		sta 	returnStackLow,y
		txa
		sta 	returnStackX,y
		;
		txa 								; get the line number into temp1.
		tay
		lda 	(IP),y 					
		sta 	temp1
		iny 	
		lda 	(IP),y
		sta 	temp1+1
		;
		set16 	IP,ProgramMemory 			; now search for it.
		lda 	(IP)						; no program code ?
		beq 	_CHFail
		;
		;		Simple search. May upgrade it for later
		;
		ldy 	#1 							; Y = 1 throughout.
_CHSearch:
		lda 	(IP),y 						; check LSB of line number
		cmp 	temp1
		beq 	_CHFoundLSB
_CHSearchNext:		
		advance	IP 							; go forward to next
		lda 	(IP)						; check reached the end.
		bne 	_CHSearch
_CHFail:
		rerror 	"DEFINITION?"				; usually means line# has changed
_CHOverflow:
		rerror 	"STACKDEPTH?"
		;
		;		LSB matches, check MSB
		;
_CHFoundLSB:		
		iny 								; get MSB
		lda 	(IP),y
		dey
		cmp 	temp1+1 					; matches, if not contineu
		bne 	_CHSearchNext
		;
		;		IP points to the new line.
		;
		ldy 	#3	 						; check it begins with $$define
		lda 	(IP),y
		cmp 	#DefineCode & $FF
		bne 	_CHFail
		iny
		lda 	(IP),y 						
		cmp 	#DefineCode >> 8
		bne 	_CHFail
		iny
		lda 	(IP),y 						; this is the length of the define name
		clc
		adc 	#5 							; $$define token, line number, offset
		tax
		jmp 	Next+2 						; and execute

; *****************************************************************************
;
;								Return from routine
;
; *****************************************************************************
		
ReturnHandler:	;;	; noexec <0>		
		ldy 	rsp 						; get rsp
		bmi 	_RHUnderflow 				; if -ve underflowed
		dec 	rsp 						; decrement rsp
		;
		lda 	returnStackHigh,y 			; restore IP/X
		sta 	IP+1
		lda 	returnStackLow,y
		sta 	IP
		lda 	returnStackX,y
		tax
		beq 	_RHInLoop 					; this means you have done :something for ; next
		jmp 	Next
_RHUnderflow:
		rerror	"RETURN?"		
_RHInLoop:
		rerror 	"RETURN IN LOOP?"

; *****************************************************************************
;
;							Decode call handler
;
; *****************************************************************************

CallHandlerDecode:	;; $$call 	decode
		lda 	#" "						; space
		jsr 	DecodeWriteBuffer
		lda 	(srcPtr),y 					; get line number into YA
		tax
		iny
		lda 	(srcPtr),y
		tay	
		txa
		jsr 	FindLine 					; try to locate that line.
		bcs 	_CHDFound 					; if found .....
		;
		;		Not found or no :Define (e.g. $$define on the found line)
		;
_CHDLineOnly:								
		pha
		lda 	#"<"
		jsr 	DecodeWriteBuffer
		pla
		clc 								; output unsigned
		jsr 	DecodeYAToBuffer		
		lda 	#">"
		jsr 	DecodeWriteBuffer
		rts
		;
		;		Found the line number in temp1
		;
_CHDFound:
		pha 								; save YA
		phy
		ldy 	#3 							; check first is $$define
		lda 	(temp1),y
		cmp 	#DefineCode & 255
		bne 	_CHDNoDefine
		iny
		lda 	(temp1),y
		cmp 	#DefineCode >> 8
		beq 	_CHDFoundDefine 
		;
_CHDNoDefine:
		ply									; restore the line number and print it in <>
		pla		
		bra 	_CHDLineOnly
		;
_CHDFoundDefine:
		pla 								; throw saved line number.
		pla
		ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
_CHDOutName:
		iny 								; next
		lda 	(temp1),y 					; print char no bit 7
		pha
		and 	#$7F
		jsr 	DecodeWriteBuffer
		pla
		asl 	a 							; bit 7 to carry
		bcc 	_CHDOutName
		rts

; *****************************************************************************
;
;			Put address of line YA in temp1, CS found, CC not found
;
; *****************************************************************************

FindLine:
		pha 								; save registers
		phx
		phy
		sta 	temp2 						; temp2 = target line#
		sty 	temp2+1
		set16 	temp1,ProgramMemory 		; temp1 = search
_FLLoop:
		lda 	(temp1) 					; found end ?
		clc									; if so exit with CC.
		beq 	_FLExit
		ldy 	#1 							; check line # match
		lda 	(temp1),y
		cmp 	temp2
		bne 	_FLNext
		iny
		lda 	(temp1),y
		cmp 	temp2+1
		sec 								; if so exit with CS
		beq 	_FLExit
_FLNext:
		advance temp1 						; next line
		bra 	_FLLoop 					; keep looking.			
_FLExit:
		ply
		plx
		pla
		rts		
		clc
		rts
