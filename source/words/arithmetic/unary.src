; *****************************************************************************
; *****************************************************************************
;
;		Name :		unary.src
;		Purpose :	Unary functions
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;							Incrementers
;
; *****************************************************************************

Unary1Plus:		;; 1+ <0>
		inc 	TOS
		bne 	_U1PSkip
		inc 	TOS+1
_U1PSkip:
		doNext
Unary2Plus:		;; 2+ <0>
		clc
		lda 	TOS
		adc 	#2
		sta 	TOS
		bcc 	_U1PSkip
		inc 	TOS+1
_U1PSkip:
		doNext

; *****************************************************************************
;
;								Decrementers
;
; *****************************************************************************

Unary1Minus:	;; 1- <0>
		lda 	TOS
		bne 	_U1MSkip
		dec 	TOS+1
_U1MSkip:
		dec 	TOS
		doNext
Unary2Minus:	;; 2- <0>
		sec
		lda 	TOS
		sbc 	#2
		sta 	TOS
		bcs 	_U1PSkip
		dec 	TOS+1
_U1PSkip:
		doNext
; *****************************************************************************
;
;								Absolute Value
;
; *****************************************************************************

Absolute: ;; abs <0>
		lda 	TOS+1
		bmi 	Negate
		doNext

; *****************************************************************************
;
;								Negate TOS
;
; *****************************************************************************

Negate: 	;; negate <0>
		sec
		lda 	#0
		sbc 	TOS
		sta 	TOS
		lda 	#0
		sbc 	TOS+1
		sta 	TOS+1
		doNext

; *****************************************************************************
;
;								One's complement TOS
;
; *****************************************************************************

OneComplement: 	;; not <0>
		lda 	TOS
		eor 	#$FF
		sta 	TOS
		lda 	TOS+1
		eor 	#$FF
		sta 	TOS+1
		doNext

; *****************************************************************************
;
;								 Zero Checks
;
; *****************************************************************************

CheckMinus:	;; 0< <0>
		lda 	TOS+1
		bmi 	UnaryTrue
		
UnaryFalse:
		stz 	TOS
		stz 	TOS+1
		doNext
UnaryTrue:
		lda 	#$FF
		sta 	TOS
		sta 	TOS+1
		doNext

CheckZero: 	;; 0= <0>
		lda 	TOS
		ora 	TOS+1
		bne 	UnaryFalse
		bra 	UnaryTrue

; *****************************************************************************
;
;									Sign of TOS
;
; *****************************************************************************
		
SignTOS: ;; sgn <0>
		lda 	TOS+1
		bmi		UnaryTrue
		ora 	TOS
		beq 	UnaryFalse
		lda 	#1
		sta 	TOS
		stz		TOS+1
		doNext
; *****************************************************************************
;
;									Byte swap
;
; *****************************************************************************

ByteSwap:	;; bswap <0>
		lda 	TOS
		ldy 	TOS+1
		sta 	TOS+1
		sty 	TOS
		doNext

; *****************************************************************************
;
;									Scalars
;	
; *****************************************************************************

Times16: ;; 16* <0>
		asl 	TOS
		rol 	TOS+1
Times8:	;; 8* <0>
		asl 	TOS
		rol 	TOS+1
Times4:	;; 4* <0>
		asl 	TOS
		rol 	TOS+1
Times2:	;; 2* <0>
		asl 	TOS
		rol 	TOS+1
		doNext
Divide16:	;; 16/ <0>
		lsr 	TOS+1
		ror 	TOS
Divide8:	;; 8/ <0>
		lsr 	TOS+1
		ror 	TOS
Divide4:	;; 4/ <0>
		lsr 	TOS+1
		ror 	TOS
Divide2:	;; 2/ <0>
		lsr 	TOS+1
		ror 	TOS
		doNext
Times256:	;; 256* <0>
		lda 	TOS
		sta 	TOS+1
		stz 	TOS
		doNext
Divide256:	;; 256/ <0>
		lda 	TOS+1
		sta 	TOS
		stz 	TOS+1
		doNext

; *****************************************************************************
;
;							Random Number Generator
;
; *****************************************************************************

RandomNumber: 	;; rnd <0>
		pushTOS
		lda 	randomSeed
		ora 	randomSeed+1
		bne 	_RH_NoInit
		lda 	#$7C
		sta 	randomSeed
		lda 	#$A1
		sta 	randomSeed+1
_RH_NoInit:
		lda 	randomSeed
        lsr		a
        rol 	randomSeed+1  
        bcc 	_RH_NoEor
        eor 	#$B4 
_RH_NoEor: 
        sta 	randomSeed
        eor 	randomSeed+1  
        ;
        sta 	TOS+1
        lda 	randomSeed
        sta 	TOS
		doNext