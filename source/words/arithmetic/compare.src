; *****************************************************************************
; *****************************************************************************
;
;		Name :		compare.src
;		Purpose :	Comparison tests
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;								Equality Check
;
; *****************************************************************************

CheckNotEqual:	;; <> <0>
		sec
		bra 	CECode
CheckEqual:		;; = <0>
		clc
CECode:		
		stx 	temp1
		tsx
		php
		lda 	TOS
		eor 	Stack2Low,x
		bne	 	CompareFalse
		lda 	TOS+1
		eor 	Stack2High,x
		bne 	CompareFalse
;
;		Routines that restore X and return true (1) or false (0). Flip if P on TOS has CS.
;
CompareTrue:
		ldx 	temp1
		plp
		bcs		CompareFalse2
CompareTrue2:		
		pla
		pla
		lda 	#$FF
		sta 	TOS
		sta 	TOS+1
		doNext
		;
CompareFalse:				
		ldx 	temp1
		plp
		bcs		CompareTrue2
CompareFalse2:		
		pla
		pla
		stz 	TOS
		stz 	TOS+1
		doNext

; *****************************************************************************
;
;							 Comparison Check
;
; *****************************************************************************

CheckGreaterEq: ;; >= <0>
		sec
		bra		CLCode
CheckLess: 		;; < <0>
		clc
CLCode:	stx 	temp1
		tsx
		php
		clc
		lda 	TOS
		sbc 	Stack2Low,x
		lda 	TOS+1
		sbc 	Stack2High,x
		bvc 	_CLNoFlip
		eor 	#$80
_CLNoFlip:
		asl 	a
		bcs 	CompareFalse
		bra 	CompareTrue

CheckLessEq: ;; <= <0>
		sec
		bra		CGCode
CheckGreater: 	;; > <0>
		clc
CGCode:		
		stx 	temp1
		tsx
		php
		clc
		lda 	Stack2Low,x
		sbc 	TOS
		lda 	Stack2High,x
		sbc 	TOS+1
		bvc 	_CGNoFlip
		eor 	#$80
_CGNoFlip:
		asl 	a
		bcs 	CompareFalse
		bra 	CompareTrue

; *****************************************************************************
;
;								Minimum/Maximum
;
; *****************************************************************************

Minimum:	;; min <0>
		lda 	#0
		bra 	MinMaxCode
Maximum:	;; max <0>
		lda 	#$80
MinMaxCode:
		sta 	temp1+1
		stx 	temp1
		tsx
		sec		
		lda 	TOS
		sbc 	Stack2Low,x
		lda 	TOS+1
		sbc 	Stack2High,x
		bvc 	_MMNoFlip
		eor 	#$80
_MMNoFlip:
		eor 	temp1+1
		bmi 	_MMNoCopy
		;
		lda 	Stack2Low,x
		sta 	TOS
		lda 	Stack2High,x
		sta 	TOS+1
		;
_MMNoCopy:
		ldx 	temp1
		pla
		pla
		doNext

