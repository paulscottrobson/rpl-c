; *****************************************************************************
; *****************************************************************************
;
;		Name :		stack.src
;		Purpose :	Stack Operations
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************


; *****************************************************************************
;
;								Drop tos
;
; *****************************************************************************

Drop: 	;; drop
		popTOS
		jmp 	Next

; *****************************************************************************
;
;					Conditional Duplication if non zero
;
; *****************************************************************************

TestDup:	;; ?dup
		lda 	TOS
		ora 	TOS+1
		bne 	Dup
		jmp 	Next
				
; *****************************************************************************
;
;								Duplicate tos
;
; *****************************************************************************

Dup: 	;; dup
		pushTOS
		jmp 	Next

; *****************************************************************************
;
;								 Swap tos/tos2
;
; *****************************************************************************

Swap:	;; swap
		stx 	temp1
		ply
		plx
		lda 	TOS
		pha
		lda 	TOS+1
		pha
		stx 	TOS
		sty 	TOS+1
		ldx 	temp1
		jmp 	Next

; *****************************************************************************
;
;								 Over (push tos2)
;
; *****************************************************************************

Over:	;; over
		pushTOS
		stx 	temp1
		tsx
		lda 	stack3low,x
		sta 	TOS
		lda 	stack3High,x
		sta 	TOS+1
		ldx 	temp1
		jmp 	Next		

; *****************************************************************************
;
;								 Nip (drop tos2)
;
; *****************************************************************************

Nip:	;; nip
		pla
		pla
		jmp 	Next		

; *****************************************************************************
;
;							Rot (pull third up to top)
;
; *****************************************************************************

Rot:	;; rot
		stx 	temp1
		tsx

		lda 	Stack3Low,x
		tay
		lda 	Stack2Low,x
		sta 	Stack3Low,x
		lda 	TOS
		sta 	Stack2Low,x
		sty 	TOS

		lda 	Stack3High,x
		tay
		lda 	Stack2High,x
		sta 	Stack3High,x
		lda 	TOS+1
		sta 	Stack2High,x
		sty 	TOS+1

		ldx 	temp1
		jmp 	Next
