; *****************************************************************************
; *****************************************************************************
;
;		Name :		memory.src
;		Purpose :	Memory Access words
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		6th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;									Byte Read
;
; *****************************************************************************

ByteRead: 	;; c@ <0>
		lda 	(TOS)
		sta 	TOS
		stz 	TOS+1
		doNext

; *****************************************************************************
;
;									Word Read
;
; *****************************************************************************

WordRead: 	;; @ <0>
		ldy 	#1
		lda 	(TOS),y
		tay
		lda 	(TOS)
		sta 	TOS
		sty 	TOS+1
		doNext

; *****************************************************************************
;
;									Byte Write
;
; *****************************************************************************

ByteWrite: 	;; c! <0>
		pla
		pla	
		sta 	(TOS)	
		popTOS
		doNext

; *****************************************************************************
;
;									Word Write
;
; *****************************************************************************

WordWrite: 	;; ! <0>
		pla
		ldy 	#1
		sta 	(TOS),y
		pla
		sta 	(TOS)
		popTOS
		doNext

; *****************************************************************************
;
;									Word Add
;
; *****************************************************************************

WordAdd: ;; +! <0>
		ply
		pla
		clc
		adc 	(TOS)
		sta 	(TOS)
		tya
		ldy 	#1
		adc 	(TOS),y
		sta 	(TOS),y
		popTOS
		doNext

; *****************************************************************************
;
;								Allocate memory
;
; *****************************************************************************

AllocateMemory: ;; alloc <0>
		lda 	TOS 						; save memory required on stack.
		pha
		lda 	TOS+1
		pha

		lda 	nextFreeMem 				; copy free mem address to TOS
		sta 	TOS
		lda 	nextFreeMem+1
		sta 	TOS+1

		ply 								; advance the free ram pointer
		pla
		jsr 	AdvanceFreeMem
		doNext 						; and continue
		
