; *****************************************************************************
; *****************************************************************************
;
;		Name :		encutils.src
;		Purpose :	Encoder utility functions
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		11th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;							Write encoded byte/word
;
; *****************************************************************************

EncodeWriteWord:
		pha
		jsr 	EncodeWriteByte
		tya
		jsr 	EncodeWriteByte
		pla
		rts
EncodeWriteByte:
		phx
		ldx 	encodeBuffer
		sta 	encodeBuffer,x
		stz 	encodeBuffer+1,x
		stz 	encodeBuffer+2,x		
		inc 	encodeBuffer
		plx
		rts		

; *****************************************************************************
;
;						Return CS if A is a letter A-Z
;
; *****************************************************************************

CheckIsLetter:
		cmp 	#"A"						; return CS if A..Z
		bcc 	_CILFail
		cmp 	#"Z"+1
		bcs 	_CILFail
		sec
		rts
_CILFail:
		clc
		rts
; *****************************************************************************
;
;						Return CS if A is a digit 0-9
;
; *****************************************************************************

CheckIsDigit:
		cmp 	#"0"						; return CS if 0..9
		bcc 	_CIDFail
		cmp 	#"9"+1
		bcs 	_CIDFail
		sec
		rts
_CIDFail:
		clc
		rts

; *****************************************************************************
;
;						Skip forward to next space/EOL
;
; *****************************************************************************

EncodeMoveNextWord:
		ldy 	#255 						; search forward
_EPNWLoop:
		iny
		lda 	(srcPtr),y 			
		cmp 	#" "+1						; looking for <= space
		bcs 	_EPNWLoop
		tya				
		bra 	EncodeAddSrcPtr

; *****************************************************************************
;
;						Add A to the source pointer
;
; *****************************************************************************

EncodeAddSrcPtr:
		clc 								; add offset
		adc 	srcPtr
		sta 	srcPtr
		bcc 	_EASPNoCarry
		inc 	srcPtr+1					; carry through
_EASPNoCarry:
		rts

; *****************************************************************************
;
;			Extract a constant out to YA, CS if okay, CC if failed.
;
; *****************************************************************************

EncodeGetConstant:
		lda 	srcPtr 						; get source
		ldy 	srcPtr+1
		jsr 	ConvertToInteger 			; call converter
		bcc 	_EGCExit
		jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
		lda 	temp3 						; get result into YA
		ldy 	temp3+1
		sec 								; return CS
_EGCExit:
		rts

; *****************************************************************************
;
;		Set the last bit of the word srcPtr points to to Carry
;
; *****************************************************************************

EncSetBit7Word:	
		php 								; save carry
		ldy 	#255 						; scan forward for space/NULL
_ESB7Loop:
		iny
		lda 	(srcPtr),y
		cmp 	#" "+1 						; while > ' '	
		bcs 	_ESB7Loop
		dey									; previous character
		lda 	(srcPtr),y 					; read it
		asl 	a 							; shift bit 7 out
		plp 								; restore carry
		ror 	a 							; shift it in
		sta 	(srcPtr),y 					; write back and exit
		rts

; *****************************************************************************
;
;									Skip Spaces
;
; *****************************************************************************

EncSkipSpaces:
		lda 	(srcPtr) 					; skip over spaces/ reached end
		cmp 	#32
		bne 	_ESNotSpace
		lda 	#1
		jsr 	EncodeAddSrcPtr
		bra	 	EncSkipSpaces
_ESNotSpace:
		rts		

; *****************************************************************************
;
;					Remove trailing spaces from (srcPtr) buffer
;
; *****************************************************************************

EncodeTrimTrailingSpaces:
		ldy 	#255 						; find EOS
_ETTFindEnd:
		iny
		lda 	(srcPtr),y
		bne 	_ETTFindEnd		
_ETTRemoveSpace:
		cpy 	#0 							; start of string
		beq 	_ETTExit
		dey 								; previous character 1..32
		lda 	(srcPtr),y
		cmp 	#32+1
		bcs 	_ETTExit
		lda 	#0 							; erase it and go round again
		sta 	(srcPtr),y
		bra 	_ETTRemoveSpace
_ETTExit:
		rts

; *****************************************************************************
;
;		Push marker and current write position on return stack (encoders)
;
; *****************************************************************************

EncodePushPosMarkerOnStack:
		inc 	rsp 						; make space on rstack
		ldx 	rsp							; access it
		sta 	returnStackHigh,x			; save marker
		lda 	encodeBuffer 				; save position in encode buffer
		sta 	returnStackX,x
		rts

