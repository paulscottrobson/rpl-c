; *****************************************************************************
; *****************************************************************************
;
;		Name :		encode.src
;		Purpose :	Encode ASCIIZ string to program line
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		11th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;				Encode ASCIIZ string at YA to encodeBuffer
;						(same code as in rplconv.py)
;
; *****************************************************************************

EncodeProgram:
		pha 								; save registers.
		phx
		phy
		sty 	srcPtr+1					; save source pointer.
		sta		srcPtr
		resetRSP 							; reset the stack.
		ldx 	rsp 						; this is the current stack entry type, so $00 means
		stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)

		jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
		;
		lda 	#3 							; reset the encode Buffer
		sta 	encodeBuffer 				; this is also the write ptr/offset
		stz 	encodeBuffer+1 				; the line number
		stz 	encodeBuffer+2 				; which is initially zero.
		;
		lda 	(srcPtr) 					; check if first character is digit
		jsr 	CheckIsDigit
		bcc 	_EPNoLineNumber 			; if so there is a line number
		jsr 	EncodeGetConstant 			; extract that constant from the source
		sta 	encodeBuffer+1 				; that is the line number
		sty 	encodeBuffer+2
_EPNoLineNumber:
		;
		;		This is the main encoding loop
		;
EncodeLoop:
		jsr 	EncSkipSpaces 				; skip over spaces
		lda 	(srcPtr) 					; reached end ?
		bne 	_EPNotEnd
		;
		;		Encode Ends, compile $$NextLine
		;
_EPEndEncode:
		lda 	#NextLine & $FF 			; compile $$nextline to mark eol
		ldy 	#NextLine >> 8
		jsr 	EncodeWriteWord
		lda 	rsp 						; is the return stack empty ?
		bne 	_EPIncomplete
		ply									; restore and exit.
		plx
		pla
		rts
_EPIncomplete:
		rerror	"STRUCTURE OPEN"		
		;
		;		First check for a quoted string "hello" or a comment ' do this
		;		these use the same code.
		;
_EPNotEnd:
		lda 	(srcPtr)
		cmp 	#'"'						; is it a quoted string or comment ?
		beq 	_EPIsComStr
		cmp 	#"'"
		bne 	_EPNotComStr
_EPIsComStr:		
		jsr 	EncodeCommentString
		bra 	EncodeLoop
_EPNotComStr:		
		;
		;		Convert the next word in the buffer to a 'bit 7' word
		;		by setting the last bit of the last character. The dictionary
		;		and defined words both use this.
		;
		sec
		jsr 	EncSetBit7Word
		;
		;		Check to see if the word is in the built in dictionary
		;
		jsr 	EncodeSearchDictionary		; look it up
		bcc 	_EPNotInDictionary
		sta 	temp1 						; save dictionary record address
		sty 	temp1+1
		ldy 	#1
		lda 	(temp1),y 					; check if has an encode bit
		and 	#$20
		bne 	_EPEncodeRoutine 			; if so, do special routine.
		ldy 	#2 							; write out the routine address
		lda 	(temp1),y
		jsr 	EncodeWriteByte
		iny
		lda 	(temp1),y
		jsr 	EncodeWriteByte
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		bra 	EncodeLoop
		;
		;		Special routine for calling encoder (a bit like immediate)
		;
_EPEncodeRoutine:
		ldy 	#1							; get type bit
		lda 	(temp1),y
		ldy 	#4							; encoder here if no decoder
		and 	#$10 						; but decoder comes first
		beq 	_EPENoDecoder
		iny 								; so if it exists, adjust for it.
		iny
_EPENoDecoder:
		lda 	(temp1),y 					; copy exec addr to temp2
		sta 	temp2
		iny
		lda 	(temp1),y
		sta 	temp2+1
		pha 								; call routine preserving state
		phx
		phy
		jsr 	_EPECallTemp2		
		ply
		plx
		pla
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		jmp 	EncodeLoop
_EPECallTemp2:		
		jmp 	(temp2)
_EPNotInDictionary:		
		;
		;		See if it is a defined word as part of the program code.
		;
		jsr 	EncodeSearchUserDefined 	; are there any user defined routines
		bcc 	_EPNotDefined
		pha
		lda	 	#CallHandler & $FF 			; write code call handler
		jsr 	EncodeWriteByte
		lda	 	#CallHandler >> 8
		jsr 	EncodeWriteByte 	
		pla 								; write line number
		jsr 	EncodeWriteByte
		tya
		jsr 	EncodeWriteByte
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		jmp 	EncodeLoop
_EPNotDefined:		
		;
		;		Finally check for ! & @ (variable) : (define) or < (gosub)
		;
		lda 	(srcPtr) 					; first character
		cmp 	#":"						; is it :<routine> ?
		beq 	_EPDefinition
		cmp 	#"<"						; is it <line> which is call syntax
		beq 	_EPCallDirect
		cmp 	#"!"						; check for variable operators
		beq 	_EPVariable
		cmp 	#"@"
		beq 	_EPVariable
		cmp 	#"&"
		beq 	_EPVariable
		;
		;		Only thing left is a constant
		;
		lda 	#Literal2Byte & $FF 		; write out 2 byte literal
		ldy 	#Literal2Byte >> 8
		jsr 	EncodeWriteWord
_EPOutputConstant:		
		jsr 	EncodeGetConstant 			; extract that constant from the source
		bcc 	_EPFail 					; if can't find one, that's us done.
		jsr 	EncodeWriteWord 			; write out the encoded value.
		jmp 	EncodeLoop 					; and go round again.
_EPFail:
		rerror 	"SYNTAX ERROR"				; can't encode it.
		;
		;		Call direct syntax
		;
_EPCallDirect:
		lda	 	#CallHandler & $FF 			; write code call handler
		ldy	 	#CallHandler >> 8
		jsr 	EncodeWriteWord
		lda 	#1
		jsr 	EncodeAddSrcPtr 			; skip over the <
		ldy 	#255 						; scan forward for last character.
_EPToLast:
		iny		
		lda 	(srcPtr),y
		bpl	 	_EPToLast
		cmp 	#">"+$80 					; must be > 
		bne 	_EPFail
		lda 	#" " 						; strip back to a number, erases last char
		sta 	(srcPtr),y
		bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
		;
		;		Extract and build a variable access definition
		;
_EPVariable:
		jsr 	EncodeVariableReference		
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		jmp 	EncodeLoop
		;
		;		:xxxx definition
		;
_EPDefinition:
		lda	 	#DefineCode & $FF 			; write code call handler
		ldy	 	#DefineCode >> 8
		jsr 	EncodeWriteWord
		ldx 	encodeBuffer 				; position
		lda 	#1 							; write default size
		jsr 	EncodeWriteByte
		ldy 	#0 							; copy definition over.
_EPCopy:iny
		lda 	(srcPtr),y 		
		jsr 	EncodeWriteByte
		inc 	encodeBuffer,x 				; update length.
		asl 	a
		bcc 	_EPCopy
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		jmp 	EncodeLoop
