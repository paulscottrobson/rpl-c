; *****************************************************************************
; *****************************************************************************
;
;		Name :		encode.src
;		Purpose :	Encode ASCIIZ string to program line
;		Author :	Paul Robson (paul@robsons.org.uk)
;		Date : 		11th January 2020
;
; *****************************************************************************
; *****************************************************************************

; *****************************************************************************
;
;				Encode ASCIIZ string at YA to encodeBuffer
;						(same code as in rplconv.py)
;
; *****************************************************************************

EncodeProgram:
		pha 								; save registers.
		phx
		phy
		sty 	srcPtr+1					; save source pointer.
		sta		srcPtr
		jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
		;
		lda 	#3 							; reset the encode Buffer
		sta 	encodeBuffer 				; this is also the write ptr/offset
		stz 	encodeBuffer+1 				; the line number
		stz 	encodeBuffer+2 				; which is initially zero.
		;
		lda 	(srcPtr) 					; check if first character is digit
		jsr 	CheckIsDigit
		bcc 	_EPNoLineNumber 			; if so there is a line number
		jsr 	EncodeGetConstant 			; extract that constant from the source
		sta 	encodeBuffer+1 				; that is the line number
		sty 	encodeBuffer+2
_EPNoLineNumber:
		;
		;		This is the main encoding loop
		;
EncodeLoop:
		jsr 	EncSkipSpaces 				; skip over spaces
		lda 	(srcPtr) 					; reached end ?
		bne 	_EPNotEnd
		;
		;		Encode Ends, compile $$NextLine
		;
_EPEndEncode:
		lda 	#NextLine & $FF 			; compile $$nextline to mark eol
		ldy 	#NextLine >> 8
		jsr 	EncodeWriteWord
		ply									; restore and exit.
		plx
		pla
		rts
		;
		;		First check for a quoted string "hello" or a comment ' do this
		;		these use the same code.
		;
_EPNotEnd:
		lda 	(srcPtr)
		cmp 	#'"'						; is it a quoted string or comment ?
		beq 	_EPIsComStr
		cmp 	#"'"
		bne 	_EPNotComStr
_EPIsComStr:		
		jsr 	EncodeCommentString
		bra 	EncodeLoop
_EPNotComStr:		
		;
		;		Convert the next word in the buffer to a 'bit 7' word
		;		by setting the last bit of the last character. The dictionary
		;		and defined words both use this.
		;
		sec
		jsr 	EncSetBit7Word
		;
		;		Check to see if the word is in the built in dictionary
		;
		jsr 	EncodeSearchDictionary		; look it up
		bcc 	_EPNotInDictionary
		sta 	temp1 						; save dictionary record address
		sty 	temp1+1
		ldy 	#1
		lda 	(temp1),y 					; check if has an encode bit
		and 	#$20
		bne 	_EPEncodeRoutine 			; if so, do special routine.
		ldy 	#2 							; write out the routine address
		lda 	(temp1),y
		jsr 	EncodeWriteByte
		iny
		lda 	(temp1),y
		jsr 	EncodeWriteByte
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		bra 	EncodeLoop
		;
		;		Special routine for calling encoder (a bit like immediate)
		;
_EPEncodeRoutine:
		ldy 	#1							; get type bit
		lda 	(temp1),y
		ldy 	#4							; encoder here if no decoder
		and 	#$10 						; but decoder comes first
		beq 	_EPENoDecoder
		iny 								; so if it exists, adjust for it.
		iny
_EPENoDecoder:
		lda 	(temp1),y 					; copy exec addr to temp2
		sta 	temp2
		iny
		lda 	(temp1),y
		sta 	temp2+1
		pha 								; call routine preserving state
		phx
		phy
		jsr 	_EPECallTemp2		
		ply
		plx
		pla
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		bra 	EncodeLoop
_EPECallTemp2:		
		jmp 	(temp2)
_EPNotInDictionary:		
		;
		;		See if it is a defined word as part of the program code.
		;
		jsr 	EncodeSearchUserDefined 	; are there any user defined routines
		bcc 	_EPNotDefined
		pha
		lda	 	#CallHandler & $FF 			; write code call handler
		jsr 	EncodeWriteByte
		lda	 	#CallHandler >> 8
		jsr 	EncodeWriteByte 			; write line number
		pla 					
		jsr 	EncodeWriteByte
		tya
		jsr 	EncodeWriteByte
		jsr 	EncodeMoveNextWord 			; advance to the next and loop
		jmp 	EncodeLoop
_EPNotDefined:		
		;
		;		See if it is a constant (hex or decimal)
		;

		; TODO: Constants (Hex/Dec)
		; TODO: <line> encoding.
		; TODO: Variable access
		; TODO: Error

