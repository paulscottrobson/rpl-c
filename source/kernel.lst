
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 11 10:59:31 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	20 dc 10	jsr $10dc			jsr 		ExternInitialise
.1006	a9 23		lda #$23			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 cc 11	jsr $11cc			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010	4c 38 16	jmp $1638			jmp 	EncodeTest
.1013					WarmStart:
.1013	a9 03		lda #$03			lda 	#COL_Yellow
.1015	20 13 11	jsr $1113			jsr 	ExternColour
.1018	a9 06		lda #$06			lda 	#COL_Cyan
.101a	20 13 11	jsr $1113			jsr 	ExternColour
.101d	4c b7 1a	jmp $1ab7			jmp 	RunProgram
.1020					ErrorHandler:
>1020	ff						.byte 	$FF
.1021	a2 5e		ldx #$5e			ldx 	#$5E
.1023					BootMsg:
>1023	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103b	2a 0d 0d
>103e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1046	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1056	30 32 30 0d 0d
>105b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1062	5b 32 30 2d 30 31 2d 31			.text	"[20-01-11 10:59]"
>106a	31 20 31 30 3a 35 39 5d

;******  Return to file: kernel.asm

>1072	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1075					InitialiseCoreCode:
.1075	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1077	85 00		sta $00				sta 	Next
.1079	85 01		sta $01				sta 	Next+1
.107b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.107d	85 02		sta $02				sta 	Next+2
.107f	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.1081	84 04		sty $04				sty 	Next+4
.1083	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1085	60		rts				rts								; (2 INX skip offset and line#)
.1086					Literal2Byte:
.1086	a5 06		lda $06				lda 	TOS
.1088	48		pha				pha
.1089	a5 07		lda $07				lda 	TOS+1
.108b	48		pha				pha
.108c	e8		inx				inx  							; point X to the word
.108d	e8		inx				inx
.108e	8a		txa				txa 							; copy into Y
.108f	a8		tay				tay
.1090	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1092	85 06		sta $06				sta 	TOS
.1094	c8		iny				iny 							; read and push the MSB
.1095	b1 03		lda ($03),y			lda 	(IP),y
.1097	85 07		sta $07				sta 	TOS+1
.1099	4c 00 00	jmp $0000			jmp 	Next
.109c					Literal2ByteDecode:
.109c	a9 06		lda #$06			lda 	#CTH_Keyword
.109e	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.10a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a3	aa		tax				tax
.10a4	c8		iny				iny
.10a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a7	a8		tay				tay
.10a8	8a		txa				txa
.10a9	38		sec				sec 							; output signed
.10aa	20 1d 1a	jsr $1a1d			jsr 	DecodeYAToBuffer
.10ad	60		rts				rts
.10ae					LiteralString:
.10ae	a5 06		lda $06				lda 	TOS
.10b0	48		pha				pha
.10b1	a5 07		lda $07				lda 	TOS+1
.10b3	48		pha				pha
.10b4	e8		inx				inx
.10b5	e8		inx				inx 							; skip over current word
.10b6	8a		txa				txa 							; add to IP + 1 to give string address
.10b7	a8		tay				tay 							; put in Y
.10b8	38		sec				sec 							; make that TOS
.10b9	65 03		adc $03				adc 	IP
.10bb	85 06		sta $06				sta 	TOS
.10bd	a5 04		lda $04				lda 	IP+1
.10bf	69 00		adc #$00			adc 	#0
.10c1	85 07		sta $07				sta 	TOS+1
.10c3	8a		txa				txa 							; add data length to X
.10c4	18		clc				clc
.10c5	71 03		adc ($03),y			adc 	(IP),y
.10c7	aa		tax				tax
.10c8	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment
.10cb					LiteralStringDecoder:
.10cb	a9 05		lda #$05			lda 	#CTH_String
.10cd	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.10d0	a9 22		lda #$22			lda 	#'"'
.10d2	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.10d5	20 04 1a	jsr $1a04			jsr 	DecodeOutputData
.10d8	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.10db	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10dc					ExternInitialise:
.10dc	a9 90		lda #$90			lda 	#144 						; set colour
.10de	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e1	a9 01		lda #$01			lda 	#$01
.10e3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e6	a9 0e		lda #$0e			lda 	#14							; lower case
.10e8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10eb	a9 93		lda #$93			lda 	#147 						; clear screen
.10ed	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f0	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f2	4c 13 11	jmp $1113			jmp 	ExternColour
.10f5					ExternCheckBreak:
.10f5	da		phx				phx 								; make sure we keep XY
.10f6	5a		phy				phy
.10f7	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fa	f0 03		beq $10ff			beq		_ECBExit 					; stopped
.10fc	7a		ply				ply 								; restore and exit.
.10fd	fa		plx				plx
.10fe	60		rts				rts
.10ff					_ECBExit:
.10ff	20 20 10	jsr $1020			jsr 	ErrorHandler
>1102	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.1109					ExternPrint:
.1109	48		pha				pha
.110a	da		phx				phx
.110b	5a		phy				phy
.110c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.110f	7a		ply				ply
.1110	fa		plx				plx
.1111	68		pla				pla
.1112	60		rts				rts
.1113					ExternColour:
.1113	48		pha				pha
.1114	da		phx				phx
.1115	48		pha				pha
.1116	29 08		and #$08			and 	#8
.1118	0a		asl a				asl 	a
.1119	0a		asl a				asl 	a
.111a	0a		asl a				asl 	a
.111b	0a		asl a				asl 	a
.111c	49 92		eor #$92			eor 	#$92
.111e	20 09 11	jsr $1109			jsr 	ExternPrint
.1121	68		pla				pla
.1122	29 07		and #$07			and 	#7
.1124	aa		tax				tax
.1125	bd 2e 11	lda $112e,x			lda 	_ECTable,x
.1128	20 09 11	jsr $1109			jsr 	ExternPrint
.112b	fa		plx				plx
.112c	68		pla				pla
.112d	60		rts				rts
.112e					_ECTable:
>112e	90						.byte 	144
>112f	1c						.byte 	28
>1130	1e						.byte 	30
>1131	9e						.byte 	158
>1132	1f						.byte 	31
>1133	9c						.byte 	156
>1134	9f						.byte 	159
>1135	05						.byte 	5
.1136					ExternInput:
.1136	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.1138	85 14		sta $14				sta 	temp3
.113a	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113c	85 15		sta $15				sta 	temp3+1
.113e	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1141	29 7f		and #$7f			and 	#$7F
.1143	c9 0d		cmp #$0d			cmp 	#13
.1145	f0 0a		beq $1151			beq 	_EIExit
.1147	92 14		sta ($14)			sta 	(temp3)
.1149	e6 14		inc $14				inc 	temp3
.114b	d0 f1		bne $113e			bne 	_EIRead
.114d	e6 15		inc $15				inc 	temp3+1
.114f	80 ed		bra $113e			bra 	_EIRead
.1151	a9 00		lda #$00	_EIExit:lda 	#0
.1153	92 14		sta ($14)			sta 	(temp3)
.1155	a9 0d		lda #$0d			lda 	#13
.1157	20 09 11	jsr $1109			jsr 	ExternPrint
.115a	60		rts				rts
.115b					ExternSave:
.115b	da		phx				phx
.115c	5a		phy				phy
.115d	85 12		sta $12				sta 	temp2 						; save start
.115f	84 13		sty $13				sty 	temp2+1
.1161	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1164	a6 14		ldx $14				ldx 	temp3
.1166	a4 15		ldy $15				ldy 	temp3+1
.1168	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116b	a9 01		lda #$01			lda 	#1
.116d	a2 08		ldx #$08			ldx 	#8	 						; device #8
.116f	a0 00		ldy #$00			ldy 	#0
.1171	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1174	a6 10		ldx $10				ldx 	temp1 						; end address
.1176	a4 11		ldy $11				ldy 	temp1+1
.1178	a9 12		lda #$12			lda 	#temp2
.117a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.117d	b0 03		bcs $1182			bcs 	_ESSave
.117f	7a		ply				ply
.1180	fa		plx				plx
.1181	60		rts				rts
.1182					_ESSave:
.1182	20 20 10	jsr $1020			jsr 	ErrorHandler
>1185	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>118d	4c 45 44 00
.1191					ExternLoad:
.1191	da		phx				phx 								; save XY
.1192	5a		phy				phy
.1193	48		pha				pha 								; save target
.1194	5a		phy				phy
.1195	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1198	a6 14		ldx $14				ldx 	temp3
.119a	a4 15		ldy $15				ldy 	temp3+1
.119c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.119f	a9 01		lda #$01			lda 	#1
.11a1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a3	a0 00		ldy #$00			ldy 	#0
.11a5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11a8	7a		ply				ply 								; restore target to YX and call load
.11a9	fa		plx				plx
.11aa	a9 00		lda #$00			lda 	#0 							; load command
.11ac	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11af	b0 03		bcs $11b4			bcs 	_ESLoad
.11b1	7a		ply				ply
.11b2	fa		plx				plx
.11b3	60		rts				rts
.11b4					_ESLoad:
.11b4	20 20 10	jsr $1020			jsr 	ErrorHandler
>11b7	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11bf	4c 45 44 00
.11c3					EXGetLength:
.11c3	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c5	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11c7	d0 02		bne $11cb			bne 	_EXGLExit
.11c9	e6 15		inc $15				inc 	temp3+1
.11cb					_EXGLExit:
.11cb	60		rts				rts
.11cc					EXPrintString:
.11cc	48		pha				pha
.11cd	5a		phy				phy
.11ce	84 11		sty $11				sty 	temp1+1
.11d0	85 10		sta $10				sta 	temp1
.11d2	a0 00		ldy #$00			ldy 	#0
.11d4					_EXPSLoop:
.11d4	b1 10		lda ($10),y			lda 	(temp1),y
.11d6	f0 08		beq $11e0			beq 	_EXPSExit
.11d8	29 7f		and #$7f			and 	#$7F
.11da	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11dd	c8		iny				iny
.11de	80 f4		bra $11d4			bra 	_EXPSLoop
.11e0					_EXPSExit:
.11e0	7a		ply				ply
.11e1	68		pla				pla
.11e2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e3					Add:
.11e3	7a		ply				ply
.11e4	68		pla				pla
.11e5	18		clc				clc
.11e6	65 06		adc $06				adc 	TOS
.11e8	85 06		sta $06				sta 	TOS
.11ea	98		tya				tya
.11eb	65 07		adc $07				adc 	TOS+1
.11ed	85 07		sta $07				sta 	TOS+1
.11ef	4c 00 00	jmp $0000			jmp 	Next
.11f2					Subtract:
.11f2	7a		ply				ply
.11f3	68		pla				pla
.11f4	38		sec				sec
.11f5	49 ff		eor #$ff			eor 	#$FF
.11f7	65 06		adc $06				adc 	TOS
.11f9	85 06		sta $06				sta 	TOS
.11fb	98		tya				tya
.11fc	49 ff		eor #$ff			eor 	#$FF
.11fe	65 07		adc $07				adc 	TOS+1
.1200	85 07		sta $07				sta 	TOS+1
.1202	4c 00 00	jmp $0000			jmp 	Next
.1205					And:
.1205	68		pla				pla
.1206	25 07		and $07				and 	TOS+1
.1208	85 07		sta $07				sta 	TOS+1
.120a	68		pla				pla
.120b	25 06		and $06				and 	TOS
.120d	85 06		sta $06				sta 	TOS
.120f	4c 00 00	jmp $0000			jmp 	Next
.1212					Xor:
.1212	68		pla				pla
.1213	45 07		eor $07				eor 	TOS+1
.1215	85 07		sta $07				sta 	TOS+1
.1217	68		pla				pla
.1218	45 06		eor $06				eor 	TOS
.121a	85 06		sta $06				sta 	TOS
.121c	4c 00 00	jmp $0000			jmp 	Next
.121f					LogOr:
.121f	68		pla				pla
.1220	05 07		ora $07				ora 	TOS+1
.1222	85 07		sta $07				sta 	TOS+1
.1224	68		pla				pla
.1225	05 06		ora $06				ora 	TOS
.1227	85 06		sta $06				sta 	TOS
.1229	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122c					CheckNotEqual:
.122c	38		sec				sec
.122d	80 01		bra $1230			bra 	CECode
.122f					CheckEqual:
.122f	18		clc				clc
.1230					CECode:
.1230	86 10		stx $10				stx 	temp1
.1232	ba		tsx				tsx
.1233	08		php				php
.1234	a5 06		lda $06				lda 	TOS
.1236	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1239	d0 17		bne $1252			bne	 	CompareFalse
.123b	a5 07		lda $07				lda 	TOS+1
.123d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1240	d0 10		bne $1252			bne 	CompareFalse
.1242					CompareTrue:
.1242	a6 10		ldx $10				ldx 	temp1
.1244	28		plp				plp
.1245	b0 10		bcs $1257			bcs		CompareFalse2
.1247					CompareTrue2:
.1247	68		pla				pla
.1248	68		pla				pla
.1249	a9 ff		lda #$ff			lda 	#$FF
.124b	85 06		sta $06				sta 	TOS
.124d	85 07		sta $07				sta 	TOS+1
.124f	4c 00 00	jmp $0000			jmp 	Next
.1252					CompareFalse:
.1252	a6 10		ldx $10				ldx 	temp1
.1254	28		plp				plp
.1255	b0 f0		bcs $1247			bcs		CompareTrue2
.1257					CompareFalse2:
.1257	68		pla				pla
.1258	68		pla				pla
.1259	64 06		stz $06				stz 	TOS
.125b	64 07		stz $07				stz 	TOS+1
.125d	4c 00 00	jmp $0000			jmp 	Next
.1260					CheckGreaterEq:
.1260	38		sec				sec
.1261	80 01		bra $1264			bra		CLCode
.1263					CheckLess:
.1263	18		clc				clc
.1264	86 10		stx $10		CLCode:	stx 	temp1
.1266	ba		tsx				tsx
.1267	08		php				php
.1268	18		clc				clc
.1269	a5 06		lda $06				lda 	TOS
.126b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.126e	a5 07		lda $07				lda 	TOS+1
.1270	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1273	50 02		bvc $1277			bvc 	_CLNoFlip
.1275	49 80		eor #$80			eor 	#$80
.1277					_CLNoFlip:
.1277	0a		asl a				asl 	a
.1278	b0 d8		bcs $1252			bcs 	CompareFalse
.127a	80 c6		bra $1242			bra 	CompareTrue
.127c					CheckLessEq:
.127c	38		sec				sec
.127d	80 01		bra $1280			bra		CGCode
.127f					CheckGreater:
.127f	18		clc				clc
.1280					CGCode:
.1280	86 10		stx $10				stx 	temp1
.1282	ba		tsx				tsx
.1283	08		php				php
.1284	18		clc				clc
.1285	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1288	e5 06		sbc $06				sbc 	TOS
.128a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.128d	e5 07		sbc $07				sbc 	TOS+1
.128f	50 02		bvc $1293			bvc 	_CGNoFlip
.1291	49 80		eor #$80			eor 	#$80
.1293					_CGNoFlip:
.1293	0a		asl a				asl 	a
.1294	b0 bc		bcs $1252			bcs 	CompareFalse
.1296	80 aa		bra $1242			bra 	CompareTrue
.1298					Minimum:
.1298	a9 00		lda #$00			lda 	#0
.129a	80 02		bra $129e			bra 	MinMaxCode
.129c					Maximum:
.129c	a9 80		lda #$80			lda 	#$80
.129e					MinMaxCode:
.129e	85 11		sta $11				sta 	temp1+1
.12a0	86 10		stx $10				stx 	temp1
.12a2	ba		tsx				tsx
.12a3	38		sec				sec
.12a4	a5 06		lda $06				lda 	TOS
.12a6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12a9	a5 07		lda $07				lda 	TOS+1
.12ab	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12ae	50 02		bvc $12b2			bvc 	_MMNoFlip
.12b0	49 80		eor #$80			eor 	#$80
.12b2					_MMNoFlip:
.12b2	45 11		eor $11				eor 	temp1+1
.12b4	30 0a		bmi $12c0			bmi 	_MMNoCopy
.12b6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12b9	85 06		sta $06				sta 	TOS
.12bb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12be	85 07		sta $07				sta 	TOS+1
.12c0					_MMNoCopy:
.12c0	a6 10		ldx $10				ldx 	temp1
.12c2	68		pla				pla
.12c3	68		pla				pla
.12c4	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12c7					Divide16x16:
.12c7	86 12		stx $12				stx 	temp2
.12c9	ba		tsx				tsx
.12ca	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12cd	68		pla				pla
.12ce	85 07		sta $07				sta 	TOS+1
.12d0	68		pla				pla
.12d1	85 06		sta $06				sta 	TOS
.12d3	a6 12		ldx $12				ldx 	temp2
.12d5	4c 00 00	jmp $0000			jmp 	Next
.12d8					Modulus16x16:
.12d8	86 12		stx $12				stx 	temp2
.12da	ba		tsx				tsx
.12db	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12de	a6 12		ldx $12				ldx 	temp2
.12e0	68		pla				pla
.12e1	68		pla				pla
.12e2	a5 10		lda $10				lda 	temp1
.12e4	85 06		sta $06				sta 	TOS
.12e6	a5 11		lda $11				lda 	temp1+1
.12e8	85 07		sta $07				sta 	TOS+1
.12ea	4c 00 00	jmp $0000			jmp 	Next
.12ed					IntegerDivide:
.12ed	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12ef	05 07		ora $07				ora 	TOS+1
.12f1	d0 14		bne $1307			bne 	_BFDOkay
.12f3	20 20 10	jsr $1020			jsr 	ErrorHandler
>12f6	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>12fe	20 42 59 20 5a 45 52 4f 00
.1307					_BFDOkay:
.1307	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.1309	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130b	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.130d	20 48 13	jsr $1348			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1310	20 62 13	jsr $1362			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1313	5a		phy				phy 								; Y is the counter
.1314	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1316					_BFDLoop:
.1316	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1319	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131c	26 10		rol $10				rol 	temp1
.131e	26 11		rol $11				rol 	temp1+1
.1320	38		sec				sec
.1321	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1323	e5 06		sbc $06				sbc 	TOS
.1325	48		pha				pha
.1326	a5 11		lda $11				lda 	temp1+1
.1328	e5 07		sbc $07				sbc 	TOS+1
.132a	90 0f		bcc $133b			bcc 	_BFDNoAdd
.132c	85 11		sta $11				sta 	temp1+1
.132e	68		pla				pla
.132f	85 10		sta $10				sta 	temp1+0
.1331	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1334	09 01		ora #$01			ora 	#1
.1336	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1339	80 01		bra $133c			bra 	_BFDNext
.133b					_BFDNoAdd:
.133b	68		pla				pla 								; Throw away the intermediate calculations
.133c					_BFDNext:
.133c	88		dey				dey
.133d	d0 d7		bne $1316			bne 	_BFDLoop
.133f	7a		ply				ply 								; restore Y
.1340	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1342	90 03		bcc $1347			bcc 	_BFDUnsigned 				; then the result is signed
.1344	20 4e 13	jsr $134e			jsr		IntegerNegateAlways 		; negate the result
.1347					_BFDUnsigned:
.1347	60		rts				rts
.1348					CheckIntegerNegate:
.1348	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134b	30 01		bmi $134e			bmi 	IntegerNegateAlways 		; if so negate it
.134d	60		rts				rts
.134e					IntegerNegateAlways:
.134e	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1350	38		sec				sec 								; negate
.1351	a9 00		lda #$00			lda 	#0
.1353	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1356	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1359	a9 00		lda #$00			lda 	#0
.135b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.135e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1361	60		rts				rts
.1362					CheckTOSNegate:
.1362	a5 07		lda $07				lda 	TOS+1
.1364	10 0f		bpl $1375			bpl		CTNNoChange
.1366	e6 1a		inc $1a				inc 	SignCount
.1368					TOSNegateAlways:
.1368	38		sec				sec
.1369	a9 00		lda #$00			lda 	#0
.136b	e5 06		sbc $06				sbc 	TOS
.136d	85 06		sta $06				sta 	TOS
.136f	a9 00		lda #$00			lda 	#0
.1371	e5 07		sbc $07				sbc 	TOS+1
.1373	85 07		sta $07				sta 	TOS+1
.1375					CTNNoChange:
.1375	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1376					Multiply16x16:
.1376	86 10		stx $10				stx 	temp1
.1378	ba		tsx				tsx
.1379	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137c	85 12		sta $12				sta 	temp2
.137e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1381	85 13		sta $13				sta 	temp2+1
.1383	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1386	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1389					_MultLoop:
.1389	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138b	66 12		ror $12				ror 	temp2
.138d	90 11		bcc $13a0			bcc 	_MultNoAdd
.138f	18		clc				clc 								; add 1st to 2nd
.1390	a5 06		lda $06				lda 	TOS
.1392	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1395	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1398	a5 07		lda $07				lda 	TOS+1
.139a	7d 01 01	adc $0101,x			adc 	Stack2High,x
.139d	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a0					_MultNoAdd:
.13a0	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a2	26 07		rol $07				rol 	TOS+1
.13a4	a5 12		lda $12				lda 	temp2	 					; until zero
.13a6	05 13		ora $13				ora 	temp2+1
.13a8	d0 df		bne $1389			bne 	_MultLoop
.13aa	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ac	68		pla				pla
.13ad	85 07		sta $07				sta 	TOS+1
.13af	68		pla				pla
.13b0	85 06		sta $06				sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b5					Unary1Plus:
.13b5	e6 06		inc $06				inc 	TOS
.13b7	d0 02		bne $13bb			bne 	_U1PSkip
.13b9	e6 07		inc $07				inc 	TOS+1
.13bb					_U1PSkip:
.13bb	4c 00 00	jmp $0000			jmp 	Next
.13be					Unary2Plus:
.13be	18		clc				clc
.13bf	a5 06		lda $06				lda 	TOS
.13c1	69 02		adc #$02			adc 	#2
.13c3	85 06		sta $06				sta 	TOS
.13c5	90 02		bcc $13c9			bcc 	_U1PSkip
.13c7	e6 07		inc $07				inc 	TOS+1
.13c9					_U1PSkip:
.13c9	4c 00 00	jmp $0000			jmp 	Next
.13cc					Unary1Minus:
.13cc	a5 06		lda $06				lda 	TOS
.13ce	d0 02		bne $13d2			bne 	_U1MSkip
.13d0	c6 07		dec $07				dec 	TOS+1
.13d2					_U1MSkip:
.13d2	c6 06		dec $06				dec 	TOS
.13d4	4c 00 00	jmp $0000			jmp 	Next
.13d7					Unary2Minus:
.13d7	38		sec				sec
.13d8	a5 06		lda $06				lda 	TOS
.13da	e9 02		sbc #$02			sbc 	#2
.13dc	85 06		sta $06				sta 	TOS
.13de	b0 02		bcs $13e2			bcs 	_U1PSkip
.13e0	c6 07		dec $07				dec 	TOS+1
.13e2					_U1PSkip:
.13e2	4c 00 00	jmp $0000			jmp 	Next
.13e5					Absolute:
.13e5	a5 07		lda $07				lda 	TOS+1
.13e7	30 03		bmi $13ec			bmi 	Negate
.13e9	4c 00 00	jmp $0000			jmp 	Next
.13ec					Negate:
.13ec	38		sec				sec
.13ed	a9 00		lda #$00			lda 	#0
.13ef	e5 06		sbc $06				sbc 	TOS
.13f1	85 06		sta $06				sta 	TOS
.13f3	a9 00		lda #$00			lda 	#0
.13f5	e5 07		sbc $07				sbc 	TOS+1
.13f7	85 07		sta $07				sta 	TOS+1
.13f9	4c 00 00	jmp $0000			jmp 	Next
.13fc					OneComplement:
.13fc	a5 06		lda $06				lda 	TOS
.13fe	49 ff		eor #$ff			eor 	#$FF
.1400	85 06		sta $06				sta 	TOS
.1402	a5 07		lda $07				lda 	TOS+1
.1404	49 ff		eor #$ff			eor 	#$FF
.1406	85 07		sta $07				sta 	TOS+1
.1408	4c 00 00	jmp $0000			jmp 	Next
.140b					CheckMinus:
.140b	a5 07		lda $07				lda 	TOS+1
.140d	30 07		bmi $1416			bmi 	UnaryTrue
.140f					UnaryFalse:
.140f	64 06		stz $06				stz 	TOS
.1411	64 07		stz $07				stz 	TOS+1
.1413	4c 00 00	jmp $0000			jmp 	Next
.1416					UnaryTrue:
.1416	a9 ff		lda #$ff			lda 	#$FF
.1418	85 06		sta $06				sta 	TOS
.141a	85 07		sta $07				sta 	TOS+1
.141c	4c 00 00	jmp $0000			jmp 	Next
.141f					CheckZero:
.141f	a5 06		lda $06				lda 	TOS
.1421	05 07		ora $07				ora 	TOS+1
.1423	d0 ea		bne $140f			bne 	UnaryFalse
.1425	80 ef		bra $1416			bra 	UnaryTrue
.1427					SignTOS:
.1427	a5 07		lda $07				lda 	TOS+1
.1429	30 eb		bmi $1416			bmi		UnaryTrue
.142b	05 06		ora $06				ora 	TOS
.142d	f0 e0		beq $140f			beq 	UnaryFalse
.142f	a9 01		lda #$01			lda 	#1
.1431	85 06		sta $06				sta 	TOS
.1433	64 07		stz $07				stz		TOS+1
.1435	4c 00 00	jmp $0000			jmp 	Next
.1438					ByteSwap:
.1438	a5 06		lda $06				lda 	TOS
.143a	a4 07		ldy $07				ldy 	TOS+1
.143c	85 07		sta $07				sta 	TOS+1
.143e	84 06		sty $06				sty 	TOS
.1440	4c 00 00	jmp $0000			jmp 	Next
.1443					Times16:
.1443	06 06		asl $06				asl 	TOS
.1445	26 07		rol $07				rol 	TOS+1
.1447					Times8:
.1447	06 06		asl $06				asl 	TOS
.1449	26 07		rol $07				rol 	TOS+1
.144b					Times4:
.144b	06 06		asl $06				asl 	TOS
.144d	26 07		rol $07				rol 	TOS+1
.144f					Times2:
.144f	06 06		asl $06				asl 	TOS
.1451	26 07		rol $07				rol 	TOS+1
.1453	4c 00 00	jmp $0000			jmp 	Next
.1456					Divide16:
.1456	46 07		lsr $07				lsr 	TOS+1
.1458	66 06		ror $06				ror 	TOS
.145a					Divide8:
.145a	46 07		lsr $07				lsr 	TOS+1
.145c	66 06		ror $06				ror 	TOS
.145e					Divide4:
.145e	46 07		lsr $07				lsr 	TOS+1
.1460	66 06		ror $06				ror 	TOS
.1462					Divide2:
.1462	46 07		lsr $07				lsr 	TOS+1
.1464	66 06		ror $06				ror 	TOS
.1466	4c 00 00	jmp $0000			jmp 	Next
.1469					Times256:
.1469	a5 06		lda $06				lda 	TOS
.146b	85 07		sta $07				sta 	TOS+1
.146d	64 06		stz $06				stz 	TOS
.146f	4c 00 00	jmp $0000			jmp 	Next
.1472					Divide256:
.1472	a5 07		lda $07				lda 	TOS+1
.1474	85 06		sta $06				sta 	TOS
.1476	64 07		stz $07				stz 	TOS+1
.1478	4c 00 00	jmp $0000			jmp 	Next
.147b					RandomNumber:
.147b	a5 06		lda $06				lda 	TOS
.147d	48		pha				pha
.147e	a5 07		lda $07				lda 	TOS+1
.1480	48		pha				pha
.1481	a5 1b		lda $1b				lda 	randomSeed
.1483	05 1c		ora $1c				ora 	randomSeed+1
.1485	d0 08		bne $148f			bne 	_RH_NoInit
.1487	a9 7c		lda #$7c			lda 	#$7C
.1489	85 1b		sta $1b				sta 	randomSeed
.148b	a9 a1		lda #$a1			lda 	#$A1
.148d	85 1c		sta $1c				sta 	randomSeed+1
.148f					_RH_NoInit:
.148f	a5 1b		lda $1b				lda 	randomSeed
.1491	4a		lsr a		        lsr		a
.1492	26 1c		rol $1c		        rol 	randomSeed+1
.1494	90 02		bcc $1498	        bcc 	_RH_NoEor
.1496	49 b4		eor #$b4	        eor 	#$B4
.1498					_RH_NoEor:
.1498	85 1b		sta $1b		        sta 	randomSeed
.149a	45 1c		eor $1c		        eor 	randomSeed+1
.149c	85 07		sta $07		        sta 	TOS+1
.149e	a5 1b		lda $1b		        lda 	randomSeed
.14a0	85 06		sta $06		        sta 	TOS
.14a2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a5					Constant0:
.14a5	a5 06		lda $06				lda 	TOS
.14a7	48		pha				pha
.14a8	a5 07		lda $07				lda 	TOS+1
.14aa	48		pha				pha
.14ab	64 06		stz $06				stz 	TOS
.14ad	64 07		stz $07				stz 	TOS+1
.14af	4c 00 00	jmp $0000			jmp 	Next
.14b2					ConstantMinus1:
.14b2	a5 06		lda $06				lda 	TOS
.14b4	48		pha				pha
.14b5	a5 07		lda $07				lda 	TOS+1
.14b7	48		pha				pha
.14b8	a9 ff		lda #$ff			lda 	#$FF
.14ba	85 06		sta $06				sta 	TOS
.14bc	85 07		sta $07				sta 	TOS+1
.14be	4c 00 00	jmp $0000			jmp 	Next
.14c1					C1:
.14c1	a0 01		ldy #$01			ldy 	#1
.14c3	80 24		bra $14e9			bra 	Const1Byte
.14c5					C2:
.14c5	a0 02		ldy #$02			ldy 	#2
.14c7	80 20		bra $14e9			bra 	Const1Byte
.14c9					C3:
.14c9	a0 03		ldy #$03			ldy 	#3
.14cb	80 1c		bra $14e9			bra 	Const1Byte
.14cd					C4:
.14cd	a0 04		ldy #$04			ldy 	#4
.14cf	80 18		bra $14e9			bra 	Const1Byte
.14d1					C5:
.14d1	a0 05		ldy #$05			ldy 	#5
.14d3	80 14		bra $14e9			bra 	Const1Byte
.14d5					C8:
.14d5	a0 08		ldy #$08			ldy 	#8
.14d7	80 10		bra $14e9			bra 	Const1Byte
.14d9					C10:
.14d9	a0 0a		ldy #$0a			ldy 	#10
.14db	80 0c		bra $14e9			bra 	Const1Byte
.14dd					C15:
.14dd	a0 0f		ldy #$0f			ldy 	#15
.14df	80 08		bra $14e9			bra 	Const1Byte
.14e1					C16:
.14e1	a0 10		ldy #$10			ldy 	#16
.14e3	80 04		bra $14e9			bra 	Const1Byte
.14e5					C24:
.14e5	a0 18		ldy #$18			ldy 	#24
.14e7	80 00		bra $14e9			bra 	Const1Byte
.14e9					Const1Byte:
.14e9	a5 06		lda $06				lda 	TOS
.14eb	48		pha				pha
.14ec	a5 07		lda $07				lda 	TOS+1
.14ee	48		pha				pha
.14ef	84 06		sty $06				sty 	TOS
.14f1	64 07		stz $07				stz 	TOS+1
.14f3	4c 00 00	jmp $0000			jmp 	Next
.14f6					C32:
.14f6	a0 20		ldy #$20			ldy 	#32
.14f8	80 ef		bra $14e9			bra 	Const1Byte
.14fa					C63:
.14fa	a0 3f		ldy #$3f			ldy 	#63
.14fc	80 eb		bra $14e9			bra 	Const1Byte
.14fe					C64:
.14fe	a0 40		ldy #$40			ldy 	#64
.1500	80 e7		bra $14e9			bra 	Const1Byte
.1502					C100:
.1502	a0 64		ldy #$64			ldy 	#100
.1504	80 e3		bra $14e9			bra 	Const1Byte
.1506					C127:
.1506	a0 7f		ldy #$7f			ldy 	#127
.1508	80 df		bra $14e9			bra 	Const1Byte
.150a					C128:
.150a	a0 80		ldy #$80			ldy 	#128
.150c	80 db		bra $14e9			bra 	Const1Byte
.150e					C255:
.150e	a0 ff		ldy #$ff			ldy 	#255
.1510	80 d7		bra $14e9			bra 	Const1Byte
.1512					Const2Byte:
.1512	85 06		sta $06				sta 	TOS
.1514	84 07		sty $07				sty 	TOS+1
.1516	4c 00 00	jmp $0000			jmp 	Next
.1519					C256:
.1519	a5 06		lda $06				lda 	TOS
.151b	48		pha				pha
.151c	a5 07		lda $07				lda 	TOS+1
.151e	48		pha				pha
.151f	a9 00		lda #$00			lda 	#(256) & $FF
.1521	a0 01		ldy #$01			ldy 	#(256) >> 8
.1523	80 ed		bra $1512			bra 	Const2Byte
.1525					C512:
.1525	a5 06		lda $06				lda 	TOS
.1527	48		pha				pha
.1528	a5 07		lda $07				lda 	TOS+1
.152a	48		pha				pha
.152b	a9 00		lda #$00			lda 	#(512) & $FF
.152d	a0 02		ldy #$02			ldy 	#(512) >> 8
.152f	80 e1		bra $1512			bra 	Const2Byte
.1531					C1024:
.1531	a5 06		lda $06				lda 	TOS
.1533	48		pha				pha
.1534	a5 07		lda $07				lda 	TOS+1
.1536	48		pha				pha
.1537	a9 00		lda #$00			lda 	#(1024) & $FF
.1539	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153b	80 d5		bra $1512			bra 	Const2Byte
.153d					C4096:
.153d	a5 06		lda $06				lda 	TOS
.153f	48		pha				pha
.1540	a5 07		lda $07				lda 	TOS+1
.1542	48		pha				pha
.1543	a9 00		lda #$00			lda 	#(4096) & $FF
.1545	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1547	80 c9		bra $1512			bra 	Const2Byte
.1549					C32767:
.1549	a5 06		lda $06				lda 	TOS
.154b	48		pha				pha
.154c	a5 07		lda $07				lda 	TOS+1
.154e	48		pha				pha
.154f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1551	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1553	80 bd		bra $1512			bra 	Const2Byte
.1555					C32768:
.1555	a5 06		lda $06				lda 	TOS
.1557	48		pha				pha
.1558	a5 07		lda $07				lda 	TOS+1
.155a	48		pha				pha
.155b	a9 00		lda #$00			lda 	#(32768) & $FF
.155d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.155f	80 b1		bra $1512			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1561					Drop:
.1561	68		pla				pla
.1562	85 07		sta $07				sta 	TOS+1
.1564	68		pla				pla
.1565	85 06		sta $06				sta 	TOS
.1567	4c 00 00	jmp $0000			jmp 	Next
.156a					TestDup:
.156a	a5 06		lda $06				lda 	TOS
.156c	05 07		ora $07				ora 	TOS+1
.156e	d0 03		bne $1573			bne 	Dup
.1570	4c 00 00	jmp $0000			jmp 	Next
.1573					Dup:
.1573	a5 06		lda $06				lda 	TOS
.1575	48		pha				pha
.1576	a5 07		lda $07				lda 	TOS+1
.1578	48		pha				pha
.1579	4c 00 00	jmp $0000			jmp 	Next
.157c					Swap:
.157c	86 10		stx $10				stx 	temp1
.157e	7a		ply				ply
.157f	fa		plx				plx
.1580	a5 06		lda $06				lda 	TOS
.1582	48		pha				pha
.1583	a5 07		lda $07				lda 	TOS+1
.1585	48		pha				pha
.1586	86 06		stx $06				stx 	TOS
.1588	84 07		sty $07				sty 	TOS+1
.158a	a6 10		ldx $10				ldx 	temp1
.158c	4c 00 00	jmp $0000			jmp 	Next
.158f					Over:
.158f	a5 06		lda $06				lda 	TOS
.1591	48		pha				pha
.1592	a5 07		lda $07				lda 	TOS+1
.1594	48		pha				pha
.1595	86 10		stx $10				stx 	temp1
.1597	ba		tsx				tsx
.1598	bd 04 01	lda $0104,x			lda 	stack3low,x
.159b	85 06		sta $06				sta 	TOS
.159d	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a0	85 07		sta $07				sta 	TOS+1
.15a2	a6 10		ldx $10				ldx 	temp1
.15a4	4c 00 00	jmp $0000			jmp 	Next
.15a7					Nip:
.15a7	68		pla				pla
.15a8	68		pla				pla
.15a9	4c 00 00	jmp $0000			jmp 	Next
.15ac					Rot:
.15ac	86 10		stx $10				stx 	temp1
.15ae	ba		tsx				tsx
.15af	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b2	a8		tay				tay
.15b3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15b9	a5 06		lda $06				lda 	TOS
.15bb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15be	84 06		sty $06				sty 	TOS
.15c0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c3	a8		tay				tay
.15c4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15c7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15ca	a5 07		lda $07				lda 	TOS+1
.15cc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15cf	84 07		sty $07				sty 	TOS+1
.15d1	a6 10		ldx $10				ldx 	temp1
.15d3	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d6					ByteRead:
.15d6	b2 06		lda ($06)			lda 	(TOS)
.15d8	85 06		sta $06				sta 	TOS
.15da	64 07		stz $07				stz 	TOS+1
.15dc	4c 00 00	jmp $0000			jmp 	Next
.15df					WordRead:
.15df	a0 01		ldy #$01			ldy 	#1
.15e1	b1 06		lda ($06),y			lda 	(TOS),y
.15e3	a8		tay				tay
.15e4	b2 06		lda ($06)			lda 	(TOS)
.15e6	85 06		sta $06				sta 	TOS
.15e8	84 07		sty $07				sty 	TOS+1
.15ea	4c 00 00	jmp $0000			jmp 	Next
.15ed					ByteWrite:
.15ed	68		pla				pla
.15ee	68		pla				pla
.15ef	92 06		sta ($06)			sta 	(TOS)
.15f1	68		pla				pla
.15f2	85 07		sta $07				sta 	TOS+1
.15f4	68		pla				pla
.15f5	85 06		sta $06				sta 	TOS
.15f7	4c 00 00	jmp $0000			jmp 	Next
.15fa					WordWrite:
.15fa	68		pla				pla
.15fb	a0 01		ldy #$01			ldy 	#1
.15fd	91 06		sta ($06),y			sta 	(TOS),y
.15ff	68		pla				pla
.1600	92 06		sta ($06)			sta 	(TOS)
.1602	68		pla				pla
.1603	85 07		sta $07				sta 	TOS+1
.1605	68		pla				pla
.1606	85 06		sta $06				sta 	TOS
.1608	4c 00 00	jmp $0000			jmp 	Next
.160b					WordAdd:
.160b	7a		ply				ply
.160c	68		pla				pla
.160d	18		clc				clc
.160e	72 06		adc ($06)			adc 	(TOS)
.1610	92 06		sta ($06)			sta 	(TOS)
.1612	98		tya				tya
.1613	a0 01		ldy #$01			ldy 	#1
.1615	71 06		adc ($06),y			adc 	(TOS),y
.1617	91 06		sta ($06),y			sta 	(TOS),y
.1619	68		pla				pla
.161a	85 07		sta $07				sta 	TOS+1
.161c	68		pla				pla
.161d	85 06		sta $06				sta 	TOS
.161f	4c 00 00	jmp $0000			jmp 	Next
.1622					AllocateMemory:
.1622	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1624	48		pha				pha
.1625	a5 07		lda $07				lda 	TOS+1
.1627	48		pha				pha
.1628	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162a	85 06		sta $06				sta 	TOS
.162c	a5 0f		lda $0f				lda 	nextFreeMem+1
.162e	85 07		sta $07				sta 	TOS+1
.1630	7a		ply				ply 								; advance the free ram pointer
.1631	68		pla				pla
.1632	20 f8 18	jsr $18f8			jsr 	AdvanceFreeMem
.1635	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.1638					EncodeTest:
.1638	a9 40		lda #$40			lda 	#(_EncTest & $FF)
.163a	a0 16		ldy #$16			ldy 	#(_EncTest >> 8)
.163c	20 46 16	jsr $1646			jsr 	EncodeProgram
>163f	ff						.byte 	$FF
.1640					_EncTest:
>1640	31 30 32 35 20 00				.text	"1025 ",0
.1646					EncodeProgram:
.1646	48		pha				pha 								; save registers.
.1647	da		phx				phx
.1648	5a		phy				phy
.1649	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.164b	85 08		sta $08				sta		srcPtr
.164d	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.164f	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1652	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.1655	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.1658	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.165a	20 a4 16	jsr $16a4			jsr 	CheckIsDigit
.165d	90 09		bcc $1668			bcc 	_EPNoLineNumber 			; if so there is a line number
.165f	20 ba 16	jsr $16ba			jsr 	EncodeGetConstant 			; extract that constant from the source
.1662	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.1665	8c 12 09	sty $0912			sty 	encodeBuffer+2
.1668					_EPNoLineNumber:
.1668					EncodeLoop:
.1668	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.166a	f0 0b		beq $1677			beq 	_EPEndEncode
.166c	c9 20		cmp #$20			cmp 	#32
.166e	d0 12		bne $1682			bne 	_EPNotSpace
.1670	a9 01		lda #$01			lda 	#1
.1672	20 b0 16	jsr $16b0			jsr 	EncodeAddSrcPtr
.1675	80 f1		bra $1668			bra	 	EncodeLoop
.1677					_EPEndEncode:
.1677	a9 e1		lda #$e1			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.1679	a0 1b		ldy #$1b			ldy 	#NextLine >> 8
.167b	20 8b 16	jsr $168b			jsr 	EncodeWriteWord
.167e	7a		ply				ply									; restore and exit.
.167f	fa		plx				plx
.1680	68		pla				pla
.1681	60		rts				rts
.1682					_EPNotSpace:
>1682	ff						.byte 	$FF
.1683	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.1685	f0 04		beq $168b			beq 	_EPIsComStr
.1687	c9 27		cmp #$27			cmp 	#"'"
.1689	d0 00		bne $168b			bne 	_EPNotComStr
.168b					_EPIsComStr:
.168b					_EPNotComStr:

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.168b					EncodeWriteWord:
.168b	48		pha				pha
.168c	20 95 16	jsr $1695			jsr 	EncodeWriteByte
.168f	98		tya				tya
.1690	20 95 16	jsr $1695			jsr 	EncodeWriteByte
.1693	68		pla				pla
.1694	60		rts				rts
.1695					EncodeWriteByte:
.1695	da		phx				phx
.1696	ae 10 09	ldx $0910			ldx 	encodeBuffer
.1699	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.169c	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.169f	ee 10 09	inc $0910			inc 	encodeBuffer
.16a2	fa		plx				plx
.16a3	60		rts				rts
.16a4					CheckIsDigit:
.16a4	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.16a6	90 06		bcc $16ae			bcc 	_CIDFail
.16a8	c9 3a		cmp #$3a			cmp 	#"9"+1
.16aa	b0 02		bcs $16ae			bcs 	_CIDFail
.16ac	38		sec				sec
.16ad	60		rts				rts
.16ae					_CIDFail:
.16ae	18		clc				clc
.16af	60		rts				rts
.16b0					EncodeAddSrcPtr:
.16b0	18		clc				clc 								; add offset
.16b1	65 08		adc $08				adc 	srcPtr
.16b3	85 08		sta $08				sta 	srcPtr
.16b5	90 02		bcc $16b9			bcc 	_EASPNoCarry
.16b7	e6 09		inc $09				inc 	srcPtr+1					; carry through
.16b9					_EASPNoCarry:
.16b9	60		rts				rts
.16ba					EncodeGetConstant:
.16ba	a5 08		lda $08				lda 	srcPtr 						; get source
.16bc	a4 09		ldy $09				ldy 	srcPtr+1
.16be	20 53 1b	jsr $1b53			jsr 	ConvertToInteger 			; call converter
.16c1	90 07		bcc $16ca			bcc 	_EGCExit
.16c3	20 b0 16	jsr $16b0			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.16c6	a5 14		lda $14				lda 	temp3 						; get result into YA
.16c8	a4 15		ldy $15				ldy 	temp3+1
.16ca					_EGCExit:
.16ca	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.16cb					ForHandler:
.16cb	e6 05		inc $05				inc 	rsp 						; bump the RSP
.16cd	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.16cf	c0 40		cpy #$40			cpy 	#$40 						; overflow
.16d1	f0 18		beq $16eb			beq 	_FHOverflow
.16d3	a5 07		lda $07				lda 	TOS+1
.16d5	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.16d8	a5 06		lda $06				lda 	TOS
.16da	99 00 07	sta $0700,y			sta 	returnStackLow,y
.16dd	a9 ff		lda #$ff			lda 	#$FF
.16df	99 80 07	sta $0780,y			sta 	returnStackX,y
.16e2	68		pla				pla
.16e3	85 07		sta $07				sta 	TOS+1
.16e5	68		pla				pla
.16e6	85 06		sta $06				sta 	TOS
.16e8	4c 00 00	jmp $0000			jmp 	Next
.16eb					_FHOverflow:
.16eb	20 20 10	jsr $1020			jsr 	ErrorHandler
>16ee	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>16f6	4b 3f 00
.16f9					NextHandler:
.16f9	da		phx				phx
.16fa	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.16fc	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.16ff	c9 ff		cmp #$ff			cmp 	#$FF
.1701	d0 21		bne $1724			bne 	NHNoFor
.1703	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1706	d0 03		bne $170b			bne 	_NHNoBorrow
.1708	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.170b					_NHNoBorrow:
.170b	de 00 07	dec $0700,x			dec 	returnStackLow,x
.170e	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1711	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1714	fa		plx				plx 								; restore X and re-test
.1715	09 00		ora #$00			ora 	#0
.1717	f0 05		beq $171e			beq 	_NHComplete 				; if so then complete, else loop.
.1719	e8		inx				inx 								; advance to branch
.171a	e8		inx				inx
.171b	4c 77 17	jmp $1777			jmp 	BranchAlways
.171e					_NHComplete:
.171e	e8		inx				inx 								; skip over the branch quantity
.171f	c6 05		dec $05				dec 	rsp 						; drop the indx
.1721	4c 00 00	jmp $0000			jmp 	Next
.1724					NHNoFor:
.1724	20 20 10	jsr $1020			jsr 	ErrorHandler
>1727	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.172f					GetIndex:
.172f	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1731	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1734	c9 ff		cmp #$ff			cmp 	#$FF
.1736	d0 ec		bne $1724			bne 	NHNoFor
.1738	a5 06		lda $06				lda 	TOS
.173a	48		pha				pha
.173b	a5 07		lda $07				lda 	TOS+1
.173d	48		pha				pha
.173e	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1741	38		sec				sec
.1742	e9 01		sbc #$01			sbc 	#1
.1744	85 06		sta $06				sta 	TOS
.1746	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1749	e9 00		sbc #$00			sbc 	#0
.174b	85 07		sta $07				sta 	TOS+1
.174d	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1750					IfHandler:
.1750	4c 5f 17	jmp $175f			jmp 	BranchIfZero
.1753					ElseHandler:
.1753	4c 75 17	jmp $1775			jmp 	BranchTestSucceedsNoPop
.1756					EndIfHandler:
.1756	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1759					RepeatHandler:
.1759	4c 00 00	jmp $0000			jmp 	Next
.175c					UntilHandler:
.175c	4c 5f 17	jmp $175f			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.175f					BranchIfZero:
.175f	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1761	05 07		ora $07				ora 	TOS+1
.1763	f0 0a		beq $176f			beq 	BranchTestSucceeds
.1765					BranchTestFails:
.1765	68		pla				pla
.1766	85 07		sta $07				sta 	TOS+1
.1768	68		pla				pla
.1769	85 06		sta $06				sta 	TOS
.176b	e8		inx				inx 								; skip over the relative branch.
.176c	4c 00 00	jmp $0000			jmp 	Next
.176f					BranchTestSucceeds:
.176f	68		pla				pla
.1770	85 07		sta $07				sta 	TOS+1
.1772	68		pla				pla
.1773	85 06		sta $06				sta 	TOS
.1775					BranchTestSucceedsNoPop:
.1775	e8		inx				inx 								; advance by two, to the offset
.1776	e8		inx				inx
.1777					BranchAlways:
.1777	8a		txa				txa 								; A = Y = position
.1778	a8		tay				tay 								; (IP),Y now points to the branch target
.1779	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.177b	aa		tax				tax 								; position back in this line.
.177c	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.177f					CallHandler:
.177f	e8		inx				inx									; bump X to the call address.
.1780	e8		inx				inx
.1781	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1783	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1785	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1787	f0 4b		beq $17d4			beq 	_CHOverflow
.1789	a5 04		lda $04				lda 	IP+1
.178b	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.178e	a5 03		lda $03				lda 	IP
.1790	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1793	8a		txa				txa
.1794	99 80 07	sta $0780,y			sta 	returnStackX,y
.1797	8a		txa				txa 								; get the line number into temp1.
.1798	a8		tay				tay
.1799	b1 03		lda ($03),y			lda 	(IP),y
.179b	85 10		sta $10				sta 	temp1
.179d	c8		iny				iny
.179e	b1 03		lda ($03),y			lda 	(IP),y
.17a0	85 11		sta $11				sta 	temp1+1
.17a2	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17a4	85 03		sta $03				sta 	0+(IP)
.17a6	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17a8	85 04		sta $04				sta 	1+(IP)
.17aa	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.17ac	f0 17		beq $17c5			beq 	_CHFail
.17ae	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.17b0					_CHSearch:
.17b0	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.17b2	c5 10		cmp $10				cmp 	temp1
.17b4	f0 2d		beq $17e3			beq 	_CHFoundLSB
.17b6					_CHSearchNext:
.17b6	18		clc				clc
.17b7	a5 03		lda $03				lda 	IP
.17b9	72 03		adc ($03)			adc 	(IP)
.17bb	85 03		sta $03				sta 	IP
.17bd	90 02		bcc $17c1			bcc 	_NoCarryAdv
.17bf	e6 04		inc $04				inc 	IP+1
.17c1					_NoCarryAdv:
.17c1	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.17c3	d0 eb		bne $17b0			bne 	_CHSearch
.17c5					_CHFail:
.17c5	20 20 10	jsr $1020			jsr 	ErrorHandler
>17c8	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>17d0	4f 4e 3f 00
.17d4					_CHOverflow:
.17d4	20 20 10	jsr $1020			jsr 	ErrorHandler
>17d7	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>17df	54 48 3f 00
.17e3					_CHFoundLSB:
.17e3	c8		iny				iny 								; get MSB
.17e4	b1 03		lda ($03),y			lda 	(IP),y
.17e6	88		dey				dey
.17e7	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.17e9	d0 cb		bne $17b6			bne 	_CHSearchNext
.17eb	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.17ed	b1 03		lda ($03),y			lda 	(IP),y
.17ef	c9 1b		cmp #$1b			cmp 	#DefineCode & $FF
.17f1	d0 d2		bne $17c5			bne 	_CHFail
.17f3	c8		iny				iny
.17f4	b1 03		lda ($03),y			lda 	(IP),y
.17f6	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.17f8	d0 cb		bne $17c5			bne 	_CHFail
.17fa	c8		iny				iny
.17fb	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.17fd	18		clc				clc
.17fe	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.1800	aa		tax				tax
.1801	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.1804					ReturnHandler:
.1804	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1806	30 15		bmi $181d			bmi 	_RHUnderflow 				; if -ve underflowed
.1808	c6 05		dec $05				dec 	rsp 						; decrement rsp
.180a	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.180d	85 04		sta $04				sta 	IP+1
.180f	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1812	85 03		sta $03				sta 	IP
.1814	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1817	aa		tax				tax
.1818	f0 0e		beq $1828			beq 	_RHInLoop 					; this means you have done :something for ; next
.181a	4c 00 00	jmp $0000			jmp 	Next
.181d					_RHUnderflow:
.181d	20 20 10	jsr $1020			jsr 	ErrorHandler
>1820	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1828					_RHInLoop:
.1828	20 20 10	jsr $1020			jsr 	ErrorHandler
>182b	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>1833	4e 20 4c 4f 4f 50 3f 00
.183b					CallHandlerDecode:
.183b	a9 03		lda #$03			lda 	#CTH_Call					; space
.183d	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1840	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1842	aa		tax				tax
.1843	c8		iny				iny
.1844	b1 08		lda ($08),y			lda 	(srcPtr),y
.1846	a8		tay				tay
.1847	8a		txa				txa
.1848	20 85 18	jsr $1885			jsr 	FindLine 					; try to locate that line.
.184b	b0 11		bcs $185e			bcs 	_CHDFound 					; if found .....
.184d					_CHDLineOnly:
.184d	48		pha				pha
.184e	a9 3c		lda #$3c			lda 	#"<"
.1850	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1853	68		pla				pla
.1854	18		clc				clc 								; output unsigned
.1855	20 1d 1a	jsr $1a1d			jsr 	DecodeYAToBuffer
.1858	a9 3e		lda #$3e			lda 	#">"
.185a	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.185d	60		rts				rts
.185e					_CHDFound:
.185e	48		pha				pha 								; save YA
.185f	5a		phy				phy
.1860	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1862	b1 10		lda ($10),y			lda 	(temp1),y
.1864	c9 1b		cmp #$1b			cmp 	#DefineCode & 255
.1866	d0 07		bne $186f			bne 	_CHDNoDefine
.1868	c8		iny				iny
.1869	b1 10		lda ($10),y			lda 	(temp1),y
.186b	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.186d	f0 04		beq $1873			beq 	_CHDFoundDefine
.186f					_CHDNoDefine:
.186f	7a		ply				ply									; restore the line number and print it in <>
.1870	68		pla				pla
.1871	80 da		bra $184d			bra 	_CHDLineOnly
.1873					_CHDFoundDefine:
.1873	68		pla				pla 								; throw saved line number.
.1874	68		pla				pla
.1875	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1877					_CHDOutName:
.1877	c8		iny				iny 								; next
.1878	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.187a	48		pha				pha
.187b	29 7f		and #$7f			and 	#$7F
.187d	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1880	68		pla				pla
.1881	0a		asl a				asl 	a 							; bit 7 to carry
.1882	90 f3		bcc $1877			bcc 	_CHDOutName
.1884	60		rts				rts
.1885					FindLine:
.1885	48		pha				pha 								; save registers
.1886	da		phx				phx
.1887	5a		phy				phy
.1888	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.188a	84 13		sty $13				sty 	temp2+1
.188c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.188e	85 10		sta $10				sta 	0+(temp1)
.1890	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1892	85 11		sta $11				sta 	1+(temp1)
.1894					_FLLoop:
.1894	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1896	18		clc				clc									; if so exit with CC.
.1897	f0 1d		beq $18b6			beq 	_FLExit
.1899	a0 01		ldy #$01			ldy 	#1 							; check line # match
.189b	b1 10		lda ($10),y			lda 	(temp1),y
.189d	c5 12		cmp $12				cmp 	temp2
.189f	d0 08		bne $18a9			bne 	_FLNext
.18a1	c8		iny				iny
.18a2	b1 10		lda ($10),y			lda 	(temp1),y
.18a4	c5 13		cmp $13				cmp 	temp2+1
.18a6	38		sec				sec 								; if so exit with CS
.18a7	f0 0d		beq $18b6			beq 	_FLExit
.18a9					_FLNext:
.18a9	18		clc				clc
.18aa	a5 10		lda $10				lda 	temp1
.18ac	72 10		adc ($10)			adc 	(temp1)
.18ae	85 10		sta $10				sta 	temp1
.18b0	90 02		bcc $18b4			bcc 	_NoCarryAdv
.18b2	e6 11		inc $11				inc 	temp1+1
.18b4					_NoCarryAdv:
.18b4	80 de		bra $1894			bra 	_FLLoop 					; keep looking.
.18b6					_FLExit:
.18b6	7a		ply				ply
.18b7	fa		plx				plx
.18b8	68		pla				pla
.18b9	60		rts				rts
.18ba	18		clc				clc
.18bb	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.18bc					NewHandler:
.18bc	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.18bf	20 cb 18	jsr $18cb			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.18c2	4c 00 00	jmp $0000			jmp 	Next
.18c5					ClrHandler:
.18c5	20 cb 18	jsr $18cb			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.18c8	4c 00 00	jmp $0000			jmp 	Next
.18cb					ClearVariableSpace:
.18cb	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.18cd	85 05		sta $05				sta 	rsp
.18cf	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.18d1	85 0e		sta $0e				sta 	0+(nextFreeMem)
.18d3	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.18d5	85 0f		sta $0f				sta 	1+(nextFreeMem)
.18d7	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.18d9					_CVSHashClear:
.18d9	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.18db	99 40 06	sta $0640,y			sta 	hashTable,y
.18de	88		dey				dey
.18df	10 f8		bpl $18d9			bpl 	_CVSHashClear
.18e1					_CVSFindEnd:
.18e1	18		clc				clc
.18e2	a5 0e		lda $0e				lda 	nextFreeMem
.18e4	72 0e		adc ($0e)			adc 	(nextFreeMem)
.18e6	85 0e		sta $0e				sta 	nextFreeMem
.18e8	90 02		bcc $18ec			bcc 	_NoCarryAdv
.18ea	e6 0f		inc $0f				inc 	nextFreeMem+1
.18ec					_NoCarryAdv:
.18ec	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.18ee	d0 f1		bne $18e1			bne 	_CVSFindEnd
.18f0	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.18f2	a0 00		ldy #$00			ldy 	#0
.18f4	20 f8 18	jsr $18f8			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.18f7	60		rts				rts 								; free mem pointer pointing to the last zero offset
.18f8					AdvanceFreeMem:
.18f8	18		clc				clc
.18f9	65 0e		adc $0e				adc 	nextFreeMem
.18fb	85 0e		sta $0e				sta 	nextFreeMem
.18fd	98		tya				tya
.18fe	65 0f		adc $0f				adc 	nextFreeMem+1
.1900	85 0f		sta $0f				sta 	nextFreeMem+1
.1902	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1903					ExitDump:
.1903	ba		tsx				tsx 								; save Data Stack in temp1
.1904	86 10		stx $10				stx 	temp1
.1906	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1909					BreakCmd:
>1909	ff						.byte 	$FF
.190a	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.190d					DecodeLineIntoBufPtr:
.190d	48		pha				pha
.190e	da		phx				phx
.190f	5a		phy				phy
.1910	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1912	84 09		sty $09				sty 	srcPtr+1
.1914	90 1b		bcc $1931			bcc 	_DecodeNoLineNumber
.1916	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1918	b1 08		lda ($08),y			lda 	(srcPtr),y
.191a	aa		tax				tax
.191b	c8		iny				iny
.191c	b1 08		lda ($08),y			lda 	(srcPtr),y
.191e	a8		tay				tay
.191f	8a		txa				txa
.1920	18		clc				clc
.1921	20 1d 1a	jsr $1a1d			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1924	aa		tax				tax 								; count in X
.1925					_DecodeLineSpace:
.1925	e0 05		cpx #$05			cpx 	#5
.1927	f0 08		beq $1931			beq 	_DecodeNoLineNumber
.1929	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.192b	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.192e	e8		inx				inx
.192f	80 f4		bra $1925			bra 	_DecodeLineSpace
.1931					_DecodeNoLineNumber:
.1931	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1933					_DecodeLoop:
.1933	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1935	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1937	c8		iny				iny
.1938	b1 08		lda ($08),y			lda 	(srcPtr),y
.193a	85 11		sta $11				sta 	temp1+1
.193c	c8		iny				iny 								; y points to the byte after it.
.193d	a5 10		lda $10				lda 	temp1
.193f	c9 e1		cmp #$e1			cmp 	#NextLine & $FF
.1941	d0 06		bne $1949			bne 	_DecodeNotEOL
.1943	a5 11		lda $11				lda 	temp1+1
.1945	c9 1b		cmp #$1b			cmp 	#NextLine >> 8
.1947	f0 0b		beq $1954			beq 	_DecodeEOL
.1949					_DecodeNotEOL:
.1949	20 5c 19	jsr $195c			jsr 	IdentifyCodeWord
.194c	20 a6 19	jsr $19a6			jsr 	DecodeFoundWord
.194f	20 90 19	jsr $1990			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1952	80 df		bra $1933			bra 	_DecodeLoop 				; and go round again
.1954					_DecodeEOL:
.1954	a9 00		lda #$00			lda 	#0
.1956	92 0a		sta ($0a)			sta 	(bufPtr)
.1958	7a		ply				ply 								; restore registers and exit
.1959	fa		plx				plx
.195a	68		pla				pla
.195b	60		rts				rts
.195c					IdentifyCodeWord:
.195c	5a		phy				phy 								; save current position on the stack.
.195d	a9 19		lda #$19			lda 	#(Dictionary) & $FF
.195f	85 0c		sta $0c				sta 	0+(matchPtr)
.1961	a9 1e		lda #$1e			lda 	#(Dictionary) >> 8
.1963	85 0d		sta $0d				sta 	1+(matchPtr)
.1965					_DecodeIdentify:
.1965	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1967	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1969	c5 10		cmp $10				cmp 	temp1
.196b	d0 07		bne $1974			bne 	_DecodeIdNext
.196d	c8		iny				iny
.196e	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1970	c5 11		cmp $11				cmp 	temp1+1
.1972	f0 1a		beq $198e			beq 	_DecodeIdFound
.1974					_DecodeIdNext:
.1974	18		clc				clc
.1975	b2 0c		lda ($0c)			lda 	(matchPtr)
.1977	f0 0a		beq $1983			beq 	_DecodeIdIssue
.1979	65 0c		adc $0c				adc 	matchPtr
.197b	85 0c		sta $0c				sta 	matchPtr
.197d	90 e6		bcc $1965			bcc 	_DecodeIdentify
.197f	e6 0d		inc $0d				inc 	matchPtr+1
.1981	80 e2		bra $1965			bra 	_DecodeIdentify
.1983					_DecodeIdIssue:
.1983	20 20 10	jsr $1020			jsr 	ErrorHandler
>1986	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.198e					_DecodeIdFound:
.198e	7a		ply				ply 								; restore position.
.198f	60		rts				rts
.1990					AdvanceToNext:
.1990	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1991	a0 01		ldy #$01			ldy 	#1
.1993	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1995	29 03		and #$03			and 	#3 							; bits 0-1.
.1997	7a		ply				ply
.1998	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.199a	d0 02		bne $199e			bne 	_ATN012
.199c	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.199e					_ATN012:
.199e	85 12		sta $12				sta 	temp2 						; now add that to Y
.19a0	98		tya				tya
.19a1	18		clc				clc
.19a2	65 12		adc $12				adc 	temp2
.19a4	a8		tay				tay
.19a5	60		rts				rts
.19a6					DecodeFoundWord:
.19a6	5a		phy				phy 								; save current position
.19a7	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.19a9	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.19ab	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.19ad	29 10		and #$10			and 	#$10
.19af	d0 0e		bne $19bf			bne 	_DFWSpecialDecoder
.19b1	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.19b3	30 08		bmi $19bd			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.19b5	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.19b7	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.19ba	20 d8 19	jsr $19d8			jsr 	DecodeCurrentWord 			; expand that.
.19bd					_DFWExit:
.19bd	7a		ply				ply 								; restore current position
.19be	60		rts				rts
.19bf					_DFWSpecialDecoder:
.19bf	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.19c1	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.19c3	85 12		sta $12				sta 	temp2
.19c5	c8		iny				iny
.19c6	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.19c8	85 13		sta $13				sta 	temp2+1
.19ca	7a		ply				ply 	 							; restore current position into Y
.19cb	48		pha				pha 								; save registers
.19cc	da		phx				phx
.19cd	5a		phy				phy
.19ce	20 d5 19	jsr $19d5			jsr 	_DFWCallDecoder				; call the decoder routine
.19d1	7a		ply				ply 								; restore registers and exit
.19d2	fa		plx				plx
.19d3	68		pla				pla
.19d4	60		rts				rts
.19d5					_DFWCallDecoder:
.19d5	6c 12 00	jmp ($0012)			jmp 	(temp2)
.19d8					DecodeCurrentWord:
.19d8	5a		phy				phy
.19d9	a0 01		ldy #$01			ldy 	#1 							; read type byte
.19db	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.19dd	a0 04		ldy #$04			ldy 	#4 							; original offset
.19df	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.19e0	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.19e1	4a		lsr a				lsr 	a 							; bit set.
.19e2	4a		lsr a				lsr 	a
.19e3	4a		lsr a				lsr 	a 							; decoder bit
.19e4	90 02		bcc $19e8			bcc 	_DWBNoDec
.19e6	c8		iny				iny
.19e7	c8		iny				iny
.19e8					_DWBNoDec:
.19e8	4a		lsr a				lsr 	a
.19e9	90 02		bcc $19ed			bcc 	_DWBNoEnc
.19eb	c8		iny				iny
.19ec	c8		iny				iny
.19ed					_DWBNoEnc:
.19ed					_DWBWordOut:
.19ed	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.19ef	48		pha				pha
.19f0	29 7f		and #$7f			and 	#$7F
.19f2	20 fb 19	jsr $19fb			jsr		DecodeWriteBuffer
.19f5	c8		iny				iny
.19f6	68		pla				pla
.19f7	10 f4		bpl $19ed			bpl 	_DWBWordOut
.19f9	7a		ply				ply 								; restore Y and exit
.19fa	60		rts				rts
.19fb					DecodeWriteBuffer:
.19fb	92 0a		sta ($0a)			sta 	(bufPtr)
.19fd	e6 0a		inc $0a				inc 	bufPtr
.19ff	d0 02		bne $1a03			bne 	_DWBNoCarry
.1a01	e6 0b		inc $0b				inc 	bufPtr+1
.1a03					_DWBNoCarry:
.1a03	60		rts				rts
.1a04					DecodeOutputData:
.1a04	48		pha				pha
.1a05	da		phx				phx
.1a06	5a		phy				phy
.1a07	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1a09	aa		tax				tax
.1a0a					_DODLoop:
.1a0a	ca		dex				dex 								; done it all ?
.1a0b	f0 0c		beq $1a19			beq		_DODExit
.1a0d	c8		iny				iny 								; output next character
.1a0e	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a10	29 7f		and #$7f			and 	#$7F
.1a12	f0 f6		beq $1a0a			beq 	_DODLoop 					; don't print NULL
.1a14	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1a17	80 f1		bra $1a0a			bra 	_DODLoop
.1a19					_DODExit:
.1a19	7a		ply				ply
.1a1a	fa		plx				plx
.1a1b	68		pla				pla
.1a1c	60		rts				rts
.1a1d					DecodeYAToBuffer:
.1a1d	da		phx				phx
.1a1e	5a		phy				phy
.1a1f	48		pha				pha
.1a20	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1a22	85 12		sta $12				sta 	temp2
.1a24	a5 0b		lda $0b				lda 	bufPtr+1
.1a26	85 13		sta $13				sta 	temp2+1
.1a28	68		pla				pla
.1a29	20 5b 1c	jsr $1c5b			jsr 	ConvertToStringMain 		; convert YA to string there
.1a2c	aa		tax				tax 								; chars output to X
.1a2d	18		clc				clc
.1a2e	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1a30	85 0a		sta $0a				sta 	bufPtr
.1a32	90 02		bcc $1a36			bcc 	_DYABNoCarry
.1a34	e6 0b		inc $0b				inc 	bufPtr+1
.1a36					_DYABNoCarry:
.1a36	8a		txa				txa 								; count in A
.1a37	7a		ply				ply									; restore and exit.
.1a38	fa		plx				plx
.1a39	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1a3a					ListCode:
.1a3a	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1a3c	64 1f		stz $1f				stz 	ListLowest+1
.1a3e	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1a40	85 1d		sta $1d				sta 	ListCount
.1a42	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a44	85 18		sta $18				sta 	0+(listPtr)
.1a46	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a48	85 19		sta $19				sta 	1+(listPtr)
.1a4a	86 10		stx $10				stx 	temp1						; S->A
.1a4c	ba		tsx				tsx
.1a4d	8a		txa				txa
.1a4e	a6 10		ldx $10				ldx 	temp1
.1a50	c9 80		cmp #$80			cmp 	#NumberStackBase
.1a52	f0 0e		beq $1a62			beq 	_LCLoop
.1a54	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1a56	85 1e		sta $1e				sta 	ListLowest
.1a58	a5 07		lda $07				lda 	TOS+1
.1a5a	85 1f		sta $1f				sta 	ListLowest+1
.1a5c	68		pla				pla
.1a5d	85 07		sta $07				sta 	TOS+1
.1a5f	68		pla				pla
.1a60	85 06		sta $06				sta 	TOS
.1a62					_LCLoop:
.1a62	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1a64	f0 4e		beq $1ab4			beq 	_LCExit
.1a66	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1a68	b1 18		lda ($18),y			lda 	(listPtr),y
.1a6a	c5 1e		cmp $1e				cmp 	ListLowest
.1a6c	c8		iny				iny
.1a6d	b1 18		lda ($18),y			lda 	(listPtr),y
.1a6f	e5 1f		sbc $1f				sbc 	ListLowest+1
.1a71	90 34		bcc $1aa7			bcc 	_LCNext
.1a73	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1a75	85 0a		sta $0a				sta 	0+(bufPtr)
.1a77	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1a79	85 0b		sta $0b				sta 	1+(bufPtr)
.1a7b	a5 18		lda $18				lda 	listPtr 					; output the line.
.1a7d	a4 19		ldy $19				ldy 	listPtr+1
.1a7f	38		sec				sec
.1a80	20 0d 19	jsr $190d			jsr 	DecodeLineIntoBufPtr
.1a83	a9 02		lda #$02			lda 	#CTH_LineNo
.1a85	20 13 11	jsr $1113			jsr 	ExternColour
.1a88	a0 ff		ldy #$ff			ldy 	#255
.1a8a					_LCLoop2:
.1a8a	c8		iny				iny
.1a8b	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1a8e	f0 0e		beq $1a9e			beq 	_LCEnd
.1a90	c9 20		cmp #$20			cmp 	#32
.1a92	b0 05		bcs $1a99			bcs 	_LCPrint
.1a94	20 13 11	jsr $1113			jsr 	ExternColour
.1a97	a9 20		lda #$20			lda 	#32
.1a99					_LCPrint:
.1a99	20 09 11	jsr $1109			jsr 	ExternPrint
.1a9c	80 ec		bra $1a8a			bra 	_LCLoop2
.1a9e	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1aa0	20 09 11	jsr $1109			jsr 	ExternPrint
.1aa3	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1aa5	f0 0d		beq $1ab4			beq 	_LCExit
.1aa7					_LCNext:
.1aa7	18		clc				clc
.1aa8	a5 18		lda $18				lda 	listPtr
.1aaa	72 18		adc ($18)			adc 	(listPtr)
.1aac	85 18		sta $18				sta 	listPtr
.1aae	90 02		bcc $1ab2			bcc 	_NoCarryAdv
.1ab0	e6 19		inc $19				inc 	listPtr+1
.1ab2					_NoCarryAdv:
.1ab2	80 ae		bra $1a62			bra 	_LCLoop 					; go round again.
.1ab4					_LCExit:
.1ab4	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1ab7					RunProgram:
.1ab7	a2 80		ldx #$80			ldx 	#NumberStackBase
.1ab9	9a		txs				txs
.1aba	20 cb 18	jsr $18cb			jsr 		ClearVariableSpace 		; clear variables etc.
.1abd	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1abf	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1ac1	20 75 10	jsr $1075			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.1ac4	4c 00 00	jmp $0000			jmp 		Next
.1ac7					Call6502:
.1ac7	a5 06		lda $06				lda 	TOS 						; copy call address
.1ac9	85 10		sta $10				sta 	temp1
.1acb	a5 07		lda $07				lda 	TOS+1
.1acd	85 11		sta $11				sta 	temp1+1
.1acf	68		pla				pla
.1ad0	85 07		sta $07				sta 	TOS+1
.1ad2	68		pla				pla
.1ad3	85 06		sta $06				sta 	TOS
.1ad5	20 db 1a	jsr $1adb			jsr 	_CallTemp1 					; call it
.1ad8	4c 00 00	jmp $0000			jmp 	Next
.1adb					_CallTemp1:
.1adb	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1ade					AssertCode:
.1ade	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1ae0	05 07		ora $07				ora 	TOS+1
.1ae2	f0 09		beq $1aed			beq 	_ASFail 					; if zero fail
.1ae4	68		pla				pla
.1ae5	85 07		sta $07				sta 	TOS+1
.1ae7	68		pla				pla
.1ae8	85 06		sta $06				sta 	TOS
.1aea	4c 00 00	jmp $0000			jmp 	Next
.1aed					_ASFail:
.1aed	20 20 10	jsr $1020			jsr 	ErrorHandler
>1af0	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1af7					StopCode:
.1af7	20 20 10	jsr $1020			jsr 	ErrorHandler
>1afa	53 54 4f 50 00					.text 	"STOP",0
.1aff					EndProgram:
.1aff	4c 13 10	jmp $1013			jmp 	WarmStart
.1b02					VlistCode:
.1b02	a9 19		lda #$19			lda 	#(Dictionary) & $FF
.1b04	85 10		sta $10				sta 	0+(temp1)
.1b06	a9 1e		lda #$1e			lda 	#(Dictionary) >> 8
.1b08	85 11		sta $11				sta 	1+(temp1)
.1b0a	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1b0c	b1 10		lda ($10),y			lda 	(temp1),y
.1b0e	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1b10	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1b11	4a		lsr a				lsr 	a
.1b12	4a		lsr a				lsr		a
.1b13	4a		lsr a				lsr 	a
.1b14	4a		lsr a				lsr 	a 							; add those bits in
.1b15	90 02		bcc $1b19			bcc 	_VLNoDec
.1b17	c8		iny				iny
.1b18	c8		iny				iny
.1b19					_VLNoDec:
.1b19	4a		lsr a				lsr 	a
.1b1a	90 02		bcc $1b1e			bcc 	_VLNoEnc
.1b1c	c8		iny				iny
.1b1d	c8		iny				iny
.1b1e					_VLNoEnc:
.1b1e	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1b20	c9 24		cmp #$24			cmp 	#"$"
.1b22	d0 06		bne $1b2a			bne 	_VLPrint
.1b24	c8		iny				iny
.1b25	51 10		eor ($10),y			eor 	(temp1),y
.1b27	f0 13		beq $1b3c			beq 	_VLNext
.1b29	88		dey				dey
.1b2a					_VLPrint:
.1b2a	b1 10		lda ($10),y			lda 	(temp1),y
.1b2c	48		pha				pha
.1b2d	c8		iny				iny
.1b2e	29 7f		and #$7f			and 	#$7F
.1b30	20 09 11	jsr $1109			jsr 	ExternPrint
.1b33	68		pla				pla
.1b34	0a		asl a				asl 	a
.1b35	90 f3		bcc $1b2a			bcc 	_VLPrint
.1b37	a9 20		lda #$20			lda 	#32
.1b39	20 09 11	jsr $1109			jsr 	ExternPrint
.1b3c					_VLNext:
.1b3c	18		clc				clc 								; go to next
.1b3d	b2 10		lda ($10)			lda 	(temp1)
.1b3f	65 10		adc $10				adc 	temp1
.1b41	85 10		sta $10				sta 	temp1
.1b43	90 02		bcc $1b47			bcc 	_VLNoCarry
.1b45	e6 11		inc $11				inc 	temp1+1
.1b47					_VLNoCarry:
.1b47	b2 10		lda ($10)			lda 	(temp1)
.1b49	d0 bf		bne $1b0a			bne 	_VLLoop
.1b4b	a9 0d		lda #$0d			lda 	#13
.1b4d	20 09 11	jsr $1109			jsr 	ExternPrint
.1b50	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1b53					ConvertToInteger:
.1b53	84 17		sty $17				sty 	temp4+1
.1b55	85 16		sta $16				sta 	temp4
.1b57	64 14		stz $14				stz 	temp3 						; reset value
.1b59	64 15		stz $15				stz 	temp3+1
.1b5b	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1b5d	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1b5f	b1 16		lda ($16),y			lda 	(temp4),y
.1b61	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1b63	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1b65	d0 01		bne $1b68			bne 	_CTINotMinus
.1b67	c8		iny				iny									; skip -
.1b68					_CTINotMinus:
.1b68	b1 16		lda ($16),y			lda 	(temp4),y
.1b6a	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1b6c	d0 03		bne $1b71			bne 	_CTILoop
.1b6e	c6 10		dec $10				dec 	temp1
.1b70	c8		iny				iny
.1b71					_CTILoop:
.1b71	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1b73	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1b75	38		sec				sec
.1b76	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1b78	90 65		bcc $1bdf			bcc 	_CTIFail 					; out of range.
.1b7a	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1b7c	90 0b		bcc $1b89			bcc 	_CTILegal
.1b7e	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1b80	90 5d		bcc $1bdf			bcc 	_CTIFail
.1b82	38		sec				sec
.1b83	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1b85	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1b87	b0 56		bcs $1bdf			bcs 	_CTIFail
.1b89					_CTILegal:
.1b89	48		pha				pha 								; save digit value.
.1b8a	06 14		asl $14				asl 	temp3
.1b8c	26 15		rol $15				rol 	temp3+1
.1b8e	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1b90	85 12		sta $12				sta 	temp2
.1b92	a5 15		lda $15				lda 	temp3+1
.1b94	85 13		sta $13				sta 	temp2+1
.1b96	06 14		asl $14				asl 	temp3
.1b98	26 15		rol $15				rol 	temp3+1
.1b9a	06 14		asl $14				asl 	temp3
.1b9c	26 15		rol $15				rol 	temp3+1
.1b9e	24 10		bit $10				bit 	temp1 						; hexadecimal
.1ba0	10 07		bpl $1ba9			bpl 	_CTIDecimal
.1ba2	06 14		asl $14				asl 	temp3
.1ba4	26 15		rol $15				rol 	temp3+1
.1ba6	68		pla				pla 								; get digit back
.1ba7	80 12		bra $1bbb			bra 	_CTIAddLoop
.1ba9					_CTIDecimal:
.1ba9	18		clc				clc 								; x 8 + x 2 = x 10
.1baa	a5 14		lda $14				lda 	temp3
.1bac	65 12		adc $12				adc 	temp2
.1bae	85 14		sta $14				sta 	temp3
.1bb0	a5 15		lda $15				lda 	temp3+1
.1bb2	65 13		adc $13				adc 	temp2+1
.1bb4	85 15		sta $15				sta 	temp3+1
.1bb6	68		pla				pla 								; check digit 0-9
.1bb7	c9 0a		cmp #$0a			cmp 	#10
.1bb9	b0 24		bcs $1bdf			bcs 	_CTIFail
.1bbb					_CTIAddLoop:
.1bbb	18		clc				clc
.1bbc	65 14		adc $14				adc 	temp3
.1bbe	85 14		sta $14				sta 	temp3
.1bc0	90 02		bcc $1bc4			bcc 	_CTINoCarry
.1bc2	e6 15		inc $15				inc 	temp3+1
.1bc4					_CTINoCarry:
.1bc4	c8		iny				iny
.1bc5	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1bc7	c9 21		cmp #$21			cmp 	#32+1
.1bc9	b0 a6		bcs $1b71			bcs 	_CTILoop 					; no, go back.
.1bcb	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1bcd	d0 0d		bne $1bdc			bne 	_CTIOkay
.1bcf	38		sec				sec
.1bd0	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1bd2	e5 14		sbc $14				sbc 	temp3
.1bd4	85 14		sta $14				sta 	temp3
.1bd6	a9 00		lda #$00			lda 	#0
.1bd8	e5 15		sbc $15				sbc 	temp3+1
.1bda	85 15		sta $15				sta 	temp3+1
.1bdc					_CTIOkay:
.1bdc	98		tya				tya
.1bdd	38		sec				sec
.1bde	60		rts				rts
.1bdf					_CTIFail:
.1bdf	18		clc				clc
.1be0	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1be1					NextLine:
.1be1	18		clc				clc
.1be2	a5 03		lda $03				lda 	IP
.1be4	72 03		adc ($03)			adc 	(IP)
.1be6	85 03		sta $03				sta 	IP
.1be8	90 02		bcc $1bec			bcc 	_NoCarryAdv
.1bea	e6 04		inc $04				inc 	IP+1
.1bec					_NoCarryAdv:
.1bec	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1bee	f0 05		beq $1bf5			beq 	_NLGoEnd
.1bf0	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1bf2	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1bf5					_NLGoEnd:
.1bf5	4c 13 10	jmp $1013			jmp 	WarmStart
.1bf8					SkipComment:
.1bf8	e8		inx				inx									; (IP),X points to the length.
.1bf9	e8		inx				inx
.1bfa	8a		txa				txa
.1bfb	a8		tay				tay 								; put into Y
.1bfc	18		clc				clc
.1bfd	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1bff	aa		tax				tax 								; put back in X
.1c00	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1c03					CommentDecoder:
.1c03	a9 06		lda #$06			lda 	#CTH_Keyword
.1c05	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c08	a9 27		lda #$27			lda 	#"'"
.1c0a	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c0d	a9 0b		lda #$0b			lda 	#CTH_Comment
.1c0f	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c12	20 04 1a	jsr $1a04			jsr 	DecodeOutputData
.1c15	a9 20		lda #$20			lda 	#32
.1c17	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c1a	60		rts				rts
.1c1b					DefineCode:
.1c1b	20 20 10	jsr $1020			jsr 	ErrorHandler
>1c1e	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1c26	4f 4e 3f 00
.1c2a					DefineDecoder:
.1c2a	a9 07		lda #$07			lda 	#CTH_Definition
.1c2c	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c2f	a9 3a		lda #$3a			lda 	#":"
.1c31	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c34	20 04 1a	jsr $1a04			jsr 	DecodeOutputData
.1c37	a9 20		lda #$20			lda 	#32
.1c39	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1c3c	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1c3d					IntToString:
.1c3d	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1c3f	85 12		sta $12				sta 	0+(temp2)
.1c41	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1c43	85 13		sta $13				sta 	1+(temp2)
.1c45	a5 06		lda $06				lda 	TOS 						; value in YA
.1c47	a4 07		ldy $07				ldy 	TOS+1
.1c49	20 57 1c	jsr $1c57			jsr 	ConvertToString
.1c4c	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1c4e	85 06		sta $06				sta 	0+(TOS)
.1c50	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1c52	85 07		sta $07				sta 	1+(TOS)
.1c54	4c 00 00	jmp $0000			jmp 	Next
.1c57					ConvertToString:
.1c57	38		sec				sec
.1c58	80 01		bra $1c5b			bra 	ConvertToStringMain
.1c5a					ConvertToStringUnsigned:
.1c5a	18		clc				clc
.1c5b					ConvertToStringMain:
.1c5b	da		phx				phx									; save XY
.1c5c	5a		phy				phy
.1c5d	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1c5f	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1c61	84 11		sty $11				sty 	temp1+1
.1c63	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1c65	90 16		bcc $1c7d			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1c67	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1c69	10 12		bpl $1c7d			bpl 	_CTSUnsigned
.1c6b	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1c6d	91 12		sta ($12),y			sta 	(temp2),y
.1c6f	c8		iny				iny
.1c70	38		sec				sec 								; negate temp1
.1c71	a9 00		lda #$00			lda 	#0
.1c73	e5 10		sbc $10				sbc 	temp1
.1c75	85 10		sta $10				sta 	temp1
.1c77	a9 00		lda #$00			lda 	#0
.1c79	e5 11		sbc $11				sbc 	temp1+1
.1c7b	85 11		sta $11				sta 	temp1+1
.1c7d					_CTSUnsigned:
.1c7d	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1c7f					_CTSLoop:
.1c7f	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1c81	91 12		sta ($12),y			sta 	(temp2),y
.1c83					_CTSSubLoop:
.1c83	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1c85	1a		inc a				inc 	a
.1c86	91 12		sta ($12),y			sta 	(temp2),y
.1c88	38		sec				sec 								; do subtraction saving interim result
.1c89	a5 10		lda $10				lda 	temp1
.1c8b	fd be 1c	sbc $1cbe,x			sbc 	_CTSTable,x
.1c8e	48		pha				pha
.1c8f	a5 11		lda $11				lda 	temp1+1
.1c91	fd bf 1c	sbc $1cbf,x			sbc 	_CTSTable+1,x
.1c94	90 07		bcc $1c9d			bcc 	_CTSCantSubtract 			; end of subtraction.
.1c96	85 11		sta $11				sta 	temp1+1 					; save result back
.1c98	68		pla				pla
.1c99	85 10		sta $10				sta 	temp1
.1c9b	80 e6		bra $1c83			bra 	_CTSSubLoop
.1c9d					_CTSCantSubtract:
.1c9d	68		pla				pla 								; throw away interim
.1c9e	e8		inx				inx 								; next subtractor
.1c9f	e8		inx				inx
.1ca0	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1ca2	49 30		eor #$30			eor 	#"0"
.1ca4	05 1a		ora $1a				ora 	SignCount
.1ca6	85 1a		sta $1a				sta 	SignCount
.1ca8	f0 01		beq $1cab			beq		_CTSLZ 						; if all zeros so far suppress.
.1caa	c8		iny				iny 								; next character
.1cab					_CTSLZ:
.1cab	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1cad	d0 d0		bne $1c7f			bne 	_CTSLoop
.1caf					_CTSComplete:
.1caf	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1cb1	09 30		ora #$30			ora 	#48 						; ASCII
.1cb3	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1cb5	c8		iny				iny
.1cb6	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1cb8	91 12		sta ($12),y			sta 	(temp2),y
.1cba	98		tya				tya 								; size in A
.1cbb	7a		ply				ply									; pull and exit.
.1cbc	fa		plx				plx
.1cbd	60		rts				rts
.1cbe					_CTSTable:
>1cbe	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1cc6					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1cc6					VarAddressHandler:
.1cc6	18		clc				clc 								; find variable, error if it doesn't exist.
.1cc7	20 18 1d	jsr $1d18			jsr 	VariableFind
.1cca	a5 06		lda $06				lda 	TOS
.1ccc	48		pha				pha
.1ccd	a5 07		lda $07				lda 	TOS+1
.1ccf	48		pha				pha
.1cd0	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1cd2	85 06		sta $06				sta 	TOS
.1cd4	a5 11		lda $11				lda		temp1+1
.1cd6	85 07		sta $07				sta 	TOS+1
.1cd8	4c 00 00	jmp $0000			jmp 	Next
.1cdb					VarAddrHandlerDecode:
.1cdb	a9 26		lda #$26			lda 	#"&"
.1cdd	4c c6 1d	jmp $1dc6			jmp 	VarHandlerDecode
.1ce0					VarReadHandler:
.1ce0	18		clc				clc 								; find variable, error if it doesn't exist.
.1ce1	20 18 1d	jsr $1d18			jsr 	VariableFind
.1ce4	a5 06		lda $06				lda 	TOS
.1ce6	48		pha				pha
.1ce7	a5 07		lda $07				lda 	TOS+1
.1ce9	48		pha				pha
.1cea	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1cec	85 06		sta $06				sta 	TOS
.1cee	a0 01		ldy #$01			ldy 	#1
.1cf0	b1 10		lda ($10),y			lda 	(temp1),y
.1cf2	85 07		sta $07				sta 	TOS+1
.1cf4	4c 00 00	jmp $0000			jmp 	Next
.1cf7					VarReadHandlerDecode:
.1cf7	a9 40		lda #$40			lda 	#"@"
.1cf9	4c c6 1d	jmp $1dc6			jmp 	VarHandlerDecode
.1cfc					VarWriteHandler:
.1cfc	38		sec				sec 								; find variable, create it if it doesn't exist.
.1cfd	20 18 1d	jsr $1d18			jsr 	VariableFind
.1d00	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1d02	92 10		sta ($10)			sta 	(temp1)
.1d04	a5 07		lda $07				lda 	TOS+1
.1d06	a0 01		ldy #$01			ldy 	#1
.1d08	91 10		sta ($10),y			sta 	(temp1),y
.1d0a	68		pla				pla
.1d0b	85 07		sta $07				sta 	TOS+1
.1d0d	68		pla				pla
.1d0e	85 06		sta $06				sta 	TOS
.1d10	4c 00 00	jmp $0000			jmp 	Next
.1d13					VarWriteHandlerDecode:
.1d13	a9 21		lda #$21			lda 	#"!"
.1d15	4c c6 1d	jmp $1dc6			jmp 	VarHandlerDecode
.1d18					VariableFind:
.1d18	08		php				php 								; save autocreate flag.
.1d19	e8		inx				inx 								; advance to/over the variable name.
.1d1a	e8		inx				inx
.1d1b	8a		txa				txa 								; put in Y
.1d1c	a8		tay				tay
.1d1d	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1d1f	85 12		sta $12				sta 	temp2
.1d21	c8		iny				iny
.1d22	b1 03		lda ($03),y			lda 	(IP),y
.1d24	85 13		sta $13				sta 	temp2+1
.1d26	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1d28	b0 0f		bcs $1d39			bcs 	_VFLong
.1d2a	a5 13		lda $13				lda 	temp2+1
.1d2c	d0 0b		bne $1d39			bne 	_VFLong
.1d2e	a5 12		lda $12				lda 	temp2						; this is the index
.1d30	0a		asl a				asl 	a 							; double it
.1d31	85 10		sta $10				sta 	temp1
.1d33	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1d35	85 11		sta $11				sta 	temp1+1
.1d37	28		plp				plp 								; throw creation flag, it always exists.
.1d38	60		rts				rts
.1d39					_VFLong:
.1d39	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1d3b	6a		ror a				ror 	a
.1d3c	6a		ror a				ror 	a
.1d3d	6a		ror a				ror 	a
.1d3e	6a		ror a				ror 	a
.1d3f	45 12		eor $12				eor 	temp2
.1d41	45 13		eor $13				eor 	temp2+1
.1d43	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1d45	0a		asl a				asl 	a
.1d46	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1d48	85 10		sta $10				sta 	temp1
.1d4a	85 14		sta $14				sta 	temp3
.1d4c	a9 06		lda #$06			lda 	#hashTable >> 8
.1d4e	85 11		sta $11				sta 	temp1+1
.1d50	85 15		sta $15				sta 	temp3+1
.1d52					_VFSearch:
.1d52	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1d54	b1 10		lda ($10),y			lda 	(temp1),y
.1d56	f0 23		beq $1d7b			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1d58	a8		tay				tay 								; follow the link through.
.1d59	b2 10		lda ($10)			lda 	(temp1)
.1d5b	85 10		sta $10				sta 	temp1
.1d5d	84 11		sty $11				sty 	temp1+1
.1d5f	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1d61	b1 10		lda ($10),y			lda 	(temp1),y
.1d63	c5 12		cmp $12				cmp 	temp2
.1d65	d0 eb		bne $1d52			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1d67	c8		iny				iny 								; same for 2nd byte of name
.1d68	b1 10		lda ($10),y			lda 	(temp1),y
.1d6a	c5 13		cmp $13				cmp 	temp2+1
.1d6c	d0 e4		bne $1d52			bne 	_VFSearch
.1d6e	18		clc				clc
.1d6f	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1d71	69 02		adc #$02			adc 	#2
.1d73	85 10		sta $10				sta 	temp1
.1d75	90 02		bcc $1d79			bcc 	_VFNoPage1
.1d77	e6 11		inc $11				inc 	temp1+1
.1d79					_VFNoPage1:
.1d79	28		plp				plp 								; don't need to worry about creation flag
.1d7a	60		rts				rts
.1d7b					_VFNotFound:
.1d7b	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1d7c	b0 0d		bcs $1d8b			bcs 	_VFCreate
.1d7e	20 20 10	jsr $1020			jsr 	ErrorHandler
>1d81	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1d89	3f 00
.1d8b					_VFCreate:
.1d8b	a0 01		ldy #$01			ldy 	#1
.1d8d	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1d8f	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1d91	b1 14		lda ($14),y			lda 	(temp3),y
.1d93	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d95	c8		iny				iny
.1d96	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1d98	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d9a	c8		iny				iny
.1d9b	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d9d	c8		iny				iny
.1d9e	a5 12		lda $12				lda 	temp2 						; copy the name out
.1da0	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1da2	c8		iny				iny
.1da3	a5 13		lda $13				lda 	temp2+1
.1da5	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1da7	a0 01		ldy #$01			ldy 	#1
.1da9	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1dab	92 14		sta ($14)			sta 	(temp3)
.1dad	a5 0f		lda $0f				lda 	nextFreeMem+1
.1daf	91 14		sta ($14),y			sta 	(temp3),y
.1db1	18		clc				clc
.1db2	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1db4	69 02		adc #$02			adc 	#2
.1db6	85 10		sta $10				sta 	temp1
.1db8	a5 0f		lda $0f				lda 	nextFreeMem+1
.1dba	69 00		adc #$00			adc 	#0
.1dbc	85 11		sta $11				sta 	temp1+1
.1dbe	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1dc0	a0 00		ldy #$00			ldy 	#0
.1dc2	20 f8 18	jsr $18f8			jsr 	AdvanceFreeMem
.1dc5	60		rts				rts
.1dc6					VarHandlerDecode:
.1dc6	48		pha				pha 								; save, leading space
.1dc7	a9 20		lda #$20			lda 	#" "
.1dc9	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1dcc	68		pla				pla 								; restore and write type
.1dcd	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1dd0	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1dd2	85 10		sta $10				sta 	temp1
.1dd4	c8		iny				iny
.1dd5	b1 08		lda ($08),y			lda 	(srcPtr),y
.1dd7	85 11		sta $11				sta 	temp1+1
.1dd9	a5 10		lda $10				lda 	temp1 						; output the first character
.1ddb	29 1f		and #$1f			and 	#31
.1ddd	20 08 1e	jsr $1e08			jsr 	VHOutVarChar
.1de0	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1de2					_VHDShift:
.1de2	46 11		lsr $11				lsr 	temp1+1
.1de4	66 10		ror $10				ror 	temp1
.1de6	ca		dex				dex
.1de7	d0 f9		bne $1de2			bne 	_VHDShift
.1de9	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1deb					_VHDDiv40:
.1deb	e8		inx				inx
.1dec	38		sec				sec
.1ded	a5 10		lda $10				lda 	temp1
.1def	e9 28		sbc #$28			sbc 	#40
.1df1	a8		tay				tay
.1df2	a5 11		lda $11				lda 	temp1+1
.1df4	e9 00		sbc #$00			sbc 	#0
.1df6	90 06		bcc $1dfe			bcc 	_VHDivDone
.1df8	85 11		sta $11				sta 	temp1+1
.1dfa	84 10		sty $10				sty 	temp1
.1dfc	80 ed		bra $1deb			bra 	_VHDDiv40
.1dfe					_VHDivDone:
.1dfe	a5 10		lda $10				lda 	temp1 						; remainder
.1e00	20 08 1e	jsr $1e08			jsr 	VHOutVarChar
.1e03	8a		txa				txa
.1e04	20 08 1e	jsr $1e08			jsr 	VHOutVarChar 				; and result.
.1e07	60		rts				rts
.1e08					VHOutVarChar:
.1e08	c9 00		cmp #$00			cmp 	#0
.1e0a	f0 0c		beq $1e18			beq 	_VHOExit
.1e0c	18		clc				clc
.1e0d	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1e0f	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1e11	90 02		bcc $1e15			bcc 	_VHOOut
.1e13	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1e15					_VHOOut:
.1e15	20 fb 19	jsr $19fb			jsr 	DecodeWriteBuffer
.1e18					_VHOExit:
.1e18	60		rts				rts

;******  Return to file: kernel.asm

.1e19					Dictionary:

;******  Processing file: generated/dictionary.inc

>1e19	05					.byte	_end1-*
>1e1a	00					.byte	$00
>1e1b	fa 15					.word	WordWrite
>1e1d	a1					.byte	$a1
.1e1e					_end1:
>1e1e	10					.byte	_end2-*
>1e1f	52					.byte	$52
>1e20	fc 1c					.word	VarWriteHandler
>1e22	13 1d					.word	VarWriteHandlerDecode
>1e24	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1e2c	45 d2
.1e2e					_end2:
>1e2e	10					.byte	_end3-*
>1e2f	52					.byte	$52
>1e30	c6 1c					.word	VarAddressHandler
>1e32	db 1c					.word	VarAddrHandlerDecode
>1e34	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1e3c	45 d2
.1e3e					_end3:
>1e3e	10					.byte	_end4-*
>1e3f	52					.byte	$52
>1e40	e0 1c					.word	VarReadHandler
>1e42	f7 1c					.word	VarReadHandlerDecode
>1e44	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>1e4c	45 d2
.1e4e					_end4:
>1e4e	0c					.byte	_end5-*
>1e4f	52					.byte	$52
>1e50	7f 17					.word	CallHandler
>1e52	3b 18					.word	CallHandlerDecode
>1e54	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1e5a					_end5:
>1e5a	0f					.byte	_end6-*
>1e5b	53					.byte	$53
>1e5c	f8 1b					.word	SkipComment
>1e5e	03 1c					.word	CommentDecoder
>1e60	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1e68	d4
.1e69					_end6:
>1e69	0e					.byte	_end7-*
>1e6a	53					.byte	$53
>1e6b	1b 1c					.word	DefineCode
>1e6d	2a 1c					.word	DefineDecoder
>1e6f	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.1e77					_end7:
>1e77	0f					.byte	_end8-*
>1e78	52					.byte	$52
>1e79	86 10					.word	Literal2Byte
>1e7b	9c 10					.word	Literal2ByteDecode
>1e7d	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>1e85	cc
.1e86					_end8:
>1e86	0e					.byte	_end9-*
>1e87	80					.byte	$80
>1e88	e1 1b					.word	NextLine
>1e8a	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>1e92	4e c5
.1e94					_end9:
>1e94	0e					.byte	_end10-*
>1e95	53					.byte	$53
>1e96	ae 10					.word	LiteralString
>1e98	cb 10					.word	LiteralStringDecoder
>1e9a	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.1ea2					_end10:
>1ea2	05					.byte	_end11-*
>1ea3	00					.byte	$00
>1ea4	76 13					.word	Multiply16x16
>1ea6	aa					.byte	$aa
.1ea7					_end11:
>1ea7	05					.byte	_end12-*
>1ea8	00					.byte	$00
>1ea9	e3 11					.word	Add
>1eab	ab					.byte	$ab
.1eac					_end12:
>1eac	06					.byte	_end13-*
>1ead	00					.byte	$00
>1eae	0b 16					.word	WordAdd
>1eb0	2b a1					.byte	$2b,$a1
.1eb2					_end13:
>1eb2	05					.byte	_end14-*
>1eb3	00					.byte	$00
>1eb4	f2 11					.word	Subtract
>1eb6	ad					.byte	$ad
.1eb7					_end14:
>1eb7	06					.byte	_end15-*
>1eb8	00					.byte	$00
>1eb9	b2 14					.word	ConstantMinus1
>1ebb	2d b1					.byte	$2d,$b1
.1ebd					_end15:
>1ebd	05					.byte	_end16-*
>1ebe	00					.byte	$00
>1ebf	c7 12					.word	Divide16x16
>1ec1	af					.byte	$af
.1ec2					_end16:
>1ec2	05					.byte	_end17-*
>1ec3	00					.byte	$00
>1ec4	a5 14					.word	Constant0
>1ec6	b0					.byte	$b0
.1ec7					_end17:
>1ec7	06					.byte	_end18-*
>1ec8	00					.byte	$00
>1ec9	0b 14					.word	CheckMinus
>1ecb	30 bc					.byte	$30,$bc
.1ecd					_end18:
>1ecd	06					.byte	_end19-*
>1ece	00					.byte	$00
>1ecf	1f 14					.word	CheckZero
>1ed1	30 bd					.byte	$30,$bd
.1ed3					_end19:
>1ed3	05					.byte	_end20-*
>1ed4	00					.byte	$00
>1ed5	c1 14					.word	C1
>1ed7	b1					.byte	$b1
.1ed8					_end20:
>1ed8	06					.byte	_end21-*
>1ed9	00					.byte	$00
>1eda	b5 13					.word	Unary1Plus
>1edc	31 ab					.byte	$31,$ab
.1ede					_end21:
>1ede	06					.byte	_end22-*
>1edf	00					.byte	$00
>1ee0	cc 13					.word	Unary1Minus
>1ee2	31 ad					.byte	$31,$ad
.1ee4					_end22:
>1ee4	06					.byte	_end23-*
>1ee5	00					.byte	$00
>1ee6	d9 14					.word	C10
>1ee8	31 b0					.byte	$31,$b0
.1eea					_end23:
>1eea	07					.byte	_end24-*
>1eeb	00					.byte	$00
>1eec	02 15					.word	C100
>1eee	31 30 b0				.byte	$31,$30,$b0
.1ef1					_end24:
>1ef1	08					.byte	_end25-*
>1ef2	00					.byte	$00
>1ef3	31 15					.word	C1024
>1ef5	31 30 32 b4				.byte	$31,$30,$32,$b4
.1ef9					_end25:
>1ef9	07					.byte	_end26-*
>1efa	00					.byte	$00
>1efb	06 15					.word	C127
>1efd	31 32 b7				.byte	$31,$32,$b7
.1f00					_end26:
>1f00	07					.byte	_end27-*
>1f01	00					.byte	$00
>1f02	0a 15					.word	C128
>1f04	31 32 b8				.byte	$31,$32,$b8
.1f07					_end27:
>1f07	06					.byte	_end28-*
>1f08	00					.byte	$00
>1f09	dd 14					.word	C15
>1f0b	31 b5					.byte	$31,$b5
.1f0d					_end28:
>1f0d	06					.byte	_end29-*
>1f0e	00					.byte	$00
>1f0f	e1 14					.word	C16
>1f11	31 b6					.byte	$31,$b6
.1f13					_end29:
>1f13	07					.byte	_end30-*
>1f14	00					.byte	$00
>1f15	43 14					.word	Times16
>1f17	31 36 aa				.byte	$31,$36,$aa
.1f1a					_end30:
>1f1a	07					.byte	_end31-*
>1f1b	00					.byte	$00
>1f1c	56 14					.word	Divide16
>1f1e	31 36 af				.byte	$31,$36,$af
.1f21					_end31:
>1f21	05					.byte	_end32-*
>1f22	00					.byte	$00
>1f23	c5 14					.word	C2
>1f25	b2					.byte	$b2
.1f26					_end32:
>1f26	06					.byte	_end33-*
>1f27	00					.byte	$00
>1f28	4f 14					.word	Times2
>1f2a	32 aa					.byte	$32,$aa
.1f2c					_end33:
>1f2c	06					.byte	_end34-*
>1f2d	00					.byte	$00
>1f2e	be 13					.word	Unary2Plus
>1f30	32 ab					.byte	$32,$ab
.1f32					_end34:
>1f32	06					.byte	_end35-*
>1f33	00					.byte	$00
>1f34	d7 13					.word	Unary2Minus
>1f36	32 ad					.byte	$32,$ad
.1f38					_end35:
>1f38	06					.byte	_end36-*
>1f39	00					.byte	$00
>1f3a	62 14					.word	Divide2
>1f3c	32 af					.byte	$32,$af
.1f3e					_end36:
>1f3e	06					.byte	_end37-*
>1f3f	00					.byte	$00
>1f40	e5 14					.word	C24
>1f42	32 b4					.byte	$32,$b4
.1f44					_end37:
>1f44	07					.byte	_end38-*
>1f45	00					.byte	$00
>1f46	0e 15					.word	C255
>1f48	32 35 b5				.byte	$32,$35,$b5
.1f4b					_end38:
>1f4b	07					.byte	_end39-*
>1f4c	00					.byte	$00
>1f4d	19 15					.word	C256
>1f4f	32 35 b6				.byte	$32,$35,$b6
.1f52					_end39:
>1f52	08					.byte	_end40-*
>1f53	00					.byte	$00
>1f54	69 14					.word	Times256
>1f56	32 35 36 aa				.byte	$32,$35,$36,$aa
.1f5a					_end40:
>1f5a	08					.byte	_end41-*
>1f5b	00					.byte	$00
>1f5c	72 14					.word	Divide256
>1f5e	32 35 36 af				.byte	$32,$35,$36,$af
.1f62					_end41:
>1f62	05					.byte	_end42-*
>1f63	00					.byte	$00
>1f64	c9 14					.word	C3
>1f66	b3					.byte	$b3
.1f67					_end42:
>1f67	06					.byte	_end43-*
>1f68	00					.byte	$00
>1f69	f6 14					.word	C32
>1f6b	33 b2					.byte	$33,$b2
.1f6d					_end43:
>1f6d	09					.byte	_end44-*
>1f6e	00					.byte	$00
>1f6f	49 15					.word	C32767
>1f71	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.1f76					_end44:
>1f76	09					.byte	_end45-*
>1f77	00					.byte	$00
>1f78	55 15					.word	C32768
>1f7a	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.1f7f					_end45:
>1f7f	05					.byte	_end46-*
>1f80	00					.byte	$00
>1f81	cd 14					.word	C4
>1f83	b4					.byte	$b4
.1f84					_end46:
>1f84	06					.byte	_end47-*
>1f85	00					.byte	$00
>1f86	4b 14					.word	Times4
>1f88	34 aa					.byte	$34,$aa
.1f8a					_end47:
>1f8a	06					.byte	_end48-*
>1f8b	00					.byte	$00
>1f8c	5e 14					.word	Divide4
>1f8e	34 af					.byte	$34,$af
.1f90					_end48:
>1f90	08					.byte	_end49-*
>1f91	00					.byte	$00
>1f92	3d 15					.word	C4096
>1f94	34 30 39 b6				.byte	$34,$30,$39,$b6
.1f98					_end49:
>1f98	05					.byte	_end50-*
>1f99	00					.byte	$00
>1f9a	d1 14					.word	C5
>1f9c	b5					.byte	$b5
.1f9d					_end50:
>1f9d	07					.byte	_end51-*
>1f9e	00					.byte	$00
>1f9f	25 15					.word	C512
>1fa1	35 31 b2				.byte	$35,$31,$b2
.1fa4					_end51:
>1fa4	06					.byte	_end52-*
>1fa5	00					.byte	$00
>1fa6	fa 14					.word	C63
>1fa8	36 b3					.byte	$36,$b3
.1faa					_end52:
>1faa	06					.byte	_end53-*
>1fab	00					.byte	$00
>1fac	fe 14					.word	C64
>1fae	36 b4					.byte	$36,$b4
.1fb0					_end53:
>1fb0	05					.byte	_end54-*
>1fb1	00					.byte	$00
>1fb2	d5 14					.word	C8
>1fb4	b8					.byte	$b8
.1fb5					_end54:
>1fb5	06					.byte	_end55-*
>1fb6	00					.byte	$00
>1fb7	47 14					.word	Times8
>1fb9	38 aa					.byte	$38,$aa
.1fbb					_end55:
>1fbb	06					.byte	_end56-*
>1fbc	00					.byte	$00
>1fbd	5a 14					.word	Divide8
>1fbf	38 af					.byte	$38,$af
.1fc1					_end56:
>1fc1	05					.byte	_end57-*
>1fc2	40					.byte	$40
>1fc3	04 18					.word	ReturnHandler
>1fc5	bb					.byte	$bb
.1fc6					_end57:
>1fc6	05					.byte	_end58-*
>1fc7	00					.byte	$00
>1fc8	63 12					.word	CheckLess
>1fca	bc					.byte	$bc
.1fcb					_end58:
>1fcb	06					.byte	_end59-*
>1fcc	00					.byte	$00
>1fcd	7c 12					.word	CheckLessEq
>1fcf	3c bd					.byte	$3c,$bd
.1fd1					_end59:
>1fd1	06					.byte	_end60-*
>1fd2	00					.byte	$00
>1fd3	2c 12					.word	CheckNotEqual
>1fd5	3c be					.byte	$3c,$be
.1fd7					_end60:
>1fd7	05					.byte	_end61-*
>1fd8	00					.byte	$00
>1fd9	2f 12					.word	CheckEqual
>1fdb	bd					.byte	$bd
.1fdc					_end61:
>1fdc	05					.byte	_end62-*
>1fdd	00					.byte	$00
>1fde	7f 12					.word	CheckGreater
>1fe0	be					.byte	$be
.1fe1					_end62:
>1fe1	06					.byte	_end63-*
>1fe2	00					.byte	$00
>1fe3	60 12					.word	CheckGreaterEq
>1fe5	3e bd					.byte	$3e,$bd
.1fe7					_end63:
>1fe7	08					.byte	_end64-*
>1fe8	00					.byte	$00
>1fe9	6a 15					.word	TestDup
>1feb	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.1fef					_end64:
>1fef	05					.byte	_end65-*
>1ff0	00					.byte	$00
>1ff1	df 15					.word	WordRead
>1ff3	c0					.byte	$c0
.1ff4					_end65:
>1ff4	07					.byte	_end66-*
>1ff5	00					.byte	$00
>1ff6	e5 13					.word	Absolute
>1ff8	41 42 d3				.byte	$41,$42,$d3
.1ffb					_end66:
>1ffb	09					.byte	_end67-*
>1ffc	00					.byte	$00
>1ffd	22 16					.word	AllocateMemory
>1fff	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.2004					_end67:
>2004	07					.byte	_end68-*
>2005	00					.byte	$00
>2006	05 12					.word	And
>2008	41 4e c4				.byte	$41,$4e,$c4
.200b					_end68:
>200b	0a					.byte	_end69-*
>200c	00					.byte	$00
>200d	de 1a					.word	AssertCode
>200f	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.2015					_end69:
>2015	09					.byte	_end70-*
>2016	00					.byte	$00
>2017	38 14					.word	ByteSwap
>2019	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.201e					_end70:
>201e	06					.byte	_end71-*
>201f	00					.byte	$00
>2020	ed 15					.word	ByteWrite
>2022	43 a1					.byte	$43,$a1
.2024					_end71:
>2024	06					.byte	_end72-*
>2025	00					.byte	$00
>2026	d6 15					.word	ByteRead
>2028	43 c0					.byte	$43,$c0
.202a					_end72:
>202a	07					.byte	_end73-*
>202b	00					.byte	$00
>202c	c5 18					.word	ClrHandler
>202e	43 4c d2				.byte	$43,$4c,$d2
.2031					_end73:
>2031	08					.byte	_end74-*
>2032	00					.byte	$00
>2033	61 15					.word	Drop
>2035	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2039					_end74:
>2039	07					.byte	_end75-*
>203a	00					.byte	$00
>203b	73 15					.word	Dup
>203d	44 55 d0				.byte	$44,$55,$d0
.2040					_end75:
>2040	08					.byte	_end76-*
>2041	01					.byte	$01
>2042	53 17					.word	ElseHandler
>2044	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2048					_end76:
>2048	07					.byte	_end77-*
>2049	00					.byte	$00
>204a	ff 1a					.word	EndProgram
>204c	45 4e c4				.byte	$45,$4e,$c4
.204f					_end77:
>204f	09					.byte	_end78-*
>2050	00					.byte	$00
>2051	56 17					.word	EndIfHandler
>2053	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2058					_end78:
>2058	07					.byte	_end79-*
>2059	00					.byte	$00
>205a	cb 16					.word	ForHandler
>205c	46 4f d2				.byte	$46,$4f,$d2
.205f					_end79:
>205f	06					.byte	_end80-*
>2060	01					.byte	$01
>2061	50 17					.word	IfHandler
>2063	49 c6					.byte	$49,$c6
.2065					_end80:
>2065	09					.byte	_end81-*
>2066	00					.byte	$00
>2067	2f 17					.word	GetIndex
>2069	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.206e					_end81:
>206e	08					.byte	_end82-*
>206f	00					.byte	$00
>2070	3a 1a					.word	ListCode
>2072	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2076					_end82:
>2076	07					.byte	_end83-*
>2077	00					.byte	$00
>2078	9c 12					.word	Maximum
>207a	4d 41 d8				.byte	$4d,$41,$d8
.207d					_end83:
>207d	07					.byte	_end84-*
>207e	00					.byte	$00
>207f	98 12					.word	Minimum
>2081	4d 49 ce				.byte	$4d,$49,$ce
.2084					_end84:
>2084	07					.byte	_end85-*
>2085	00					.byte	$00
>2086	d8 12					.word	Modulus16x16
>2088	4d 4f c4				.byte	$4d,$4f,$c4
.208b					_end85:
>208b	0a					.byte	_end86-*
>208c	00					.byte	$00
>208d	ec 13					.word	Negate
>208f	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2095					_end86:
>2095	07					.byte	_end87-*
>2096	00					.byte	$00
>2097	bc 18					.word	NewHandler
>2099	4e 45 d7				.byte	$4e,$45,$d7
.209c					_end87:
>209c	08					.byte	_end88-*
>209d	01					.byte	$01
>209e	f9 16					.word	NextHandler
>20a0	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.20a4					_end88:
>20a4	07					.byte	_end89-*
>20a5	00					.byte	$00
>20a6	a7 15					.word	Nip
>20a8	4e 49 d0				.byte	$4e,$49,$d0
.20ab					_end89:
>20ab	07					.byte	_end90-*
>20ac	00					.byte	$00
>20ad	fc 13					.word	OneComplement
>20af	4e 4f d4				.byte	$4e,$4f,$d4
.20b2					_end90:
>20b2	06					.byte	_end91-*
>20b3	00					.byte	$00
>20b4	1f 12					.word	LogOr
>20b6	4f d2					.byte	$4f,$d2
.20b8					_end91:
>20b8	08					.byte	_end92-*
>20b9	00					.byte	$00
>20ba	8f 15					.word	Over
>20bc	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.20c0					_end92:
>20c0	0a					.byte	_end93-*
>20c1	00					.byte	$00
>20c2	59 17					.word	RepeatHandler
>20c4	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.20ca					_end93:
>20ca	07					.byte	_end94-*
>20cb	00					.byte	$00
>20cc	7b 14					.word	RandomNumber
>20ce	52 4e c4				.byte	$52,$4e,$c4
.20d1					_end94:
>20d1	07					.byte	_end95-*
>20d2	00					.byte	$00
>20d3	ac 15					.word	Rot
>20d5	52 4f d4				.byte	$52,$4f,$d4
.20d8					_end95:
>20d8	07					.byte	_end96-*
>20d9	00					.byte	$00
>20da	b7 1a					.word	RunProgram
>20dc	52 55 ce				.byte	$52,$55,$ce
.20df					_end96:
>20df	07					.byte	_end97-*
>20e0	00					.byte	$00
>20e1	27 14					.word	SignTOS
>20e3	53 47 ce				.byte	$53,$47,$ce
.20e6					_end97:
>20e6	08					.byte	_end98-*
>20e7	00					.byte	$00
>20e8	f7 1a					.word	StopCode
>20ea	53 54 4f d0				.byte	$53,$54,$4f,$d0
.20ee					_end98:
>20ee	08					.byte	_end99-*
>20ef	00					.byte	$00
>20f0	7c 15					.word	Swap
>20f2	53 57 41 d0				.byte	$53,$57,$41,$d0
.20f6					_end99:
>20f6	07					.byte	_end100-*
>20f7	00					.byte	$00
>20f8	c7 1a					.word	Call6502
>20fa	53 59 d3				.byte	$53,$59,$d3
.20fd					_end100:
>20fd	0d					.byte	_end101-*
>20fe	00					.byte	$00
>20ff	3d 1c					.word	IntToString
>2101	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2109	c7
.210a					_end101:
>210a	09					.byte	_end102-*
>210b	01					.byte	$01
>210c	5c 17					.word	UntilHandler
>210e	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2113					_end102:
>2113	09					.byte	_end103-*
>2114	00					.byte	$00
>2115	02 1b					.word	VlistCode
>2117	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.211c					_end103:
>211c	0a					.byte	_end104-*
>211d	40					.byte	$40
>211e	09 19					.word	BreakCmd
>2120	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2126					_end104:
>2126	09					.byte	_end105-*
>2127	00					.byte	$00
>2128	03 19					.word	ExitDump
>212a	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.212f					_end105:
>212f	07					.byte	_end106-*
>2130	00					.byte	$00
>2131	12 12					.word	Xor
>2133	58 4f d2				.byte	$58,$4f,$d2
.2136					_end106:
>2136	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
