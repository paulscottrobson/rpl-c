
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Wed Jan  8 20:04:56 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					nextFreeMem:
>0008							.word 	?
.000a					temp1:
>000a							.word 	?
.000c					temp2:
>000c							.word 	?
.000e					temp3:
>000e							.word 	?
.0010					temp4:
>0010							.word 	?
.0012					freeMemory:
>0012							.word 	?
.0014					SignCount:
>0014							.byte 	?
.0015					RandomSeed:
>0015							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1005	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1007	20 10 10	jsr $1010			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.100a	20 1f 16	jsr $161f			jsr 		ClearVariableSpace 		; clear variables etc.
.100d	4c 00 00	jmp $0000			jmp 		Next

;******  Processing file: core.src

.1010					InitialiseCoreCode:
.1010	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1012	85 00		sta $00				sta 	Next
.1014	85 01		sta $01				sta 	Next+1
.1016	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1018	85 02		sta $02				sta 	Next+2
.101a	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.101c	84 04		sty $04				sty 	Next+4
.101e	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1020	60		rts				rts								; (2 INX skip offset and line#)
.1021					Literal2Byte:
.1021	a5 06		lda $06				lda 	TOS
.1023	48		pha				pha
.1024	a5 07		lda $07				lda 	TOS+1
.1026	48		pha				pha
.1027	e8		inx				inx  							; point X to the word
.1028	e8		inx				inx
.1029	8a		txa				txa 							; copy into Y
.102a	a8		tay				tay
.102b	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.102d	85 06		sta $06				sta 	TOS
.102f	c8		iny				iny 							; read and push the MSB
.1030	b1 03		lda ($03),y			lda 	(IP),y
.1032	85 07		sta $07				sta 	TOS+1
.1034	4c 00 00	jmp $0000			jmp 	Next
.1037					LiteralString:
.1037	a5 06		lda $06				lda 	TOS
.1039	48		pha				pha
.103a	a5 07		lda $07				lda 	TOS+1
.103c	48		pha				pha
.103d	e8		inx				inx
.103e	e8		inx				inx 							; skip over current word
.103f	8a		txa				txa 							; add to IP + 1 to give string address
.1040	a8		tay				tay 							; put in Y
.1041	38		sec				sec 							; make that TOS
.1042	65 03		adc $03				adc 	IP
.1044	85 06		sta $06				sta 	TOS
.1046	a5 04		lda $04				lda 	IP+1
.1048	69 00		adc #$00			adc 	#0
.104a	85 07		sta $07				sta 	TOS+1
.104c	8a		txa				txa 							; add data length to X
.104d	18		clc				clc
.104e	71 03		adc ($03),y			adc 	(IP),y
.1050	aa		tax				tax
.1051	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.1054					Add:
.1054	7a		ply				ply
.1055	68		pla				pla
.1056	18		clc				clc
.1057	65 06		adc $06				adc 	TOS
.1059	85 06		sta $06				sta 	TOS
.105b	98		tya				tya
.105c	65 07		adc $07				adc 	TOS+1
.105e	85 07		sta $07				sta 	TOS+1
.1060	4c 00 00	jmp $0000			jmp 	Next
.1063					Subtract:
.1063	7a		ply				ply
.1064	68		pla				pla
.1065	38		sec				sec
.1066	49 ff		eor #$ff			eor 	#$FF
.1068	65 06		adc $06				adc 	TOS
.106a	85 06		sta $06				sta 	TOS
.106c	98		tya				tya
.106d	49 ff		eor #$ff			eor 	#$FF
.106f	65 07		adc $07				adc 	TOS+1
.1071	85 07		sta $07				sta 	TOS+1
.1073	4c 00 00	jmp $0000			jmp 	Next
.1076					And:
.1076	68		pla				pla
.1077	25 07		and $07				and 	TOS+1
.1079	85 07		sta $07				sta 	TOS+1
.107b	68		pla				pla
.107c	25 06		and $06				and 	TOS
.107e	85 06		sta $06				sta 	TOS
.1080	4c 00 00	jmp $0000			jmp 	Next
.1083					Xor:
.1083	68		pla				pla
.1084	45 07		eor $07				eor 	TOS+1
.1086	85 07		sta $07				sta 	TOS+1
.1088	68		pla				pla
.1089	45 06		eor $06				eor 	TOS
.108b	85 06		sta $06				sta 	TOS
.108d	4c 00 00	jmp $0000			jmp 	Next
.1090					LogOr:
.1090	68		pla				pla
.1091	05 07		ora $07				ora 	TOS+1
.1093	85 07		sta $07				sta 	TOS+1
.1095	68		pla				pla
.1096	05 06		ora $06				ora 	TOS
.1098	85 06		sta $06				sta 	TOS
.109a	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.109d					CheckNotEqual:
.109d	38		sec				sec
.109e	80 01		bra $10a1			bra 	CECode
.10a0					CheckEqual:
.10a0	18		clc				clc
.10a1					CECode:
.10a1	86 0a		stx $0a				stx 	temp1
.10a3	ba		tsx				tsx
.10a4	08		php				php
.10a5	a5 06		lda $06				lda 	TOS
.10a7	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.10aa	d0 17		bne $10c3			bne	 	CompareFalse
.10ac	a5 07		lda $07				lda 	TOS+1
.10ae	5d 01 01	eor $0101,x			eor 	Stack2High,x
.10b1	d0 10		bne $10c3			bne 	CompareFalse
.10b3					CompareTrue:
.10b3	a6 0a		ldx $0a				ldx 	temp1
.10b5	28		plp				plp
.10b6	b0 10		bcs $10c8			bcs		CompareFalse2
.10b8					CompareTrue2:
.10b8	68		pla				pla
.10b9	68		pla				pla
.10ba	a9 ff		lda #$ff			lda 	#$FF
.10bc	85 06		sta $06				sta 	TOS
.10be	85 07		sta $07				sta 	TOS+1
.10c0	4c 00 00	jmp $0000			jmp 	Next
.10c3					CompareFalse:
.10c3	a6 0a		ldx $0a				ldx 	temp1
.10c5	28		plp				plp
.10c6	b0 f0		bcs $10b8			bcs		CompareTrue2
.10c8					CompareFalse2:
.10c8	68		pla				pla
.10c9	68		pla				pla
.10ca	64 06		stz $06				stz 	TOS
.10cc	64 07		stz $07				stz 	TOS+1
.10ce	4c 00 00	jmp $0000			jmp 	Next
.10d1					CheckGreaterEq:
.10d1	38		sec				sec
.10d2	80 01		bra $10d5			bra		CLCode
.10d4					CheckLess:
.10d4	18		clc				clc
.10d5	86 0a		stx $0a		CLCode:	stx 	temp1
.10d7	ba		tsx				tsx
.10d8	08		php				php
.10d9	18		clc				clc
.10da	a5 06		lda $06				lda 	TOS
.10dc	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.10df	a5 07		lda $07				lda 	TOS+1
.10e1	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.10e4	50 02		bvc $10e8			bvc 	_CLNoFlip
.10e6	49 80		eor #$80			eor 	#$80
.10e8					_CLNoFlip:
.10e8	0a		asl a				asl 	a
.10e9	b0 d8		bcs $10c3			bcs 	CompareFalse
.10eb	80 c6		bra $10b3			bra 	CompareTrue
.10ed					CheckLessEq:
.10ed	38		sec				sec
.10ee	80 01		bra $10f1			bra		CGCode
.10f0					CheckGreater:
.10f0	18		clc				clc
.10f1					CGCode:
.10f1	86 0a		stx $0a				stx 	temp1
.10f3	ba		tsx				tsx
.10f4	08		php				php
.10f5	18		clc				clc
.10f6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.10f9	e5 06		sbc $06				sbc 	TOS
.10fb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.10fe	e5 07		sbc $07				sbc 	TOS+1
.1100	50 02		bvc $1104			bvc 	_CGNoFlip
.1102	49 80		eor #$80			eor 	#$80
.1104					_CGNoFlip:
.1104	0a		asl a				asl 	a
.1105	b0 bc		bcs $10c3			bcs 	CompareFalse
.1107	80 aa		bra $10b3			bra 	CompareTrue
.1109					Minimum:
.1109	a9 00		lda #$00			lda 	#0
.110b	80 02		bra $110f			bra 	MinMaxCode
.110d					Maximum:
.110d	a9 80		lda #$80			lda 	#$80
.110f					MinMaxCode:
.110f	85 0b		sta $0b				sta 	temp1+1
.1111	86 0a		stx $0a				stx 	temp1
.1113	ba		tsx				tsx
.1114	38		sec				sec
.1115	a5 06		lda $06				lda 	TOS
.1117	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.111a	a5 07		lda $07				lda 	TOS+1
.111c	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.111f	50 02		bvc $1123			bvc 	_MMNoFlip
.1121	49 80		eor #$80			eor 	#$80
.1123					_MMNoFlip:
.1123	45 0b		eor $0b				eor 	temp1+1
.1125	30 0a		bmi $1131			bmi 	_MMNoCopy
.1127	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.112a	85 06		sta $06				sta 	TOS
.112c	bd 01 01	lda $0101,x			lda 	Stack2High,x
.112f	85 07		sta $07				sta 	TOS+1
.1131					_MMNoCopy:
.1131	a6 0a		ldx $0a				ldx 	temp1
.1133	68		pla				pla
.1134	68		pla				pla
.1135	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.1138					Divide16x16:
.1138	86 0c		stx $0c				stx 	temp2
.113a	ba		tsx				tsx
.113b	20 5e 11	jsr $115e			jsr 	IntegerDivide
.113e	68		pla				pla
.113f	85 07		sta $07				sta 	TOS+1
.1141	68		pla				pla
.1142	85 06		sta $06				sta 	TOS
.1144	a6 0c		ldx $0c				ldx 	temp2
.1146	4c 00 00	jmp $0000			jmp 	Next
.1149					Modulus16x16:
.1149	86 0c		stx $0c				stx 	temp2
.114b	ba		tsx				tsx
.114c	20 5e 11	jsr $115e			jsr 	IntegerDivide
.114f	a6 0c		ldx $0c				ldx 	temp2
.1151	68		pla				pla
.1152	68		pla				pla
.1153	a5 0a		lda $0a				lda 	temp1
.1155	85 06		sta $06				sta 	TOS
.1157	a5 0b		lda $0b				lda 	temp1+1
.1159	85 07		sta $07				sta 	TOS+1
.115b	4c 00 00	jmp $0000			jmp 	Next
.115e					IntegerDivide:
.115e	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.1160	05 07		ora $07				ora 	TOS+1
.1162	d0 14		bne $1178			bne 	_BFDOkay
.1164	20 32 18	jsr $1832			jsr 	ErrorHandler
>1167	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>116f	20 42 59 20 5a 45 52 4f 00
.1178					_BFDOkay:
.1178	64 0a		stz $0a				stz 	temp1 						; Q/Dividend/Left in +0
.117a	64 0b		stz $0b				stz 	temp1+1 					; M/Divisor/Right in +2
.117c	64 14		stz $14				stz 	SignCount 					; Count of signs.
.117e	20 b9 11	jsr $11b9			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1181	20 d3 11	jsr $11d3			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1184	5a		phy				phy 								; Y is the counter
.1185	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1187					_BFDLoop:
.1187	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.118a	3e 01 01	rol $0101,x			rol 	Stack2High,x
.118d	26 0a		rol $0a				rol 	temp1
.118f	26 0b		rol $0b				rol 	temp1+1
.1191	38		sec				sec
.1192	a5 0a		lda $0a				lda 	temp1+0 					; Calculate A-M on stack.
.1194	e5 06		sbc $06				sbc 	TOS
.1196	48		pha				pha
.1197	a5 0b		lda $0b				lda 	temp1+1
.1199	e5 07		sbc $07				sbc 	TOS+1
.119b	90 0f		bcc $11ac			bcc 	_BFDNoAdd
.119d	85 0b		sta $0b				sta 	temp1+1
.119f	68		pla				pla
.11a0	85 0a		sta $0a				sta 	temp1+0
.11a2	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.11a5	09 01		ora #$01			ora 	#1
.11a7	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11aa	80 01		bra $11ad			bra 	_BFDNext
.11ac					_BFDNoAdd:
.11ac	68		pla				pla 								; Throw away the intermediate calculations
.11ad					_BFDNext:
.11ad	88		dey				dey
.11ae	d0 d7		bne $1187			bne 	_BFDLoop
.11b0	7a		ply				ply 								; restore Y
.11b1	46 14		lsr $14				lsr 	SignCount 					; if sign count odd,
.11b3	90 03		bcc $11b8			bcc 	_BFDUnsigned 				; then the result is signed
.11b5	20 bf 11	jsr $11bf			jsr		IntegerNegateAlways 		; negate the result
.11b8					_BFDUnsigned:
.11b8	60		rts				rts
.11b9					CheckIntegerNegate:
.11b9	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.11bc	30 01		bmi $11bf			bmi 	IntegerNegateAlways 		; if so negate it
.11be	60		rts				rts
.11bf					IntegerNegateAlways:
.11bf	e6 14		inc $14				inc 	SignCount 					; bump the count of signs
.11c1	38		sec				sec 								; negate
.11c2	a9 00		lda #$00			lda 	#0
.11c4	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11c7	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11ca	a9 00		lda #$00			lda 	#0
.11cc	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11cf	9d 01 01	sta $0101,x			sta 	Stack2High,x
.11d2	60		rts				rts
.11d3					CheckTOSNegate:
.11d3	a5 07		lda $07				lda 	TOS+1
.11d5	10 0f		bpl $11e6			bpl		CTNNoChange
.11d7	e6 14		inc $14				inc 	SignCount
.11d9					TOSNegateAlways:
.11d9	38		sec				sec
.11da	a9 00		lda #$00			lda 	#0
.11dc	e5 06		sbc $06				sbc 	TOS
.11de	85 06		sta $06				sta 	TOS
.11e0	a9 00		lda #$00			lda 	#0
.11e2	e5 07		sbc $07				sbc 	TOS+1
.11e4	85 07		sta $07				sta 	TOS+1
.11e6					CTNNoChange:
.11e6	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.11e7					Multiply16x16:
.11e7	86 0a		stx $0a				stx 	temp1
.11e9	ba		tsx				tsx
.11ea	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.11ed	85 0c		sta $0c				sta 	temp2
.11ef	bd 01 01	lda $0101,x			lda		Stack2High,x
.11f2	85 0d		sta $0d				sta 	temp2+1
.11f4	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.11f7	9e 01 01	stz $0101,x			stz 	Stack2High,x
.11fa					_MultLoop:
.11fa	46 0d		lsr $0d				lsr 	temp2+1 					; ror temp2 into C
.11fc	66 0c		ror $0c				ror 	temp2
.11fe	90 11		bcc $1211			bcc 	_MultNoAdd
.1200	18		clc				clc 								; add 1st to 2nd
.1201	a5 06		lda $06				lda 	TOS
.1203	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1206	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1209	a5 07		lda $07				lda 	TOS+1
.120b	7d 01 01	adc $0101,x			adc 	Stack2High,x
.120e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1211					_MultNoAdd:
.1211	06 06		asl $06				asl 	TOS 						; shift 1st left
.1213	26 07		rol $07				rol 	TOS+1
.1215	a5 0c		lda $0c				lda 	temp2	 					; until zero
.1217	05 0d		ora $0d				ora 	temp2+1
.1219	d0 df		bne $11fa			bne 	_MultLoop
.121b	a6 0a		ldx $0a				ldx 	temp1 						; restore X load result
.121d	68		pla				pla
.121e	85 07		sta $07				sta 	TOS+1
.1220	68		pla				pla
.1221	85 06		sta $06				sta 	TOS
.1223	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.1226					Unary1Plus:
.1226	e6 06		inc $06				inc 	TOS
.1228	d0 02		bne $122c			bne 	_U1PSkip
.122a	e6 07		inc $07				inc 	TOS+1
.122c					_U1PSkip:
.122c	4c 00 00	jmp $0000			jmp 	Next
.122f					Unary2Plus:
.122f	18		clc				clc
.1230	a5 06		lda $06				lda 	TOS
.1232	69 02		adc #$02			adc 	#2
.1234	85 06		sta $06				sta 	TOS
.1236	90 02		bcc $123a			bcc 	_U1PSkip
.1238	e6 07		inc $07				inc 	TOS+1
.123a					_U1PSkip:
.123a	4c 00 00	jmp $0000			jmp 	Next
.123d					Unary1Minus:
.123d	a5 06		lda $06				lda 	TOS
.123f	d0 02		bne $1243			bne 	_U1MSkip
.1241	c6 07		dec $07				dec 	TOS+1
.1243					_U1MSkip:
.1243	c6 06		dec $06				dec 	TOS
.1245	4c 00 00	jmp $0000			jmp 	Next
.1248					Unary2Minus:
.1248	38		sec				sec
.1249	a5 06		lda $06				lda 	TOS
.124b	e9 02		sbc #$02			sbc 	#2
.124d	85 06		sta $06				sta 	TOS
.124f	b0 02		bcs $1253			bcs 	_U1PSkip
.1251	c6 07		dec $07				dec 	TOS+1
.1253					_U1PSkip:
.1253	4c 00 00	jmp $0000			jmp 	Next
.1256					Absolute:
.1256	a5 07		lda $07				lda 	TOS+1
.1258	30 03		bmi $125d			bmi 	Negate
.125a	4c 00 00	jmp $0000			jmp 	Next
.125d					Negate:
.125d	38		sec				sec
.125e	a9 00		lda #$00			lda 	#0
.1260	e5 06		sbc $06				sbc 	TOS
.1262	85 06		sta $06				sta 	TOS
.1264	a9 00		lda #$00			lda 	#0
.1266	e5 07		sbc $07				sbc 	TOS+1
.1268	85 07		sta $07				sta 	TOS+1
.126a	4c 00 00	jmp $0000			jmp 	Next
.126d					OneComplement:
.126d	a5 06		lda $06				lda 	TOS
.126f	49 ff		eor #$ff			eor 	#$FF
.1271	85 06		sta $06				sta 	TOS
.1273	a5 07		lda $07				lda 	TOS+1
.1275	49 ff		eor #$ff			eor 	#$FF
.1277	85 07		sta $07				sta 	TOS+1
.1279	4c 00 00	jmp $0000			jmp 	Next
.127c					CheckMinus:
.127c	a5 07		lda $07				lda 	TOS+1
.127e	30 07		bmi $1287			bmi 	UnaryTrue
.1280					UnaryFalse:
.1280	64 06		stz $06				stz 	TOS
.1282	64 07		stz $07				stz 	TOS+1
.1284	4c 00 00	jmp $0000			jmp 	Next
.1287					UnaryTrue:
.1287	a9 ff		lda #$ff			lda 	#$FF
.1289	85 06		sta $06				sta 	TOS
.128b	85 07		sta $07				sta 	TOS+1
.128d	4c 00 00	jmp $0000			jmp 	Next
.1290					CheckZero:
.1290	a5 06		lda $06				lda 	TOS
.1292	05 07		ora $07				ora 	TOS+1
.1294	d0 ea		bne $1280			bne 	UnaryFalse
.1296	80 ef		bra $1287			bra 	UnaryTrue
.1298					SignTOS:
.1298	a5 07		lda $07				lda 	TOS+1
.129a	30 eb		bmi $1287			bmi		UnaryTrue
.129c	05 06		ora $06				ora 	TOS
.129e	f0 e0		beq $1280			beq 	UnaryFalse
.12a0	a9 01		lda #$01			lda 	#1
.12a2	85 06		sta $06				sta 	TOS
.12a4	64 07		stz $07				stz		TOS+1
.12a6	4c 00 00	jmp $0000			jmp 	Next
.12a9					ByteSwap:
.12a9	a5 06		lda $06				lda 	TOS
.12ab	a4 07		ldy $07				ldy 	TOS+1
.12ad	85 07		sta $07				sta 	TOS+1
.12af	84 06		sty $06				sty 	TOS
.12b1	4c 00 00	jmp $0000			jmp 	Next
.12b4					Times16:
.12b4	06 06		asl $06				asl 	TOS
.12b6	26 07		rol $07				rol 	TOS+1
.12b8					Times8:
.12b8	06 06		asl $06				asl 	TOS
.12ba	26 07		rol $07				rol 	TOS+1
.12bc					Times4:
.12bc	06 06		asl $06				asl 	TOS
.12be	26 07		rol $07				rol 	TOS+1
.12c0					Times2:
.12c0	06 06		asl $06				asl 	TOS
.12c2	26 07		rol $07				rol 	TOS+1
.12c4	4c 00 00	jmp $0000			jmp 	Next
.12c7					Divide16:
.12c7	46 07		lsr $07				lsr 	TOS+1
.12c9	66 06		ror $06				ror 	TOS
.12cb					Divide8:
.12cb	46 07		lsr $07				lsr 	TOS+1
.12cd	66 06		ror $06				ror 	TOS
.12cf					Divide4:
.12cf	46 07		lsr $07				lsr 	TOS+1
.12d1	66 06		ror $06				ror 	TOS
.12d3					Divide2:
.12d3	46 07		lsr $07				lsr 	TOS+1
.12d5	66 06		ror $06				ror 	TOS
.12d7	4c 00 00	jmp $0000			jmp 	Next
.12da					Times256:
.12da	a5 06		lda $06				lda 	TOS
.12dc	85 07		sta $07				sta 	TOS+1
.12de	64 06		stz $06				stz 	TOS
.12e0	4c 00 00	jmp $0000			jmp 	Next
.12e3					Divide256:
.12e3	a5 07		lda $07				lda 	TOS+1
.12e5	85 06		sta $06				sta 	TOS
.12e7	64 07		stz $07				stz 	TOS+1
.12e9	4c 00 00	jmp $0000			jmp 	Next
.12ec					RandomNumber:
.12ec	a5 06		lda $06				lda 	TOS
.12ee	48		pha				pha
.12ef	a5 07		lda $07				lda 	TOS+1
.12f1	48		pha				pha
.12f2	a5 15		lda $15				lda 	randomSeed
.12f4	05 16		ora $16				ora 	randomSeed+1
.12f6	d0 08		bne $1300			bne 	_RH_NoInit
.12f8	a9 7c		lda #$7c			lda 	#$7C
.12fa	85 15		sta $15				sta 	randomSeed
.12fc	a9 a1		lda #$a1			lda 	#$A1
.12fe	85 16		sta $16				sta 	randomSeed+1
.1300					_RH_NoInit:
.1300	a5 15		lda $15				lda 	randomSeed
.1302	4a		lsr a		        lsr		a
.1303	26 16		rol $16		        rol 	randomSeed+1
.1305	90 02		bcc $1309	        bcc 	_RH_NoEor
.1307	49 b4		eor #$b4	        eor 	#$B4
.1309					_RH_NoEor:
.1309	85 15		sta $15		        sta 	randomSeed
.130b	45 16		eor $16		        eor 	randomSeed+1
.130d	85 07		sta $07		        sta 	TOS+1
.130f	a5 15		lda $15		        lda 	randomSeed
.1311	85 06		sta $06		        sta 	TOS
.1313	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.1316					Constant0:
.1316	a5 06		lda $06				lda 	TOS
.1318	48		pha				pha
.1319	a5 07		lda $07				lda 	TOS+1
.131b	48		pha				pha
.131c	64 06		stz $06				stz 	TOS
.131e	64 07		stz $07				stz 	TOS+1
.1320	4c 00 00	jmp $0000			jmp 	Next
.1323					ConstantMinus1:
.1323	a5 06		lda $06				lda 	TOS
.1325	48		pha				pha
.1326	a5 07		lda $07				lda 	TOS+1
.1328	48		pha				pha
.1329	a9 ff		lda #$ff			lda 	#$FF
.132b	85 06		sta $06				sta 	TOS
.132d	85 07		sta $07				sta 	TOS+1
.132f	4c 00 00	jmp $0000			jmp 	Next
.1332					C1:
.1332	a0 01		ldy #$01			ldy 	#1
.1334	80 24		bra $135a			bra 	Const1Byte
.1336					C2:
.1336	a0 02		ldy #$02			ldy 	#2
.1338	80 20		bra $135a			bra 	Const1Byte
.133a					C3:
.133a	a0 03		ldy #$03			ldy 	#3
.133c	80 1c		bra $135a			bra 	Const1Byte
.133e					C4:
.133e	a0 04		ldy #$04			ldy 	#4
.1340	80 18		bra $135a			bra 	Const1Byte
.1342					C5:
.1342	a0 05		ldy #$05			ldy 	#5
.1344	80 14		bra $135a			bra 	Const1Byte
.1346					C8:
.1346	a0 08		ldy #$08			ldy 	#8
.1348	80 10		bra $135a			bra 	Const1Byte
.134a					C10:
.134a	a0 0a		ldy #$0a			ldy 	#10
.134c	80 0c		bra $135a			bra 	Const1Byte
.134e					C15:
.134e	a0 0f		ldy #$0f			ldy 	#15
.1350	80 08		bra $135a			bra 	Const1Byte
.1352					C16:
.1352	a0 10		ldy #$10			ldy 	#16
.1354	80 04		bra $135a			bra 	Const1Byte
.1356					C24:
.1356	a0 18		ldy #$18			ldy 	#24
.1358	80 00		bra $135a			bra 	Const1Byte
.135a					Const1Byte:
.135a	a5 06		lda $06				lda 	TOS
.135c	48		pha				pha
.135d	a5 07		lda $07				lda 	TOS+1
.135f	48		pha				pha
.1360	84 06		sty $06				sty 	TOS
.1362	64 07		stz $07				stz 	TOS+1
.1364	4c 00 00	jmp $0000			jmp 	Next
.1367					C32:
.1367	a0 20		ldy #$20			ldy 	#32
.1369	80 ef		bra $135a			bra 	Const1Byte
.136b					C63:
.136b	a0 3f		ldy #$3f			ldy 	#63
.136d	80 eb		bra $135a			bra 	Const1Byte
.136f					C64:
.136f	a0 40		ldy #$40			ldy 	#64
.1371	80 e7		bra $135a			bra 	Const1Byte
.1373					C100:
.1373	a0 64		ldy #$64			ldy 	#100
.1375	80 e3		bra $135a			bra 	Const1Byte
.1377					C127:
.1377	a0 7f		ldy #$7f			ldy 	#127
.1379	80 df		bra $135a			bra 	Const1Byte
.137b					C128:
.137b	a0 80		ldy #$80			ldy 	#128
.137d	80 db		bra $135a			bra 	Const1Byte
.137f					C255:
.137f	a0 ff		ldy #$ff			ldy 	#255
.1381	80 d7		bra $135a			bra 	Const1Byte
.1383					Const2Byte:
.1383	85 06		sta $06				sta 	TOS
.1385	84 07		sty $07				sty 	TOS+1
.1387	4c 00 00	jmp $0000			jmp 	Next
.138a					C256:
.138a	a5 06		lda $06				lda 	TOS
.138c	48		pha				pha
.138d	a5 07		lda $07				lda 	TOS+1
.138f	48		pha				pha
.1390	a9 00		lda #$00			lda 	#(256) & $FF
.1392	a0 01		ldy #$01			ldy 	#(256) >> 8
.1394	80 ed		bra $1383			bra 	Const2Byte
.1396					C512:
.1396	a5 06		lda $06				lda 	TOS
.1398	48		pha				pha
.1399	a5 07		lda $07				lda 	TOS+1
.139b	48		pha				pha
.139c	a9 00		lda #$00			lda 	#(512) & $FF
.139e	a0 02		ldy #$02			ldy 	#(512) >> 8
.13a0	80 e1		bra $1383			bra 	Const2Byte
.13a2					C1024:
.13a2	a5 06		lda $06				lda 	TOS
.13a4	48		pha				pha
.13a5	a5 07		lda $07				lda 	TOS+1
.13a7	48		pha				pha
.13a8	a9 00		lda #$00			lda 	#(1024) & $FF
.13aa	a0 04		ldy #$04			ldy 	#(1024) >> 8
.13ac	80 d5		bra $1383			bra 	Const2Byte
.13ae					C4096:
.13ae	a5 06		lda $06				lda 	TOS
.13b0	48		pha				pha
.13b1	a5 07		lda $07				lda 	TOS+1
.13b3	48		pha				pha
.13b4	a9 00		lda #$00			lda 	#(4096) & $FF
.13b6	a0 10		ldy #$10			ldy 	#(4096) >> 8
.13b8	80 c9		bra $1383			bra 	Const2Byte
.13ba					C32767:
.13ba	a5 06		lda $06				lda 	TOS
.13bc	48		pha				pha
.13bd	a5 07		lda $07				lda 	TOS+1
.13bf	48		pha				pha
.13c0	a9 ff		lda #$ff			lda 	#(32767) & $FF
.13c2	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.13c4	80 bd		bra $1383			bra 	Const2Byte
.13c6					C32768:
.13c6	a5 06		lda $06				lda 	TOS
.13c8	48		pha				pha
.13c9	a5 07		lda $07				lda 	TOS+1
.13cb	48		pha				pha
.13cc	a9 00		lda #$00			lda 	#(32768) & $FF
.13ce	a0 80		ldy #$80			ldy 	#(32768) >> 8
.13d0	80 b1		bra $1383			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.13d2					Drop:
.13d2	68		pla				pla
.13d3	85 07		sta $07				sta 	TOS+1
.13d5	68		pla				pla
.13d6	85 06		sta $06				sta 	TOS
.13d8	4c 00 00	jmp $0000			jmp 	Next
.13db					TestDup:
.13db	a5 06		lda $06				lda 	TOS
.13dd	05 07		ora $07				ora 	TOS+1
.13df	d0 03		bne $13e4			bne 	Dup
.13e1	4c 00 00	jmp $0000			jmp 	Next
.13e4					Dup:
.13e4	a5 06		lda $06				lda 	TOS
.13e6	48		pha				pha
.13e7	a5 07		lda $07				lda 	TOS+1
.13e9	48		pha				pha
.13ea	4c 00 00	jmp $0000			jmp 	Next
.13ed					Swap:
.13ed	86 0a		stx $0a				stx 	temp1
.13ef	7a		ply				ply
.13f0	fa		plx				plx
.13f1	a5 06		lda $06				lda 	TOS
.13f3	48		pha				pha
.13f4	a5 07		lda $07				lda 	TOS+1
.13f6	48		pha				pha
.13f7	86 06		stx $06				stx 	TOS
.13f9	84 07		sty $07				sty 	TOS+1
.13fb	a6 0a		ldx $0a				ldx 	temp1
.13fd	4c 00 00	jmp $0000			jmp 	Next
.1400					Over:
.1400	a5 06		lda $06				lda 	TOS
.1402	48		pha				pha
.1403	a5 07		lda $07				lda 	TOS+1
.1405	48		pha				pha
.1406	86 0a		stx $0a				stx 	temp1
.1408	ba		tsx				tsx
.1409	bd 04 01	lda $0104,x			lda 	stack3low,x
.140c	85 06		sta $06				sta 	TOS
.140e	bd 03 01	lda $0103,x			lda 	stack3High,x
.1411	85 07		sta $07				sta 	TOS+1
.1413	a6 0a		ldx $0a				ldx 	temp1
.1415	4c 00 00	jmp $0000			jmp 	Next
.1418					Nip:
.1418	68		pla				pla
.1419	68		pla				pla
.141a	4c 00 00	jmp $0000			jmp 	Next
.141d					Rot:
.141d	86 0a		stx $0a				stx 	temp1
.141f	ba		tsx				tsx
.1420	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.1423	a8		tay				tay
.1424	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1427	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.142a	a5 06		lda $06				lda 	TOS
.142c	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.142f	84 06		sty $06				sty 	TOS
.1431	bd 03 01	lda $0103,x			lda 	Stack3High,x
.1434	a8		tay				tay
.1435	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1438	9d 03 01	sta $0103,x			sta 	Stack3High,x
.143b	a5 07		lda $07				lda 	TOS+1
.143d	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1440	84 07		sty $07				sty 	TOS+1
.1442	a6 0a		ldx $0a				ldx 	temp1
.1444	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.1447					ByteRead:
.1447	b2 06		lda ($06)			lda 	(TOS)
.1449	85 06		sta $06				sta 	TOS
.144b	64 07		stz $07				stz 	TOS+1
.144d	4c 00 00	jmp $0000			jmp 	Next
.1450					WordRead:
.1450	a0 01		ldy #$01			ldy 	#1
.1452	b1 06		lda ($06),y			lda 	(TOS),y
.1454	a8		tay				tay
.1455	b2 06		lda ($06)			lda 	(TOS)
.1457	85 06		sta $06				sta 	TOS
.1459	84 07		sty $07				sty 	TOS+1
.145b	4c 00 00	jmp $0000			jmp 	Next
.145e					ByteWrite:
.145e	68		pla				pla
.145f	68		pla				pla
.1460	92 06		sta ($06)			sta 	(TOS)
.1462	68		pla				pla
.1463	85 07		sta $07				sta 	TOS+1
.1465	68		pla				pla
.1466	85 06		sta $06				sta 	TOS
.1468	4c 00 00	jmp $0000			jmp 	Next
.146b					WordWrite:
.146b	68		pla				pla
.146c	a0 01		ldy #$01			ldy 	#1
.146e	91 06		sta ($06),y			sta 	(TOS),y
.1470	68		pla				pla
.1471	92 06		sta ($06)			sta 	(TOS)
.1473	68		pla				pla
.1474	85 07		sta $07				sta 	TOS+1
.1476	68		pla				pla
.1477	85 06		sta $06				sta 	TOS
.1479	4c 00 00	jmp $0000			jmp 	Next
.147c					WordAdd:
.147c	7a		ply				ply
.147d	68		pla				pla
.147e	18		clc				clc
.147f	72 06		adc ($06)			adc 	(TOS)
.1481	92 06		sta ($06)			sta 	(TOS)
.1483	98		tya				tya
.1484	a0 01		ldy #$01			ldy 	#1
.1486	71 06		adc ($06),y			adc 	(TOS),y
.1488	91 06		sta ($06),y			sta 	(TOS),y
.148a	68		pla				pla
.148b	85 07		sta $07				sta 	TOS+1
.148d	68		pla				pla
.148e	85 06		sta $06				sta 	TOS
.1490	4c 00 00	jmp $0000			jmp 	Next
.1493					AllocateMemory:
.1493	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1495	48		pha				pha
.1496	a5 07		lda $07				lda 	TOS+1
.1498	48		pha				pha
.1499	a5 08		lda $08				lda 	nextFreeMem 				; copy free mem address to TOS
.149b	85 06		sta $06				sta 	TOS
.149d	a5 09		lda $09				lda 	nextFreeMem+1
.149f	85 07		sta $07				sta 	TOS+1
.14a1	7a		ply				ply 								; advance the free ram pointer
.14a2	68		pla				pla
.14a3	20 4c 16	jsr $164c			jsr 	AdvanceFreeMem
.14a6	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.14a9					ForHandler:
.14a9	e6 05		inc $05				inc 	rsp 						; bump the RSP
.14ab	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.14ad	c0 40		cpy #$40			cpy 	#$40 						; overflow
.14af	f0 18		beq $14c9			beq 	_FHOverflow
.14b1	a5 07		lda $07				lda 	TOS+1
.14b3	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.14b6	a5 06		lda $06				lda 	TOS
.14b8	99 00 07	sta $0700,y			sta 	returnStackLow,y
.14bb	a9 ff		lda #$ff			lda 	#$FF
.14bd	99 80 07	sta $0780,y			sta 	returnStackX,y
.14c0	68		pla				pla
.14c1	85 07		sta $07				sta 	TOS+1
.14c3	68		pla				pla
.14c4	85 06		sta $06				sta 	TOS
.14c6	4c 00 00	jmp $0000			jmp 	Next
.14c9					_FHOverflow:
.14c9	20 32 18	jsr $1832			jsr 	ErrorHandler
>14cc	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>14d4	4b 3f 00
.14d7					NextHandler:
.14d7	da		phx				phx
.14d8	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.14da	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.14dd	c9 ff		cmp #$ff			cmp 	#$FF
.14df	d0 21		bne $1502			bne 	NHNoFor
.14e1	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.14e4	d0 03		bne $14e9			bne 	_NHNoBorrow
.14e6	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.14e9					_NHNoBorrow:
.14e9	de 00 07	dec $0700,x			dec 	returnStackLow,x
.14ec	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.14ef	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.14f2	fa		plx				plx 								; restore X and re-test
.14f3	09 00		ora #$00			ora 	#0
.14f5	f0 05		beq $14fc			beq 	_NHComplete 				; if so then complete, else loop.
.14f7	e8		inx				inx 								; advance to branch
.14f8	e8		inx				inx
.14f9	4c 4c 15	jmp $154c			jmp 	BranchAlways
.14fc					_NHComplete:
.14fc	e8		inx				inx 								; skip over the branch quantity
.14fd	c6 05		dec $05				dec 	rsp 						; drop the indx
.14ff	4c 00 00	jmp $0000			jmp 	Next
.1502					NHNoFor:
.1502	20 32 18	jsr $1832			jsr 	ErrorHandler
>1505	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.150d					GetIndex:
.150d	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.150f	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1512	c9 ff		cmp #$ff			cmp 	#$FF
.1514	d0 ec		bne $1502			bne 	NHNoFor
.1516	a5 06		lda $06				lda 	TOS
.1518	48		pha				pha
.1519	a5 07		lda $07				lda 	TOS+1
.151b	48		pha				pha
.151c	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.151f	38		sec				sec
.1520	e9 01		sbc #$01			sbc 	#1
.1522	85 06		sta $06				sta 	TOS
.1524	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1527	e9 00		sbc #$00			sbc 	#0
.1529	85 07		sta $07				sta 	TOS+1
.152b	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.152e					RepeatHandler:
.152e	4c 00 00	jmp $0000			jmp 	Next
.1531					UntilHandler:
.1531	4c 34 15	jmp $1534			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1534					BranchIfZero:
.1534	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1536	05 07		ora $07				ora 	TOS+1
.1538	f0 0a		beq $1544			beq 	BranchTestSucceeds
.153a					BranchTestFails:
.153a	68		pla				pla
.153b	85 07		sta $07				sta 	TOS+1
.153d	68		pla				pla
.153e	85 06		sta $06				sta 	TOS
.1540	e8		inx				inx 								; skip over the relative branch.
.1541	4c 00 00	jmp $0000			jmp 	Next
.1544					BranchTestSucceeds:
.1544	68		pla				pla
.1545	85 07		sta $07				sta 	TOS+1
.1547	68		pla				pla
.1548	85 06		sta $06				sta 	TOS
.154a					BranchTestSucceedsNoPop:
.154a	e8		inx				inx 								; advance by two, to the offset
.154b	e8		inx				inx
.154c					BranchAlways:
.154c	8a		txa				txa 								; A = Y = position
.154d	a8		tay				tay 								; (IP),Y now points to the branch target
.154e	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1550	aa		tax				tax 								; position back in this line.
.1551	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1554					CallHandler:
.1554	e8		inx				inx									; bump X to the call address.
.1555	e8		inx				inx
.1556	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1558	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.155a	c0 40		cpy #$40			cpy 	#$40 						; overflow
.155c	f0 4b		beq $15a9			beq 	_CHOverflow
.155e	a5 04		lda $04				lda 	IP+1
.1560	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1563	a5 03		lda $03				lda 	IP
.1565	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1568	8a		txa				txa
.1569	99 80 07	sta $0780,y			sta 	returnStackX,y
.156c	8a		txa				txa 								; get the line number into temp1.
.156d	a8		tay				tay
.156e	b1 03		lda ($03),y			lda 	(IP),y
.1570	85 0a		sta $0a				sta 	temp1
.1572	c8		iny				iny
.1573	b1 03		lda ($03),y			lda 	(IP),y
.1575	85 0b		sta $0b				sta 	temp1+1
.1577	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1579	85 03		sta $03				sta 	0+(IP)
.157b	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.157d	85 04		sta $04				sta 	1+(IP)
.157f	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1581	f0 17		beq $159a			beq 	_CHFail
.1583	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1585					_CHSearch:
.1585	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1587	c5 0a		cmp $0a				cmp 	temp1
.1589	f0 2d		beq $15b8			beq 	_CHFoundLSB
.158b					_CHSearchNext:
.158b	18		clc				clc
.158c	a5 03		lda $03				lda 	IP
.158e	72 03		adc ($03)			adc 	(IP)
.1590	85 03		sta $03				sta 	IP
.1592	90 02		bcc $1596			bcc 	_NoCarryAdv
.1594	e6 04		inc $04				inc 	IP+1
.1596					_NoCarryAdv:
.1596	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1598	d0 eb		bne $1585			bne 	_CHSearch
.159a					_CHFail:
.159a	20 32 18	jsr $1832			jsr 	ErrorHandler
>159d	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>15a5	4f 4e 3f 00
.15a9					_CHOverflow:
.15a9	20 32 18	jsr $1832			jsr 	ErrorHandler
>15ac	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>15b4	54 48 3f 00
.15b8					_CHFoundLSB:
.15b8	c8		iny				iny 								; get MSB
.15b9	b1 03		lda ($03),y			lda 	(IP),y
.15bb	88		dey				dey
.15bc	c5 0b		cmp $0b				cmp 	temp1+1 					; matches, if not contineu
.15be	d0 cb		bne $158b			bne 	_CHSearchNext
.15c0	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.15c2	b1 03		lda ($03),y			lda 	(IP),y
.15c4	c9 2f		cmp #$2f			cmp 	#DefineCode & $FF
.15c6	d0 d2		bne $159a			bne 	_CHFail
.15c8	c8		iny				iny
.15c9	b1 03		lda ($03),y			lda 	(IP),y
.15cb	c9 17		cmp #$17			cmp 	#DefineCode >> 8
.15cd	d0 cb		bne $159a			bne 	_CHFail
.15cf	c8		iny				iny
.15d0	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.15d2	18		clc				clc
.15d3	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.15d5	aa		tax				tax
.15d6	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.15d9					ReturnHandler:
.15d9	a4 05		ldy $05				ldy 	rsp 						; get rsp
.15db	30 15		bmi $15f2			bmi 	_RHUnderflow 				; if -ve underflowed
.15dd	c6 05		dec $05				dec 	rsp 						; decrement rsp
.15df	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.15e2	85 04		sta $04				sta 	IP+1
.15e4	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.15e7	85 03		sta $03				sta 	IP
.15e9	b9 80 07	lda $0780,y			lda 	returnStackX,y
.15ec	aa		tax				tax
.15ed	f0 0e		beq $15fd			beq 	_RHInLoop 					; this means you have done :something for ; next
.15ef	4c 00 00	jmp $0000			jmp 	Next
.15f2					_RHUnderflow:
.15f2	20 32 18	jsr $1832			jsr 	ErrorHandler
>15f5	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.15fd					_RHInLoop:
.15fd	20 32 18	jsr $1832			jsr 	ErrorHandler
>1600	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>1608	4e 20 4c 4f 4f 50 3f 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1610					NewHandler:
.1610	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1613	20 1f 16	jsr $161f			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1616	4c 00 00	jmp $0000			jmp 	Next
.1619					ClrHandler:
.1619	20 1f 16	jsr $161f			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.161c	4c 00 00	jmp $0000			jmp 	Next
.161f					ClearVariableSpace:
.161f	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1621	85 05		sta $05				sta 	rsp
.1623	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1625	85 08		sta $08				sta 	0+(nextFreeMem)
.1627	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1629	85 09		sta $09				sta 	1+(nextFreeMem)
.162b	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.162d					_CVSHashClear:
.162d	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.162f	99 40 06	sta $0640,y			sta 	hashTable,y
.1632	88		dey				dey
.1633	10 f8		bpl $162d			bpl 	_CVSHashClear
.1635					_CVSFindEnd:
.1635	18		clc				clc
.1636	a5 08		lda $08				lda 	nextFreeMem
.1638	72 08		adc ($08)			adc 	(nextFreeMem)
.163a	85 08		sta $08				sta 	nextFreeMem
.163c	90 02		bcc $1640			bcc 	_NoCarryAdv
.163e	e6 09		inc $09				inc 	nextFreeMem+1
.1640					_NoCarryAdv:
.1640	b2 08		lda ($08)			lda 	(nextFreeMem)
.1642	d0 f1		bne $1635			bne 	_CVSFindEnd
.1644	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1646	a0 00		ldy #$00			ldy 	#0
.1648	20 4c 16	jsr $164c			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.164b	60		rts				rts 								; free mem pointer pointing to the last zero offset
.164c					AdvanceFreeMem:
.164c	18		clc				clc
.164d	65 08		adc $08				adc 	nextFreeMem
.164f	85 08		sta $08				sta 	nextFreeMem
.1651	98		tya				tya
.1652	65 09		adc $09				adc 	nextFreeMem+1
.1654	85 09		sta $09				sta 	nextFreeMem+1
.1656	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1657					ExitDump:
.1657	ba		tsx				tsx 								; save Data Stack in temp1
.1658	86 0a		stx $0a				stx 	temp1
.165a	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.165d					BreakCmd:
>165d	ff						.byte 	$FF
.165e	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1661					Call6502:
.1661	a5 06		lda $06				lda 	TOS 						; copy call address
.1663	85 0a		sta $0a				sta 	temp1
.1665	a5 07		lda $07				lda 	TOS+1
.1667	85 0b		sta $0b				sta 	temp1+1
.1669	68		pla				pla
.166a	85 07		sta $07				sta 	TOS+1
.166c	68		pla				pla
.166d	85 06		sta $06				sta 	TOS
.166f	20 75 16	jsr $1675			jsr 	_CallTemp1 					; call it
.1672	4c 00 00	jmp $0000			jmp 	Next
.1675					_CallTemp1:
.1675	6c 0a 00	jmp ($000a)			jmp 	(temp1)
.1678					AssertCode:
.1678	a5 06		lda $06				lda 	TOS 						; TOS = 0
.167a	05 07		ora $07				ora 	TOS+1
.167c	f0 09		beq $1687			beq 	_ASFail 					; if zero fail
.167e	68		pla				pla
.167f	85 07		sta $07				sta 	TOS+1
.1681	68		pla				pla
.1682	85 06		sta $06				sta 	TOS
.1684	4c 00 00	jmp $0000			jmp 	Next
.1687					_ASFail:
.1687	20 32 18	jsr $1832			jsr 	ErrorHandler
>168a	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1691					StopCode:
.1691	20 32 18	jsr $1832			jsr 	ErrorHandler
>1694	53 54 4f 50 00					.text 	"STOP",0
.1699					EndProgram:
.1699	4c 2f 18	jmp $182f			jmp 	WarmStart

;******  Return to file: kernel.asm


;******  Processing file: words/system/number.src

.169c					ConvertToInteger:
.169c	64 0e		stz $0e				stz 	temp3 						; reset value
.169e	64 0f		stz $0f				stz 	temp3+1
.16a0	64 0a		stz $0a				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.16a2	a0 00		ldy #$00			ldy 	#0 							; look at first character
.16a4	b1 06		lda ($06),y			lda 	(TOS),y
.16a6	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.16a8	d0 03		bne $16ad			bne 	_CTILoop
.16aa	c6 0a		dec $0a				dec 	temp1
.16ac	c8		iny				iny
.16ad					_CTILoop:
.16ad	b1 06		lda ($06),y			lda 	(TOS),y 					; next digit
.16af	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.16b1	38		sec				sec
.16b2	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.16b4	90 55		bcc $170b			bcc 	_CTIFail 					; out of range.
.16b6	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.16b8	90 0b		bcc $16c5			bcc 	_CTILegal
.16ba	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.16bc	90 4d		bcc $170b			bcc 	_CTIFail
.16be	38		sec				sec
.16bf	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.16c1	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.16c3	b0 46		bcs $170b			bcs 	_CTIFail
.16c5					_CTILegal:
.16c5	85 0b		sta $0b				sta 	temp1+1 					; save digit value.
.16c7	06 0e		asl $0e				asl 	temp3
.16c9	26 0f		rol $0f				rol 	temp3+1
.16cb	a5 0e		lda $0e				lda 	temp3 						; copy x2 into temp2
.16cd	85 0c		sta $0c				sta 	temp2
.16cf	a5 0f		lda $0f				lda 	temp3+1
.16d1	85 0d		sta $0d				sta 	temp2+1
.16d3	06 0e		asl $0e				asl 	temp3
.16d5	26 0f		rol $0f				rol 	temp3+1
.16d7	06 0e		asl $0e				asl 	temp3
.16d9	26 0f		rol $0f				rol 	temp3+1
.16db	24 0a		bit $0a				bit 	temp1 						; hexadecimal
.16dd	10 06		bpl $16e5			bpl 	_CTIDecimal
.16df	06 0e		asl $0e				asl 	temp3
.16e1	26 0f		rol $0f				rol 	temp3+1
.16e3	80 13		bra $16f8			bra 	_CTIAddLoop
.16e5					_CTIDecimal:
.16e5	18		clc				clc 								; x 8 + x 2 = x 10
.16e6	a5 0e		lda $0e				lda 	temp3
.16e8	65 0c		adc $0c				adc 	temp2
.16ea	85 0e		sta $0e				sta 	temp3
.16ec	a5 0f		lda $0f				lda 	temp3+1
.16ee	65 0d		adc $0d				adc 	temp2+1
.16f0	85 0f		sta $0f				sta 	temp3+1
.16f2	a5 0b		lda $0b				lda 	temp1+1 					; check digit 0-9
.16f4	c9 0a		cmp #$0a			cmp 	#10
.16f6	b0 13		bcs $170b			bcs 	_CTIFail
.16f8					_CTIAddLoop:
.16f8	18		clc				clc
.16f9	a5 0e		lda $0e				lda 	temp3
.16fb	65 0b		adc $0b				adc 	temp1+1
.16fd	85 0e		sta $0e				sta 	temp3
.16ff	90 02		bcc $1703			bcc 	_CTINoCarry
.1701	e6 0f		inc $0f				inc 	temp3+1
.1703					_CTINoCarry:
.1703	b1 06		lda ($06),y			lda 	(TOS),y 					; was this the last character
.1705	c8		iny				iny
.1706	0a		asl a				asl 	a
.1707	90 a4		bcc $16ad			bcc 	_CTILoop 					; no, go back.
.1709					_CTIOkay:
.1709	38		sec				sec
.170a	60		rts				rts
.170b					_CTIFail:
.170b	18		clc				clc
.170c	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.170d					NextLine:
.170d	18		clc				clc
.170e	a5 03		lda $03				lda 	IP
.1710	72 03		adc ($03)			adc 	(IP)
.1712	85 03		sta $03				sta 	IP
.1714	90 02		bcc $1718			bcc 	_NoCarryAdv
.1716	e6 04		inc $04				inc 	IP+1
.1718					_NoCarryAdv:
.1718	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.171a	f0 05		beq $1721			beq 	_NLGoEnd
.171c	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.171e	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1721					_NLGoEnd:
.1721	4c 2f 18	jmp $182f			jmp 	WarmStart
.1724					SkipComment:
.1724	e8		inx				inx									; (IP),X points to the length.
.1725	e8		inx				inx
.1726	8a		txa				txa
.1727	a8		tay				tay 								; put into Y
.1728	18		clc				clc
.1729	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.172b	aa		tax				tax 								; put back in X
.172c	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.172f					DefineCode:
.172f	20 32 18	jsr $1832			jsr 	ErrorHandler
>1732	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>173a	4f 4e 3f 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.173e					VarAddressHandler:
.173e	18		clc				clc 								; find variable, error if it doesn't exist.
.173f	20 81 17	jsr $1781			jsr 	VariableFind
.1742	a5 06		lda $06				lda 	TOS
.1744	48		pha				pha
.1745	a5 07		lda $07				lda 	TOS+1
.1747	48		pha				pha
.1748	a5 0a		lda $0a				lda 	temp1 						; the address is the new value
.174a	85 06		sta $06				sta 	TOS
.174c	a5 0b		lda $0b				lda		temp1+1
.174e	85 07		sta $07				sta 	TOS+1
.1750	4c 00 00	jmp $0000			jmp 	Next
.1753					VarReadHandler:
.1753	18		clc				clc 								; find variable, error if it doesn't exist.
.1754	20 81 17	jsr $1781			jsr 	VariableFind
.1757	a5 06		lda $06				lda 	TOS
.1759	48		pha				pha
.175a	a5 07		lda $07				lda 	TOS+1
.175c	48		pha				pha
.175d	b2 0a		lda ($0a)			lda 	(temp1)						; read variable address to TOS
.175f	85 06		sta $06				sta 	TOS
.1761	a0 01		ldy #$01			ldy 	#1
.1763	b1 0a		lda ($0a),y			lda 	(temp1),y
.1765	85 07		sta $07				sta 	TOS+1
.1767	4c 00 00	jmp $0000			jmp 	Next
.176a					VarWriteHandler:
.176a	38		sec				sec 								; find variable, create it if it doesn't exist.
.176b	20 81 17	jsr $1781			jsr 	VariableFind
.176e	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1770	92 0a		sta ($0a)			sta 	(temp1)
.1772	a5 07		lda $07				lda 	TOS+1
.1774	a0 01		ldy #$01			ldy 	#1
.1776	91 0a		sta ($0a),y			sta 	(temp1),y
.1778	68		pla				pla
.1779	85 07		sta $07				sta 	TOS+1
.177b	68		pla				pla
.177c	85 06		sta $06				sta 	TOS
.177e	4c 00 00	jmp $0000			jmp 	Next
.1781					VariableFind:
.1781	08		php				php 								; save autocreate flag.
.1782	e8		inx				inx 								; advance to/over the variable name.
.1783	e8		inx				inx
.1784	8a		txa				txa 								; put in Y
.1785	a8		tay				tay
.1786	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2, putting it the right way round.
.1788	85 0d		sta $0d				sta 	temp2+1
.178a	c8		iny				iny
.178b	b1 03		lda ($03),y			lda 	(IP),y
.178d	85 0c		sta $0c				sta 	temp2
.178f	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1791	b0 0f		bcs $17a2			bcs 	_VFLong
.1793	a5 0d		lda $0d				lda 	temp2+1
.1795	d0 0b		bne $17a2			bne 	_VFLong
.1797	a5 0c		lda $0c				lda 	temp2						; this is the index
.1799	0a		asl a				asl 	a 							; double it
.179a	85 0a		sta $0a				sta 	temp1
.179c	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.179e	85 0b		sta $0b				sta 	temp1+1
.17a0	28		plp				plp 								; throw creation flag, it always exists.
.17a1	60		rts				rts
.17a2					_VFLong:
.17a2	a5 0c		lda $0c				lda 	temp2 						; built a hash table index into temp3/temp4
.17a4	6a		ror a				ror 	a
.17a5	6a		ror a				ror 	a
.17a6	6a		ror a				ror 	a
.17a7	6a		ror a				ror 	a
.17a8	45 0c		eor $0c				eor 	temp2
.17aa	45 0d		eor $0d				eor 	temp2+1
.17ac	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.17ae	0a		asl a				asl 	a
.17af	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.17b1	85 0a		sta $0a				sta 	temp1
.17b3	85 0e		sta $0e				sta 	temp3
.17b5	a9 06		lda #$06			lda 	#hashTable >> 8
.17b7	85 0b		sta $0b				sta 	temp1+1
.17b9	85 0f		sta $0f				sta 	temp3+1
.17bb					_VFSearch:
.17bb	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.17bd	b1 0a		lda ($0a),y			lda 	(temp1),y
.17bf	f0 23		beq $17e4			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.17c1	a8		tay				tay 								; follow the link through.
.17c2	b2 0a		lda ($0a)			lda 	(temp1)
.17c4	85 0a		sta $0a				sta 	temp1
.17c6	84 0b		sty $0b				sty 	temp1+1
.17c8	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.17ca	b1 0a		lda ($0a),y			lda 	(temp1),y
.17cc	c5 0c		cmp $0c				cmp 	temp2
.17ce	d0 eb		bne $17bb			bne 	_VFSearch 					; if it doesn't, follow the next link.
.17d0	c8		iny				iny 								; same for 2nd byte of name
.17d1	b1 0a		lda ($0a),y			lda 	(temp1),y
.17d3	c5 0d		cmp $0d				cmp 	temp2+1
.17d5	d0 e4		bne $17bb			bne 	_VFSearch
.17d7	18		clc				clc
.17d8	a5 0a		lda $0a				lda 	temp1 						; make temp1 point to the data at offset 2
.17da	69 02		adc #$02			adc 	#2
.17dc	85 0a		sta $0a				sta 	temp1
.17de	90 02		bcc $17e2			bcc 	_VFNoPage1
.17e0	e6 0b		inc $0b				inc 	temp1+1
.17e2					_VFNoPage1:
.17e2	28		plp				plp 								; don't need to worry about creation flag
.17e3	60		rts				rts
.17e4					_VFNotFound:
.17e4	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.17e5	b0 0d		bcs $17f4			bcs 	_VFCreate
.17e7	20 32 18	jsr $1832			jsr 	ErrorHandler
>17ea	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>17f2	3f 00
.17f4					_VFCreate:
.17f4	a0 01		ldy #$01			ldy 	#1
.17f6	b2 0e		lda ($0e)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.17f8	92 08		sta ($08)			sta 	(nextFreeMem)
.17fa	b1 0e		lda ($0e),y			lda 	(temp3),y
.17fc	91 08		sta ($08),y			sta 	(nextFreeMem),y
.17fe	c8		iny				iny
.17ff	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1801	91 08		sta ($08),y			sta 	(nextFreeMem),y
.1803	c8		iny				iny
.1804	91 08		sta ($08),y			sta 	(nextFreeMem),y
.1806	c8		iny				iny
.1807	a5 0c		lda $0c				lda 	temp2 						; copy the name out
.1809	91 08		sta ($08),y			sta 	(nextFreeMem),y
.180b	c8		iny				iny
.180c	a5 0d		lda $0d				lda 	temp2+1
.180e	91 08		sta ($08),y			sta 	(nextFreeMem),y
.1810	a0 01		ldy #$01			ldy 	#1
.1812	a5 08		lda $08				lda 	nextFreeMem 				; update the head link
.1814	92 0e		sta ($0e)			sta 	(temp3)
.1816	a5 09		lda $09				lda 	nextFreeMem+1
.1818	91 0e		sta ($0e),y			sta 	(temp3),y
.181a	18		clc				clc
.181b	a5 08		lda $08				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.181d	69 02		adc #$02			adc 	#2
.181f	85 0a		sta $0a				sta 	temp1
.1821	a5 09		lda $09				lda 	nextFreeMem+1
.1823	69 00		adc #$00			adc 	#0
.1825	85 0b		sta $0b				sta 	temp1+1
.1827	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1829	a0 00		ldy #$00			ldy 	#0
.182b	20 4c 16	jsr $164c			jsr 	AdvanceFreeMem
.182e	60		rts				rts

;******  Return to file: kernel.asm

.182f					WarmStart:
>182f	ff						.byte 	$FF
.1830	a2 00		ldx #$00			ldx 	#$00
.1832					ErrorHandler:
>1832	ff						.byte 	$FF
.1833	a2 5e		ldx #$5e			ldx 	#$5E
.1835					Dictionary:

;******  Processing file: generated/dictionary.inc

>1835	05					.byte	_end1-*
>1836	00					.byte	$00
>1837	6b 14					.word	WordWrite
>1839	a1					.byte	$a1
.183a					_end1:
>183a	0e					.byte	_end2-*
>183b	42					.byte	$42
>183c	6a 17					.word	VarWriteHandler
>183e	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1846	45 d2
.1848					_end2:
>1848	0e					.byte	_end3-*
>1849	42					.byte	$42
>184a	3e 17					.word	VarAddressHandler
>184c	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1854	45 d2
.1856					_end3:
>1856	0d					.byte	_end4-*
>1857	c0					.byte	$c0
>1858	34 15					.word	BranchIfZero
>185a	24 24 30 42 52 41 4e 43			.byte	$24,$24,$30,$42,$52,$41,$4e,$43,$c8
>1862	c8
.1863					_end4:
>1863	0e					.byte	_end5-*
>1864	42					.byte	$42
>1865	53 17					.word	VarReadHandler
>1867	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>186f	45 d2
.1871					_end5:
>1871	0c					.byte	_end6-*
>1872	c0					.byte	$c0
>1873	4a 15					.word	BranchTestSucceedsNoPop
>1875	24 24 42 52 41 4e 43 c8			.byte	$24,$24,$42,$52,$41,$4e,$43,$c8
.187d					_end6:
>187d	0a					.byte	_end7-*
>187e	42					.byte	$42
>187f	54 15					.word	CallHandler
>1881	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1887					_end7:
>1887	0d					.byte	_end8-*
>1888	43					.byte	$43
>1889	24 17					.word	SkipComment
>188b	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1893	d4
.1894					_end8:
>1894	0c					.byte	_end9-*
>1895	43					.byte	$43
>1896	2f 17					.word	DefineCode
>1898	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.18a0					_end9:
>18a0	0d					.byte	_end10-*
>18a1	42					.byte	$42
>18a2	21 10					.word	Literal2Byte
>18a4	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>18ac	cc
.18ad					_end10:
>18ad	0e					.byte	_end11-*
>18ae	80					.byte	$80
>18af	0d 17					.word	NextLine
>18b1	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>18b9	4e c5
.18bb					_end11:
>18bb	0c					.byte	_end12-*
>18bc	43					.byte	$43
>18bd	37 10					.word	LiteralString
>18bf	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.18c7					_end12:
>18c7	05					.byte	_end13-*
>18c8	00					.byte	$00
>18c9	e7 11					.word	Multiply16x16
>18cb	aa					.byte	$aa
.18cc					_end13:
>18cc	05					.byte	_end14-*
>18cd	00					.byte	$00
>18ce	54 10					.word	Add
>18d0	ab					.byte	$ab
.18d1					_end14:
>18d1	06					.byte	_end15-*
>18d2	00					.byte	$00
>18d3	7c 14					.word	WordAdd
>18d5	2b a1					.byte	$2b,$a1
.18d7					_end15:
>18d7	05					.byte	_end16-*
>18d8	00					.byte	$00
>18d9	63 10					.word	Subtract
>18db	ad					.byte	$ad
.18dc					_end16:
>18dc	06					.byte	_end17-*
>18dd	00					.byte	$00
>18de	23 13					.word	ConstantMinus1
>18e0	2d b1					.byte	$2d,$b1
.18e2					_end17:
>18e2	05					.byte	_end18-*
>18e3	00					.byte	$00
>18e4	38 11					.word	Divide16x16
>18e6	af					.byte	$af
.18e7					_end18:
>18e7	05					.byte	_end19-*
>18e8	00					.byte	$00
>18e9	16 13					.word	Constant0
>18eb	b0					.byte	$b0
.18ec					_end19:
>18ec	06					.byte	_end20-*
>18ed	00					.byte	$00
>18ee	7c 12					.word	CheckMinus
>18f0	30 bc					.byte	$30,$bc
.18f2					_end20:
>18f2	06					.byte	_end21-*
>18f3	00					.byte	$00
>18f4	90 12					.word	CheckZero
>18f6	30 bd					.byte	$30,$bd
.18f8					_end21:
>18f8	05					.byte	_end22-*
>18f9	00					.byte	$00
>18fa	32 13					.word	C1
>18fc	b1					.byte	$b1
.18fd					_end22:
>18fd	06					.byte	_end23-*
>18fe	00					.byte	$00
>18ff	26 12					.word	Unary1Plus
>1901	31 ab					.byte	$31,$ab
.1903					_end23:
>1903	06					.byte	_end24-*
>1904	00					.byte	$00
>1905	3d 12					.word	Unary1Minus
>1907	31 ad					.byte	$31,$ad
.1909					_end24:
>1909	06					.byte	_end25-*
>190a	00					.byte	$00
>190b	4a 13					.word	C10
>190d	31 b0					.byte	$31,$b0
.190f					_end25:
>190f	07					.byte	_end26-*
>1910	00					.byte	$00
>1911	73 13					.word	C100
>1913	31 30 b0				.byte	$31,$30,$b0
.1916					_end26:
>1916	08					.byte	_end27-*
>1917	00					.byte	$00
>1918	a2 13					.word	C1024
>191a	31 30 32 b4				.byte	$31,$30,$32,$b4
.191e					_end27:
>191e	07					.byte	_end28-*
>191f	00					.byte	$00
>1920	77 13					.word	C127
>1922	31 32 b7				.byte	$31,$32,$b7
.1925					_end28:
>1925	07					.byte	_end29-*
>1926	00					.byte	$00
>1927	7b 13					.word	C128
>1929	31 32 b8				.byte	$31,$32,$b8
.192c					_end29:
>192c	06					.byte	_end30-*
>192d	00					.byte	$00
>192e	4e 13					.word	C15
>1930	31 b5					.byte	$31,$b5
.1932					_end30:
>1932	06					.byte	_end31-*
>1933	00					.byte	$00
>1934	52 13					.word	C16
>1936	31 b6					.byte	$31,$b6
.1938					_end31:
>1938	07					.byte	_end32-*
>1939	00					.byte	$00
>193a	b4 12					.word	Times16
>193c	31 36 aa				.byte	$31,$36,$aa
.193f					_end32:
>193f	07					.byte	_end33-*
>1940	00					.byte	$00
>1941	c7 12					.word	Divide16
>1943	31 36 af				.byte	$31,$36,$af
.1946					_end33:
>1946	05					.byte	_end34-*
>1947	00					.byte	$00
>1948	36 13					.word	C2
>194a	b2					.byte	$b2
.194b					_end34:
>194b	06					.byte	_end35-*
>194c	00					.byte	$00
>194d	c0 12					.word	Times2
>194f	32 aa					.byte	$32,$aa
.1951					_end35:
>1951	06					.byte	_end36-*
>1952	00					.byte	$00
>1953	2f 12					.word	Unary2Plus
>1955	32 ab					.byte	$32,$ab
.1957					_end36:
>1957	06					.byte	_end37-*
>1958	00					.byte	$00
>1959	48 12					.word	Unary2Minus
>195b	32 ad					.byte	$32,$ad
.195d					_end37:
>195d	06					.byte	_end38-*
>195e	00					.byte	$00
>195f	d3 12					.word	Divide2
>1961	32 af					.byte	$32,$af
.1963					_end38:
>1963	06					.byte	_end39-*
>1964	00					.byte	$00
>1965	56 13					.word	C24
>1967	32 b4					.byte	$32,$b4
.1969					_end39:
>1969	07					.byte	_end40-*
>196a	00					.byte	$00
>196b	7f 13					.word	C255
>196d	32 35 b5				.byte	$32,$35,$b5
.1970					_end40:
>1970	07					.byte	_end41-*
>1971	00					.byte	$00
>1972	8a 13					.word	C256
>1974	32 35 b6				.byte	$32,$35,$b6
.1977					_end41:
>1977	08					.byte	_end42-*
>1978	00					.byte	$00
>1979	da 12					.word	Times256
>197b	32 35 36 aa				.byte	$32,$35,$36,$aa
.197f					_end42:
>197f	08					.byte	_end43-*
>1980	00					.byte	$00
>1981	e3 12					.word	Divide256
>1983	32 35 36 af				.byte	$32,$35,$36,$af
.1987					_end43:
>1987	05					.byte	_end44-*
>1988	00					.byte	$00
>1989	3a 13					.word	C3
>198b	b3					.byte	$b3
.198c					_end44:
>198c	06					.byte	_end45-*
>198d	00					.byte	$00
>198e	67 13					.word	C32
>1990	33 b2					.byte	$33,$b2
.1992					_end45:
>1992	09					.byte	_end46-*
>1993	00					.byte	$00
>1994	ba 13					.word	C32767
>1996	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.199b					_end46:
>199b	09					.byte	_end47-*
>199c	00					.byte	$00
>199d	c6 13					.word	C32768
>199f	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.19a4					_end47:
>19a4	05					.byte	_end48-*
>19a5	00					.byte	$00
>19a6	3e 13					.word	C4
>19a8	b4					.byte	$b4
.19a9					_end48:
>19a9	06					.byte	_end49-*
>19aa	00					.byte	$00
>19ab	bc 12					.word	Times4
>19ad	34 aa					.byte	$34,$aa
.19af					_end49:
>19af	06					.byte	_end50-*
>19b0	00					.byte	$00
>19b1	cf 12					.word	Divide4
>19b3	34 af					.byte	$34,$af
.19b5					_end50:
>19b5	08					.byte	_end51-*
>19b6	00					.byte	$00
>19b7	ae 13					.word	C4096
>19b9	34 30 39 b6				.byte	$34,$30,$39,$b6
.19bd					_end51:
>19bd	05					.byte	_end52-*
>19be	00					.byte	$00
>19bf	42 13					.word	C5
>19c1	b5					.byte	$b5
.19c2					_end52:
>19c2	07					.byte	_end53-*
>19c3	00					.byte	$00
>19c4	96 13					.word	C512
>19c6	35 31 b2				.byte	$35,$31,$b2
.19c9					_end53:
>19c9	06					.byte	_end54-*
>19ca	00					.byte	$00
>19cb	6b 13					.word	C63
>19cd	36 b3					.byte	$36,$b3
.19cf					_end54:
>19cf	06					.byte	_end55-*
>19d0	00					.byte	$00
>19d1	6f 13					.word	C64
>19d3	36 b4					.byte	$36,$b4
.19d5					_end55:
>19d5	05					.byte	_end56-*
>19d6	00					.byte	$00
>19d7	46 13					.word	C8
>19d9	b8					.byte	$b8
.19da					_end56:
>19da	06					.byte	_end57-*
>19db	00					.byte	$00
>19dc	b8 12					.word	Times8
>19de	38 aa					.byte	$38,$aa
.19e0					_end57:
>19e0	06					.byte	_end58-*
>19e1	00					.byte	$00
>19e2	cb 12					.word	Divide8
>19e4	38 af					.byte	$38,$af
.19e6					_end58:
>19e6	05					.byte	_end59-*
>19e7	40					.byte	$40
>19e8	d9 15					.word	ReturnHandler
>19ea	bb					.byte	$bb
.19eb					_end59:
>19eb	05					.byte	_end60-*
>19ec	00					.byte	$00
>19ed	d4 10					.word	CheckLess
>19ef	bc					.byte	$bc
.19f0					_end60:
>19f0	06					.byte	_end61-*
>19f1	00					.byte	$00
>19f2	ed 10					.word	CheckLessEq
>19f4	3c bd					.byte	$3c,$bd
.19f6					_end61:
>19f6	06					.byte	_end62-*
>19f7	00					.byte	$00
>19f8	9d 10					.word	CheckNotEqual
>19fa	3c be					.byte	$3c,$be
.19fc					_end62:
>19fc	05					.byte	_end63-*
>19fd	00					.byte	$00
>19fe	a0 10					.word	CheckEqual
>1a00	bd					.byte	$bd
.1a01					_end63:
>1a01	05					.byte	_end64-*
>1a02	00					.byte	$00
>1a03	f0 10					.word	CheckGreater
>1a05	be					.byte	$be
.1a06					_end64:
>1a06	06					.byte	_end65-*
>1a07	00					.byte	$00
>1a08	d1 10					.word	CheckGreaterEq
>1a0a	3e bd					.byte	$3e,$bd
.1a0c					_end65:
>1a0c	08					.byte	_end66-*
>1a0d	00					.byte	$00
>1a0e	db 13					.word	TestDup
>1a10	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.1a14					_end66:
>1a14	05					.byte	_end67-*
>1a15	00					.byte	$00
>1a16	50 14					.word	WordRead
>1a18	c0					.byte	$c0
.1a19					_end67:
>1a19	07					.byte	_end68-*
>1a1a	00					.byte	$00
>1a1b	56 12					.word	Absolute
>1a1d	41 42 d3				.byte	$41,$42,$d3
.1a20					_end68:
>1a20	09					.byte	_end69-*
>1a21	00					.byte	$00
>1a22	93 14					.word	AllocateMemory
>1a24	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.1a29					_end69:
>1a29	07					.byte	_end70-*
>1a2a	00					.byte	$00
>1a2b	76 10					.word	And
>1a2d	41 4e c4				.byte	$41,$4e,$c4
.1a30					_end70:
>1a30	0a					.byte	_end71-*
>1a31	00					.byte	$00
>1a32	78 16					.word	AssertCode
>1a34	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.1a3a					_end71:
>1a3a	09					.byte	_end72-*
>1a3b	00					.byte	$00
>1a3c	a9 12					.word	ByteSwap
>1a3e	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.1a43					_end72:
>1a43	06					.byte	_end73-*
>1a44	00					.byte	$00
>1a45	5e 14					.word	ByteWrite
>1a47	43 a1					.byte	$43,$a1
.1a49					_end73:
>1a49	06					.byte	_end74-*
>1a4a	00					.byte	$00
>1a4b	47 14					.word	ByteRead
>1a4d	43 c0					.byte	$43,$c0
.1a4f					_end74:
>1a4f	07					.byte	_end75-*
>1a50	00					.byte	$00
>1a51	19 16					.word	ClrHandler
>1a53	43 4c d2				.byte	$43,$4c,$d2
.1a56					_end75:
>1a56	08					.byte	_end76-*
>1a57	00					.byte	$00
>1a58	d2 13					.word	Drop
>1a5a	44 52 4f d0				.byte	$44,$52,$4f,$d0
.1a5e					_end76:
>1a5e	07					.byte	_end77-*
>1a5f	00					.byte	$00
>1a60	e4 13					.word	Dup
>1a62	44 55 d0				.byte	$44,$55,$d0
.1a65					_end77:
>1a65	07					.byte	_end78-*
>1a66	00					.byte	$00
>1a67	99 16					.word	EndProgram
>1a69	45 4e c4				.byte	$45,$4e,$c4
.1a6c					_end78:
>1a6c	07					.byte	_end79-*
>1a6d	00					.byte	$00
>1a6e	a9 14					.word	ForHandler
>1a70	46 4f d2				.byte	$46,$4f,$d2
.1a73					_end79:
>1a73	09					.byte	_end80-*
>1a74	00					.byte	$00
>1a75	0d 15					.word	GetIndex
>1a77	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.1a7c					_end80:
>1a7c	07					.byte	_end81-*
>1a7d	00					.byte	$00
>1a7e	0d 11					.word	Maximum
>1a80	4d 41 d8				.byte	$4d,$41,$d8
.1a83					_end81:
>1a83	07					.byte	_end82-*
>1a84	00					.byte	$00
>1a85	09 11					.word	Minimum
>1a87	4d 49 ce				.byte	$4d,$49,$ce
.1a8a					_end82:
>1a8a	07					.byte	_end83-*
>1a8b	00					.byte	$00
>1a8c	49 11					.word	Modulus16x16
>1a8e	4d 4f c4				.byte	$4d,$4f,$c4
.1a91					_end83:
>1a91	0a					.byte	_end84-*
>1a92	00					.byte	$00
>1a93	5d 12					.word	Negate
>1a95	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.1a9b					_end84:
>1a9b	07					.byte	_end85-*
>1a9c	00					.byte	$00
>1a9d	10 16					.word	NewHandler
>1a9f	4e 45 d7				.byte	$4e,$45,$d7
.1aa2					_end85:
>1aa2	08					.byte	_end86-*
>1aa3	01					.byte	$01
>1aa4	d7 14					.word	NextHandler
>1aa6	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.1aaa					_end86:
>1aaa	07					.byte	_end87-*
>1aab	00					.byte	$00
>1aac	18 14					.word	Nip
>1aae	4e 49 d0				.byte	$4e,$49,$d0
.1ab1					_end87:
>1ab1	07					.byte	_end88-*
>1ab2	00					.byte	$00
>1ab3	6d 12					.word	OneComplement
>1ab5	4e 4f d4				.byte	$4e,$4f,$d4
.1ab8					_end88:
>1ab8	06					.byte	_end89-*
>1ab9	00					.byte	$00
>1aba	90 10					.word	LogOr
>1abc	4f d2					.byte	$4f,$d2
.1abe					_end89:
>1abe	08					.byte	_end90-*
>1abf	00					.byte	$00
>1ac0	00 14					.word	Over
>1ac2	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.1ac6					_end90:
>1ac6	0a					.byte	_end91-*
>1ac7	00					.byte	$00
>1ac8	2e 15					.word	RepeatHandler
>1aca	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.1ad0					_end91:
>1ad0	07					.byte	_end92-*
>1ad1	00					.byte	$00
>1ad2	ec 12					.word	RandomNumber
>1ad4	52 4e c4				.byte	$52,$4e,$c4
.1ad7					_end92:
>1ad7	07					.byte	_end93-*
>1ad8	00					.byte	$00
>1ad9	1d 14					.word	Rot
>1adb	52 4f d4				.byte	$52,$4f,$d4
.1ade					_end93:
>1ade	07					.byte	_end94-*
>1adf	00					.byte	$00
>1ae0	98 12					.word	SignTOS
>1ae2	53 47 ce				.byte	$53,$47,$ce
.1ae5					_end94:
>1ae5	08					.byte	_end95-*
>1ae6	00					.byte	$00
>1ae7	91 16					.word	StopCode
>1ae9	53 54 4f d0				.byte	$53,$54,$4f,$d0
.1aed					_end95:
>1aed	08					.byte	_end96-*
>1aee	00					.byte	$00
>1aef	ed 13					.word	Swap
>1af1	53 57 41 d0				.byte	$53,$57,$41,$d0
.1af5					_end96:
>1af5	07					.byte	_end97-*
>1af6	00					.byte	$00
>1af7	61 16					.word	Call6502
>1af9	53 59 d3				.byte	$53,$59,$d3
.1afc					_end97:
>1afc	09					.byte	_end98-*
>1afd	01					.byte	$01
>1afe	31 15					.word	UntilHandler
>1b00	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.1b05					_end98:
>1b05	0a					.byte	_end99-*
>1b06	40					.byte	$40
>1b07	5d 16					.word	BreakCmd
>1b09	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.1b0f					_end99:
>1b0f	09					.byte	_end100-*
>1b10	00					.byte	$00
>1b11	57 16					.word	ExitDump
>1b13	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.1b18					_end100:
>1b18	07					.byte	_end101-*
>1b19	00					.byte	$00
>1b1a	83 10					.word	Xor
>1b1c	58 4f d2				.byte	$58,$4f,$d2
.1b1f					_end101:
>1b1f	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
