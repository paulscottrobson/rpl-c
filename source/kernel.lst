
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Wed Jan 15 07:45:09 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 31 11	jsr $1131			jsr 	ExternInitialise
.1006	a9 43		lda #$43			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 21 12	jsr $1221			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	86 10		stx $10				stx 	temp1
.100f	a2 80		ldx #$80			ldx 	#NumberStackBase
.1011	9a		txs				txs
.1012	a6 10		ldx $10				ldx 	temp1
.1014					WarmStart:
.1014	a9 03		lda #$03			lda 	#COL_Yellow
.1016	20 68 11	jsr $1168			jsr 	ExternColour
.1019	20 8b 11	jsr $118b			jsr 	ExternInput
.101c	a9 06		lda #$06			lda 	#COL_Cyan
.101e	20 68 11	jsr $1168			jsr 	ExternColour
.1021	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.1023	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.1025	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.1028	a9 10		lda #$10			lda 	#textBuffer & $FF
.102a	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.102c	20 8d 16	jsr $168d			jsr 	EncodeProgram
.102f	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.1032	0d 12 09	ora $0912			ora 	encodeBuffer+2
.1035	d0 07		bne $103e			bne 	LineEditor 					; if so, do the line editing code.
.1037	a9 ff		lda #$ff			lda 	#$FF
.1039	85 05		sta $05				sta 	rsp
.103b	4c 00 00	jmp $0000			jmp 	NextCode
.103e					LineEditor:
.103e	20 42 1e	jsr $1e42			jsr 	EditProgram
.1041	80 ca		bra $100d			bra 	WarmStartBlankStack
.1043					BootMsg:
>1043	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>104b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>105b	2a 0d 0d
>105e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1066	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1076	30 32 30 0d 0d
>107b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1082	5b 32 30 2d 30 31 2d 31			.text	"[20-01-15 07:45]"
>108a	35 20 30 37 3a 34 35 5d

;******  Return to file: kernel.asm

>1092	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/core.src

.1095					InitialiseCoreCode:
.1095	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1097	85 00		sta $00				sta 	NextCode
.1099	85 01		sta $01				sta 	NextCode+1
.109b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.109d	85 02		sta $02				sta 	NextCode+2
.109f	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.10a1	84 04		sty $04				sty 	NextCode+4
.10a3	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.10a5	60		rts				rts								; (2 INX skip offset and line#)
.10a6					Literal2Byte:
.10a6	a5 06		lda $06				lda 	TOS
.10a8	48		pha				pha
.10a9	a5 07		lda $07				lda 	TOS+1
.10ab	48		pha				pha
.10ac	e8		inx				inx  							; point X to the word
.10ad	e8		inx				inx
.10ae	8a		txa				txa 							; copy into Y
.10af	a8		tay				tay
.10b0	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.10b2	85 06		sta $06				sta 	TOS
.10b4	c8		iny				iny 							; read and push the MSB
.10b5	b1 03		lda ($03),y			lda 	(IP),y
.10b7	85 07		sta $07				sta 	TOS+1
.10b9	4c 00 00	jmp $0000			jmp 	NextCode
.10bc					Literal2ByteDecode:
.10bc	a9 06		lda #$06			lda 	#CTH_Keyword
.10be	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.10c1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c3	aa		tax				tax
.10c4	c8		iny				iny
.10c5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c7	a8		tay				tay
.10c8	8a		txa				txa
.10c9	38		sec				sec 							; output signed
.10ca	20 25 1e	jsr $1e25			jsr 	DecodeYAToBuffer
.10cd	60		rts				rts
.10ce					LiteralString:
.10ce	a5 06		lda $06				lda 	TOS
.10d0	48		pha				pha
.10d1	a5 07		lda $07				lda 	TOS+1
.10d3	48		pha				pha
.10d4	e8		inx				inx
.10d5	e8		inx				inx 							; skip over current word
.10d6	8a		txa				txa 							; add to IP + 1 to give string address
.10d7	a8		tay				tay 							; put in Y
.10d8	38		sec				sec 							; make that TOS
.10d9	65 03		adc $03				adc 	IP
.10db	85 06		sta $06				sta 	TOS
.10dd	a5 04		lda $04				lda 	IP+1
.10df	69 00		adc #$00			adc 	#0
.10e1	85 07		sta $07				sta 	TOS+1
.10e3	8a		txa				txa 							; add data length to X
.10e4	18		clc				clc
.10e5	71 03		adc ($03),y			adc 	(IP),y
.10e7	aa		tax				tax
.10e8	ca		dex				dex
.10e9	ca		dex				dex
.10ea	4c 00 00	jmp $0000			jmp 	NextCode
.10ed					LiteralStringDecoder:
.10ed	a9 05		lda #$05			lda 	#CTH_String
.10ef	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.10f2	a9 22		lda #$22			lda 	#'"'
.10f4	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.10f7	20 0c 1e	jsr $1e0c			jsr 	DecodeOutputData
.10fa	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.10fd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: code/error.asm

.10fe					ErrorHandler:
.10fe	68		pla				pla 								; get message address
.10ff	7a		ply				ply
.1100	1a		inc a				inc 	a
.1101	d0 01		bne $1104			bne 	_EHNoCarry
.1103	c8		iny				iny
.1104					_EHNoCarry:
.1104	20 21 12	jsr $1221			jsr 	EXPrintString
.1107	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.1109	b1 03		lda ($03),y			lda 	(IP),y
.110b	c8		iny				iny
.110c	11 03		ora ($03),y			ora 	(IP),y
.110e	f0 14		beq $1124			beq 	_EHNoLine
.1110	a9 2c		lda #$2c			lda 	#_EHMsg2 & $FF 				; print " at "
.1112	a0 11		ldy #$11			ldy 	#_EHMsg2 >> 8
.1114	20 21 12	jsr $1221			jsr 	EXPrintString
.1117	a0 02		ldy #$02			ldy 	#2 							; print line number
.1119	b1 03		lda ($03),y			lda 	(IP),y
.111b	48		pha				pha
.111c	88		dey				dey
.111d	b1 03		lda ($03),y			lda 	(IP),y
.111f	7a		ply				ply
.1120	18		clc				clc
.1121	20 6e 21	jsr $216e			jsr 	PrintYA
.1124					_EHNoLine:
.1124	a9 0d		lda #$0d			lda 	#13
.1126	20 5e 11	jsr $115e			jsr 	ExternPrint
.1129	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack			; S is indeterminate
>112c	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/export.asm


;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.1131					ExternInitialise:
.1131	a9 90		lda #$90			lda 	#144 						; set colour
.1133	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1136	a9 01		lda #$01			lda 	#$01
.1138	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.113b	a9 0e		lda #$0e			lda 	#14							; lower case
.113d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1140	a9 93		lda #$93			lda 	#147 						; clear screen
.1142	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1145	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.1147	4c 68 11	jmp $1168			jmp 	ExternColour
.114a					ExternCheckBreak:
.114a	da		phx				phx 								; make sure we keep XY
.114b	5a		phy				phy
.114c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.114f	f0 03		beq $1154			beq		_ECBExit 					; stopped
.1151	7a		ply				ply 								; restore and exit.
.1152	fa		plx				plx
.1153	60		rts				rts
.1154					_ECBExit:
.1154	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1157	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.115e					ExternPrint:
.115e	48		pha				pha
.115f	da		phx				phx
.1160	5a		phy				phy
.1161	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1164	7a		ply				ply
.1165	fa		plx				plx
.1166	68		pla				pla
.1167	60		rts				rts
.1168					ExternColour:
.1168	48		pha				pha
.1169	da		phx				phx
.116a	48		pha				pha
.116b	29 08		and #$08			and 	#8
.116d	0a		asl a				asl 	a
.116e	0a		asl a				asl 	a
.116f	0a		asl a				asl 	a
.1170	0a		asl a				asl 	a
.1171	49 92		eor #$92			eor 	#$92
.1173	20 5e 11	jsr $115e			jsr 	ExternPrint
.1176	68		pla				pla
.1177	29 07		and #$07			and 	#7
.1179	aa		tax				tax
.117a	bd 83 11	lda $1183,x			lda 	_ECTable,x
.117d	20 5e 11	jsr $115e			jsr 	ExternPrint
.1180	fa		plx				plx
.1181	68		pla				pla
.1182	60		rts				rts
.1183					_ECTable:
>1183	90						.byte 	144
>1184	1c						.byte 	28
>1185	1e						.byte 	30
>1186	9e						.byte 	158
>1187	1f						.byte 	31
>1188	9c						.byte 	156
>1189	9f						.byte 	159
>118a	05						.byte 	5
.118b					ExternInput:
.118b	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.118d	85 14		sta $14				sta 	temp3
.118f	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1191	85 15		sta $15				sta 	temp3+1
.1193	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1196	29 7f		and #$7f			and 	#$7F
.1198	c9 0d		cmp #$0d			cmp 	#13
.119a	f0 0a		beq $11a6			beq 	_EIExit
.119c	92 14		sta ($14)			sta 	(temp3)
.119e	e6 14		inc $14				inc 	temp3
.11a0	d0 f1		bne $1193			bne 	_EIRead
.11a2	e6 15		inc $15				inc 	temp3+1
.11a4	80 ed		bra $1193			bra 	_EIRead
.11a6	a9 00		lda #$00	_EIExit:lda 	#0
.11a8	92 14		sta ($14)			sta 	(temp3)
.11aa	a9 0d		lda #$0d			lda 	#13
.11ac	20 5e 11	jsr $115e			jsr 	ExternPrint
.11af	60		rts				rts
.11b0					ExternSave:
.11b0	da		phx				phx
.11b1	5a		phy				phy
.11b2	85 12		sta $12				sta 	temp2 						; save start
.11b4	84 13		sty $13				sty 	temp2+1
.11b6	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11b9	a6 14		ldx $14				ldx 	temp3
.11bb	a4 15		ldy $15				ldy 	temp3+1
.11bd	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11c0	a9 01		lda #$01			lda 	#1
.11c2	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11c4	a0 00		ldy #$00			ldy 	#0
.11c6	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11c9	a6 10		ldx $10				ldx 	temp1 						; end address
.11cb	a4 11		ldy $11				ldy 	temp1+1
.11cd	a9 12		lda #$12			lda 	#temp2
.11cf	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.11d2	b0 03		bcs $11d7			bcs 	_ESSave
.11d4	7a		ply				ply
.11d5	fa		plx				plx
.11d6	60		rts				rts
.11d7					_ESSave:
.11d7	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>11da	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>11e2	4c 45 44 00
.11e6					ExternLoad:
.11e6	da		phx				phx 								; save XY
.11e7	5a		phy				phy
.11e8	48		pha				pha 								; save target
.11e9	5a		phy				phy
.11ea	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11ed	a6 14		ldx $14				ldx 	temp3
.11ef	a4 15		ldy $15				ldy 	temp3+1
.11f1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11f4	a9 01		lda #$01			lda 	#1
.11f6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11f8	a0 00		ldy #$00			ldy 	#0
.11fa	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11fd	7a		ply				ply 								; restore target to YX and call load
.11fe	fa		plx				plx
.11ff	a9 00		lda #$00			lda 	#0 							; load command
.1201	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1204	b0 03		bcs $1209			bcs 	_ESLoad
.1206	7a		ply				ply
.1207	fa		plx				plx
.1208	60		rts				rts
.1209					_ESLoad:
.1209	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>120c	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>1214	4c 45 44 00
.1218					EXGetLength:
.1218	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.121a	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.121c	d0 02		bne $1220			bne 	_EXGLExit
.121e	e6 15		inc $15				inc 	temp3+1
.1220					_EXGLExit:
.1220	60		rts				rts
.1221					EXPrintString:
.1221	48		pha				pha
.1222	5a		phy				phy
.1223	84 11		sty $11				sty 	temp1+1
.1225	85 10		sta $10				sta 	temp1
.1227	a0 00		ldy #$00			ldy 	#0
.1229					_EXPSLoop:
.1229	b1 10		lda ($10),y			lda 	(temp1),y
.122b	f0 08		beq $1235			beq 	_EXPSExit
.122d	29 7f		and #$7f			and 	#$7F
.122f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1232	c8		iny				iny
.1233	80 f4		bra $1229			bra 	_EXPSLoop
.1235					_EXPSExit:
.1235	7a		ply				ply
.1236	68		pla				pla
.1237	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.1238					Add:
.1238	7a		ply				ply
.1239	68		pla				pla
.123a	18		clc				clc
.123b	65 06		adc $06				adc 	TOS
.123d	85 06		sta $06				sta 	TOS
.123f	98		tya				tya
.1240	65 07		adc $07				adc 	TOS+1
.1242	85 07		sta $07				sta 	TOS+1
.1244	4c 00 00	jmp $0000			jmp 	NextCode
.1247					Subtract:
.1247	7a		ply				ply
.1248	68		pla				pla
.1249	38		sec				sec
.124a	49 ff		eor #$ff			eor 	#$FF
.124c	65 06		adc $06				adc 	TOS
.124e	85 06		sta $06				sta 	TOS
.1250	98		tya				tya
.1251	49 ff		eor #$ff			eor 	#$FF
.1253	65 07		adc $07				adc 	TOS+1
.1255	85 07		sta $07				sta 	TOS+1
.1257	4c 00 00	jmp $0000			jmp 	NextCode
.125a					And:
.125a	68		pla				pla
.125b	25 07		and $07				and 	TOS+1
.125d	85 07		sta $07				sta 	TOS+1
.125f	68		pla				pla
.1260	25 06		and $06				and 	TOS
.1262	85 06		sta $06				sta 	TOS
.1264	4c 00 00	jmp $0000			jmp 	NextCode
.1267					Xor:
.1267	68		pla				pla
.1268	45 07		eor $07				eor 	TOS+1
.126a	85 07		sta $07				sta 	TOS+1
.126c	68		pla				pla
.126d	45 06		eor $06				eor 	TOS
.126f	85 06		sta $06				sta 	TOS
.1271	4c 00 00	jmp $0000			jmp 	NextCode
.1274					LogOr:
.1274	68		pla				pla
.1275	05 07		ora $07				ora 	TOS+1
.1277	85 07		sta $07				sta 	TOS+1
.1279	68		pla				pla
.127a	05 06		ora $06				ora 	TOS
.127c	85 06		sta $06				sta 	TOS
.127e	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.1281					CheckNotEqual:
.1281	38		sec				sec
.1282	80 01		bra $1285			bra 	CECode
.1284					CheckEqual:
.1284	18		clc				clc
.1285					CECode:
.1285	86 10		stx $10				stx 	temp1
.1287	ba		tsx				tsx
.1288	08		php				php
.1289	a5 06		lda $06				lda 	TOS
.128b	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.128e	d0 17		bne $12a7			bne	 	CompareFalse
.1290	a5 07		lda $07				lda 	TOS+1
.1292	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1295	d0 10		bne $12a7			bne 	CompareFalse
.1297					CompareTrue:
.1297	a6 10		ldx $10				ldx 	temp1
.1299	28		plp				plp
.129a	b0 10		bcs $12ac			bcs		CompareFalse2
.129c					CompareTrue2:
.129c	68		pla				pla
.129d	68		pla				pla
.129e	a9 ff		lda #$ff			lda 	#$FF
.12a0	85 06		sta $06				sta 	TOS
.12a2	85 07		sta $07				sta 	TOS+1
.12a4	4c 00 00	jmp $0000			jmp 	NextCode
.12a7					CompareFalse:
.12a7	a6 10		ldx $10				ldx 	temp1
.12a9	28		plp				plp
.12aa	b0 f0		bcs $129c			bcs		CompareTrue2
.12ac					CompareFalse2:
.12ac	68		pla				pla
.12ad	68		pla				pla
.12ae	64 06		stz $06				stz 	TOS
.12b0	64 07		stz $07				stz 	TOS+1
.12b2	4c 00 00	jmp $0000			jmp 	NextCode
.12b5					CheckGreaterEq:
.12b5	38		sec				sec
.12b6	80 01		bra $12b9			bra		CLCode
.12b8					CheckLess:
.12b8	18		clc				clc
.12b9	86 10		stx $10		CLCode:	stx 	temp1
.12bb	ba		tsx				tsx
.12bc	08		php				php
.12bd	18		clc				clc
.12be	a5 06		lda $06				lda 	TOS
.12c0	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12c3	a5 07		lda $07				lda 	TOS+1
.12c5	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12c8	50 02		bvc $12cc			bvc 	_CLNoFlip
.12ca	49 80		eor #$80			eor 	#$80
.12cc					_CLNoFlip:
.12cc	0a		asl a				asl 	a
.12cd	b0 d8		bcs $12a7			bcs 	CompareFalse
.12cf	80 c6		bra $1297			bra 	CompareTrue
.12d1					CheckLessEq:
.12d1	38		sec				sec
.12d2	80 01		bra $12d5			bra		CGCode
.12d4					CheckGreater:
.12d4	18		clc				clc
.12d5					CGCode:
.12d5	86 10		stx $10				stx 	temp1
.12d7	ba		tsx				tsx
.12d8	08		php				php
.12d9	18		clc				clc
.12da	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12dd	e5 06		sbc $06				sbc 	TOS
.12df	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12e2	e5 07		sbc $07				sbc 	TOS+1
.12e4	50 02		bvc $12e8			bvc 	_CGNoFlip
.12e6	49 80		eor #$80			eor 	#$80
.12e8					_CGNoFlip:
.12e8	0a		asl a				asl 	a
.12e9	b0 bc		bcs $12a7			bcs 	CompareFalse
.12eb	80 aa		bra $1297			bra 	CompareTrue
.12ed					Minimum:
.12ed	a9 00		lda #$00			lda 	#0
.12ef	80 02		bra $12f3			bra 	MinMaxCode
.12f1					Maximum:
.12f1	a9 80		lda #$80			lda 	#$80
.12f3					MinMaxCode:
.12f3	85 11		sta $11				sta 	temp1+1
.12f5	86 10		stx $10				stx 	temp1
.12f7	ba		tsx				tsx
.12f8	38		sec				sec
.12f9	a5 06		lda $06				lda 	TOS
.12fb	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12fe	a5 07		lda $07				lda 	TOS+1
.1300	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1303	50 02		bvc $1307			bvc 	_MMNoFlip
.1305	49 80		eor #$80			eor 	#$80
.1307					_MMNoFlip:
.1307	45 11		eor $11				eor 	temp1+1
.1309	30 0a		bmi $1315			bmi 	_MMNoCopy
.130b	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.130e	85 06		sta $06				sta 	TOS
.1310	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1313	85 07		sta $07				sta 	TOS+1
.1315					_MMNoCopy:
.1315	a6 10		ldx $10				ldx 	temp1
.1317	68		pla				pla
.1318	68		pla				pla
.1319	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.131c					Divide16x16:
.131c	86 12		stx $12				stx 	temp2
.131e	ba		tsx				tsx
.131f	20 42 13	jsr $1342			jsr 	IntegerDivide
.1322	68		pla				pla
.1323	85 07		sta $07				sta 	TOS+1
.1325	68		pla				pla
.1326	85 06		sta $06				sta 	TOS
.1328	a6 12		ldx $12				ldx 	temp2
.132a	4c 00 00	jmp $0000			jmp 	NextCode
.132d					Modulus16x16:
.132d	86 12		stx $12				stx 	temp2
.132f	ba		tsx				tsx
.1330	20 42 13	jsr $1342			jsr 	IntegerDivide
.1333	a6 12		ldx $12				ldx 	temp2
.1335	68		pla				pla
.1336	68		pla				pla
.1337	a5 10		lda $10				lda 	temp1
.1339	85 06		sta $06				sta 	TOS
.133b	a5 11		lda $11				lda 	temp1+1
.133d	85 07		sta $07				sta 	TOS+1
.133f	4c 00 00	jmp $0000			jmp 	NextCode
.1342					IntegerDivide:
.1342	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.1344	05 07		ora $07				ora 	TOS+1
.1346	d0 14		bne $135c			bne 	_BFDOkay
.1348	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>134b	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1353	20 42 59 20 5a 45 52 4f 00
.135c					_BFDOkay:
.135c	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.135e	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.1360	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1362	20 9d 13	jsr $139d			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1365	20 b7 13	jsr $13b7			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1368	5a		phy				phy 								; Y is the counter
.1369	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.136b					_BFDLoop:
.136b	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.136e	3e 01 01	rol $0101,x			rol 	Stack2High,x
.1371	26 10		rol $10				rol 	temp1
.1373	26 11		rol $11				rol 	temp1+1
.1375	38		sec				sec
.1376	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1378	e5 06		sbc $06				sbc 	TOS
.137a	48		pha				pha
.137b	a5 11		lda $11				lda 	temp1+1
.137d	e5 07		sbc $07				sbc 	TOS+1
.137f	90 0f		bcc $1390			bcc 	_BFDNoAdd
.1381	85 11		sta $11				sta 	temp1+1
.1383	68		pla				pla
.1384	85 10		sta $10				sta 	temp1+0
.1386	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1389	09 01		ora #$01			ora 	#1
.138b	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.138e	80 01		bra $1391			bra 	_BFDNext
.1390					_BFDNoAdd:
.1390	68		pla				pla 								; Throw away the intermediate calculations
.1391					_BFDNext:
.1391	88		dey				dey
.1392	d0 d7		bne $136b			bne 	_BFDLoop
.1394	7a		ply				ply 								; restore Y
.1395	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1397	90 03		bcc $139c			bcc 	_BFDUnsigned 				; then the result is signed
.1399	20 a3 13	jsr $13a3			jsr		IntegerNegateAlways 		; negate the result
.139c					_BFDUnsigned:
.139c	60		rts				rts
.139d					CheckIntegerNegate:
.139d	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.13a0	30 01		bmi $13a3			bmi 	IntegerNegateAlways 		; if so negate it
.13a2	60		rts				rts
.13a3					IntegerNegateAlways:
.13a3	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.13a5	38		sec				sec 								; negate
.13a6	a9 00		lda #$00			lda 	#0
.13a8	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.13ab	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ae	a9 00		lda #$00			lda 	#0
.13b0	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.13b3	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13b6	60		rts				rts
.13b7					CheckTOSNegate:
.13b7	a5 07		lda $07				lda 	TOS+1
.13b9	10 0f		bpl $13ca			bpl		CTNNoChange
.13bb	e6 1a		inc $1a				inc 	SignCount
.13bd					TOSNegateAlways:
.13bd	38		sec				sec
.13be	a9 00		lda #$00			lda 	#0
.13c0	e5 06		sbc $06				sbc 	TOS
.13c2	85 06		sta $06				sta 	TOS
.13c4	a9 00		lda #$00			lda 	#0
.13c6	e5 07		sbc $07				sbc 	TOS+1
.13c8	85 07		sta $07				sta 	TOS+1
.13ca					CTNNoChange:
.13ca	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.13cb					Multiply16x16:
.13cb	86 10		stx $10				stx 	temp1
.13cd	ba		tsx				tsx
.13ce	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.13d1	85 12		sta $12				sta 	temp2
.13d3	bd 01 01	lda $0101,x			lda		Stack2High,x
.13d6	85 13		sta $13				sta 	temp2+1
.13d8	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.13db	9e 01 01	stz $0101,x			stz 	Stack2High,x
.13de					_MultLoop:
.13de	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.13e0	66 12		ror $12				ror 	temp2
.13e2	90 11		bcc $13f5			bcc 	_MultNoAdd
.13e4	18		clc				clc 								; add 1st to 2nd
.13e5	a5 06		lda $06				lda 	TOS
.13e7	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.13ea	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ed	a5 07		lda $07				lda 	TOS+1
.13ef	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13f2	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13f5					_MultNoAdd:
.13f5	06 06		asl $06				asl 	TOS 						; shift 1st left
.13f7	26 07		rol $07				rol 	TOS+1
.13f9	a5 12		lda $12				lda 	temp2	 					; until zero
.13fb	05 13		ora $13				ora 	temp2+1
.13fd	d0 df		bne $13de			bne 	_MultLoop
.13ff	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.1401	68		pla				pla
.1402	85 07		sta $07				sta 	TOS+1
.1404	68		pla				pla
.1405	85 06		sta $06				sta 	TOS
.1407	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.140a					Unary1Plus:
.140a	e6 06		inc $06				inc 	TOS
.140c	d0 02		bne $1410			bne 	_U1PSkip
.140e	e6 07		inc $07				inc 	TOS+1
.1410					_U1PSkip:
.1410	4c 00 00	jmp $0000			jmp 	NextCode
.1413					Unary2Plus:
.1413	18		clc				clc
.1414	a5 06		lda $06				lda 	TOS
.1416	69 02		adc #$02			adc 	#2
.1418	85 06		sta $06				sta 	TOS
.141a	90 02		bcc $141e			bcc 	_U1PSkip
.141c	e6 07		inc $07				inc 	TOS+1
.141e					_U1PSkip:
.141e	4c 00 00	jmp $0000			jmp 	NextCode
.1421					Unary1Minus:
.1421	a5 06		lda $06				lda 	TOS
.1423	d0 02		bne $1427			bne 	_U1MSkip
.1425	c6 07		dec $07				dec 	TOS+1
.1427					_U1MSkip:
.1427	c6 06		dec $06				dec 	TOS
.1429	4c 00 00	jmp $0000			jmp 	NextCode
.142c					Unary2Minus:
.142c	38		sec				sec
.142d	a5 06		lda $06				lda 	TOS
.142f	e9 02		sbc #$02			sbc 	#2
.1431	85 06		sta $06				sta 	TOS
.1433	b0 02		bcs $1437			bcs 	_U1PSkip
.1435	c6 07		dec $07				dec 	TOS+1
.1437					_U1PSkip:
.1437	4c 00 00	jmp $0000			jmp 	NextCode
.143a					Absolute:
.143a	a5 07		lda $07				lda 	TOS+1
.143c	30 03		bmi $1441			bmi 	Negate
.143e	4c 00 00	jmp $0000			jmp 	NextCode
.1441					Negate:
.1441	38		sec				sec
.1442	a9 00		lda #$00			lda 	#0
.1444	e5 06		sbc $06				sbc 	TOS
.1446	85 06		sta $06				sta 	TOS
.1448	a9 00		lda #$00			lda 	#0
.144a	e5 07		sbc $07				sbc 	TOS+1
.144c	85 07		sta $07				sta 	TOS+1
.144e	4c 00 00	jmp $0000			jmp 	NextCode
.1451					OneComplement:
.1451	a5 06		lda $06				lda 	TOS
.1453	49 ff		eor #$ff			eor 	#$FF
.1455	85 06		sta $06				sta 	TOS
.1457	a5 07		lda $07				lda 	TOS+1
.1459	49 ff		eor #$ff			eor 	#$FF
.145b	85 07		sta $07				sta 	TOS+1
.145d	4c 00 00	jmp $0000			jmp 	NextCode
.1460					CheckMinus:
.1460	a5 07		lda $07				lda 	TOS+1
.1462	30 07		bmi $146b			bmi 	UnaryTrue
.1464					UnaryFalse:
.1464	64 06		stz $06				stz 	TOS
.1466	64 07		stz $07				stz 	TOS+1
.1468	4c 00 00	jmp $0000			jmp 	NextCode
.146b					UnaryTrue:
.146b	a9 ff		lda #$ff			lda 	#$FF
.146d	85 06		sta $06				sta 	TOS
.146f	85 07		sta $07				sta 	TOS+1
.1471	4c 00 00	jmp $0000			jmp 	NextCode
.1474					CheckZero:
.1474	a5 06		lda $06				lda 	TOS
.1476	05 07		ora $07				ora 	TOS+1
.1478	d0 ea		bne $1464			bne 	UnaryFalse
.147a	80 ef		bra $146b			bra 	UnaryTrue
.147c					SignTOS:
.147c	a5 07		lda $07				lda 	TOS+1
.147e	30 eb		bmi $146b			bmi		UnaryTrue
.1480	05 06		ora $06				ora 	TOS
.1482	f0 e0		beq $1464			beq 	UnaryFalse
.1484	a9 01		lda #$01			lda 	#1
.1486	85 06		sta $06				sta 	TOS
.1488	64 07		stz $07				stz		TOS+1
.148a	4c 00 00	jmp $0000			jmp 	NextCode
.148d					ByteSwap:
.148d	a5 06		lda $06				lda 	TOS
.148f	a4 07		ldy $07				ldy 	TOS+1
.1491	85 07		sta $07				sta 	TOS+1
.1493	84 06		sty $06				sty 	TOS
.1495	4c 00 00	jmp $0000			jmp 	NextCode
.1498					Times16:
.1498	06 06		asl $06				asl 	TOS
.149a	26 07		rol $07				rol 	TOS+1
.149c					Times8:
.149c	06 06		asl $06				asl 	TOS
.149e	26 07		rol $07				rol 	TOS+1
.14a0					Times4:
.14a0	06 06		asl $06				asl 	TOS
.14a2	26 07		rol $07				rol 	TOS+1
.14a4					Times2:
.14a4	06 06		asl $06				asl 	TOS
.14a6	26 07		rol $07				rol 	TOS+1
.14a8	4c 00 00	jmp $0000			jmp 	NextCode
.14ab					Divide16:
.14ab	46 07		lsr $07				lsr 	TOS+1
.14ad	66 06		ror $06				ror 	TOS
.14af					Divide8:
.14af	46 07		lsr $07				lsr 	TOS+1
.14b1	66 06		ror $06				ror 	TOS
.14b3					Divide4:
.14b3	46 07		lsr $07				lsr 	TOS+1
.14b5	66 06		ror $06				ror 	TOS
.14b7					Divide2:
.14b7	46 07		lsr $07				lsr 	TOS+1
.14b9	66 06		ror $06				ror 	TOS
.14bb	4c 00 00	jmp $0000			jmp 	NextCode
.14be					Times256:
.14be	a5 06		lda $06				lda 	TOS
.14c0	85 07		sta $07				sta 	TOS+1
.14c2	64 06		stz $06				stz 	TOS
.14c4	4c 00 00	jmp $0000			jmp 	NextCode
.14c7					Divide256:
.14c7	a5 07		lda $07				lda 	TOS+1
.14c9	85 06		sta $06				sta 	TOS
.14cb	64 07		stz $07				stz 	TOS+1
.14cd	4c 00 00	jmp $0000			jmp 	NextCode
.14d0					RandomNumber:
.14d0	a5 06		lda $06				lda 	TOS
.14d2	48		pha				pha
.14d3	a5 07		lda $07				lda 	TOS+1
.14d5	48		pha				pha
.14d6	a5 1b		lda $1b				lda 	randomSeed
.14d8	05 1c		ora $1c				ora 	randomSeed+1
.14da	d0 08		bne $14e4			bne 	_RH_NoInit
.14dc	a9 7c		lda #$7c			lda 	#$7C
.14de	85 1b		sta $1b				sta 	randomSeed
.14e0	a9 a1		lda #$a1			lda 	#$A1
.14e2	85 1c		sta $1c				sta 	randomSeed+1
.14e4					_RH_NoInit:
.14e4	a5 1b		lda $1b				lda 	randomSeed
.14e6	4a		lsr a		        lsr		a
.14e7	26 1c		rol $1c		        rol 	randomSeed+1
.14e9	90 02		bcc $14ed	        bcc 	_RH_NoEor
.14eb	49 b4		eor #$b4	        eor 	#$B4
.14ed					_RH_NoEor:
.14ed	85 1b		sta $1b		        sta 	randomSeed
.14ef	45 1c		eor $1c		        eor 	randomSeed+1
.14f1	85 07		sta $07		        sta 	TOS+1
.14f3	a5 1b		lda $1b		        lda 	randomSeed
.14f5	85 06		sta $06		        sta 	TOS
.14f7	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14fa					Constant0:
.14fa	a5 06		lda $06				lda 	TOS
.14fc	48		pha				pha
.14fd	a5 07		lda $07				lda 	TOS+1
.14ff	48		pha				pha
.1500	64 06		stz $06				stz 	TOS
.1502	64 07		stz $07				stz 	TOS+1
.1504	4c 00 00	jmp $0000			jmp 	NextCode
.1507					ConstantMinus1:
.1507	a5 06		lda $06				lda 	TOS
.1509	48		pha				pha
.150a	a5 07		lda $07				lda 	TOS+1
.150c	48		pha				pha
.150d	a9 ff		lda #$ff			lda 	#$FF
.150f	85 06		sta $06				sta 	TOS
.1511	85 07		sta $07				sta 	TOS+1
.1513	4c 00 00	jmp $0000			jmp 	NextCode
.1516					C1:
.1516	a0 01		ldy #$01			ldy 	#1
.1518	80 24		bra $153e			bra 	Const1Byte
.151a					C2:
.151a	a0 02		ldy #$02			ldy 	#2
.151c	80 20		bra $153e			bra 	Const1Byte
.151e					C3:
.151e	a0 03		ldy #$03			ldy 	#3
.1520	80 1c		bra $153e			bra 	Const1Byte
.1522					C4:
.1522	a0 04		ldy #$04			ldy 	#4
.1524	80 18		bra $153e			bra 	Const1Byte
.1526					C5:
.1526	a0 05		ldy #$05			ldy 	#5
.1528	80 14		bra $153e			bra 	Const1Byte
.152a					C8:
.152a	a0 08		ldy #$08			ldy 	#8
.152c	80 10		bra $153e			bra 	Const1Byte
.152e					C10:
.152e	a0 0a		ldy #$0a			ldy 	#10
.1530	80 0c		bra $153e			bra 	Const1Byte
.1532					C15:
.1532	a0 0f		ldy #$0f			ldy 	#15
.1534	80 08		bra $153e			bra 	Const1Byte
.1536					C16:
.1536	a0 10		ldy #$10			ldy 	#16
.1538	80 04		bra $153e			bra 	Const1Byte
.153a					C24:
.153a	a0 18		ldy #$18			ldy 	#24
.153c	80 00		bra $153e			bra 	Const1Byte
.153e					Const1Byte:
.153e	a5 06		lda $06				lda 	TOS
.1540	48		pha				pha
.1541	a5 07		lda $07				lda 	TOS+1
.1543	48		pha				pha
.1544	84 06		sty $06				sty 	TOS
.1546	64 07		stz $07				stz 	TOS+1
.1548	4c 00 00	jmp $0000			jmp 	NextCode
.154b					C32:
.154b	a0 20		ldy #$20			ldy 	#32
.154d	80 ef		bra $153e			bra 	Const1Byte
.154f					C63:
.154f	a0 3f		ldy #$3f			ldy 	#63
.1551	80 eb		bra $153e			bra 	Const1Byte
.1553					C64:
.1553	a0 40		ldy #$40			ldy 	#64
.1555	80 e7		bra $153e			bra 	Const1Byte
.1557					C100:
.1557	a0 64		ldy #$64			ldy 	#100
.1559	80 e3		bra $153e			bra 	Const1Byte
.155b					C127:
.155b	a0 7f		ldy #$7f			ldy 	#127
.155d	80 df		bra $153e			bra 	Const1Byte
.155f					C128:
.155f	a0 80		ldy #$80			ldy 	#128
.1561	80 db		bra $153e			bra 	Const1Byte
.1563					C255:
.1563	a0 ff		ldy #$ff			ldy 	#255
.1565	80 d7		bra $153e			bra 	Const1Byte
.1567					Const2Byte:
.1567	85 06		sta $06				sta 	TOS
.1569	84 07		sty $07				sty 	TOS+1
.156b	4c 00 00	jmp $0000			jmp 	NextCode
.156e					C256:
.156e	a5 06		lda $06				lda 	TOS
.1570	48		pha				pha
.1571	a5 07		lda $07				lda 	TOS+1
.1573	48		pha				pha
.1574	a9 00		lda #$00			lda 	#(256) & $FF
.1576	a0 01		ldy #$01			ldy 	#(256) >> 8
.1578	80 ed		bra $1567			bra 	Const2Byte
.157a					C512:
.157a	a5 06		lda $06				lda 	TOS
.157c	48		pha				pha
.157d	a5 07		lda $07				lda 	TOS+1
.157f	48		pha				pha
.1580	a9 00		lda #$00			lda 	#(512) & $FF
.1582	a0 02		ldy #$02			ldy 	#(512) >> 8
.1584	80 e1		bra $1567			bra 	Const2Byte
.1586					C1024:
.1586	a5 06		lda $06				lda 	TOS
.1588	48		pha				pha
.1589	a5 07		lda $07				lda 	TOS+1
.158b	48		pha				pha
.158c	a9 00		lda #$00			lda 	#(1024) & $FF
.158e	a0 04		ldy #$04			ldy 	#(1024) >> 8
.1590	80 d5		bra $1567			bra 	Const2Byte
.1592					C4096:
.1592	a5 06		lda $06				lda 	TOS
.1594	48		pha				pha
.1595	a5 07		lda $07				lda 	TOS+1
.1597	48		pha				pha
.1598	a9 00		lda #$00			lda 	#(4096) & $FF
.159a	a0 10		ldy #$10			ldy 	#(4096) >> 8
.159c	80 c9		bra $1567			bra 	Const2Byte
.159e					C32767:
.159e	a5 06		lda $06				lda 	TOS
.15a0	48		pha				pha
.15a1	a5 07		lda $07				lda 	TOS+1
.15a3	48		pha				pha
.15a4	a9 ff		lda #$ff			lda 	#(32767) & $FF
.15a6	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.15a8	80 bd		bra $1567			bra 	Const2Byte
.15aa					C32768:
.15aa	a5 06		lda $06				lda 	TOS
.15ac	48		pha				pha
.15ad	a5 07		lda $07				lda 	TOS+1
.15af	48		pha				pha
.15b0	a9 00		lda #$00			lda 	#(32768) & $FF
.15b2	a0 80		ldy #$80			ldy 	#(32768) >> 8
.15b4	80 b1		bra $1567			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.15b6					Drop:
.15b6	68		pla				pla
.15b7	85 07		sta $07				sta 	TOS+1
.15b9	68		pla				pla
.15ba	85 06		sta $06				sta 	TOS
.15bc	4c 00 00	jmp $0000			jmp 	NextCode
.15bf					TestDup:
.15bf	a5 06		lda $06				lda 	TOS
.15c1	05 07		ora $07				ora 	TOS+1
.15c3	d0 03		bne $15c8			bne 	Dup
.15c5	4c 00 00	jmp $0000			jmp 	NextCode
.15c8					Dup:
.15c8	a5 06		lda $06				lda 	TOS
.15ca	48		pha				pha
.15cb	a5 07		lda $07				lda 	TOS+1
.15cd	48		pha				pha
.15ce	4c 00 00	jmp $0000			jmp 	NextCode
.15d1					Swap:
.15d1	86 10		stx $10				stx 	temp1
.15d3	7a		ply				ply
.15d4	fa		plx				plx
.15d5	a5 06		lda $06				lda 	TOS
.15d7	48		pha				pha
.15d8	a5 07		lda $07				lda 	TOS+1
.15da	48		pha				pha
.15db	86 06		stx $06				stx 	TOS
.15dd	84 07		sty $07				sty 	TOS+1
.15df	a6 10		ldx $10				ldx 	temp1
.15e1	4c 00 00	jmp $0000			jmp 	NextCode
.15e4					Over:
.15e4	a5 06		lda $06				lda 	TOS
.15e6	48		pha				pha
.15e7	a5 07		lda $07				lda 	TOS+1
.15e9	48		pha				pha
.15ea	86 10		stx $10				stx 	temp1
.15ec	ba		tsx				tsx
.15ed	bd 04 01	lda $0104,x			lda 	stack3low,x
.15f0	85 06		sta $06				sta 	TOS
.15f2	bd 03 01	lda $0103,x			lda 	stack3High,x
.15f5	85 07		sta $07				sta 	TOS+1
.15f7	a6 10		ldx $10				ldx 	temp1
.15f9	4c 00 00	jmp $0000			jmp 	NextCode
.15fc					Nip:
.15fc	68		pla				pla
.15fd	68		pla				pla
.15fe	4c 00 00	jmp $0000			jmp 	NextCode
.1601					Rot:
.1601	86 10		stx $10				stx 	temp1
.1603	ba		tsx				tsx
.1604	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.1607	a8		tay				tay
.1608	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.160b	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.160e	a5 06		lda $06				lda 	TOS
.1610	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1613	84 06		sty $06				sty 	TOS
.1615	bd 03 01	lda $0103,x			lda 	Stack3High,x
.1618	a8		tay				tay
.1619	bd 01 01	lda $0101,x			lda 	Stack2High,x
.161c	9d 03 01	sta $0103,x			sta 	Stack3High,x
.161f	a5 07		lda $07				lda 	TOS+1
.1621	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1624	84 07		sty $07				sty 	TOS+1
.1626	a6 10		ldx $10				ldx 	temp1
.1628	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.162b					ByteRead:
.162b	b2 06		lda ($06)			lda 	(TOS)
.162d	85 06		sta $06				sta 	TOS
.162f	64 07		stz $07				stz 	TOS+1
.1631	4c 00 00	jmp $0000			jmp 	NextCode
.1634					WordRead:
.1634	a0 01		ldy #$01			ldy 	#1
.1636	b1 06		lda ($06),y			lda 	(TOS),y
.1638	a8		tay				tay
.1639	b2 06		lda ($06)			lda 	(TOS)
.163b	85 06		sta $06				sta 	TOS
.163d	84 07		sty $07				sty 	TOS+1
.163f	4c 00 00	jmp $0000			jmp 	NextCode
.1642					ByteWrite:
.1642	68		pla				pla
.1643	68		pla				pla
.1644	92 06		sta ($06)			sta 	(TOS)
.1646	68		pla				pla
.1647	85 07		sta $07				sta 	TOS+1
.1649	68		pla				pla
.164a	85 06		sta $06				sta 	TOS
.164c	4c 00 00	jmp $0000			jmp 	NextCode
.164f					WordWrite:
.164f	68		pla				pla
.1650	a0 01		ldy #$01			ldy 	#1
.1652	91 06		sta ($06),y			sta 	(TOS),y
.1654	68		pla				pla
.1655	92 06		sta ($06)			sta 	(TOS)
.1657	68		pla				pla
.1658	85 07		sta $07				sta 	TOS+1
.165a	68		pla				pla
.165b	85 06		sta $06				sta 	TOS
.165d	4c 00 00	jmp $0000			jmp 	NextCode
.1660					WordAdd:
.1660	7a		ply				ply
.1661	68		pla				pla
.1662	18		clc				clc
.1663	72 06		adc ($06)			adc 	(TOS)
.1665	92 06		sta ($06)			sta 	(TOS)
.1667	98		tya				tya
.1668	a0 01		ldy #$01			ldy 	#1
.166a	71 06		adc ($06),y			adc 	(TOS),y
.166c	91 06		sta ($06),y			sta 	(TOS),y
.166e	68		pla				pla
.166f	85 07		sta $07				sta 	TOS+1
.1671	68		pla				pla
.1672	85 06		sta $06				sta 	TOS
.1674	4c 00 00	jmp $0000			jmp 	NextCode
.1677					AllocateMemory:
.1677	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1679	48		pha				pha
.167a	a5 07		lda $07				lda 	TOS+1
.167c	48		pha				pha
.167d	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.167f	85 06		sta $06				sta 	TOS
.1681	a5 0f		lda $0f				lda 	nextFreeMem+1
.1683	85 07		sta $07				sta 	TOS+1
.1685	7a		ply				ply 								; advance the free ram pointer
.1686	68		pla				pla
.1687	20 fd 1c	jsr $1cfd			jsr 	AdvanceFreeMem
.168a	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.168d					EncodeProgram:
.168d	48		pha				pha 								; save registers.
.168e	da		phx				phx
.168f	5a		phy				phy
.1690	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1692	85 08		sta $08				sta		srcPtr
.1694	a9 ff		lda #$ff			lda 	#$FF
.1696	85 05		sta $05				sta 	rsp
.1698	a6 05		ldx $05				ldx 	rsp 						; this is the current stack entry type, so $00 means
.169a	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.169d	20 11 19	jsr $1911			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.16a0	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.16a2	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.16a5	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.16a8	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.16ab	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.16ad	20 bc 18	jsr $18bc			jsr 	CheckIsDigit
.16b0	90 09		bcc $16bb			bcc 	_EPNoLineNumber 			; if so there is a line number
.16b2	20 de 18	jsr $18de			jsr 	EncodeGetConstant 			; extract that constant from the source
.16b5	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.16b8	8c 12 09	sty $0912			sty 	encodeBuffer+2
.16bb					_EPNoLineNumber:
.16bb					EncodeLoop:
.16bb	20 03 19	jsr $1903			jsr 	EncSkipSpaces 				; skip over spaces
.16be	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.16c0	d0 23		bne $16e5			bne 	_EPNotEnd
.16c2					_EPEndEncode:
.16c2	a9 e9		lda #$e9			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.16c4	a0 20		ldy #$20			ldy 	#NextLine >> 8
.16c6	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.16c9	a5 05		lda $05				lda 	rsp 						; is the return stack empty ?
.16cb	c9 ff		cmp #$ff			cmp 	#$FF
.16cd	d0 04		bne $16d3			bne 	_EPIncomplete
.16cf	7a		ply				ply									; restore and exit.
.16d0	fa		plx				plx
.16d1	68		pla				pla
.16d2	60		rts				rts
.16d3					_EPIncomplete:
.16d3	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>16d6	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>16de	45 20 4f 50 45 4e 00
.16e5					_EPNotEnd:
.16e5	b2 08		lda ($08)			lda 	(srcPtr)
.16e7	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.16e9	f0 04		beq $16ef			beq 	_EPIsComStr
.16eb	c9 27		cmp #$27			cmp 	#"'"
.16ed	d0 05		bne $16f4			bne 	_EPNotComStr
.16ef					_EPIsComStr:
.16ef	20 e1 17	jsr $17e1			jsr 	EncodeCommentString
.16f2	80 c7		bra $16bb			bra 	EncodeLoop
.16f4					_EPNotComStr:
.16f4	38		sec				sec
.16f5	20 f0 18	jsr $18f0			jsr 	EncSetBit7Word
.16f8	20 2a 19	jsr $192a			jsr 	EncodeSearchDictionary		; look it up
.16fb	90 45		bcc $1742			bcc 	_EPNotInDictionary
.16fd	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16ff	84 11		sty $11				sty 	temp1+1
.1701	a0 01		ldy #$01			ldy 	#1
.1703	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.1705	29 20		and #$20			and 	#$20
.1707	d0 12		bne $171b			bne 	_EPEncodeRoutine 			; if so, do special routine.
.1709	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.170b	b1 10		lda ($10),y			lda 	(temp1),y
.170d	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1710	c8		iny				iny
.1711	b1 10		lda ($10),y			lda 	(temp1),y
.1713	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1716	20 c8 18	jsr $18c8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1719	80 a0		bra $16bb			bra 	EncodeLoop
.171b					_EPEncodeRoutine:
.171b	a0 01		ldy #$01			ldy 	#1							; get type bit
.171d	b1 10		lda ($10),y			lda 	(temp1),y
.171f	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.1721	29 10		and #$10			and 	#$10 						; but decoder comes first
.1723	f0 02		beq $1727			beq 	_EPENoDecoder
.1725	c8		iny				iny 								; so if it exists, adjust for it.
.1726	c8		iny				iny
.1727					_EPENoDecoder:
.1727	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.1729	85 12		sta $12				sta 	temp2
.172b	c8		iny				iny
.172c	b1 10		lda ($10),y			lda 	(temp1),y
.172e	85 13		sta $13				sta 	temp2+1
.1730	48		pha				pha 								; call routine preserving state
.1731	da		phx				phx
.1732	5a		phy				phy
.1733	20 3f 17	jsr $173f			jsr 	_EPECallTemp2
.1736	7a		ply				ply
.1737	fa		plx				plx
.1738	68		pla				pla
.1739	20 c8 18	jsr $18c8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.173c	4c bb 16	jmp $16bb			jmp 	EncodeLoop
.173f					_EPECallTemp2:
.173f	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1742					_EPNotInDictionary:
.1742	20 46 18	jsr $1846			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.1745	90 19		bcc $1760			bcc 	_EPNotDefined
.1747	48		pha				pha
.1748	a9 60		lda #$60			lda	 	#CallHandler & $FF 			; write code call handler
.174a	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.174d	a9 1b		lda #$1b			lda	 	#CallHandler >> 8
.174f	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1752	68		pla				pla 								; write line number
.1753	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1756	98		tya				tya
.1757	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.175a	20 c8 18	jsr $18c8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.175d	4c bb 16	jmp $16bb			jmp 	EncodeLoop
.1760					_EPNotDefined:
.1760	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.1762	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.1764	f0 58		beq $17be			beq 	_EPDefinition
.1766	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.1768	f0 2e		beq $1798			beq 	_EPCallDirect
.176a	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.176c	f0 47		beq $17b5			beq 	_EPVariable
.176e	c9 40		cmp #$40			cmp 	#"@"
.1770	f0 43		beq $17b5			beq 	_EPVariable
.1772	c9 26		cmp #$26			cmp 	#"&"
.1774	f0 3f		beq $17b5			beq 	_EPVariable
.1776	a9 a6		lda #$a6			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.1778	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.177a	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.177d					_EPOutputConstant:
.177d	20 de 18	jsr $18de			jsr 	EncodeGetConstant 			; extract that constant from the source
.1780	90 06		bcc $1788			bcc 	_EPFail 					; if can't find one, that's us done.
.1782	20 94 18	jsr $1894			jsr 	EncodeWriteWord 			; write out the encoded value.
.1785	4c bb 16	jmp $16bb			jmp 	EncodeLoop 					; and go round again.
.1788					_EPFail:
.1788	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>178b	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>1793	52 52 4f 52 00
.1798					_EPCallDirect:
.1798	a9 60		lda #$60			lda	 	#CallHandler & $FF 			; write code call handler
.179a	a0 1b		ldy #$1b			ldy	 	#CallHandler >> 8
.179c	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.179f	a9 01		lda #$01			lda 	#1
.17a1	20 d4 18	jsr $18d4			jsr 	EncodeAddSrcPtr 			; skip over the <
.17a4	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.17a6					_EPToLast:
.17a6	c8		iny				iny
.17a7	b1 08		lda ($08),y			lda 	(srcPtr),y
.17a9	10 fb		bpl $17a6			bpl	 	_EPToLast
.17ab	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.17ad	d0 d9		bne $1788			bne 	_EPFail
.17af	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.17b1	91 08		sta ($08),y			sta 	(srcPtr),y
.17b3	80 c8		bra $177d			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.17b5					_EPVariable:
.17b5	20 7e 19	jsr $197e			jsr 	EncodeVariableReference
.17b8	20 c8 18	jsr $18c8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17bb	4c bb 16	jmp $16bb			jmp 	EncodeLoop
.17be					_EPDefinition:
.17be	a9 2b		lda #$2b			lda	 	#DefineCode & $FF 			; write code call handler
.17c0	a0 21		ldy #$21			ldy	 	#DefineCode >> 8
.17c2	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.17c5	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.17c8	a9 01		lda #$01			lda 	#1 							; write default size
.17ca	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.17cd	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.17cf	c8		iny		_EPCopy:iny
.17d0	b1 08		lda ($08),y			lda 	(srcPtr),y
.17d2	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.17d5	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.17d8	0a		asl a				asl 	a
.17d9	90 f4		bcc $17cf			bcc 	_EPCopy
.17db	20 c8 18	jsr $18c8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17de	4c bb 16	jmp $16bb			jmp 	EncodeLoop

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.17e1					EncodeCommentString:
.17e1	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.17e3	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.17e5	aa		tax				tax 								; save in X
.17e6	a9 00		lda #$00			lda 	#(SkipComment & $FF)		; get the routine to use
.17e8	a0 21		ldy #$21			ldy 	#(SkipComment >> 8)
.17ea	e0 27		cpx #$27			cpx 	#"'"
.17ec	f0 06		beq $17f4			beq 	_ECSGotCmd
.17ee	86 10		stx $10				stx		temp1 						; other terminator = "
.17f0	a9 ce		lda #$ce			lda 	#(LiteralString & $FF)
.17f2	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.17f4					_ECSGotCmd:
.17f4	20 94 18	jsr $1894			jsr 	EncodeWriteWord 			; write word out.
.17f7	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.17f9	20 d4 18	jsr $18d4			jsr 	EncodeAddSrcPtr
.17fc	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.17fe	d0 03		bne $1803			bne 	_ECNoSkipSpaces
.1800	20 03 19	jsr $1903			jsr 	EncSkipSpaces
.1803					_ECNoSkipSpaces:
.1803	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1806	a9 01		lda #$01			lda 	#1
.1808	20 9e 18	jsr $189e			jsr 	EncodeWriteByte 			; write total length, so far 1.
.180b	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.180d					_ECSCopyText:
.180d	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.180f	f0 18		beq $1829			beq 	_ECSEndOfLine 				; end of line ?
.1811	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.1813	f0 09		beq $181e			beq 	_ECSEndOfString 			; if so must be closing quote.
.1815	20 9e 18	jsr $189e			jsr 	EncodeWriteByte 			; write the byte out
.1818	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.181b	c8		iny				iny 								; next character
.181c	80 ef		bra $180d			bra 	_ECSCopyText
.181e					_ECSEndOfString:
.181e	c8		iny				iny 								; skip closing quote.
.181f	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.1821	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1824	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1827	80 18		bra $1841			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1829					_ECSEndOfLine:
.1829	a5 10		lda $10				lda 	temp1 						; missing closing quote
.182b	f0 14		beq $1841			beq 	_ECSComplete 				; if we were doing a string.
.182d	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1830	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>1838	4e 47 20 51 55 4f 54 45 00
.1841					_ECSComplete:
.1841	98		tya				tya									; skip over.
.1842	20 d4 18	jsr $18d4			jsr 	EncodeAddSrcPtr
.1845	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1846					EncodeSearchUserDefined:
.1846	38		sec				sec 								; temp1 = srcPtr-6 because the
.1847	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1849	e9 06		sbc #$06			sbc		#6
.184b	85 10		sta $10				sta 	temp1
.184d	a5 09		lda $09				lda 	srcPtr+1
.184f	e9 00		sbc #$00			sbc 	#0
.1851	85 11		sta $11				sta 	temp1+1
.1853	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1855	85 12		sta $12				sta 	0+(temp2)
.1857	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1859	85 13		sta $13				sta 	1+(temp2)
.185b					_ESULoop:
.185b	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.185d	f0 33		beq $1892			beq 	_ESUFail
.185f	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.1861	b1 12		lda ($12),y			lda 	(temp2),y
.1863	c9 2b		cmp #$2b			cmp 	#DefineCode & $FF
.1865	d0 1e		bne $1885			bne 	_ESUNext
.1867	c8		iny				iny
.1868	b1 12		lda ($12),y			lda 	(temp2),y
.186a	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.186c	d0 17		bne $1885			bne 	_ESUNext
.186e	c8		iny				iny 								; skip length byte.
.186f					_ESUCompare:
.186f	c8		iny				iny
.1870	b1 12		lda ($12),y			lda 	(temp2),y
.1872	d1 10		cmp ($10),y			cmp 	(temp1),y
.1874	d0 0f		bne $1885			bne 	_ESUNext
.1876	0a		asl a				asl 	a 							; bit 7 set => found it.
.1877	90 f6		bcc $186f			bcc 	_ESUCompare
.1879	a0 01		ldy #$01			ldy 	#1
.187b	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.187d	aa		tax				tax
.187e	c8		iny				iny
.187f	b1 12		lda ($12),y			lda 	(temp2),y
.1881	a8		tay				tay
.1882	8a		txa				txa
.1883	38		sec				sec 								; return with carry set as found
.1884	60		rts				rts
.1885					_ESUNext:
.1885	18		clc				clc
.1886	a5 12		lda $12				lda 	temp2
.1888	72 12		adc ($12)			adc 	(temp2)
.188a	85 12		sta $12				sta 	temp2
.188c	90 02		bcc $1890			bcc 	_NoCarryAdv
.188e	e6 13		inc $13				inc 	temp2+1
.1890					_NoCarryAdv:
.1890	80 c9		bra $185b			bra 	_ESULoop 					; and loop round
.1892					_ESUFail:
.1892	18		clc				clc
.1893	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.1894					EncodeWriteWord:
.1894	48		pha				pha
.1895	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1898	98		tya				tya
.1899	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.189c	68		pla				pla
.189d	60		rts				rts
.189e					EncodeWriteByte:
.189e	da		phx				phx
.189f	ae 10 09	ldx $0910			ldx 	encodeBuffer
.18a2	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.18a5	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.18a8	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.18ab	ee 10 09	inc $0910			inc 	encodeBuffer
.18ae	fa		plx				plx
.18af	60		rts				rts
.18b0					CheckIsLetter:
.18b0	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.18b2	90 06		bcc $18ba			bcc 	_CILFail
.18b4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.18b6	b0 02		bcs $18ba			bcs 	_CILFail
.18b8	38		sec				sec
.18b9	60		rts				rts
.18ba					_CILFail:
.18ba	18		clc				clc
.18bb	60		rts				rts
.18bc					CheckIsDigit:
.18bc	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.18be	90 06		bcc $18c6			bcc 	_CIDFail
.18c0	c9 3a		cmp #$3a			cmp 	#"9"+1
.18c2	b0 02		bcs $18c6			bcs 	_CIDFail
.18c4	38		sec				sec
.18c5	60		rts				rts
.18c6					_CIDFail:
.18c6	18		clc				clc
.18c7	60		rts				rts
.18c8					EncodeMoveNextWord:
.18c8	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.18ca					_EPNWLoop:
.18ca	c8		iny				iny
.18cb	b1 08		lda ($08),y			lda 	(srcPtr),y
.18cd	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.18cf	b0 f9		bcs $18ca			bcs 	_EPNWLoop
.18d1	98		tya				tya
.18d2	80 00		bra $18d4			bra 	EncodeAddSrcPtr
.18d4					EncodeAddSrcPtr:
.18d4	18		clc				clc 								; add offset
.18d5	65 08		adc $08				adc 	srcPtr
.18d7	85 08		sta $08				sta 	srcPtr
.18d9	90 02		bcc $18dd			bcc 	_EASPNoCarry
.18db	e6 09		inc $09				inc 	srcPtr+1					; carry through
.18dd					_EASPNoCarry:
.18dd	60		rts				rts
.18de					EncodeGetConstant:
.18de	a5 08		lda $08				lda 	srcPtr 						; get source
.18e0	a4 09		ldy $09				ldy 	srcPtr+1
.18e2	20 5b 20	jsr $205b			jsr 	ConvertToInteger 			; call converter
.18e5	90 08		bcc $18ef			bcc 	_EGCExit
.18e7	20 d4 18	jsr $18d4			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.18ea	a5 14		lda $14				lda 	temp3 						; get result into YA
.18ec	a4 15		ldy $15				ldy 	temp3+1
.18ee	38		sec				sec 								; return CS
.18ef					_EGCExit:
.18ef	60		rts				rts
.18f0					EncSetBit7Word:
.18f0	08		php				php 								; save carry
.18f1	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.18f3					_ESB7Loop:
.18f3	c8		iny				iny
.18f4	b1 08		lda ($08),y			lda 	(srcPtr),y
.18f6	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.18f8	b0 f9		bcs $18f3			bcs 	_ESB7Loop
.18fa	88		dey				dey									; previous character
.18fb	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.18fd	0a		asl a				asl 	a 							; shift bit 7 out
.18fe	28		plp				plp 								; restore carry
.18ff	6a		ror a				ror 	a 							; shift it in
.1900	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.1902	60		rts				rts
.1903					EncSkipSpaces:
.1903	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.1905	c9 20		cmp #$20			cmp 	#32
.1907	d0 07		bne $1910			bne 	_ESNotSpace
.1909	a9 01		lda #$01			lda 	#1
.190b	20 d4 18	jsr $18d4			jsr 	EncodeAddSrcPtr
.190e	80 f3		bra $1903			bra	 	EncSkipSpaces
.1910					_ESNotSpace:
.1910	60		rts				rts
.1911					EncodeTrimTrailingSpaces:
.1911	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.1913					_ETTFindEnd:
.1913	c8		iny				iny
.1914	b1 08		lda ($08),y			lda 	(srcPtr),y
.1916	d0 fb		bne $1913			bne 	_ETTFindEnd
.1918					_ETTRemoveSpace:
.1918	c0 00		cpy #$00			cpy 	#0 							; start of string
.191a	f0 0d		beq $1929			beq 	_ETTExit
.191c	88		dey				dey 								; previous character 1..32
.191d	b1 08		lda ($08),y			lda 	(srcPtr),y
.191f	c9 21		cmp #$21			cmp 	#32+1
.1921	b0 06		bcs $1929			bcs 	_ETTExit
.1923	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.1925	91 08		sta ($08),y			sta 	(srcPtr),y
.1927	80 ef		bra $1918			bra 	_ETTRemoveSpace
.1929					_ETTExit:
.1929	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.192a					EncodeSearchDictionary:
.192a	a9 59		lda #$59			lda 	#(Dictionary) & $FF
.192c	85 10		sta $10				sta 	0+(temp1)
.192e	a9 23		lda #$23			lda 	#(Dictionary) >> 8
.1930	85 11		sta $11				sta 	1+(temp1)
.1932					_ESDLoop:
.1932	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.1934	18		clc				clc
.1935	f0 46		beq $197d			beq 	_ESDExit
.1937	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1939	b1 10		lda ($10),y			lda 	(temp1),y
.193b	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.193c	4a		lsr a				lsr 	a
.193d	4a		lsr a				lsr 	a
.193e	4a		lsr a				lsr 	a
.193f	c8		iny				iny 								; Y = 2
.1940	4a		lsr a				lsr 	a
.1941	90 01		bcc $1944			bcc 	_ESDNotDec
.1943	c8		iny				iny
.1944					_ESDNotDec:
.1944	4a		lsr a				lsr 	a
.1945	90 01		bcc $1948			bcc 	_ESDNotInc
.1947	c8		iny				iny
.1948					_ESDNotInc:
.1948	98		tya				tya
.1949	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.194a	a8		tay				tay
.194b	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.194d	d2 08		cmp ($08)			cmp 	(srcPtr)
.194f	d0 1f		bne $1970			bne 	_ESDNext 					; do not match, go to next
.1951	98		tya				tya 								; make temp2 point to the name in
.1952	18		clc				clc 								; the dictionary.
.1953	65 10		adc $10				adc 	temp1
.1955	85 12		sta $12				sta 	temp2
.1957	a5 11		lda $11				lda 	temp1+1
.1959	69 00		adc #$00			adc 	#0
.195b	85 13		sta $13				sta 	temp2+1
.195d	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.195f					_ESDCompare:
.195f	c8		iny				iny
.1960	b1 08		lda ($08),y			lda 	(srcPtr),y
.1962	d1 12		cmp ($12),y			cmp 	(temp2),y
.1964	d0 0a		bne $1970			bne 	_ESDNext
.1966	0a		asl a				asl 	a
.1967	90 f6		bcc $195f			bcc 	_ESDCompare
.1969	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.196b	a4 11		ldy $11				ldy 	temp1+1
.196d	38		sec				sec
.196e	80 0d		bra $197d			bra 	_ESDExit
.1970					_ESDNext:
.1970	18		clc				clc
.1971	a5 10		lda $10				lda 	temp1
.1973	72 10		adc ($10)			adc 	(temp1)
.1975	85 10		sta $10				sta 	temp1
.1977	90 b9		bcc $1932			bcc 	_ESDLoop
.1979	e6 11		inc $11				inc 	temp1+1
.197b	80 b5		bra $1932			bra 	_ESDLoop
.197d					_ESDExit:
.197d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encvar.src

.197e					EncodeVariableReference:
.197e	b2 08		lda ($08)			lda 	(srcPtr)					; get the type, use it to identify the routine
.1980	a2 ff		ldx #$ff			ldx 	#VarAddressHandler & $FF
.1982	a0 21		ldy #$21			ldy 	#VarAddressHandler >> 8
.1984	c9 26		cmp #$26			cmp 	#"&"
.1986	f0 0c		beq $1994			beq 	_EVFHaveAddress
.1988	a2 19		ldx #$19			ldx 	#VarReadHandler & $FF
.198a	a0 22		ldy #$22			ldy 	#VarReadHandler >> 8
.198c	c9 40		cmp #$40			cmp 	#"@"
.198e	f0 04		beq $1994			beq 	_EVFHaveAddress
.1990	a2 35		ldx #$35			ldx 	#VarWriteHandler & $FF
.1992	a0 22		ldy #$22			ldy 	#VarWriteHandler >> 8
.1994					_EVFHaveAddress:
.1994	8a		txa				txa
.1995	20 94 18	jsr $1894			jsr 	EncodeWriteWord 			; write it out.
.1998	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.199a	b1 08		lda ($08),y			lda 	(srcPtr),y
.199c	29 7f		and #$7f			and 	#$7F 						; might be the last.
.199e	20 b0 18	jsr $18b0			jsr 	CheckIsLetter 				; is it A-Z
.19a1	90 1a		bcc $19bd			bcc 	EVFFail
.19a3	29 1f		and #$1f			and 	#31 						; make 1-26
.19a5	85 10		sta $10				sta 	temp1 						; start building the name in temp1
.19a7	64 11		stz $11				stz 	temp1+1
.19a9	38		sec				sec 								; possible char 2
.19aa	20 d2 19	jsr $19d2			jsr 	EncVarAlNum
.19ad	18		clc				clc 								; possible char 3
.19ae	20 d2 19	jsr $19d2			jsr 	EncVarAlNum
.19b1	b1 08		lda ($08),y			lda 	(srcPtr),y 					; more text after ?
.19b3	10 08		bpl $19bd			bpl 	EVFFail
.19b5	a5 10		lda $10				lda 	temp1 						; write out variable identifier.
.19b7	a4 11		ldy $11				ldy 	temp1+1
.19b9	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.19bc	60		rts				rts
.19bd					EVFFail:
.19bd	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>19c0	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>19c8	41 42 4c 45 20 4e 41 4d 45 00
.19d2					EncVarAlNum:
.19d2	b1 08		lda ($08),y			lda 	(srcPtr),y 					; points to the  last char processed.
.19d4	10 01		bpl $19d7			bpl 	_EVAContinue
.19d6	60		rts				rts
.19d7					_EVAContinue:
.19d7	08		php				php 								; CS x 32 ; CC x 32 x 40
.19d8	c8		iny				iny 								; get the next character, strip bit 7
.19d9	b1 08		lda ($08),y			lda 	(srcPtr),y
.19db	29 7f		and #$7f			and 	#$7F
.19dd	20 b0 18	jsr $18b0			jsr 	CheckIsLetter 				; letter ?
.19e0	b0 08		bcs $19ea			bcs 	_EVACharOkay
.19e2	20 bc 18	jsr $18bc			jsr 	CheckIsDigit				; fail if not digit.
.19e5	90 d6		bcc $19bd			bcc 	EVFFail
.19e7	18		clc				clc
.19e8	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.19ea					_EVACharOkay:
.19ea	38		sec				sec 								; range 1-36
.19eb	e9 40		sbc #$40			sbc 	#64
.19ed	28		plp				plp 								; which multiplier ?
.19ee	90 0f		bcc $19ff			bcc 	_EVATimes32x40
.19f0	85 12		sta $12				sta 	temp2 						; save in temp2 - A x 32
.19f2	64 13		stz $13				stz 	temp2+1
.19f4	a2 05		ldx #$05			ldx 	#5
.19f6	06 12		asl $12		_EVA32:	asl 	temp2
.19f8	26 13		rol $13				rol 	temp2+1
.19fa	ca		dex				dex
.19fb	d0 f9		bne $19f6			bne 	_EVA32
.19fd	80 0b		bra $1a0a			bra 	_EVAAddVar
.19ff					_EVATimes32x40:
.19ff	85 13		sta $13				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.1a01	64 12		stz $12				stz 	temp2
.1a03	0a		asl a				asl 	a
.1a04	0a		asl a				asl 	a
.1a05	18		clc				clc
.1a06	65 13		adc $13				adc 	temp2+1
.1a08	85 13		sta $13				sta 	temp2+1
.1a0a					_EVAAddVar:
.1a0a	18		clc				clc
.1a0b	a5 10		lda $10				lda 	temp1
.1a0d	65 12		adc $12				adc 	temp2
.1a0f	85 10		sta $10				sta 	temp1
.1a11	a5 11		lda $11				lda 	temp1+1
.1a13	65 13		adc $13				adc 	temp2+1
.1a15	85 11		sta $11				sta 	temp1+1
.1a17	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1a18					ForHandler:
.1a18	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1a1a	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.1a1c	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1a1e	f0 18		beq $1a38			beq 	_FHOverflow
.1a20	a5 07		lda $07				lda 	TOS+1
.1a22	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1a25	a5 06		lda $06				lda 	TOS
.1a27	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1a2a	a9 ff		lda #$ff			lda 	#$FF
.1a2c	99 80 07	sta $0780,y			sta 	returnStackX,y
.1a2f	68		pla				pla
.1a30	85 07		sta $07				sta 	TOS+1
.1a32	68		pla				pla
.1a33	85 06		sta $06				sta 	TOS
.1a35	4c 00 00	jmp $0000			jmp 	NextCode
.1a38					_FHOverflow:
.1a38	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a3b	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1a43	45 20 4f 56 45 52 46 4c 4f 57 00
.1a4e					ForEncoder:
.1a4e	a9 18		lda #$18			lda 	#ForHandler & $FF 			; for handler
.1a50	a0 1a		ldy #$1a			ldy 	#ForHandler >> 8
.1a52	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.1a55	e6 05		inc $05				inc 	rsp 						; make space on rstack
.1a57	a6 05		ldx $05				ldx 	rsp							; access it
.1a59	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.1a5c	9d 80 07	sta $0780,x			sta 	returnStackX,x
.1a5f	a9 46		lda #$46			lda 	#"F" 						; for marker
.1a61	9d 40 07	sta $0740,x			sta 	returnStackHigh,x
.1a64	60		rts				rts
.1a65					NextHandler:
.1a65	da		phx				phx
.1a66	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1a68	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1a6b	c9 ff		cmp #$ff			cmp 	#$FF
.1a6d	d0 21		bne $1a90			bne 	NHNoFor
.1a6f	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1a72	d0 03		bne $1a77			bne 	_NHNoBorrow
.1a74	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1a77					_NHNoBorrow:
.1a77	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1a7a	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1a7d	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1a80	fa		plx				plx 								; restore X and re-test
.1a81	09 00		ora #$00			ora 	#0
.1a83	f0 05		beq $1a8a			beq 	_NHComplete 				; if so then complete, else loop.
.1a85	e8		inx				inx 								; advance to branch
.1a86	e8		inx				inx
.1a87	4c 56 1b	jmp $1b56			jmp 	BranchAlways
.1a8a					_NHComplete:
.1a8a	e8		inx				inx 								; skip over the branch quantity
.1a8b	c6 05		dec $05				dec 	rsp 						; drop the indx
.1a8d	4c 00 00	jmp $0000			jmp 	NextCode
.1a90					NHNoFor:
.1a90	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a93	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>1a9b	4f 52 20 53 43 4f 50 45 00
.1aa4					NextEncoder:
.1aa4	a9 65		lda #$65			lda 	#NextHandler & $FF 			; next code
.1aa6	a0 1a		ldy #$1a			ldy 	#NextHandler >> 8
.1aa8	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.1aab	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1aad	c6 05		dec $05				dec 	rsp
.1aaf	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.1ab2	c9 46		cmp #$46			cmp 	#"F"
.1ab4	d0 07		bne $1abd			bne 	_NENoFor
.1ab6	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1ab9	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1abc	60		rts				rts
.1abd					_NENoFor:
.1abd	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1ac0	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>1ac8	46 4f 52 00
.1acc					GetIndex:
.1acc	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1ace	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1ad1	c9 ff		cmp #$ff			cmp 	#$FF
.1ad3	d0 bb		bne $1a90			bne 	NHNoFor
.1ad5	a5 06		lda $06				lda 	TOS
.1ad7	48		pha				pha
.1ad8	a5 07		lda $07				lda 	TOS+1
.1ada	48		pha				pha
.1adb	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1ade	38		sec				sec
.1adf	e9 01		sbc #$01			sbc 	#1
.1ae1	85 06		sta $06				sta 	TOS
.1ae3	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1ae6	e9 00		sbc #$00			sbc 	#0
.1ae8	85 07		sta $07				sta 	TOS+1
.1aea	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1aed					IfHandler:
.1aed	4c 3e 1b	jmp $1b3e			jmp 	BranchIfZero
.1af0					ElseHandler:
.1af0	4c 54 1b	jmp $1b54			jmp 	BranchTestSucceedsNoPop
.1af3					EndIfHandler:
.1af3	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1af6					RepeatHandler:
.1af6	4c 00 00	jmp $0000			jmp 	NextCode
.1af9					RepeatEncoder:
.1af9	a9 f6		lda #$f6			lda 	#RepeatHandler & $FF 		; repeat marker
.1afb	a0 1a		ldy #$1a			ldy 	#RepeatHandler >> 8
.1afd	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.1b00	e6 05		inc $05				inc 	rsp 						; make space on rstack
.1b02	a6 05		ldx $05				ldx 	rsp							; access it
.1b04	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.1b07	9d 80 07	sta $0780,x			sta 	returnStackX,x
.1b0a	a9 52		lda #$52			lda 	#"R" 						; return marker
.1b0c	9d 40 07	sta $0740,x			sta 	returnStackHigh,x
.1b0f	60		rts				rts
.1b10					UntilHandler:
.1b10	4c 3e 1b	jmp $1b3e			jmp 	BranchIfZero
.1b13					UntilEncoder:
.1b13	a9 10		lda #$10			lda 	#UntilHandler & $FF 		; until code
.1b15	a0 1b		ldy #$1b			ldy 	#UntilHandler >> 8
.1b17	20 94 18	jsr $1894			jsr 	EncodeWriteWord
.1b1a	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1b1c	c6 05		dec $05				dec 	rsp
.1b1e	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.1b21	c9 52		cmp #$52			cmp 	#"R"
.1b23	d0 07		bne $1b2c			bne 	_UENoRepeat
.1b25	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1b28	20 9e 18	jsr $189e			jsr 	EncodeWriteByte
.1b2b	60		rts				rts
.1b2c					_UENoRepeat:
.1b2c	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b2f	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>1b37	52 45 50 45 41 54 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1b3e					BranchIfZero:
.1b3e	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1b40	05 07		ora $07				ora 	TOS+1
.1b42	f0 0a		beq $1b4e			beq 	BranchTestSucceeds
.1b44					BranchTestFails:
.1b44	68		pla				pla
.1b45	85 07		sta $07				sta 	TOS+1
.1b47	68		pla				pla
.1b48	85 06		sta $06				sta 	TOS
.1b4a	e8		inx				inx 								; skip over the relative branch.
.1b4b	4c 00 00	jmp $0000			jmp 	NextCode
.1b4e					BranchTestSucceeds:
.1b4e	68		pla				pla
.1b4f	85 07		sta $07				sta 	TOS+1
.1b51	68		pla				pla
.1b52	85 06		sta $06				sta 	TOS
.1b54					BranchTestSucceedsNoPop:
.1b54	e8		inx				inx 								; advance by two, to the offset
.1b55	e8		inx				inx
.1b56					BranchAlways:
.1b56	8a		txa				txa 								; A = Y = position
.1b57	a8		tay				tay 								; (IP),Y now points to the branch target
.1b58	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1b5a	aa		tax				tax 								; position back in this line.
.1b5b	ca		dex				dex
.1b5c	ca		dex				dex
.1b5d	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1b60					CallHandler:
.1b60	e8		inx				inx									; bump X to the call address.
.1b61	e8		inx				inx
.1b62	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1b64	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1b66	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1b68	f0 54		beq $1bbe			beq 	_CHOverflow
.1b6a	a5 04		lda $04				lda 	IP+1
.1b6c	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1b6f	a5 03		lda $03				lda 	IP
.1b71	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1b74	8a		txa				txa
.1b75	99 80 07	sta $0780,y			sta 	returnStackX,y
.1b78	8a		txa				txa 								; get the line number into temp1.
.1b79	a8		tay				tay
.1b7a	b1 03		lda ($03),y			lda 	(IP),y
.1b7c	85 10		sta $10				sta 	temp1
.1b7e	c8		iny				iny
.1b7f	b1 03		lda ($03),y			lda 	(IP),y
.1b81	85 11		sta $11				sta 	temp1+1
.1b83	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1b85	85 03		sta $03				sta 	0+(IP)
.1b87	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1b89	85 04		sta $04				sta 	1+(IP)
.1b8b	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1b8d	f0 17		beq $1ba6			beq 	_CHFail
.1b8f	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1b91					_CHSearch:
.1b91	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1b93	c5 10		cmp $10				cmp 	temp1
.1b95	f0 3e		beq $1bd5			beq 	_CHFoundLSB
.1b97					_CHSearchNext:
.1b97	18		clc				clc
.1b98	a5 03		lda $03				lda 	IP
.1b9a	72 03		adc ($03)			adc 	(IP)
.1b9c	85 03		sta $03				sta 	IP
.1b9e	90 02		bcc $1ba2			bcc 	_NoCarryAdv
.1ba0	e6 04		inc $04				inc 	IP+1
.1ba2					_NoCarryAdv:
.1ba2	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1ba4	d0 eb		bne $1b91			bne 	_CHSearch
.1ba6					_CHFail:
.1ba6	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1ba9	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1bb1	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.1bbe					_CHOverflow:
.1bbe	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1bc1	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1bc9	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1bd5					_CHFoundLSB:
.1bd5	c8		iny				iny 								; get MSB
.1bd6	b1 03		lda ($03),y			lda 	(IP),y
.1bd8	88		dey				dey
.1bd9	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1bdb	d0 ba		bne $1b97			bne 	_CHSearchNext
.1bdd	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1bdf	b1 03		lda ($03),y			lda 	(IP),y
.1be1	c9 2b		cmp #$2b			cmp 	#DefineCode & $FF
.1be3	d0 c1		bne $1ba6			bne 	_CHFail
.1be5	c8		iny				iny
.1be6	b1 03		lda ($03),y			lda 	(IP),y
.1be8	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1bea	d0 ba		bne $1ba6			bne 	_CHFail
.1bec	c8		iny				iny
.1bed	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1bef	18		clc				clc
.1bf0	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1bf2	aa		tax				tax
.1bf3	4c 00 00	jmp $0000			jmp 	NextCode
.1bf6					ReturnHandler:
.1bf6	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1bf8	30 15		bmi $1c0f			bmi 	_RHUnderflow 				; if -ve underflowed
.1bfa	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1bfc	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1bff	85 04		sta $04				sta 	IP+1
.1c01	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1c04	85 03		sta $03				sta 	IP
.1c06	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1c09	aa		tax				tax
.1c0a	f0 15		beq $1c21			beq 	_RHInLoop 					; this means you have done :something for ; next
.1c0c	4c 00 00	jmp $0000			jmp 	NextCode
.1c0f					_RHUnderflow:
.1c0f	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1c12	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>1c1a	52 45 54 55 52 4e 00
.1c21					_RHInLoop:
.1c21	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1c24	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>1c2c	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.1c39					CallHandlerDecode:
.1c39	a9 03		lda #$03			lda 	#CTH_Call					; space
.1c3b	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1c3e	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1c40	aa		tax				tax
.1c41	c8		iny				iny
.1c42	b1 08		lda ($08),y			lda 	(srcPtr),y
.1c44	a8		tay				tay
.1c45	8a		txa				txa
.1c46	20 83 1c	jsr $1c83			jsr 	FindLine 					; try to locate that line.
.1c49	b0 11		bcs $1c5c			bcs 	_CHDFound 					; if found .....
.1c4b					_CHDLineOnly:
.1c4b	48		pha				pha
.1c4c	a9 3c		lda #$3c			lda 	#"<"
.1c4e	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1c51	68		pla				pla
.1c52	18		clc				clc 								; output unsigned
.1c53	20 25 1e	jsr $1e25			jsr 	DecodeYAToBuffer
.1c56	a9 3e		lda #$3e			lda 	#">"
.1c58	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1c5b	60		rts				rts
.1c5c					_CHDFound:
.1c5c	48		pha				pha 								; save YA
.1c5d	5a		phy				phy
.1c5e	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1c60	b1 10		lda ($10),y			lda 	(temp1),y
.1c62	c9 2b		cmp #$2b			cmp 	#DefineCode & 255
.1c64	d0 07		bne $1c6d			bne 	_CHDNoDefine
.1c66	c8		iny				iny
.1c67	b1 10		lda ($10),y			lda 	(temp1),y
.1c69	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1c6b	f0 04		beq $1c71			beq 	_CHDFoundDefine
.1c6d					_CHDNoDefine:
.1c6d	7a		ply				ply									; restore the line number and print it in <>
.1c6e	68		pla				pla
.1c6f	80 da		bra $1c4b			bra 	_CHDLineOnly
.1c71					_CHDFoundDefine:
.1c71	68		pla				pla 								; throw saved line number.
.1c72	68		pla				pla
.1c73	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1c75					_CHDOutName:
.1c75	c8		iny				iny 								; next
.1c76	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1c78	48		pha				pha
.1c79	29 7f		and #$7f			and 	#$7F
.1c7b	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1c7e	68		pla				pla
.1c7f	0a		asl a				asl 	a 							; bit 7 to carry
.1c80	90 f3		bcc $1c75			bcc 	_CHDOutName
.1c82	60		rts				rts
.1c83					FindLine:
.1c83	48		pha				pha 								; save registers
.1c84	da		phx				phx
.1c85	5a		phy				phy
.1c86	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1c88	84 13		sty $13				sty 	temp2+1
.1c8a	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c8c	85 10		sta $10				sta 	0+(temp1)
.1c8e	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c90	85 11		sta $11				sta 	1+(temp1)
.1c92					_FLLoop:
.1c92	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1c94	18		clc				clc									; if so exit with CC.
.1c95	f0 1d		beq $1cb4			beq 	_FLExit
.1c97	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1c99	b1 10		lda ($10),y			lda 	(temp1),y
.1c9b	c5 12		cmp $12				cmp 	temp2
.1c9d	d0 08		bne $1ca7			bne 	_FLNext
.1c9f	c8		iny				iny
.1ca0	b1 10		lda ($10),y			lda 	(temp1),y
.1ca2	c5 13		cmp $13				cmp 	temp2+1
.1ca4	38		sec				sec 								; if so exit with CS
.1ca5	f0 0d		beq $1cb4			beq 	_FLExit
.1ca7					_FLNext:
.1ca7	18		clc				clc
.1ca8	a5 10		lda $10				lda 	temp1
.1caa	72 10		adc ($10)			adc 	(temp1)
.1cac	85 10		sta $10				sta 	temp1
.1cae	90 02		bcc $1cb2			bcc 	_NoCarryAdv
.1cb0	e6 11		inc $11				inc 	temp1+1
.1cb2					_NoCarryAdv:
.1cb2	80 de		bra $1c92			bra 	_FLLoop 					; keep looking.
.1cb4					_FLExit:
.1cb4	7a		ply				ply
.1cb5	fa		plx				plx
.1cb6	68		pla				pla
.1cb7	60		rts				rts
.1cb8	18		clc				clc
.1cb9	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1cba					NewHandler:
.1cba	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1cbd	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1cc0	4c 00 00	jmp $0000			jmp 	NextCode
.1cc3					ClrHandler:
.1cc3	86 10		stx $10				stx 	temp1
.1cc5	a2 80		ldx #$80			ldx 	#NumberStackBase
.1cc7	9a		txs				txs
.1cc8	a6 10		ldx $10				ldx 	temp1
.1cca	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1ccd	4c 00 00	jmp $0000			jmp 	NextCode
.1cd0					ClearVariableSpace:
.1cd0	a9 ff		lda #$ff			lda 	#$FF
.1cd2	85 05		sta $05				sta 	rsp
.1cd4	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1cd6	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1cd8	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1cda	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1cdc	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1cde					_CVSHashClear:
.1cde	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1ce0	99 40 06	sta $0640,y			sta 	hashTable,y
.1ce3	88		dey				dey
.1ce4	10 f8		bpl $1cde			bpl 	_CVSHashClear
.1ce6					_CVSFindEnd:
.1ce6	18		clc				clc
.1ce7	a5 0e		lda $0e				lda 	nextFreeMem
.1ce9	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1ceb	85 0e		sta $0e				sta 	nextFreeMem
.1ced	90 02		bcc $1cf1			bcc 	_NoCarryAdv
.1cef	e6 0f		inc $0f				inc 	nextFreeMem+1
.1cf1					_NoCarryAdv:
.1cf1	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1cf3	d0 f1		bne $1ce6			bne 	_CVSFindEnd
.1cf5	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1cf7	a0 00		ldy #$00			ldy 	#0
.1cf9	20 fd 1c	jsr $1cfd			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1cfc	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1cfd					AdvanceFreeMem:
.1cfd	18		clc				clc
.1cfe	65 0e		adc $0e				adc 	nextFreeMem
.1d00	85 0e		sta $0e				sta 	nextFreeMem
.1d02	98		tya				tya
.1d03	65 0f		adc $0f				adc 	nextFreeMem+1
.1d05	85 0f		sta $0f				sta 	nextFreeMem+1
.1d07	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1d08					ExitDump:
.1d08	ba		tsx				tsx 								; save Data Stack in temp1
.1d09	86 10		stx $10				stx 	temp1
.1d0b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1d0e					BreakCmd:
>1d0e	ff						.byte 	$FF
.1d0f	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1d12					DecodeLineIntoBufPtr:
.1d12	48		pha				pha
.1d13	da		phx				phx
.1d14	5a		phy				phy
.1d15	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1d17	84 09		sty $09				sty 	srcPtr+1
.1d19	90 1b		bcc $1d36			bcc 	_DecodeNoLineNumber
.1d1b	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1d1d	b1 08		lda ($08),y			lda 	(srcPtr),y
.1d1f	aa		tax				tax
.1d20	c8		iny				iny
.1d21	b1 08		lda ($08),y			lda 	(srcPtr),y
.1d23	a8		tay				tay
.1d24	8a		txa				txa
.1d25	18		clc				clc
.1d26	20 25 1e	jsr $1e25			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1d29	aa		tax				tax 								; count in X
.1d2a					_DecodeLineSpace:
.1d2a	e0 05		cpx #$05			cpx 	#5
.1d2c	f0 08		beq $1d36			beq 	_DecodeNoLineNumber
.1d2e	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1d30	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1d33	e8		inx				inx
.1d34	80 f4		bra $1d2a			bra 	_DecodeLineSpace
.1d36					_DecodeNoLineNumber:
.1d36	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1d38					_DecodeLoop:
.1d38	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1d3a	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1d3c	c8		iny				iny
.1d3d	b1 08		lda ($08),y			lda 	(srcPtr),y
.1d3f	85 11		sta $11				sta 	temp1+1
.1d41	c8		iny				iny 								; y points to the byte after it.
.1d42	a5 10		lda $10				lda 	temp1
.1d44	c9 e9		cmp #$e9			cmp 	#NextLine & $FF
.1d46	d0 06		bne $1d4e			bne 	_DecodeNotEOL
.1d48	a5 11		lda $11				lda 	temp1+1
.1d4a	c9 20		cmp #$20			cmp 	#NextLine >> 8
.1d4c	f0 0b		beq $1d59			beq 	_DecodeEOL
.1d4e					_DecodeNotEOL:
.1d4e	20 61 1d	jsr $1d61			jsr 	IdentifyCodeWord
.1d51	20 ae 1d	jsr $1dae			jsr 	DecodeFoundWord
.1d54	20 98 1d	jsr $1d98			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1d57	80 df		bra $1d38			bra 	_DecodeLoop 				; and go round again
.1d59					_DecodeEOL:
.1d59	a9 00		lda #$00			lda 	#0
.1d5b	92 0a		sta ($0a)			sta 	(bufPtr)
.1d5d	7a		ply				ply 								; restore registers and exit
.1d5e	fa		plx				plx
.1d5f	68		pla				pla
.1d60	60		rts				rts
.1d61					IdentifyCodeWord:
.1d61	5a		phy				phy 								; save current position on the stack.
.1d62	a9 59		lda #$59			lda 	#(Dictionary) & $FF
.1d64	85 0c		sta $0c				sta 	0+(matchPtr)
.1d66	a9 23		lda #$23			lda 	#(Dictionary) >> 8
.1d68	85 0d		sta $0d				sta 	1+(matchPtr)
.1d6a					_DecodeIdentify:
.1d6a	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1d6c	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1d6e	c5 10		cmp $10				cmp 	temp1
.1d70	d0 07		bne $1d79			bne 	_DecodeIdNext
.1d72	c8		iny				iny
.1d73	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1d75	c5 11		cmp $11				cmp 	temp1+1
.1d77	f0 1d		beq $1d96			beq 	_DecodeIdFound
.1d79					_DecodeIdNext:
.1d79	18		clc				clc
.1d7a	b2 0c		lda ($0c)			lda 	(matchPtr)
.1d7c	f0 0a		beq $1d88			beq 	_DecodeIdIssue
.1d7e	65 0c		adc $0c				adc 	matchPtr
.1d80	85 0c		sta $0c				sta 	matchPtr
.1d82	90 e6		bcc $1d6a			bcc 	_DecodeIdentify
.1d84	e6 0d		inc $0d				inc 	matchPtr+1
.1d86	80 e2		bra $1d6a			bra 	_DecodeIdentify
.1d88					_DecodeIdIssue:
.1d88	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1d8b	44 45 43 4f 44 45 2f 42				.text 	"DECODE/BUG",0
>1d93	55 47 00
.1d96					_DecodeIdFound:
.1d96	7a		ply				ply 								; restore position.
.1d97	60		rts				rts
.1d98					AdvanceToNext:
.1d98	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1d99	a0 01		ldy #$01			ldy 	#1
.1d9b	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1d9d	29 03		and #$03			and 	#3 							; bits 0-1.
.1d9f	7a		ply				ply
.1da0	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1da2	d0 02		bne $1da6			bne 	_ATN012
.1da4	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1da6					_ATN012:
.1da6	85 12		sta $12				sta 	temp2 						; now add that to Y
.1da8	98		tya				tya
.1da9	18		clc				clc
.1daa	65 12		adc $12				adc 	temp2
.1dac	a8		tay				tay
.1dad	60		rts				rts
.1dae					DecodeFoundWord:
.1dae	5a		phy				phy 								; save current position
.1daf	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1db1	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1db3	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1db5	29 10		and #$10			and 	#$10
.1db7	d0 0e		bne $1dc7			bne 	_DFWSpecialDecoder
.1db9	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1dbb	30 08		bmi $1dc5			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1dbd	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1dbf	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1dc2	20 e0 1d	jsr $1de0			jsr 	DecodeCurrentWord 			; expand that.
.1dc5					_DFWExit:
.1dc5	7a		ply				ply 								; restore current position
.1dc6	60		rts				rts
.1dc7					_DFWSpecialDecoder:
.1dc7	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1dc9	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1dcb	85 12		sta $12				sta 	temp2
.1dcd	c8		iny				iny
.1dce	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1dd0	85 13		sta $13				sta 	temp2+1
.1dd2	7a		ply				ply 	 							; restore current position into Y
.1dd3	48		pha				pha 								; save registers
.1dd4	da		phx				phx
.1dd5	5a		phy				phy
.1dd6	20 dd 1d	jsr $1ddd			jsr 	_DFWCallDecoder				; call the decoder routine
.1dd9	7a		ply				ply 								; restore registers and exit
.1dda	fa		plx				plx
.1ddb	68		pla				pla
.1ddc	60		rts				rts
.1ddd					_DFWCallDecoder:
.1ddd	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1de0					DecodeCurrentWord:
.1de0	5a		phy				phy
.1de1	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1de3	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1de5	a0 04		ldy #$04			ldy 	#4 							; original offset
.1de7	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1de8	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1de9	4a		lsr a				lsr 	a 							; bit set.
.1dea	4a		lsr a				lsr 	a
.1deb	4a		lsr a				lsr 	a 							; decoder bit
.1dec	90 02		bcc $1df0			bcc 	_DWBNoDec
.1dee	c8		iny				iny
.1def	c8		iny				iny
.1df0					_DWBNoDec:
.1df0	4a		lsr a				lsr 	a
.1df1	90 02		bcc $1df5			bcc 	_DWBNoEnc
.1df3	c8		iny				iny
.1df4	c8		iny				iny
.1df5					_DWBNoEnc:
.1df5					_DWBWordOut:
.1df5	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1df7	48		pha				pha
.1df8	29 7f		and #$7f			and 	#$7F
.1dfa	20 03 1e	jsr $1e03			jsr		DecodeWriteBuffer
.1dfd	c8		iny				iny
.1dfe	68		pla				pla
.1dff	10 f4		bpl $1df5			bpl 	_DWBWordOut
.1e01	7a		ply				ply 								; restore Y and exit
.1e02	60		rts				rts
.1e03					DecodeWriteBuffer:
.1e03	92 0a		sta ($0a)			sta 	(bufPtr)
.1e05	e6 0a		inc $0a				inc 	bufPtr
.1e07	d0 02		bne $1e0b			bne 	_DWBNoCarry
.1e09	e6 0b		inc $0b				inc 	bufPtr+1
.1e0b					_DWBNoCarry:
.1e0b	60		rts				rts
.1e0c					DecodeOutputData:
.1e0c	48		pha				pha
.1e0d	da		phx				phx
.1e0e	5a		phy				phy
.1e0f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1e11	aa		tax				tax
.1e12					_DODLoop:
.1e12	ca		dex				dex 								; done it all ?
.1e13	f0 0c		beq $1e21			beq		_DODExit
.1e15	c8		iny				iny 								; output next character
.1e16	b1 08		lda ($08),y			lda 	(srcPtr),y
.1e18	29 7f		and #$7f			and 	#$7F
.1e1a	f0 f6		beq $1e12			beq 	_DODLoop 					; don't print NULL
.1e1c	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.1e1f	80 f1		bra $1e12			bra 	_DODLoop
.1e21					_DODExit:
.1e21	7a		ply				ply
.1e22	fa		plx				plx
.1e23	68		pla				pla
.1e24	60		rts				rts
.1e25					DecodeYAToBuffer:
.1e25	da		phx				phx
.1e26	5a		phy				phy
.1e27	48		pha				pha
.1e28	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1e2a	85 12		sta $12				sta 	temp2
.1e2c	a5 0b		lda $0b				lda 	bufPtr+1
.1e2e	85 13		sta $13				sta 	temp2+1
.1e30	68		pla				pla
.1e31	20 94 21	jsr $2194			jsr 	ConvertToStringMain 		; convert YA to string there
.1e34	aa		tax				tax 								; chars output to X
.1e35	18		clc				clc
.1e36	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1e38	85 0a		sta $0a				sta 	bufPtr
.1e3a	90 02		bcc $1e3e			bcc 	_DYABNoCarry
.1e3c	e6 0b		inc $0b				inc 	bufPtr+1
.1e3e					_DYABNoCarry:
.1e3e	8a		txa				txa 								; count in A
.1e3f	7a		ply				ply									; restore and exit.
.1e40	fa		plx				plx
.1e41	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/edit.src

.1e42					EditProgram:
.1e42	20 bf 1e	jsr $1ebf			jsr 	EDFindLine					; find line address -> temp1
.1e45	90 0f		bcc $1e56			bcc 	_EPNotFound 				; if missing don't delete it.
.1e47	a5 10		lda $10				lda 	temp1 						; save line address
.1e49	48		pha				pha
.1e4a	a5 11		lda $11				lda 	temp1+1
.1e4c	48		pha				pha
.1e4d	20 64 1e	jsr $1e64			jsr 	EDDeleteLine 				; delete the line
.1e50	68		pla				pla 								; restore line address
.1e51	85 11		sta $11				sta 	temp1+1
.1e53	68		pla				pla
.1e54	85 10		sta $10				sta 	temp1
.1e56					_EPNotFound:
.1e56	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1e59	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1e5b	f0 03		beq $1e60			beq 	_EPNoInsert
.1e5d	20 87 1e	jsr $1e87			jsr 	EDInsertLine 				; insert line back in.
.1e60					_EPNoInsert:
.1e60	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace
.1e63	60		rts				rts
.1e64					EDDeleteLine:
.1e64	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace
.1e67	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1e69	a2 00		ldx #$00			ldx 	#0
.1e6b	b1 10		lda ($10),y			lda 	(temp1),y
.1e6d	a8		tay				tay 								; put in Y
.1e6e					_EDDelLoop:
.1e6e	b1 10		lda ($10),y			lda 	(temp1),y 					; get it
.1e70	81 10		sta ($10,x)			sta 	(temp1,x) 					; write it.
.1e72	a5 10		lda $10				lda 	temp1 						; check if pointer has reached the end of
.1e74	c5 0e		cmp $0e				cmp		nextFreeMem 				; low memory. We will have copied down an
.1e76	d0 06		bne $1e7e			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1e78	a5 11		lda $11				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1e7a	c5 0f		cmp $0f				cmp 	nextFreeMem+1				; doesn't really matter.
.1e7c	f0 08		beq $1e86			beq		_EDDelExit
.1e7e					_EDDelNext:
.1e7e	e6 10		inc $10				inc 	temp1 						; go to next byte.
.1e80	d0 ec		bne $1e6e			bne 	_EDDelLoop
.1e82	e6 11		inc $11				inc 	temp1+1
.1e84	80 e8		bra $1e6e			bra 	_EDDelLoop
.1e86					_EDDelExit:
.1e86	60		rts				rts
.1e87					EDInsertLine:
.1e87	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace
.1e8a	a5 0e		lda $0e				lda 	nextFreeMem 				; copy high memory to temp3
.1e8c	85 14		sta $14				sta 	temp3
.1e8e	a5 0f		lda $0f				lda 	nextFreeMem+1
.1e90	85 15		sta $15				sta 	temp3+1
.1e92	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1e95	a2 00		ldx #$00			ldx 	#0
.1e97					_EDInsLoop:
.1e97	a1 14		lda ($14,x)			lda 	(temp3,x)					; copy it up
.1e99	91 14		sta ($14),y			sta 	(temp3),y
.1e9b	a5 14		lda $14				lda 	temp3 						; reached the insert point (temp1)
.1e9d	c5 10		cmp $10				cmp 	temp1
.1e9f	d0 06		bne $1ea7			bne 	_EDINextShift
.1ea1	a5 15		lda $15				lda 	temp3+1
.1ea3	c5 11		cmp $11				cmp 	temp1+1
.1ea5	f0 0a		beq $1eb1			beq 	_EDIShiftOver
.1ea7					_EDINextShift:
.1ea7	a5 14		lda $14				lda 	temp3 						; decrement the copy pointer.
.1ea9	d0 02		bne $1ead			bne 	_EDINoBorrow
.1eab	c6 15		dec $15				dec 	temp3+1
.1ead					_EDINoBorrow:
.1ead	c6 14		dec $14				dec 	temp3
.1eaf	80 e6		bra $1e97			bra 	_EDInsLoop
.1eb1					_EDIShiftOver:
.1eb1	a0 00		ldy #$00			ldy 	#0
.1eb3					_EDICopyCode:
.1eb3	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1eb6	91 10		sta ($10),y			sta 	(temp1),y 					; write out
.1eb8	c8		iny				iny 								; bump pointers
.1eb9	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1ebc	d0 f5		bne $1eb3			bne 	_EDICopyCode
.1ebe	60		rts				rts
.1ebf					EDFindLine:
.1ebf	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1ec1	85 10		sta $10				sta 	0+(temp1)
.1ec3	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1ec5	85 11		sta $11				sta 	1+(temp1)
.1ec7					_EDFLLoop:
.1ec7	b2 10		lda ($10)			lda 	(temp1) 					; check offset
.1ec9	f0 24		beq $1eef			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1ecb	a0 01		ldy #$01			ldy 	#1							; look at line #
.1ecd	38		sec				sec
.1ece	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1ed1	f1 10		sbc ($10),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1ed3	aa		tax				tax	 								; this will return 10.
.1ed4	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1ed7	c8		iny				iny
.1ed8	f1 10		sbc ($10),y			sbc 	(temp1),y
.1eda	90 13		bcc $1eef			bcc 	_EDFLFail					; if target < current then failed.
.1edc	d0 04		bne $1ee2			bne 	_EDFLNext 					; if non-zero then goto next
.1ede	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1ee0	f0 0f		beq $1ef1			beq 	_EDFLFound
.1ee2					_EDFLNext:
.1ee2	18		clc				clc
.1ee3	a5 10		lda $10				lda 	temp1
.1ee5	72 10		adc ($10)			adc 	(temp1)
.1ee7	85 10		sta $10				sta 	temp1
.1ee9	90 02		bcc $1eed			bcc 	_NoCarryAdv
.1eeb	e6 11		inc $11				inc 	temp1+1
.1eed					_NoCarryAdv:
.1eed	80 d8		bra $1ec7			bra 	_EDFLLoop
.1eef					_EDFLFail:
.1eef	18		clc				clc
.1ef0	60		rts				rts
.1ef1					_EDFLFound:
.1ef1	38		sec				sec
.1ef2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1ef3					ListCode:
.1ef3	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1ef5	64 1f		stz $1f				stz 	ListLowest+1
.1ef7	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1ef9	85 1d		sta $1d				sta 	ListCount
.1efb	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1efd	85 18		sta $18				sta 	0+(listPtr)
.1eff	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1f01	85 19		sta $19				sta 	1+(listPtr)
.1f03	86 10		stx $10				stx 	temp1						; S->A
.1f05	ba		tsx				tsx
.1f06	8a		txa				txa
.1f07	a6 10		ldx $10				ldx 	temp1
.1f09	c9 80		cmp #$80			cmp 	#NumberStackBase
.1f0b	f0 0e		beq $1f1b			beq 	_LCLoop
.1f0d	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1f0f	85 1e		sta $1e				sta 	ListLowest
.1f11	a5 07		lda $07				lda 	TOS+1
.1f13	85 1f		sta $1f				sta 	ListLowest+1
.1f15	68		pla				pla
.1f16	85 07		sta $07				sta 	TOS+1
.1f18	68		pla				pla
.1f19	85 06		sta $06				sta 	TOS
.1f1b					_LCLoop:
.1f1b	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1f1d	f0 4e		beq $1f6d			beq 	_LCExit
.1f1f	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1f21	b1 18		lda ($18),y			lda 	(listPtr),y
.1f23	c5 1e		cmp $1e				cmp 	ListLowest
.1f25	c8		iny				iny
.1f26	b1 18		lda ($18),y			lda 	(listPtr),y
.1f28	e5 1f		sbc $1f				sbc 	ListLowest+1
.1f2a	90 34		bcc $1f60			bcc 	_LCNext
.1f2c	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1f2e	85 0a		sta $0a				sta 	0+(bufPtr)
.1f30	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1f32	85 0b		sta $0b				sta 	1+(bufPtr)
.1f34	a5 18		lda $18				lda 	listPtr 					; output the line.
.1f36	a4 19		ldy $19				ldy 	listPtr+1
.1f38	38		sec				sec
.1f39	20 12 1d	jsr $1d12			jsr 	DecodeLineIntoBufPtr
.1f3c	a9 02		lda #$02			lda 	#CTH_LineNo
.1f3e	20 68 11	jsr $1168			jsr 	ExternColour
.1f41	a0 ff		ldy #$ff			ldy 	#255
.1f43					_LCLoop2:
.1f43	c8		iny				iny
.1f44	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1f47	f0 0e		beq $1f57			beq 	_LCEnd
.1f49	c9 20		cmp #$20			cmp 	#32
.1f4b	b0 05		bcs $1f52			bcs 	_LCPrint
.1f4d	20 68 11	jsr $1168			jsr 	ExternColour
.1f50	a9 20		lda #$20			lda 	#32
.1f52					_LCPrint:
.1f52	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f55	80 ec		bra $1f43			bra 	_LCLoop2
.1f57	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1f59	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f5c	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1f5e	f0 0d		beq $1f6d			beq 	_LCExit
.1f60					_LCNext:
.1f60	18		clc				clc
.1f61	a5 18		lda $18				lda 	listPtr
.1f63	72 18		adc ($18)			adc 	(listPtr)
.1f65	85 18		sta $18				sta 	listPtr
.1f67	90 02		bcc $1f6b			bcc 	_NoCarryAdv
.1f69	e6 19		inc $19				inc 	listPtr+1
.1f6b					_NoCarryAdv:
.1f6b	80 ae		bra $1f1b			bra 	_LCLoop 					; go round again.
.1f6d					_LCExit:
.1f6d	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1f70					RunProgram:
.1f70	86 10		stx $10				stx 	temp1
.1f72	a2 80		ldx #$80			ldx 	#NumberStackBase
.1f74	9a		txs				txs
.1f75	a6 10		ldx $10				ldx 	temp1
.1f77	20 d0 1c	jsr $1cd0			jsr 	ClearVariableSpace 			; clear variables etc.
.1f7a	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1f7c	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1f7e	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1f81	4c 00 00	jmp $0000			jmp 	NextCode
.1f84					Call6502:
.1f84	a5 06		lda $06				lda 	TOS 						; copy call address
.1f86	85 10		sta $10				sta 	temp1
.1f88	a5 07		lda $07				lda 	TOS+1
.1f8a	85 11		sta $11				sta 	temp1+1
.1f8c	68		pla				pla
.1f8d	85 07		sta $07				sta 	TOS+1
.1f8f	68		pla				pla
.1f90	85 06		sta $06				sta 	TOS
.1f92	20 98 1f	jsr $1f98			jsr 	_CallTemp1 					; call it
.1f95	4c 00 00	jmp $0000			jmp 	NextCode
.1f98					_CallTemp1:
.1f98	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1f9b					AssertCode:
.1f9b	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1f9d	05 07		ora $07				ora 	TOS+1
.1f9f	f0 09		beq $1faa			beq 	_ASFail 					; if zero fail
.1fa1	68		pla				pla
.1fa2	85 07		sta $07				sta 	TOS+1
.1fa4	68		pla				pla
.1fa5	85 06		sta $06				sta 	TOS
.1fa7	4c 00 00	jmp $0000			jmp 	NextCode
.1faa					_ASFail:
.1faa	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1fad	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1fb4					StopCode:
.1fb4	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1fb7	53 54 4f 50 00					.text 	"STOP",0
.1fbc					EndProgram:
.1fbc	4c 14 10	jmp $1014			jmp 	WarmStart
.1fbf					VlistCode:
.1fbf	a9 59		lda #$59			lda 	#(Dictionary) & $FF
.1fc1	85 10		sta $10				sta 	0+(temp1)
.1fc3	a9 23		lda #$23			lda 	#(Dictionary) >> 8
.1fc5	85 11		sta $11				sta 	1+(temp1)
.1fc7	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1fc9	b1 10		lda ($10),y			lda 	(temp1),y
.1fcb	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1fcd	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1fce	4a		lsr a				lsr 	a
.1fcf	4a		lsr a				lsr		a
.1fd0	4a		lsr a				lsr 	a
.1fd1	4a		lsr a				lsr 	a 							; add those bits in
.1fd2	90 02		bcc $1fd6			bcc 	_VLNoDec
.1fd4	c8		iny				iny
.1fd5	c8		iny				iny
.1fd6					_VLNoDec:
.1fd6	4a		lsr a				lsr 	a
.1fd7	90 02		bcc $1fdb			bcc 	_VLNoEnc
.1fd9	c8		iny				iny
.1fda	c8		iny				iny
.1fdb					_VLNoEnc:
.1fdb	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1fdd	c9 24		cmp #$24			cmp 	#"$"
.1fdf	d0 06		bne $1fe7			bne 	_VLPrint
.1fe1	c8		iny				iny
.1fe2	51 10		eor ($10),y			eor 	(temp1),y
.1fe4	f0 13		beq $1ff9			beq 	_VLNext
.1fe6	88		dey				dey
.1fe7					_VLPrint:
.1fe7	b1 10		lda ($10),y			lda 	(temp1),y
.1fe9	48		pha				pha
.1fea	c8		iny				iny
.1feb	29 7f		and #$7f			and 	#$7F
.1fed	20 5e 11	jsr $115e			jsr 	ExternPrint
.1ff0	68		pla				pla
.1ff1	0a		asl a				asl 	a
.1ff2	90 f3		bcc $1fe7			bcc 	_VLPrint
.1ff4	a9 20		lda #$20			lda 	#32
.1ff6	20 5e 11	jsr $115e			jsr 	ExternPrint
.1ff9					_VLNext:
.1ff9	18		clc				clc 								; go to next
.1ffa	b2 10		lda ($10)			lda 	(temp1)
.1ffc	65 10		adc $10				adc 	temp1
.1ffe	85 10		sta $10				sta 	temp1
.2000	90 02		bcc $2004			bcc 	_VLNoCarry
.2002	e6 11		inc $11				inc 	temp1+1
.2004					_VLNoCarry:
.2004	b2 10		lda ($10)			lda 	(temp1)
.2006	d0 bf		bne $1fc7			bne 	_VLLoop
.2008	a9 0d		lda #$0d			lda 	#13
.200a	20 5e 11	jsr $115e			jsr 	ExternPrint
.200d	4c 00 00	jmp $0000			jmp 	NextCode
.2010					DumpStack:
.2010	a9 5b		lda #$5b			lda		#"["
.2012	20 5e 11	jsr $115e			jsr 	ExternPrint
.2015	86 10		stx $10				stx 	temp1 						; X -> A
.2017	ba		tsx				tsx
.2018	8a		txa				txa
.2019	a6 10		ldx $10				ldx 	temp1
.201b	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.201d	f0 2f		beq $204e			beq 	_DSExit
.201f	48		pha				pha 								; save it
.2020	a9 07		lda #$07			lda 	#COL_WHITE
.2022	20 68 11	jsr $1168			jsr 	ExternColour
.2025	a5 06		lda $06				lda 	TOS 						; print TOS then stack values backwards
.2027	a4 07		ldy $07				ldy 	TOS+1
.2029	38		sec				sec 								; print unsigned.
.202a	20 6e 21	jsr $216e			jsr 	PrintYA
.202d	a9 06		lda #$06			lda 	#COL_CYAN
.202f	20 68 11	jsr $1168			jsr 	ExternColour
.2032	7a		ply				ply 								; restore offset
.2033					_DSLoop:
.2033	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.2035	f0 17		beq $204e			beq 	_DSExit
.2037	a9 20		lda #$20			lda 	#" " 						; space
.2039	20 5e 11	jsr $115e			jsr 	ExternPrint
.203c	5a		phy				phy 								; save pos
.203d	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.2040	48		pha				pha
.2041	b9 02 01	lda $0102,y			lda 	$0102,y
.2044	7a		ply				ply
.2045	38		sec				sec
.2046	20 6e 21	jsr $216e			jsr 	PrintYA 					; print it
.2049	7a		ply				ply 								; restore and advance pos
.204a	c8		iny				iny
.204b	c8		iny				iny
.204c	80 e5		bra $2033			bra 	_DSLoop
.204e					_DSExit:
.204e	a9 5d		lda #$5d			lda		#"]"
.2050	20 5e 11	jsr $115e			jsr 	ExternPrint
.2053	a9 0d		lda #$0d			lda 	#13
.2055	20 5e 11	jsr $115e			jsr 	ExternPrint
.2058	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.205b					ConvertToInteger:
.205b	84 17		sty $17				sty 	temp4+1
.205d	85 16		sta $16				sta 	temp4
.205f	64 14		stz $14				stz 	temp3 						; reset value
.2061	64 15		stz $15				stz 	temp3+1
.2063	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.2065	a0 00		ldy #$00			ldy 	#0 							; look at first character
.2067	b1 16		lda ($16),y			lda 	(temp4),y
.2069	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.206b	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.206d	d0 01		bne $2070			bne 	_CTINotMinus
.206f	c8		iny				iny									; skip -
.2070					_CTINotMinus:
.2070	b1 16		lda ($16),y			lda 	(temp4),y
.2072	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.2074	d0 03		bne $2079			bne 	_CTILoop
.2076	c6 10		dec $10				dec 	temp1
.2078	c8		iny				iny
.2079					_CTILoop:
.2079	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.207b	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.207d	38		sec				sec
.207e	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.2080	90 65		bcc $20e7			bcc 	_CTIFail 					; out of range.
.2082	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.2084	90 0b		bcc $2091			bcc 	_CTILegal
.2086	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.2088	90 5d		bcc $20e7			bcc 	_CTIFail
.208a	38		sec				sec
.208b	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.208d	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.208f	b0 56		bcs $20e7			bcs 	_CTIFail
.2091					_CTILegal:
.2091	48		pha				pha 								; save digit value.
.2092	06 14		asl $14				asl 	temp3
.2094	26 15		rol $15				rol 	temp3+1
.2096	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.2098	85 12		sta $12				sta 	temp2
.209a	a5 15		lda $15				lda 	temp3+1
.209c	85 13		sta $13				sta 	temp2+1
.209e	06 14		asl $14				asl 	temp3
.20a0	26 15		rol $15				rol 	temp3+1
.20a2	06 14		asl $14				asl 	temp3
.20a4	26 15		rol $15				rol 	temp3+1
.20a6	24 10		bit $10				bit 	temp1 						; hexadecimal
.20a8	10 07		bpl $20b1			bpl 	_CTIDecimal
.20aa	06 14		asl $14				asl 	temp3
.20ac	26 15		rol $15				rol 	temp3+1
.20ae	68		pla				pla 								; get digit back
.20af	80 12		bra $20c3			bra 	_CTIAddLoop
.20b1					_CTIDecimal:
.20b1	18		clc				clc 								; x 8 + x 2 = x 10
.20b2	a5 14		lda $14				lda 	temp3
.20b4	65 12		adc $12				adc 	temp2
.20b6	85 14		sta $14				sta 	temp3
.20b8	a5 15		lda $15				lda 	temp3+1
.20ba	65 13		adc $13				adc 	temp2+1
.20bc	85 15		sta $15				sta 	temp3+1
.20be	68		pla				pla 								; check digit 0-9
.20bf	c9 0a		cmp #$0a			cmp 	#10
.20c1	b0 24		bcs $20e7			bcs 	_CTIFail
.20c3					_CTIAddLoop:
.20c3	18		clc				clc
.20c4	65 14		adc $14				adc 	temp3
.20c6	85 14		sta $14				sta 	temp3
.20c8	90 02		bcc $20cc			bcc 	_CTINoCarry
.20ca	e6 15		inc $15				inc 	temp3+1
.20cc					_CTINoCarry:
.20cc	c8		iny				iny
.20cd	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.20cf	c9 21		cmp #$21			cmp 	#32+1
.20d1	b0 a6		bcs $2079			bcs 	_CTILoop 					; no, go back.
.20d3	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.20d5	d0 0d		bne $20e4			bne 	_CTIOkay
.20d7	38		sec				sec
.20d8	a9 00		lda #$00			lda 	#0 							; negate temp3.
.20da	e5 14		sbc $14				sbc 	temp3
.20dc	85 14		sta $14				sta 	temp3
.20de	a9 00		lda #$00			lda 	#0
.20e0	e5 15		sbc $15				sbc 	temp3+1
.20e2	85 15		sta $15				sta 	temp3+1
.20e4					_CTIOkay:
.20e4	98		tya				tya
.20e5	38		sec				sec
.20e6	60		rts				rts
.20e7					_CTIFail:
.20e7	18		clc				clc
.20e8	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.20e9					NextLine:
.20e9	18		clc				clc
.20ea	a5 03		lda $03				lda 	IP
.20ec	72 03		adc ($03)			adc 	(IP)
.20ee	85 03		sta $03				sta 	IP
.20f0	90 02		bcc $20f4			bcc 	_NoCarryAdv
.20f2	e6 04		inc $04				inc 	IP+1
.20f4					_NoCarryAdv:
.20f4	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.20f6	f0 05		beq $20fd			beq 	_NLGoEnd
.20f8	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.20fa	4c 00 00	jmp $0000			jmp 	NextCode
.20fd					_NLGoEnd:
.20fd	4c 14 10	jmp $1014			jmp 	WarmStart
.2100					SkipComment:
.2100	e8		inx				inx									; (IP),X points to the length.
.2101	e8		inx				inx
.2102	8a		txa				txa
.2103	a8		tay				tay 								; put into Y
.2104	18		clc				clc
.2105	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.2107	aa		tax				tax 								; put back in X
.2108	ca		dex				dex
.2109	ca		dex				dex
.210a	4c 00 00	jmp $0000			jmp 	NextCode
.210d					CommentDecoder:
.210d	a9 06		lda #$06			lda 	#CTH_Keyword
.210f	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2112	a9 27		lda #$27			lda 	#"'"
.2114	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2117	b1 08		lda ($08),y			lda 	(srcPtr),y 					; check if there is no data
.2119	c9 01		cmp #$01			cmp 	#1
.211b	f0 0d		beq $212a			beq 	_CDEmpty 					; if so print nothing.
.211d	a9 0b		lda #$0b			lda 	#CTH_Comment
.211f	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2122	20 0c 1e	jsr $1e0c			jsr 	DecodeOutputData
.2125	a9 20		lda #$20			lda 	#32
.2127	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.212a					_CDEmpty
.212a	60		rts				rts
.212b					DefineCode:
.212b	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>212e	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>2136	44 45 46 49 4e 49 54 49 4f 4e 00
.2141					DefineDecoder:
.2141	a9 07		lda #$07			lda 	#CTH_Definition
.2143	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2146	a9 3a		lda #$3a			lda 	#":"
.2148	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.214b	20 0c 1e	jsr $1e0c			jsr 	DecodeOutputData
.214e	a9 20		lda #$20			lda 	#32
.2150	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2153	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.2154					IntToString:
.2154	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.2156	85 12		sta $12				sta 	0+(temp2)
.2158	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.215a	85 13		sta $13				sta 	1+(temp2)
.215c	a5 06		lda $06				lda 	TOS 						; value in YA
.215e	a4 07		ldy $07				ldy 	TOS+1
.2160	20 90 21	jsr $2190			jsr 	ConvertToString
.2163	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.2165	85 06		sta $06				sta 	0+(TOS)
.2167	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.2169	85 07		sta $07				sta 	1+(TOS)
.216b	4c 00 00	jmp $0000			jmp 	NextCode
.216e					PrintYA:
.216e	48		pha				pha
.216f	da		phx				phx
.2170	5a		phy				phy
.2171	48		pha				pha
.2172	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.2174	85 12		sta $12				sta 	0+(temp2)
.2176	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.2178	85 13		sta $13				sta 	1+(temp2)
.217a	68		pla				pla
.217b	20 94 21	jsr $2194			jsr 	ConvertToStringMain
.217e	a2 00		ldx #$00			ldx 	#0
.2180					_PrintYALoop:
.2180	bd 10 08	lda $0810,x			lda 	textBuffer,x
.2183	20 5e 11	jsr $115e			jsr 	ExternPrint
.2186	e8		inx				inx
.2187	bd 10 08	lda $0810,x			lda 	textBuffer,x
.218a	d0 f4		bne $2180			bne 	_PrintYALoop
.218c	7a		ply				ply
.218d	fa		plx				plx
.218e	68		pla				pla
.218f	60		rts				rts
.2190					ConvertToString:
.2190	38		sec				sec
.2191	80 01		bra $2194			bra 	ConvertToStringMain
.2193					ConvertToStringUnsigned:
.2193	18		clc				clc
.2194					ConvertToStringMain:
.2194	da		phx				phx									; save XY
.2195	5a		phy				phy
.2196	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.2198	85 10		sta $10				sta 	temp1 						; save YA in temp1
.219a	84 11		sty $11				sty 	temp1+1
.219c	a0 00		ldy #$00			ldy 	#0 							; index to result.
.219e	90 16		bcc $21b6			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.21a0	a5 11		lda $11				lda 	temp1+1 					; is it negative
.21a2	10 12		bpl $21b6			bpl 	_CTSUnsigned
.21a4	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.21a6	91 12		sta ($12),y			sta 	(temp2),y
.21a8	c8		iny				iny
.21a9	38		sec				sec 								; negate temp1
.21aa	a9 00		lda #$00			lda 	#0
.21ac	e5 10		sbc $10				sbc 	temp1
.21ae	85 10		sta $10				sta 	temp1
.21b0	a9 00		lda #$00			lda 	#0
.21b2	e5 11		sbc $11				sbc 	temp1+1
.21b4	85 11		sta $11				sta 	temp1+1
.21b6					_CTSUnsigned:
.21b6	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.21b8					_CTSLoop:
.21b8	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.21ba	91 12		sta ($12),y			sta 	(temp2),y
.21bc					_CTSSubLoop:
.21bc	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.21be	1a		inc a				inc 	a
.21bf	91 12		sta ($12),y			sta 	(temp2),y
.21c1	38		sec				sec 								; do subtraction saving interim result
.21c2	a5 10		lda $10				lda 	temp1
.21c4	fd f7 21	sbc $21f7,x			sbc 	_CTSTable,x
.21c7	48		pha				pha
.21c8	a5 11		lda $11				lda 	temp1+1
.21ca	fd f8 21	sbc $21f8,x			sbc 	_CTSTable+1,x
.21cd	90 07		bcc $21d6			bcc 	_CTSCantSubtract 			; end of subtraction.
.21cf	85 11		sta $11				sta 	temp1+1 					; save result back
.21d1	68		pla				pla
.21d2	85 10		sta $10				sta 	temp1
.21d4	80 e6		bra $21bc			bra 	_CTSSubLoop
.21d6					_CTSCantSubtract:
.21d6	68		pla				pla 								; throw away interim
.21d7	e8		inx				inx 								; next subtractor
.21d8	e8		inx				inx
.21d9	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.21db	49 30		eor #$30			eor 	#"0"
.21dd	05 1a		ora $1a				ora 	SignCount
.21df	85 1a		sta $1a				sta 	SignCount
.21e1	f0 01		beq $21e4			beq		_CTSLZ 						; if all zeros so far suppress.
.21e3	c8		iny				iny 								; next character
.21e4					_CTSLZ:
.21e4	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.21e6	d0 d0		bne $21b8			bne 	_CTSLoop
.21e8					_CTSComplete:
.21e8	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.21ea	09 30		ora #$30			ora 	#48 						; ASCII
.21ec	91 12		sta ($12),y			sta 	(temp2),y					; write out
.21ee	c8		iny				iny
.21ef	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.21f1	91 12		sta ($12),y			sta 	(temp2),y
.21f3	98		tya				tya 								; size in A
.21f4	7a		ply				ply									; pull and exit.
.21f5	fa		plx				plx
.21f6	60		rts				rts
.21f7					_CTSTable:
>21f7	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.21ff					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.21ff					VarAddressHandler:
.21ff	18		clc				clc 								; find variable, error if it doesn't exist.
.2200	20 51 22	jsr $2251			jsr 	VariableFind
.2203	a5 06		lda $06				lda 	TOS
.2205	48		pha				pha
.2206	a5 07		lda $07				lda 	TOS+1
.2208	48		pha				pha
.2209	a5 10		lda $10				lda 	temp1 						; the address is the new value
.220b	85 06		sta $06				sta 	TOS
.220d	a5 11		lda $11				lda		temp1+1
.220f	85 07		sta $07				sta 	TOS+1
.2211	4c 00 00	jmp $0000			jmp 	NextCode
.2214					VarAddrHandlerDecode:
.2214	a9 26		lda #$26			lda 	#"&"
.2216	4c 06 23	jmp $2306			jmp 	VarHandlerDecode
.2219					VarReadHandler:
.2219	18		clc				clc 								; find variable, error if it doesn't exist.
.221a	20 51 22	jsr $2251			jsr 	VariableFind
.221d	a5 06		lda $06				lda 	TOS
.221f	48		pha				pha
.2220	a5 07		lda $07				lda 	TOS+1
.2222	48		pha				pha
.2223	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.2225	85 06		sta $06				sta 	TOS
.2227	a0 01		ldy #$01			ldy 	#1
.2229	b1 10		lda ($10),y			lda 	(temp1),y
.222b	85 07		sta $07				sta 	TOS+1
.222d	4c 00 00	jmp $0000			jmp 	NextCode
.2230					VarReadHandlerDecode:
.2230	a9 40		lda #$40			lda 	#"@"
.2232	4c 06 23	jmp $2306			jmp 	VarHandlerDecode
.2235					VarWriteHandler:
.2235	38		sec				sec 								; find variable, create it if it doesn't exist.
.2236	20 51 22	jsr $2251			jsr 	VariableFind
.2239	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.223b	92 10		sta ($10)			sta 	(temp1)
.223d	a5 07		lda $07				lda 	TOS+1
.223f	a0 01		ldy #$01			ldy 	#1
.2241	91 10		sta ($10),y			sta 	(temp1),y
.2243	68		pla				pla
.2244	85 07		sta $07				sta 	TOS+1
.2246	68		pla				pla
.2247	85 06		sta $06				sta 	TOS
.2249	4c 00 00	jmp $0000			jmp 	NextCode
.224c					VarWriteHandlerDecode:
.224c	a9 21		lda #$21			lda 	#"!"
.224e	4c 06 23	jmp $2306			jmp 	VarHandlerDecode
.2251					VariableFind:
.2251	08		php				php 								; save autocreate flag.
.2252	e8		inx				inx 								; advance to/over the variable name.
.2253	e8		inx				inx
.2254	8a		txa				txa 								; put in Y
.2255	a8		tay				tay
.2256	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.2258	85 12		sta $12				sta 	temp2
.225a	c8		iny				iny
.225b	b1 03		lda ($03),y			lda 	(IP),y
.225d	85 13		sta $13				sta 	temp2+1
.225f	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.2261	b0 0f		bcs $2272			bcs 	_VFLong
.2263	a5 13		lda $13				lda 	temp2+1
.2265	d0 0b		bne $2272			bne 	_VFLong
.2267	a5 12		lda $12				lda 	temp2						; this is the index
.2269	0a		asl a				asl 	a 							; double it
.226a	85 10		sta $10				sta 	temp1
.226c	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.226e	85 11		sta $11				sta 	temp1+1
.2270	28		plp				plp 								; throw creation flag, it always exists.
.2271	60		rts				rts
.2272					_VFLong:
.2272	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.2274	6a		ror a				ror 	a
.2275	6a		ror a				ror 	a
.2276	6a		ror a				ror 	a
.2277	6a		ror a				ror 	a
.2278	45 12		eor $12				eor 	temp2
.227a	45 13		eor $13				eor 	temp2+1
.227c	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.227e	0a		asl a				asl 	a
.227f	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.2281	85 10		sta $10				sta 	temp1
.2283	85 14		sta $14				sta 	temp3
.2285	a9 06		lda #$06			lda 	#hashTable >> 8
.2287	85 11		sta $11				sta 	temp1+1
.2289	85 15		sta $15				sta 	temp3+1
.228b					_VFSearch:
.228b	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.228d	b1 10		lda ($10),y			lda 	(temp1),y
.228f	f0 23		beq $22b4			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.2291	a8		tay				tay 								; follow the link through.
.2292	b2 10		lda ($10)			lda 	(temp1)
.2294	85 10		sta $10				sta 	temp1
.2296	84 11		sty $11				sty 	temp1+1
.2298	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.229a	b1 10		lda ($10),y			lda 	(temp1),y
.229c	c5 12		cmp $12				cmp 	temp2
.229e	d0 eb		bne $228b			bne 	_VFSearch 					; if it doesn't, follow the next link.
.22a0	c8		iny				iny 								; same for 2nd byte of name
.22a1	b1 10		lda ($10),y			lda 	(temp1),y
.22a3	c5 13		cmp $13				cmp 	temp2+1
.22a5	d0 e4		bne $228b			bne 	_VFSearch
.22a7	18		clc				clc
.22a8	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.22aa	69 02		adc #$02			adc 	#2
.22ac	85 10		sta $10				sta 	temp1
.22ae	90 02		bcc $22b2			bcc 	_VFNoPage1
.22b0	e6 11		inc $11				inc 	temp1+1
.22b2					_VFNoPage1:
.22b2	28		plp				plp 								; don't need to worry about creation flag
.22b3	60		rts				rts
.22b4					_VFNotFound:
.22b4	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.22b5	b0 14		bcs $22cb			bcs 	_VFCreate
.22b7	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>22ba	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>22c2	56 41 52 49 41 42 4c 45 00
.22cb					_VFCreate:
.22cb	a0 01		ldy #$01			ldy 	#1
.22cd	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.22cf	92 0e		sta ($0e)			sta 	(nextFreeMem)
.22d1	b1 14		lda ($14),y			lda 	(temp3),y
.22d3	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.22d5	c8		iny				iny
.22d6	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.22d8	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.22da	c8		iny				iny
.22db	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.22dd	c8		iny				iny
.22de	a5 12		lda $12				lda 	temp2 						; copy the name out
.22e0	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.22e2	c8		iny				iny
.22e3	a5 13		lda $13				lda 	temp2+1
.22e5	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.22e7	a0 01		ldy #$01			ldy 	#1
.22e9	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.22eb	92 14		sta ($14)			sta 	(temp3)
.22ed	a5 0f		lda $0f				lda 	nextFreeMem+1
.22ef	91 14		sta ($14),y			sta 	(temp3),y
.22f1	18		clc				clc
.22f2	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.22f4	69 02		adc #$02			adc 	#2
.22f6	85 10		sta $10				sta 	temp1
.22f8	a5 0f		lda $0f				lda 	nextFreeMem+1
.22fa	69 00		adc #$00			adc 	#0
.22fc	85 11		sta $11				sta 	temp1+1
.22fe	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.2300	a0 00		ldy #$00			ldy 	#0
.2302	20 fd 1c	jsr $1cfd			jsr 	AdvanceFreeMem
.2305	60		rts				rts
.2306					VarHandlerDecode:
.2306	48		pha				pha 								; save, leading space
.2307	a9 07		lda #$07			lda 	#CTH_Variable
.2309	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.230c	68		pla				pla 								; restore and write type
.230d	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2310	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.2312	85 10		sta $10				sta 	temp1
.2314	c8		iny				iny
.2315	b1 08		lda ($08),y			lda 	(srcPtr),y
.2317	85 11		sta $11				sta 	temp1+1
.2319	a5 10		lda $10				lda 	temp1 						; output the first character
.231b	29 1f		and #$1f			and 	#31
.231d	20 48 23	jsr $2348			jsr 	VHOutVarChar
.2320	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.2322					_VHDShift:
.2322	46 11		lsr $11				lsr 	temp1+1
.2324	66 10		ror $10				ror 	temp1
.2326	ca		dex				dex
.2327	d0 f9		bne $2322			bne 	_VHDShift
.2329	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.232b					_VHDDiv40:
.232b	e8		inx				inx
.232c	38		sec				sec
.232d	a5 10		lda $10				lda 	temp1
.232f	e9 28		sbc #$28			sbc 	#40
.2331	a8		tay				tay
.2332	a5 11		lda $11				lda 	temp1+1
.2334	e9 00		sbc #$00			sbc 	#0
.2336	90 06		bcc $233e			bcc 	_VHDivDone
.2338	85 11		sta $11				sta 	temp1+1
.233a	84 10		sty $10				sty 	temp1
.233c	80 ed		bra $232b			bra 	_VHDDiv40
.233e					_VHDivDone:
.233e	a5 10		lda $10				lda 	temp1 						; remainder
.2340	20 48 23	jsr $2348			jsr 	VHOutVarChar
.2343	8a		txa				txa
.2344	20 48 23	jsr $2348			jsr 	VHOutVarChar 				; and result.
.2347	60		rts				rts
.2348					VHOutVarChar:
.2348	c9 00		cmp #$00			cmp 	#0
.234a	f0 0c		beq $2358			beq 	_VHOExit
.234c	18		clc				clc
.234d	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.234f	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.2351	90 02		bcc $2355			bcc 	_VHOOut
.2353	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.2355					_VHOOut:
.2355	20 03 1e	jsr $1e03			jsr 	DecodeWriteBuffer
.2358					_VHOExit:
.2358	60		rts				rts

;******  Return to file: kernel.asm

.2359					Dictionary:

;******  Processing file: generated/dictionary.inc

>2359	05					.byte	_end1-*
>235a	00					.byte	$00
>235b	4f 16					.word	WordWrite
>235d	a1					.byte	$a1
.235e					_end1:
>235e	10					.byte	_end2-*
>235f	52					.byte	$52
>2360	35 22					.word	VarWriteHandler
>2362	4c 22					.word	VarWriteHandlerDecode
>2364	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>236c	45 d2
.236e					_end2:
>236e	10					.byte	_end3-*
>236f	52					.byte	$52
>2370	ff 21					.word	VarAddressHandler
>2372	14 22					.word	VarAddrHandlerDecode
>2374	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>237c	45 d2
.237e					_end3:
>237e	10					.byte	_end4-*
>237f	52					.byte	$52
>2380	19 22					.word	VarReadHandler
>2382	30 22					.word	VarReadHandlerDecode
>2384	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>238c	45 d2
.238e					_end4:
>238e	0c					.byte	_end5-*
>238f	52					.byte	$52
>2390	60 1b					.word	CallHandler
>2392	39 1c					.word	CallHandlerDecode
>2394	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.239a					_end5:
>239a	0f					.byte	_end6-*
>239b	53					.byte	$53
>239c	00 21					.word	SkipComment
>239e	0d 21					.word	CommentDecoder
>23a0	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>23a8	d4
.23a9					_end6:
>23a9	0e					.byte	_end7-*
>23aa	53					.byte	$53
>23ab	2b 21					.word	DefineCode
>23ad	41 21					.word	DefineDecoder
>23af	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.23b7					_end7:
>23b7	0f					.byte	_end8-*
>23b8	52					.byte	$52
>23b9	a6 10					.word	Literal2Byte
>23bb	bc 10					.word	Literal2ByteDecode
>23bd	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>23c5	cc
.23c6					_end8:
>23c6	0e					.byte	_end9-*
>23c7	80					.byte	$80
>23c8	e9 20					.word	NextLine
>23ca	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>23d2	4e c5
.23d4					_end9:
>23d4	0e					.byte	_end10-*
>23d5	53					.byte	$53
>23d6	ce 10					.word	LiteralString
>23d8	ed 10					.word	LiteralStringDecoder
>23da	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.23e2					_end10:
>23e2	05					.byte	_end11-*
>23e3	00					.byte	$00
>23e4	cb 13					.word	Multiply16x16
>23e6	aa					.byte	$aa
.23e7					_end11:
>23e7	05					.byte	_end12-*
>23e8	00					.byte	$00
>23e9	38 12					.word	Add
>23eb	ab					.byte	$ab
.23ec					_end12:
>23ec	06					.byte	_end13-*
>23ed	00					.byte	$00
>23ee	60 16					.word	WordAdd
>23f0	2b a1					.byte	$2b,$a1
.23f2					_end13:
>23f2	05					.byte	_end14-*
>23f3	00					.byte	$00
>23f4	47 12					.word	Subtract
>23f6	ad					.byte	$ad
.23f7					_end14:
>23f7	06					.byte	_end15-*
>23f8	00					.byte	$00
>23f9	07 15					.word	ConstantMinus1
>23fb	2d b1					.byte	$2d,$b1
.23fd					_end15:
>23fd	06					.byte	_end16-*
>23fe	00					.byte	$00
>23ff	10 20					.word	DumpStack
>2401	2e ae					.byte	$2e,$ae
.2403					_end16:
>2403	05					.byte	_end17-*
>2404	00					.byte	$00
>2405	1c 13					.word	Divide16x16
>2407	af					.byte	$af
.2408					_end17:
>2408	05					.byte	_end18-*
>2409	00					.byte	$00
>240a	fa 14					.word	Constant0
>240c	b0					.byte	$b0
.240d					_end18:
>240d	06					.byte	_end19-*
>240e	00					.byte	$00
>240f	60 14					.word	CheckMinus
>2411	30 bc					.byte	$30,$bc
.2413					_end19:
>2413	06					.byte	_end20-*
>2414	00					.byte	$00
>2415	74 14					.word	CheckZero
>2417	30 bd					.byte	$30,$bd
.2419					_end20:
>2419	05					.byte	_end21-*
>241a	00					.byte	$00
>241b	16 15					.word	C1
>241d	b1					.byte	$b1
.241e					_end21:
>241e	06					.byte	_end22-*
>241f	00					.byte	$00
>2420	0a 14					.word	Unary1Plus
>2422	31 ab					.byte	$31,$ab
.2424					_end22:
>2424	06					.byte	_end23-*
>2425	00					.byte	$00
>2426	21 14					.word	Unary1Minus
>2428	31 ad					.byte	$31,$ad
.242a					_end23:
>242a	06					.byte	_end24-*
>242b	00					.byte	$00
>242c	2e 15					.word	C10
>242e	31 b0					.byte	$31,$b0
.2430					_end24:
>2430	07					.byte	_end25-*
>2431	00					.byte	$00
>2432	57 15					.word	C100
>2434	31 30 b0				.byte	$31,$30,$b0
.2437					_end25:
>2437	08					.byte	_end26-*
>2438	00					.byte	$00
>2439	86 15					.word	C1024
>243b	31 30 32 b4				.byte	$31,$30,$32,$b4
.243f					_end26:
>243f	07					.byte	_end27-*
>2440	00					.byte	$00
>2441	5b 15					.word	C127
>2443	31 32 b7				.byte	$31,$32,$b7
.2446					_end27:
>2446	07					.byte	_end28-*
>2447	00					.byte	$00
>2448	5f 15					.word	C128
>244a	31 32 b8				.byte	$31,$32,$b8
.244d					_end28:
>244d	06					.byte	_end29-*
>244e	00					.byte	$00
>244f	32 15					.word	C15
>2451	31 b5					.byte	$31,$b5
.2453					_end29:
>2453	06					.byte	_end30-*
>2454	00					.byte	$00
>2455	36 15					.word	C16
>2457	31 b6					.byte	$31,$b6
.2459					_end30:
>2459	07					.byte	_end31-*
>245a	00					.byte	$00
>245b	98 14					.word	Times16
>245d	31 36 aa				.byte	$31,$36,$aa
.2460					_end31:
>2460	07					.byte	_end32-*
>2461	00					.byte	$00
>2462	ab 14					.word	Divide16
>2464	31 36 af				.byte	$31,$36,$af
.2467					_end32:
>2467	05					.byte	_end33-*
>2468	00					.byte	$00
>2469	1a 15					.word	C2
>246b	b2					.byte	$b2
.246c					_end33:
>246c	06					.byte	_end34-*
>246d	00					.byte	$00
>246e	a4 14					.word	Times2
>2470	32 aa					.byte	$32,$aa
.2472					_end34:
>2472	06					.byte	_end35-*
>2473	00					.byte	$00
>2474	13 14					.word	Unary2Plus
>2476	32 ab					.byte	$32,$ab
.2478					_end35:
>2478	06					.byte	_end36-*
>2479	00					.byte	$00
>247a	2c 14					.word	Unary2Minus
>247c	32 ad					.byte	$32,$ad
.247e					_end36:
>247e	06					.byte	_end37-*
>247f	00					.byte	$00
>2480	b7 14					.word	Divide2
>2482	32 af					.byte	$32,$af
.2484					_end37:
>2484	06					.byte	_end38-*
>2485	00					.byte	$00
>2486	3a 15					.word	C24
>2488	32 b4					.byte	$32,$b4
.248a					_end38:
>248a	07					.byte	_end39-*
>248b	00					.byte	$00
>248c	63 15					.word	C255
>248e	32 35 b5				.byte	$32,$35,$b5
.2491					_end39:
>2491	07					.byte	_end40-*
>2492	00					.byte	$00
>2493	6e 15					.word	C256
>2495	32 35 b6				.byte	$32,$35,$b6
.2498					_end40:
>2498	08					.byte	_end41-*
>2499	00					.byte	$00
>249a	be 14					.word	Times256
>249c	32 35 36 aa				.byte	$32,$35,$36,$aa
.24a0					_end41:
>24a0	08					.byte	_end42-*
>24a1	00					.byte	$00
>24a2	c7 14					.word	Divide256
>24a4	32 35 36 af				.byte	$32,$35,$36,$af
.24a8					_end42:
>24a8	05					.byte	_end43-*
>24a9	00					.byte	$00
>24aa	1e 15					.word	C3
>24ac	b3					.byte	$b3
.24ad					_end43:
>24ad	06					.byte	_end44-*
>24ae	00					.byte	$00
>24af	4b 15					.word	C32
>24b1	33 b2					.byte	$33,$b2
.24b3					_end44:
>24b3	09					.byte	_end45-*
>24b4	00					.byte	$00
>24b5	9e 15					.word	C32767
>24b7	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.24bc					_end45:
>24bc	09					.byte	_end46-*
>24bd	00					.byte	$00
>24be	aa 15					.word	C32768
>24c0	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.24c5					_end46:
>24c5	05					.byte	_end47-*
>24c6	00					.byte	$00
>24c7	22 15					.word	C4
>24c9	b4					.byte	$b4
.24ca					_end47:
>24ca	06					.byte	_end48-*
>24cb	00					.byte	$00
>24cc	a0 14					.word	Times4
>24ce	34 aa					.byte	$34,$aa
.24d0					_end48:
>24d0	06					.byte	_end49-*
>24d1	00					.byte	$00
>24d2	b3 14					.word	Divide4
>24d4	34 af					.byte	$34,$af
.24d6					_end49:
>24d6	08					.byte	_end50-*
>24d7	00					.byte	$00
>24d8	92 15					.word	C4096
>24da	34 30 39 b6				.byte	$34,$30,$39,$b6
.24de					_end50:
>24de	05					.byte	_end51-*
>24df	00					.byte	$00
>24e0	26 15					.word	C5
>24e2	b5					.byte	$b5
.24e3					_end51:
>24e3	07					.byte	_end52-*
>24e4	00					.byte	$00
>24e5	7a 15					.word	C512
>24e7	35 31 b2				.byte	$35,$31,$b2
.24ea					_end52:
>24ea	06					.byte	_end53-*
>24eb	00					.byte	$00
>24ec	4f 15					.word	C63
>24ee	36 b3					.byte	$36,$b3
.24f0					_end53:
>24f0	06					.byte	_end54-*
>24f1	00					.byte	$00
>24f2	53 15					.word	C64
>24f4	36 b4					.byte	$36,$b4
.24f6					_end54:
>24f6	05					.byte	_end55-*
>24f7	00					.byte	$00
>24f8	2a 15					.word	C8
>24fa	b8					.byte	$b8
.24fb					_end55:
>24fb	06					.byte	_end56-*
>24fc	00					.byte	$00
>24fd	9c 14					.word	Times8
>24ff	38 aa					.byte	$38,$aa
.2501					_end56:
>2501	06					.byte	_end57-*
>2502	00					.byte	$00
>2503	af 14					.word	Divide8
>2505	38 af					.byte	$38,$af
.2507					_end57:
>2507	05					.byte	_end58-*
>2508	40					.byte	$40
>2509	f6 1b					.word	ReturnHandler
>250b	bb					.byte	$bb
.250c					_end58:
>250c	05					.byte	_end59-*
>250d	00					.byte	$00
>250e	b8 12					.word	CheckLess
>2510	bc					.byte	$bc
.2511					_end59:
>2511	06					.byte	_end60-*
>2512	00					.byte	$00
>2513	d1 12					.word	CheckLessEq
>2515	3c bd					.byte	$3c,$bd
.2517					_end60:
>2517	06					.byte	_end61-*
>2518	00					.byte	$00
>2519	81 12					.word	CheckNotEqual
>251b	3c be					.byte	$3c,$be
.251d					_end61:
>251d	05					.byte	_end62-*
>251e	00					.byte	$00
>251f	84 12					.word	CheckEqual
>2521	bd					.byte	$bd
.2522					_end62:
>2522	05					.byte	_end63-*
>2523	00					.byte	$00
>2524	d4 12					.word	CheckGreater
>2526	be					.byte	$be
.2527					_end63:
>2527	06					.byte	_end64-*
>2528	00					.byte	$00
>2529	b5 12					.word	CheckGreaterEq
>252b	3e bd					.byte	$3e,$bd
.252d					_end64:
>252d	08					.byte	_end65-*
>252e	00					.byte	$00
>252f	bf 15					.word	TestDup
>2531	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.2535					_end65:
>2535	05					.byte	_end66-*
>2536	00					.byte	$00
>2537	34 16					.word	WordRead
>2539	c0					.byte	$c0
.253a					_end66:
>253a	07					.byte	_end67-*
>253b	00					.byte	$00
>253c	3a 14					.word	Absolute
>253e	41 42 d3				.byte	$41,$42,$d3
.2541					_end67:
>2541	09					.byte	_end68-*
>2542	00					.byte	$00
>2543	77 16					.word	AllocateMemory
>2545	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.254a					_end68:
>254a	07					.byte	_end69-*
>254b	00					.byte	$00
>254c	5a 12					.word	And
>254e	41 4e c4				.byte	$41,$4e,$c4
.2551					_end69:
>2551	0a					.byte	_end70-*
>2552	00					.byte	$00
>2553	9b 1f					.word	AssertCode
>2555	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.255b					_end70:
>255b	09					.byte	_end71-*
>255c	00					.byte	$00
>255d	8d 14					.word	ByteSwap
>255f	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2564					_end71:
>2564	06					.byte	_end72-*
>2565	00					.byte	$00
>2566	42 16					.word	ByteWrite
>2568	43 a1					.byte	$43,$a1
.256a					_end72:
>256a	06					.byte	_end73-*
>256b	00					.byte	$00
>256c	2b 16					.word	ByteRead
>256e	43 c0					.byte	$43,$c0
.2570					_end73:
>2570	07					.byte	_end74-*
>2571	00					.byte	$00
>2572	c3 1c					.word	ClrHandler
>2574	43 4c d2				.byte	$43,$4c,$d2
.2577					_end74:
>2577	08					.byte	_end75-*
>2578	00					.byte	$00
>2579	b6 15					.word	Drop
>257b	44 52 4f d0				.byte	$44,$52,$4f,$d0
.257f					_end75:
>257f	07					.byte	_end76-*
>2580	00					.byte	$00
>2581	c8 15					.word	Dup
>2583	44 55 d0				.byte	$44,$55,$d0
.2586					_end76:
>2586	08					.byte	_end77-*
>2587	01					.byte	$01
>2588	f0 1a					.word	ElseHandler
>258a	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.258e					_end77:
>258e	07					.byte	_end78-*
>258f	00					.byte	$00
>2590	bc 1f					.word	EndProgram
>2592	45 4e c4				.byte	$45,$4e,$c4
.2595					_end78:
>2595	09					.byte	_end79-*
>2596	00					.byte	$00
>2597	f3 1a					.word	EndIfHandler
>2599	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.259e					_end79:
>259e	09					.byte	_end80-*
>259f	20					.byte	$20
>25a0	18 1a					.word	ForHandler
>25a2	4e 1a					.word	ForEncoder
>25a4	46 4f d2				.byte	$46,$4f,$d2
.25a7					_end80:
>25a7	06					.byte	_end81-*
>25a8	01					.byte	$01
>25a9	ed 1a					.word	IfHandler
>25ab	49 c6					.byte	$49,$c6
.25ad					_end81:
>25ad	09					.byte	_end82-*
>25ae	00					.byte	$00
>25af	cc 1a					.word	GetIndex
>25b1	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.25b6					_end82:
>25b6	08					.byte	_end83-*
>25b7	00					.byte	$00
>25b8	f3 1e					.word	ListCode
>25ba	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.25be					_end83:
>25be	07					.byte	_end84-*
>25bf	00					.byte	$00
>25c0	f1 12					.word	Maximum
>25c2	4d 41 d8				.byte	$4d,$41,$d8
.25c5					_end84:
>25c5	07					.byte	_end85-*
>25c6	00					.byte	$00
>25c7	ed 12					.word	Minimum
>25c9	4d 49 ce				.byte	$4d,$49,$ce
.25cc					_end85:
>25cc	07					.byte	_end86-*
>25cd	00					.byte	$00
>25ce	2d 13					.word	Modulus16x16
>25d0	4d 4f c4				.byte	$4d,$4f,$c4
.25d3					_end86:
>25d3	0a					.byte	_end87-*
>25d4	00					.byte	$00
>25d5	41 14					.word	Negate
>25d7	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.25dd					_end87:
>25dd	07					.byte	_end88-*
>25de	00					.byte	$00
>25df	ba 1c					.word	NewHandler
>25e1	4e 45 d7				.byte	$4e,$45,$d7
.25e4					_end88:
>25e4	0a					.byte	_end89-*
>25e5	21					.byte	$21
>25e6	65 1a					.word	NextHandler
>25e8	a4 1a					.word	NextEncoder
>25ea	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.25ee					_end89:
>25ee	07					.byte	_end90-*
>25ef	00					.byte	$00
>25f0	fc 15					.word	Nip
>25f2	4e 49 d0				.byte	$4e,$49,$d0
.25f5					_end90:
>25f5	07					.byte	_end91-*
>25f6	00					.byte	$00
>25f7	51 14					.word	OneComplement
>25f9	4e 4f d4				.byte	$4e,$4f,$d4
.25fc					_end91:
>25fc	06					.byte	_end92-*
>25fd	00					.byte	$00
>25fe	74 12					.word	LogOr
>2600	4f d2					.byte	$4f,$d2
.2602					_end92:
>2602	08					.byte	_end93-*
>2603	00					.byte	$00
>2604	e4 15					.word	Over
>2606	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.260a					_end93:
>260a	0c					.byte	_end94-*
>260b	20					.byte	$20
>260c	f6 1a					.word	RepeatHandler
>260e	f9 1a					.word	RepeatEncoder
>2610	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.2616					_end94:
>2616	07					.byte	_end95-*
>2617	00					.byte	$00
>2618	d0 14					.word	RandomNumber
>261a	52 4e c4				.byte	$52,$4e,$c4
.261d					_end95:
>261d	07					.byte	_end96-*
>261e	00					.byte	$00
>261f	01 16					.word	Rot
>2621	52 4f d4				.byte	$52,$4f,$d4
.2624					_end96:
>2624	07					.byte	_end97-*
>2625	00					.byte	$00
>2626	70 1f					.word	RunProgram
>2628	52 55 ce				.byte	$52,$55,$ce
.262b					_end97:
>262b	07					.byte	_end98-*
>262c	00					.byte	$00
>262d	7c 14					.word	SignTOS
>262f	53 47 ce				.byte	$53,$47,$ce
.2632					_end98:
>2632	08					.byte	_end99-*
>2633	00					.byte	$00
>2634	b4 1f					.word	StopCode
>2636	53 54 4f d0				.byte	$53,$54,$4f,$d0
.263a					_end99:
>263a	08					.byte	_end100-*
>263b	00					.byte	$00
>263c	d1 15					.word	Swap
>263e	53 57 41 d0				.byte	$53,$57,$41,$d0
.2642					_end100:
>2642	07					.byte	_end101-*
>2643	00					.byte	$00
>2644	84 1f					.word	Call6502
>2646	53 59 d3				.byte	$53,$59,$d3
.2649					_end101:
>2649	0d					.byte	_end102-*
>264a	00					.byte	$00
>264b	54 21					.word	IntToString
>264d	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2655	c7
.2656					_end102:
>2656	0b					.byte	_end103-*
>2657	21					.byte	$21
>2658	10 1b					.word	UntilHandler
>265a	13 1b					.word	UntilEncoder
>265c	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2661					_end103:
>2661	09					.byte	_end104-*
>2662	00					.byte	$00
>2663	bf 1f					.word	VlistCode
>2665	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.266a					_end104:
>266a	0a					.byte	_end105-*
>266b	40					.byte	$40
>266c	0e 1d					.word	BreakCmd
>266e	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2674					_end105:
>2674	09					.byte	_end106-*
>2675	00					.byte	$00
>2676	08 1d					.word	ExitDump
>2678	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.267d					_end106:
>267d	07					.byte	_end107-*
>267e	00					.byte	$00
>267f	67 12					.word	Xor
>2681	58 4f d2				.byte	$58,$4f,$d2
.2684					_end107:
>2684	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
