
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Thu Jan 16 08:14:49 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 2f 11	jsr $112f			jsr 	ExternInitialise
.1006	a9 41		lda #$41			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 23 12	jsr $1223			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	86 10		stx $10				stx 	temp1
.100f	a2 80		ldx #$80			ldx 	#NumberStackBase
.1011	9a		txs				txs
.1012	a6 10		ldx $10				ldx 	temp1
.1014					WarmStart:
.1014	a9 03		lda #$03			lda 	#COL_Yellow
.1016	20 68 11	jsr $1168			jsr 	ExternColour
.1019	20 8b 11	jsr $118b			jsr 	ExternInput
.101c	a9 06		lda #$06			lda 	#COL_Cyan
.101e	20 68 11	jsr $1168			jsr 	ExternColour
.1021	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.1023	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.1025	20 93 10	jsr $1093			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.1028	a9 10		lda #$10			lda 	#textBuffer & $FF
.102a	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.102c	20 8b 16	jsr $168b			jsr 	EncodeProgram
.102f	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.1032	0d 12 09	ora $0912			ora 	encodeBuffer+2
.1035	d0 05		bne $103c			bne 	LineEditor 					; if so, do the line editing code.
.1037	64 05		stz $05				stz 	rsp
.1039	4c 00 00	jmp $0000			jmp 	NextCode
.103c					LineEditor:
.103c	20 d2 1e	jsr $1ed2			jsr 	EditProgram
.103f	80 cc		bra $100d			bra 	WarmStartBlankStack
.1041					BootMsg:
>1041	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>1049	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>1059	2a 0d 0d
>105c	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1064	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1074	30 32 30 0d 0d
>1079	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1080	5b 32 30 2d 30 31 2d 31			.text	"[20-01-16 08:14]"
>1088	36 20 30 38 3a 31 34 5d

;******  Return to file: kernel.asm

>1090	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/core.src

.1093					InitialiseCoreCode:
.1093	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1095	85 00		sta $00				sta 	NextCode
.1097	85 01		sta $01				sta 	NextCode+1
.1099	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.109b	85 02		sta $02				sta 	NextCode+2
.109d	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.109f	84 04		sty $04				sty 	NextCode+4
.10a1	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.10a3	60		rts				rts								; (2 INX skip offset and line#)
.10a4					Literal2Byte:
.10a4	a5 06		lda $06				lda 	TOS
.10a6	48		pha				pha
.10a7	a5 07		lda $07				lda 	TOS+1
.10a9	48		pha				pha
.10aa	e8		inx				inx  							; point X to the word
.10ab	e8		inx				inx
.10ac	8a		txa				txa 							; copy into Y
.10ad	a8		tay				tay
.10ae	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.10b0	85 06		sta $06				sta 	TOS
.10b2	c8		iny				iny 							; read and push the MSB
.10b3	b1 03		lda ($03),y			lda 	(IP),y
.10b5	85 07		sta $07				sta 	TOS+1
.10b7	4c 00 00	jmp $0000			jmp 	NextCode
.10ba					Literal2ByteDecode:
.10ba	a9 06		lda #$06			lda 	#CTH_Keyword
.10bc	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.10bf	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c1	aa		tax				tax
.10c2	c8		iny				iny
.10c3	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c5	a8		tay				tay
.10c6	8a		txa				txa
.10c7	38		sec				sec 							; output signed
.10c8	20 b5 1e	jsr $1eb5			jsr 	DecodeYAToBuffer
.10cb	60		rts				rts
.10cc					LiteralString:
.10cc	a5 06		lda $06				lda 	TOS
.10ce	48		pha				pha
.10cf	a5 07		lda $07				lda 	TOS+1
.10d1	48		pha				pha
.10d2	e8		inx				inx
.10d3	e8		inx				inx 							; skip over current word
.10d4	8a		txa				txa 							; add to IP + 1 to give string address
.10d5	a8		tay				tay 							; put in Y
.10d6	38		sec				sec 							; make that TOS
.10d7	65 03		adc $03				adc 	IP
.10d9	85 06		sta $06				sta 	TOS
.10db	a5 04		lda $04				lda 	IP+1
.10dd	69 00		adc #$00			adc 	#0
.10df	85 07		sta $07				sta 	TOS+1
.10e1	8a		txa				txa 							; add data length to X
.10e2	18		clc				clc
.10e3	71 03		adc ($03),y			adc 	(IP),y
.10e5	aa		tax				tax
.10e6	ca		dex				dex
.10e7	ca		dex				dex
.10e8	4c 00 00	jmp $0000			jmp 	NextCode
.10eb					LiteralStringDecoder:
.10eb	a9 05		lda #$05			lda 	#CTH_String
.10ed	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.10f0	a9 22		lda #$22			lda 	#'"'
.10f2	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.10f5	20 9c 1e	jsr $1e9c			jsr 	DecodeOutputData
.10f8	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.10fb	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: code/error.asm

.10fc					ErrorHandler:
.10fc	68		pla				pla 								; get message address
.10fd	7a		ply				ply
.10fe	1a		inc a				inc 	a
.10ff	d0 01		bne $1102			bne 	_EHNoCarry
.1101	c8		iny				iny
.1102					_EHNoCarry:
.1102	20 23 12	jsr $1223			jsr 	EXPrintString
.1105	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.1107	b1 03		lda ($03),y			lda 	(IP),y
.1109	c8		iny				iny
.110a	11 03		ora ($03),y			ora 	(IP),y
.110c	f0 14		beq $1122			beq 	_EHNoLine
.110e	a9 2a		lda #$2a			lda 	#_EHMsg2 & $FF 				; print " at "
.1110	a0 11		ldy #$11			ldy 	#_EHMsg2 >> 8
.1112	20 23 12	jsr $1223			jsr 	EXPrintString
.1115	a0 02		ldy #$02			ldy 	#2 							; print line number
.1117	b1 03		lda ($03),y			lda 	(IP),y
.1119	48		pha				pha
.111a	88		dey				dey
.111b	b1 03		lda ($03),y			lda 	(IP),y
.111d	7a		ply				ply
.111e	18		clc				clc
.111f	20 b9 22	jsr $22b9			jsr 	PrintYA
.1122					_EHNoLine:
.1122	a9 0d		lda #$0d			lda 	#13
.1124	20 5c 11	jsr $115c			jsr 	ExternPrint
.1127	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack			; S is indeterminate
>112a	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.112f					ExternInitialise:
.112f	a9 90		lda #$90			lda 	#144 						; set colour
.1131	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1134	a9 01		lda #$01			lda 	#$01
.1136	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1139	a9 0e		lda #$0e			lda 	#14							; lower case
.113b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.113e	a9 93		lda #$93			lda 	#147 						; clear screen
.1140	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1143	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.1145	4c 68 11	jmp $1168			jmp 	ExternColour
.1148					ExternCheckBreak:
.1148	da		phx				phx 								; make sure we keep XY
.1149	5a		phy				phy
.114a	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.114d	f0 03		beq $1152			beq		_ECBExit 					; stopped
.114f	7a		ply				ply 								; restore and exit.
.1150	fa		plx				plx
.1151	60		rts				rts
.1152					_ECBExit:
.1152	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1155	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.115c					ExternPrint:
.115c	48		pha				pha
.115d	da		phx				phx
.115e	5a		phy				phy
.115f	29 7f		and #$7f			and 	#$7F
.1161	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1164	7a		ply				ply
.1165	fa		plx				plx
.1166	68		pla				pla
.1167	60		rts				rts
.1168					ExternColour:
.1168	48		pha				pha
.1169	da		phx				phx
.116a	48		pha				pha
.116b	29 08		and #$08			and 	#8
.116d	0a		asl a				asl 	a
.116e	0a		asl a				asl 	a
.116f	0a		asl a				asl 	a
.1170	0a		asl a				asl 	a
.1171	49 92		eor #$92			eor 	#$92
.1173	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1176	68		pla				pla
.1177	29 07		and #$07			and 	#7
.1179	aa		tax				tax
.117a	bd 83 11	lda $1183,x			lda 	_ECTable,x
.117d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1180	fa		plx				plx
.1181	68		pla				pla
.1182	60		rts				rts
.1183					_ECTable:
>1183	90						.byte 	144
>1184	1c						.byte 	28
>1185	1e						.byte 	30
>1186	9e						.byte 	158
>1187	1f						.byte 	31
>1188	9c						.byte 	156
>1189	9f						.byte 	159
>118a	05						.byte 	5
.118b					ExternInput:
.118b	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.118d	85 14		sta $14				sta 	temp3
.118f	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1191	85 15		sta $15				sta 	temp3+1
.1193	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1196	c9 0d		cmp #$0d			cmp 	#13
.1198	f0 0c		beq $11a6			beq 	_EIExit
.119a	29 7f		and #$7f			and 	#$7F
.119c	92 14		sta ($14)			sta 	(temp3)
.119e	e6 14		inc $14				inc 	temp3
.11a0	d0 f1		bne $1193			bne 	_EIRead
.11a2	e6 15		inc $15				inc 	temp3+1
.11a4	80 ed		bra $1193			bra 	_EIRead
.11a6	a9 00		lda #$00	_EIExit:lda 	#0
.11a8	92 14		sta ($14)			sta 	(temp3)
.11aa	a9 0d		lda #$0d			lda 	#13
.11ac	20 5c 11	jsr $115c			jsr 	ExternPrint
.11af	60		rts				rts
.11b0					ExternSave:
.11b0	da		phx				phx
.11b1	5a		phy				phy
.11b2	85 12		sta $12				sta 	temp2 						; save start
.11b4	84 13		sty $13				sty 	temp2+1
.11b6	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11b9	a6 14		ldx $14				ldx 	temp3
.11bb	a4 15		ldy $15				ldy 	temp3+1
.11bd	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11c0	a9 01		lda #$01			lda 	#1
.11c2	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11c4	a0 00		ldy #$00			ldy 	#0
.11c6	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11c9	a6 10		ldx $10				ldx 	temp1 						; end address
.11cb	a4 11		ldy $11				ldy 	temp1+1
.11cd	a9 12		lda #$12			lda 	#temp2
.11cf	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.11d2	b0 03		bcs $11d7			bcs 	_ESSave
.11d4	7a		ply				ply
.11d5	fa		plx				plx
.11d6	60		rts				rts
.11d7					_ESSave:
.11d7	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>11da	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>11e2	4c 45 44 00
.11e6					ExternLoad:
.11e6	da		phx				phx 								; save XY
.11e7	5a		phy				phy
.11e8	48		pha				pha 								; save target
.11e9	5a		phy				phy
.11ea	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11ed	a6 14		ldx $14				ldx 	temp3
.11ef	a4 15		ldy $15				ldy 	temp3+1
.11f1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11f4	a9 01		lda #$01			lda 	#1
.11f6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11f8	a0 00		ldy #$00			ldy 	#0
.11fa	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11fd	7a		ply				ply 								; restore target to YX and call load
.11fe	fa		plx				plx
.11ff	a9 00		lda #$00			lda 	#0 							; load command
.1201	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1204	b0 03		bcs $1209			bcs 	_ESLoad
.1206	7a		ply				ply
.1207	fa		plx				plx
.1208	60		rts				rts
.1209					_ESLoad:
.1209	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>120c	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>1214	4c 45 44 00
.1218					EXGetLength:
.1218	5a		phy				phy
.1219	a0 ff		ldy #$ff			ldy 	#255
.121b	c8		iny		_EXGL0:	iny
.121c	b1 14		lda ($14),y			lda 	(temp3),y
.121e	d0 fb		bne $121b			bne 	_EXGL0
.1220	98		tya				tya
.1221	7a		ply				ply
.1222	60		rts				rts
.1223					EXPrintString:
.1223	48		pha				pha
.1224	5a		phy				phy
.1225	84 11		sty $11				sty 	temp1+1
.1227	85 10		sta $10				sta 	temp1
.1229	a0 00		ldy #$00			ldy 	#0
.122b					_EXPSLoop:
.122b	b1 10		lda ($10),y			lda 	(temp1),y
.122d	f0 08		beq $1237			beq 	_EXPSExit
.122f	29 7f		and #$7f			and 	#$7F
.1231	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1234	c8		iny				iny
.1235	80 f4		bra $122b			bra 	_EXPSLoop
.1237					_EXPSExit:
.1237	7a		ply				ply
.1238	68		pla				pla
.1239	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.123a					Add:
.123a	7a		ply				ply
.123b	68		pla				pla
.123c	18		clc				clc
.123d	65 06		adc $06				adc 	TOS
.123f	85 06		sta $06				sta 	TOS
.1241	98		tya				tya
.1242	65 07		adc $07				adc 	TOS+1
.1244	85 07		sta $07				sta 	TOS+1
.1246	4c 00 00	jmp $0000			jmp 	NextCode
.1249					Subtract:
.1249	7a		ply				ply
.124a	68		pla				pla
.124b	38		sec				sec
.124c	e5 06		sbc $06				sbc 	TOS
.124e	85 06		sta $06				sta 	TOS
.1250	98		tya				tya
.1251	e5 07		sbc $07				sbc 	TOS+1
.1253	85 07		sta $07				sta 	TOS+1
.1255	4c 00 00	jmp $0000			jmp 	NextCode
.1258					And:
.1258	68		pla				pla
.1259	25 07		and $07				and 	TOS+1
.125b	85 07		sta $07				sta 	TOS+1
.125d	68		pla				pla
.125e	25 06		and $06				and 	TOS
.1260	85 06		sta $06				sta 	TOS
.1262	4c 00 00	jmp $0000			jmp 	NextCode
.1265					Xor:
.1265	68		pla				pla
.1266	45 07		eor $07				eor 	TOS+1
.1268	85 07		sta $07				sta 	TOS+1
.126a	68		pla				pla
.126b	45 06		eor $06				eor 	TOS
.126d	85 06		sta $06				sta 	TOS
.126f	4c 00 00	jmp $0000			jmp 	NextCode
.1272					LogOr:
.1272	68		pla				pla
.1273	05 07		ora $07				ora 	TOS+1
.1275	85 07		sta $07				sta 	TOS+1
.1277	68		pla				pla
.1278	05 06		ora $06				ora 	TOS
.127a	85 06		sta $06				sta 	TOS
.127c	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.127f					CheckNotEqual:
.127f	38		sec				sec
.1280	80 01		bra $1283			bra 	CECode
.1282					CheckEqual:
.1282	18		clc				clc
.1283					CECode:
.1283	86 10		stx $10				stx 	temp1
.1285	ba		tsx				tsx
.1286	08		php				php
.1287	a5 06		lda $06				lda 	TOS
.1289	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.128c	d0 17		bne $12a5			bne	 	CompareFalse
.128e	a5 07		lda $07				lda 	TOS+1
.1290	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1293	d0 10		bne $12a5			bne 	CompareFalse
.1295					CompareTrue:
.1295	a6 10		ldx $10				ldx 	temp1
.1297	28		plp				plp
.1298	b0 10		bcs $12aa			bcs		CompareFalse2
.129a					CompareTrue2:
.129a	68		pla				pla
.129b	68		pla				pla
.129c	a9 ff		lda #$ff			lda 	#$FF
.129e	85 06		sta $06				sta 	TOS
.12a0	85 07		sta $07				sta 	TOS+1
.12a2	4c 00 00	jmp $0000			jmp 	NextCode
.12a5					CompareFalse:
.12a5	a6 10		ldx $10				ldx 	temp1
.12a7	28		plp				plp
.12a8	b0 f0		bcs $129a			bcs		CompareTrue2
.12aa					CompareFalse2:
.12aa	68		pla				pla
.12ab	68		pla				pla
.12ac	64 06		stz $06				stz 	TOS
.12ae	64 07		stz $07				stz 	TOS+1
.12b0	4c 00 00	jmp $0000			jmp 	NextCode
.12b3					CheckGreaterEq:
.12b3	38		sec				sec
.12b4	80 01		bra $12b7			bra		CLCode
.12b6					CheckLess:
.12b6	18		clc				clc
.12b7	86 10		stx $10		CLCode:	stx 	temp1
.12b9	ba		tsx				tsx
.12ba	08		php				php
.12bb	18		clc				clc
.12bc	a5 06		lda $06				lda 	TOS
.12be	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12c1	a5 07		lda $07				lda 	TOS+1
.12c3	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12c6	50 02		bvc $12ca			bvc 	_CLNoFlip
.12c8	49 80		eor #$80			eor 	#$80
.12ca					_CLNoFlip:
.12ca	0a		asl a				asl 	a
.12cb	b0 d8		bcs $12a5			bcs 	CompareFalse
.12cd	80 c6		bra $1295			bra 	CompareTrue
.12cf					CheckLessEq:
.12cf	38		sec				sec
.12d0	80 01		bra $12d3			bra		CGCode
.12d2					CheckGreater:
.12d2	18		clc				clc
.12d3					CGCode:
.12d3	86 10		stx $10				stx 	temp1
.12d5	ba		tsx				tsx
.12d6	08		php				php
.12d7	18		clc				clc
.12d8	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12db	e5 06		sbc $06				sbc 	TOS
.12dd	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12e0	e5 07		sbc $07				sbc 	TOS+1
.12e2	50 02		bvc $12e6			bvc 	_CGNoFlip
.12e4	49 80		eor #$80			eor 	#$80
.12e6					_CGNoFlip:
.12e6	0a		asl a				asl 	a
.12e7	b0 bc		bcs $12a5			bcs 	CompareFalse
.12e9	80 aa		bra $1295			bra 	CompareTrue
.12eb					Minimum:
.12eb	a9 00		lda #$00			lda 	#0
.12ed	80 02		bra $12f1			bra 	MinMaxCode
.12ef					Maximum:
.12ef	a9 80		lda #$80			lda 	#$80
.12f1					MinMaxCode:
.12f1	85 11		sta $11				sta 	temp1+1
.12f3	86 10		stx $10				stx 	temp1
.12f5	ba		tsx				tsx
.12f6	38		sec				sec
.12f7	a5 06		lda $06				lda 	TOS
.12f9	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12fc	a5 07		lda $07				lda 	TOS+1
.12fe	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1301	50 02		bvc $1305			bvc 	_MMNoFlip
.1303	49 80		eor #$80			eor 	#$80
.1305					_MMNoFlip:
.1305	45 11		eor $11				eor 	temp1+1
.1307	30 0a		bmi $1313			bmi 	_MMNoCopy
.1309	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.130c	85 06		sta $06				sta 	TOS
.130e	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1311	85 07		sta $07				sta 	TOS+1
.1313					_MMNoCopy:
.1313	a6 10		ldx $10				ldx 	temp1
.1315	68		pla				pla
.1316	68		pla				pla
.1317	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.131a					Divide16x16:
.131a	86 12		stx $12				stx 	temp2
.131c	ba		tsx				tsx
.131d	20 40 13	jsr $1340			jsr 	IntegerDivide
.1320	68		pla				pla
.1321	85 07		sta $07				sta 	TOS+1
.1323	68		pla				pla
.1324	85 06		sta $06				sta 	TOS
.1326	a6 12		ldx $12				ldx 	temp2
.1328	4c 00 00	jmp $0000			jmp 	NextCode
.132b					Modulus16x16:
.132b	86 12		stx $12				stx 	temp2
.132d	ba		tsx				tsx
.132e	20 40 13	jsr $1340			jsr 	IntegerDivide
.1331	a6 12		ldx $12				ldx 	temp2
.1333	68		pla				pla
.1334	68		pla				pla
.1335	a5 10		lda $10				lda 	temp1
.1337	85 06		sta $06				sta 	TOS
.1339	a5 11		lda $11				lda 	temp1+1
.133b	85 07		sta $07				sta 	TOS+1
.133d	4c 00 00	jmp $0000			jmp 	NextCode
.1340					IntegerDivide:
.1340	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.1342	05 07		ora $07				ora 	TOS+1
.1344	d0 14		bne $135a			bne 	_BFDOkay
.1346	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1349	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1351	20 42 59 20 5a 45 52 4f 00
.135a					_BFDOkay:
.135a	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.135c	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.135e	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1360	20 9b 13	jsr $139b			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1363	20 b5 13	jsr $13b5			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1366	5a		phy				phy 								; Y is the counter
.1367	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1369					_BFDLoop:
.1369	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.136c	3e 01 01	rol $0101,x			rol 	Stack2High,x
.136f	26 10		rol $10				rol 	temp1
.1371	26 11		rol $11				rol 	temp1+1
.1373	38		sec				sec
.1374	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1376	e5 06		sbc $06				sbc 	TOS
.1378	48		pha				pha
.1379	a5 11		lda $11				lda 	temp1+1
.137b	e5 07		sbc $07				sbc 	TOS+1
.137d	90 0f		bcc $138e			bcc 	_BFDNoAdd
.137f	85 11		sta $11				sta 	temp1+1
.1381	68		pla				pla
.1382	85 10		sta $10				sta 	temp1+0
.1384	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1387	09 01		ora #$01			ora 	#1
.1389	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.138c	80 01		bra $138f			bra 	_BFDNext
.138e					_BFDNoAdd:
.138e	68		pla				pla 								; Throw away the intermediate calculations
.138f					_BFDNext:
.138f	88		dey				dey
.1390	d0 d7		bne $1369			bne 	_BFDLoop
.1392	7a		ply				ply 								; restore Y
.1393	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1395	90 03		bcc $139a			bcc 	_BFDUnsigned 				; then the result is signed
.1397	20 a1 13	jsr $13a1			jsr		IntegerNegateAlways 		; negate the result
.139a					_BFDUnsigned:
.139a	60		rts				rts
.139b					CheckIntegerNegate:
.139b	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.139e	30 01		bmi $13a1			bmi 	IntegerNegateAlways 		; if so negate it
.13a0	60		rts				rts
.13a1					IntegerNegateAlways:
.13a1	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.13a3	38		sec				sec 								; negate
.13a4	a9 00		lda #$00			lda 	#0
.13a6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.13a9	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ac	a9 00		lda #$00			lda 	#0
.13ae	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.13b1	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13b4	60		rts				rts
.13b5					CheckTOSNegate:
.13b5	a5 07		lda $07				lda 	TOS+1
.13b7	10 0f		bpl $13c8			bpl		CTNNoChange
.13b9	e6 1a		inc $1a				inc 	SignCount
.13bb					TOSNegateAlways:
.13bb	38		sec				sec
.13bc	a9 00		lda #$00			lda 	#0
.13be	e5 06		sbc $06				sbc 	TOS
.13c0	85 06		sta $06				sta 	TOS
.13c2	a9 00		lda #$00			lda 	#0
.13c4	e5 07		sbc $07				sbc 	TOS+1
.13c6	85 07		sta $07				sta 	TOS+1
.13c8					CTNNoChange:
.13c8	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.13c9					Multiply16x16:
.13c9	86 10		stx $10				stx 	temp1
.13cb	ba		tsx				tsx
.13cc	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.13cf	85 12		sta $12				sta 	temp2
.13d1	bd 01 01	lda $0101,x			lda		Stack2High,x
.13d4	85 13		sta $13				sta 	temp2+1
.13d6	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.13d9	9e 01 01	stz $0101,x			stz 	Stack2High,x
.13dc					_MultLoop:
.13dc	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.13de	66 12		ror $12				ror 	temp2
.13e0	90 11		bcc $13f3			bcc 	_MultNoAdd
.13e2	18		clc				clc 								; add 1st to 2nd
.13e3	a5 06		lda $06				lda 	TOS
.13e5	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.13e8	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13eb	a5 07		lda $07				lda 	TOS+1
.13ed	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13f0	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13f3					_MultNoAdd:
.13f3	06 06		asl $06				asl 	TOS 						; shift 1st left
.13f5	26 07		rol $07				rol 	TOS+1
.13f7	a5 12		lda $12				lda 	temp2	 					; until zero
.13f9	05 13		ora $13				ora 	temp2+1
.13fb	d0 df		bne $13dc			bne 	_MultLoop
.13fd	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ff	68		pla				pla
.1400	85 07		sta $07				sta 	TOS+1
.1402	68		pla				pla
.1403	85 06		sta $06				sta 	TOS
.1405	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.1408					Unary1Plus:
.1408	e6 06		inc $06				inc 	TOS
.140a	d0 02		bne $140e			bne 	_U1PSkip
.140c	e6 07		inc $07				inc 	TOS+1
.140e					_U1PSkip:
.140e	4c 00 00	jmp $0000			jmp 	NextCode
.1411					Unary2Plus:
.1411	18		clc				clc
.1412	a5 06		lda $06				lda 	TOS
.1414	69 02		adc #$02			adc 	#2
.1416	85 06		sta $06				sta 	TOS
.1418	90 02		bcc $141c			bcc 	_U1PSkip
.141a	e6 07		inc $07				inc 	TOS+1
.141c					_U1PSkip:
.141c	4c 00 00	jmp $0000			jmp 	NextCode
.141f					Unary1Minus:
.141f	a5 06		lda $06				lda 	TOS
.1421	d0 02		bne $1425			bne 	_U1MSkip
.1423	c6 07		dec $07				dec 	TOS+1
.1425					_U1MSkip:
.1425	c6 06		dec $06				dec 	TOS
.1427	4c 00 00	jmp $0000			jmp 	NextCode
.142a					Unary2Minus:
.142a	38		sec				sec
.142b	a5 06		lda $06				lda 	TOS
.142d	e9 02		sbc #$02			sbc 	#2
.142f	85 06		sta $06				sta 	TOS
.1431	b0 02		bcs $1435			bcs 	_U1PSkip
.1433	c6 07		dec $07				dec 	TOS+1
.1435					_U1PSkip:
.1435	4c 00 00	jmp $0000			jmp 	NextCode
.1438					Absolute:
.1438	a5 07		lda $07				lda 	TOS+1
.143a	30 03		bmi $143f			bmi 	Negate
.143c	4c 00 00	jmp $0000			jmp 	NextCode
.143f					Negate:
.143f	38		sec				sec
.1440	a9 00		lda #$00			lda 	#0
.1442	e5 06		sbc $06				sbc 	TOS
.1444	85 06		sta $06				sta 	TOS
.1446	a9 00		lda #$00			lda 	#0
.1448	e5 07		sbc $07				sbc 	TOS+1
.144a	85 07		sta $07				sta 	TOS+1
.144c	4c 00 00	jmp $0000			jmp 	NextCode
.144f					OneComplement:
.144f	a5 06		lda $06				lda 	TOS
.1451	49 ff		eor #$ff			eor 	#$FF
.1453	85 06		sta $06				sta 	TOS
.1455	a5 07		lda $07				lda 	TOS+1
.1457	49 ff		eor #$ff			eor 	#$FF
.1459	85 07		sta $07				sta 	TOS+1
.145b	4c 00 00	jmp $0000			jmp 	NextCode
.145e					CheckMinus:
.145e	a5 07		lda $07				lda 	TOS+1
.1460	30 07		bmi $1469			bmi 	UnaryTrue
.1462					UnaryFalse:
.1462	64 06		stz $06				stz 	TOS
.1464	64 07		stz $07				stz 	TOS+1
.1466	4c 00 00	jmp $0000			jmp 	NextCode
.1469					UnaryTrue:
.1469	a9 ff		lda #$ff			lda 	#$FF
.146b	85 06		sta $06				sta 	TOS
.146d	85 07		sta $07				sta 	TOS+1
.146f	4c 00 00	jmp $0000			jmp 	NextCode
.1472					CheckZero:
.1472	a5 06		lda $06				lda 	TOS
.1474	05 07		ora $07				ora 	TOS+1
.1476	d0 ea		bne $1462			bne 	UnaryFalse
.1478	80 ef		bra $1469			bra 	UnaryTrue
.147a					SignTOS:
.147a	a5 07		lda $07				lda 	TOS+1
.147c	30 eb		bmi $1469			bmi		UnaryTrue
.147e	05 06		ora $06				ora 	TOS
.1480	f0 e0		beq $1462			beq 	UnaryFalse
.1482	a9 01		lda #$01			lda 	#1
.1484	85 06		sta $06				sta 	TOS
.1486	64 07		stz $07				stz		TOS+1
.1488	4c 00 00	jmp $0000			jmp 	NextCode
.148b					ByteSwap:
.148b	a5 06		lda $06				lda 	TOS
.148d	a4 07		ldy $07				ldy 	TOS+1
.148f	85 07		sta $07				sta 	TOS+1
.1491	84 06		sty $06				sty 	TOS
.1493	4c 00 00	jmp $0000			jmp 	NextCode
.1496					Times16:
.1496	06 06		asl $06				asl 	TOS
.1498	26 07		rol $07				rol 	TOS+1
.149a					Times8:
.149a	06 06		asl $06				asl 	TOS
.149c	26 07		rol $07				rol 	TOS+1
.149e					Times4:
.149e	06 06		asl $06				asl 	TOS
.14a0	26 07		rol $07				rol 	TOS+1
.14a2					Times2:
.14a2	06 06		asl $06				asl 	TOS
.14a4	26 07		rol $07				rol 	TOS+1
.14a6	4c 00 00	jmp $0000			jmp 	NextCode
.14a9					Divide16:
.14a9	46 07		lsr $07				lsr 	TOS+1
.14ab	66 06		ror $06				ror 	TOS
.14ad					Divide8:
.14ad	46 07		lsr $07				lsr 	TOS+1
.14af	66 06		ror $06				ror 	TOS
.14b1					Divide4:
.14b1	46 07		lsr $07				lsr 	TOS+1
.14b3	66 06		ror $06				ror 	TOS
.14b5					Divide2:
.14b5	46 07		lsr $07				lsr 	TOS+1
.14b7	66 06		ror $06				ror 	TOS
.14b9	4c 00 00	jmp $0000			jmp 	NextCode
.14bc					Times256:
.14bc	a5 06		lda $06				lda 	TOS
.14be	85 07		sta $07				sta 	TOS+1
.14c0	64 06		stz $06				stz 	TOS
.14c2	4c 00 00	jmp $0000			jmp 	NextCode
.14c5					Divide256:
.14c5	a5 07		lda $07				lda 	TOS+1
.14c7	85 06		sta $06				sta 	TOS
.14c9	64 07		stz $07				stz 	TOS+1
.14cb	4c 00 00	jmp $0000			jmp 	NextCode
.14ce					RandomNumber:
.14ce	a5 06		lda $06				lda 	TOS
.14d0	48		pha				pha
.14d1	a5 07		lda $07				lda 	TOS+1
.14d3	48		pha				pha
.14d4	a5 1b		lda $1b				lda 	randomSeed
.14d6	05 1c		ora $1c				ora 	randomSeed+1
.14d8	d0 08		bne $14e2			bne 	_RH_NoInit
.14da	a9 7c		lda #$7c			lda 	#$7C
.14dc	85 1b		sta $1b				sta 	randomSeed
.14de	a9 a1		lda #$a1			lda 	#$A1
.14e0	85 1c		sta $1c				sta 	randomSeed+1
.14e2					_RH_NoInit:
.14e2	a5 1b		lda $1b				lda 	randomSeed
.14e4	4a		lsr a		        lsr		a
.14e5	26 1c		rol $1c		        rol 	randomSeed+1
.14e7	90 02		bcc $14eb	        bcc 	_RH_NoEor
.14e9	49 b4		eor #$b4	        eor 	#$B4
.14eb					_RH_NoEor:
.14eb	85 1b		sta $1b		        sta 	randomSeed
.14ed	45 1c		eor $1c		        eor 	randomSeed+1
.14ef	85 07		sta $07		        sta 	TOS+1
.14f1	a5 1b		lda $1b		        lda 	randomSeed
.14f3	85 06		sta $06		        sta 	TOS
.14f5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14f8					Constant0:
.14f8	a5 06		lda $06				lda 	TOS
.14fa	48		pha				pha
.14fb	a5 07		lda $07				lda 	TOS+1
.14fd	48		pha				pha
.14fe	64 06		stz $06				stz 	TOS
.1500	64 07		stz $07				stz 	TOS+1
.1502	4c 00 00	jmp $0000			jmp 	NextCode
.1505					ConstantMinus1:
.1505	a5 06		lda $06				lda 	TOS
.1507	48		pha				pha
.1508	a5 07		lda $07				lda 	TOS+1
.150a	48		pha				pha
.150b	a9 ff		lda #$ff			lda 	#$FF
.150d	85 06		sta $06				sta 	TOS
.150f	85 07		sta $07				sta 	TOS+1
.1511	4c 00 00	jmp $0000			jmp 	NextCode
.1514					C1:
.1514	a0 01		ldy #$01			ldy 	#1
.1516	80 24		bra $153c			bra 	Const1Byte
.1518					C2:
.1518	a0 02		ldy #$02			ldy 	#2
.151a	80 20		bra $153c			bra 	Const1Byte
.151c					C3:
.151c	a0 03		ldy #$03			ldy 	#3
.151e	80 1c		bra $153c			bra 	Const1Byte
.1520					C4:
.1520	a0 04		ldy #$04			ldy 	#4
.1522	80 18		bra $153c			bra 	Const1Byte
.1524					C5:
.1524	a0 05		ldy #$05			ldy 	#5
.1526	80 14		bra $153c			bra 	Const1Byte
.1528					C8:
.1528	a0 08		ldy #$08			ldy 	#8
.152a	80 10		bra $153c			bra 	Const1Byte
.152c					C10:
.152c	a0 0a		ldy #$0a			ldy 	#10
.152e	80 0c		bra $153c			bra 	Const1Byte
.1530					C15:
.1530	a0 0f		ldy #$0f			ldy 	#15
.1532	80 08		bra $153c			bra 	Const1Byte
.1534					C16:
.1534	a0 10		ldy #$10			ldy 	#16
.1536	80 04		bra $153c			bra 	Const1Byte
.1538					C24:
.1538	a0 18		ldy #$18			ldy 	#24
.153a	80 00		bra $153c			bra 	Const1Byte
.153c					Const1Byte:
.153c	a5 06		lda $06				lda 	TOS
.153e	48		pha				pha
.153f	a5 07		lda $07				lda 	TOS+1
.1541	48		pha				pha
.1542	84 06		sty $06				sty 	TOS
.1544	64 07		stz $07				stz 	TOS+1
.1546	4c 00 00	jmp $0000			jmp 	NextCode
.1549					C32:
.1549	a0 20		ldy #$20			ldy 	#32
.154b	80 ef		bra $153c			bra 	Const1Byte
.154d					C63:
.154d	a0 3f		ldy #$3f			ldy 	#63
.154f	80 eb		bra $153c			bra 	Const1Byte
.1551					C64:
.1551	a0 40		ldy #$40			ldy 	#64
.1553	80 e7		bra $153c			bra 	Const1Byte
.1555					C100:
.1555	a0 64		ldy #$64			ldy 	#100
.1557	80 e3		bra $153c			bra 	Const1Byte
.1559					C127:
.1559	a0 7f		ldy #$7f			ldy 	#127
.155b	80 df		bra $153c			bra 	Const1Byte
.155d					C128:
.155d	a0 80		ldy #$80			ldy 	#128
.155f	80 db		bra $153c			bra 	Const1Byte
.1561					C255:
.1561	a0 ff		ldy #$ff			ldy 	#255
.1563	80 d7		bra $153c			bra 	Const1Byte
.1565					Const2Byte:
.1565	85 06		sta $06				sta 	TOS
.1567	84 07		sty $07				sty 	TOS+1
.1569	4c 00 00	jmp $0000			jmp 	NextCode
.156c					C256:
.156c	a5 06		lda $06				lda 	TOS
.156e	48		pha				pha
.156f	a5 07		lda $07				lda 	TOS+1
.1571	48		pha				pha
.1572	a9 00		lda #$00			lda 	#(256) & $FF
.1574	a0 01		ldy #$01			ldy 	#(256) >> 8
.1576	80 ed		bra $1565			bra 	Const2Byte
.1578					C512:
.1578	a5 06		lda $06				lda 	TOS
.157a	48		pha				pha
.157b	a5 07		lda $07				lda 	TOS+1
.157d	48		pha				pha
.157e	a9 00		lda #$00			lda 	#(512) & $FF
.1580	a0 02		ldy #$02			ldy 	#(512) >> 8
.1582	80 e1		bra $1565			bra 	Const2Byte
.1584					C1024:
.1584	a5 06		lda $06				lda 	TOS
.1586	48		pha				pha
.1587	a5 07		lda $07				lda 	TOS+1
.1589	48		pha				pha
.158a	a9 00		lda #$00			lda 	#(1024) & $FF
.158c	a0 04		ldy #$04			ldy 	#(1024) >> 8
.158e	80 d5		bra $1565			bra 	Const2Byte
.1590					C4096:
.1590	a5 06		lda $06				lda 	TOS
.1592	48		pha				pha
.1593	a5 07		lda $07				lda 	TOS+1
.1595	48		pha				pha
.1596	a9 00		lda #$00			lda 	#(4096) & $FF
.1598	a0 10		ldy #$10			ldy 	#(4096) >> 8
.159a	80 c9		bra $1565			bra 	Const2Byte
.159c					C32767:
.159c	a5 06		lda $06				lda 	TOS
.159e	48		pha				pha
.159f	a5 07		lda $07				lda 	TOS+1
.15a1	48		pha				pha
.15a2	a9 ff		lda #$ff			lda 	#(32767) & $FF
.15a4	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.15a6	80 bd		bra $1565			bra 	Const2Byte
.15a8					C32768:
.15a8	a5 06		lda $06				lda 	TOS
.15aa	48		pha				pha
.15ab	a5 07		lda $07				lda 	TOS+1
.15ad	48		pha				pha
.15ae	a9 00		lda #$00			lda 	#(32768) & $FF
.15b0	a0 80		ldy #$80			ldy 	#(32768) >> 8
.15b2	80 b1		bra $1565			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.15b4					Drop:
.15b4	68		pla				pla
.15b5	85 07		sta $07				sta 	TOS+1
.15b7	68		pla				pla
.15b8	85 06		sta $06				sta 	TOS
.15ba	4c 00 00	jmp $0000			jmp 	NextCode
.15bd					TestDup:
.15bd	a5 06		lda $06				lda 	TOS
.15bf	05 07		ora $07				ora 	TOS+1
.15c1	d0 03		bne $15c6			bne 	Dup
.15c3	4c 00 00	jmp $0000			jmp 	NextCode
.15c6					Dup:
.15c6	a5 06		lda $06				lda 	TOS
.15c8	48		pha				pha
.15c9	a5 07		lda $07				lda 	TOS+1
.15cb	48		pha				pha
.15cc	4c 00 00	jmp $0000			jmp 	NextCode
.15cf					Swap:
.15cf	86 10		stx $10				stx 	temp1
.15d1	7a		ply				ply
.15d2	fa		plx				plx
.15d3	a5 06		lda $06				lda 	TOS
.15d5	48		pha				pha
.15d6	a5 07		lda $07				lda 	TOS+1
.15d8	48		pha				pha
.15d9	86 06		stx $06				stx 	TOS
.15db	84 07		sty $07				sty 	TOS+1
.15dd	a6 10		ldx $10				ldx 	temp1
.15df	4c 00 00	jmp $0000			jmp 	NextCode
.15e2					Over:
.15e2	a5 06		lda $06				lda 	TOS
.15e4	48		pha				pha
.15e5	a5 07		lda $07				lda 	TOS+1
.15e7	48		pha				pha
.15e8	86 10		stx $10				stx 	temp1
.15ea	ba		tsx				tsx
.15eb	bd 04 01	lda $0104,x			lda 	stack3low,x
.15ee	85 06		sta $06				sta 	TOS
.15f0	bd 03 01	lda $0103,x			lda 	stack3High,x
.15f3	85 07		sta $07				sta 	TOS+1
.15f5	a6 10		ldx $10				ldx 	temp1
.15f7	4c 00 00	jmp $0000			jmp 	NextCode
.15fa					Nip:
.15fa	68		pla				pla
.15fb	68		pla				pla
.15fc	4c 00 00	jmp $0000			jmp 	NextCode
.15ff					Rot:
.15ff	86 10		stx $10				stx 	temp1
.1601	ba		tsx				tsx
.1602	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.1605	a8		tay				tay
.1606	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1609	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.160c	a5 06		lda $06				lda 	TOS
.160e	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1611	84 06		sty $06				sty 	TOS
.1613	bd 03 01	lda $0103,x			lda 	Stack3High,x
.1616	a8		tay				tay
.1617	bd 01 01	lda $0101,x			lda 	Stack2High,x
.161a	9d 03 01	sta $0103,x			sta 	Stack3High,x
.161d	a5 07		lda $07				lda 	TOS+1
.161f	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1622	84 07		sty $07				sty 	TOS+1
.1624	a6 10		ldx $10				ldx 	temp1
.1626	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.1629					ByteRead:
.1629	b2 06		lda ($06)			lda 	(TOS)
.162b	85 06		sta $06				sta 	TOS
.162d	64 07		stz $07				stz 	TOS+1
.162f	4c 00 00	jmp $0000			jmp 	NextCode
.1632					WordRead:
.1632	a0 01		ldy #$01			ldy 	#1
.1634	b1 06		lda ($06),y			lda 	(TOS),y
.1636	a8		tay				tay
.1637	b2 06		lda ($06)			lda 	(TOS)
.1639	85 06		sta $06				sta 	TOS
.163b	84 07		sty $07				sty 	TOS+1
.163d	4c 00 00	jmp $0000			jmp 	NextCode
.1640					ByteWrite:
.1640	68		pla				pla
.1641	68		pla				pla
.1642	92 06		sta ($06)			sta 	(TOS)
.1644	68		pla				pla
.1645	85 07		sta $07				sta 	TOS+1
.1647	68		pla				pla
.1648	85 06		sta $06				sta 	TOS
.164a	4c 00 00	jmp $0000			jmp 	NextCode
.164d					WordWrite:
.164d	68		pla				pla
.164e	a0 01		ldy #$01			ldy 	#1
.1650	91 06		sta ($06),y			sta 	(TOS),y
.1652	68		pla				pla
.1653	92 06		sta ($06)			sta 	(TOS)
.1655	68		pla				pla
.1656	85 07		sta $07				sta 	TOS+1
.1658	68		pla				pla
.1659	85 06		sta $06				sta 	TOS
.165b	4c 00 00	jmp $0000			jmp 	NextCode
.165e					WordAdd:
.165e	7a		ply				ply
.165f	68		pla				pla
.1660	18		clc				clc
.1661	72 06		adc ($06)			adc 	(TOS)
.1663	92 06		sta ($06)			sta 	(TOS)
.1665	98		tya				tya
.1666	a0 01		ldy #$01			ldy 	#1
.1668	71 06		adc ($06),y			adc 	(TOS),y
.166a	91 06		sta ($06),y			sta 	(TOS),y
.166c	68		pla				pla
.166d	85 07		sta $07				sta 	TOS+1
.166f	68		pla				pla
.1670	85 06		sta $06				sta 	TOS
.1672	4c 00 00	jmp $0000			jmp 	NextCode
.1675					AllocateMemory:
.1675	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1677	48		pha				pha
.1678	a5 07		lda $07				lda 	TOS+1
.167a	48		pha				pha
.167b	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.167d	85 06		sta $06				sta 	TOS
.167f	a5 0f		lda $0f				lda 	nextFreeMem+1
.1681	85 07		sta $07				sta 	TOS+1
.1683	7a		ply				ply 								; advance the free ram pointer
.1684	68		pla				pla
.1685	20 8d 1d	jsr $1d8d			jsr 	AdvanceFreeMem
.1688	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.168b					EncodeProgram:
.168b	48		pha				pha 								; save registers.
.168c	da		phx				phx
.168d	5a		phy				phy
.168e	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1690	85 08		sta $08				sta		srcPtr
.1692	64 05		stz $05				stz 	rsp
.1694	a6 05		ldx $05				ldx 	rsp 						; this is the current stack entry type, so $00 means
.1696	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.1699	20 0b 19	jsr $190b			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.169c	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.169e	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.16a1	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.16a4	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.16a7	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.16a9	20 b6 18	jsr $18b6			jsr 	CheckIsDigit
.16ac	90 09		bcc $16b7			bcc 	_EPNoLineNumber 			; if so there is a line number
.16ae	20 d8 18	jsr $18d8			jsr 	EncodeGetConstant 			; extract that constant from the source
.16b1	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.16b4	8c 12 09	sty $0912			sty 	encodeBuffer+2
.16b7					_EPNoLineNumber:
.16b7					EncodeLoop:
.16b7	20 fd 18	jsr $18fd			jsr 	EncSkipSpaces 				; skip over spaces
.16ba	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.16bc	d0 21		bne $16df			bne 	_EPNotEnd
.16be					_EPEndEncode:
.16be	a9 a6		lda #$a6			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.16c0	a0 21		ldy #$21			ldy 	#NextLine >> 8
.16c2	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.16c5	a5 05		lda $05				lda 	rsp 						; is the return stack empty ?
.16c7	d0 04		bne $16cd			bne 	_EPIncomplete
.16c9	7a		ply				ply									; restore and exit.
.16ca	fa		plx				plx
.16cb	68		pla				pla
.16cc	60		rts				rts
.16cd					_EPIncomplete:
.16cd	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>16d0	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>16d8	45 20 4f 50 45 4e 00
.16df					_EPNotEnd:
.16df	b2 08		lda ($08)			lda 	(srcPtr)
.16e1	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.16e3	f0 04		beq $16e9			beq 	_EPIsComStr
.16e5	c9 27		cmp #$27			cmp 	#"'"
.16e7	d0 05		bne $16ee			bne 	_EPNotComStr
.16e9					_EPIsComStr:
.16e9	20 db 17	jsr $17db			jsr 	EncodeCommentString
.16ec	80 c9		bra $16b7			bra 	EncodeLoop
.16ee					_EPNotComStr:
.16ee	38		sec				sec
.16ef	20 ea 18	jsr $18ea			jsr 	EncSetBit7Word
.16f2	20 32 19	jsr $1932			jsr 	EncodeSearchDictionary		; look it up
.16f5	90 45		bcc $173c			bcc 	_EPNotInDictionary
.16f7	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16f9	84 11		sty $11				sty 	temp1+1
.16fb	a0 01		ldy #$01			ldy 	#1
.16fd	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.16ff	29 20		and #$20			and 	#$20
.1701	d0 12		bne $1715			bne 	_EPEncodeRoutine 			; if so, do special routine.
.1703	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.1705	b1 10		lda ($10),y			lda 	(temp1),y
.1707	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.170a	c8		iny				iny
.170b	b1 10		lda ($10),y			lda 	(temp1),y
.170d	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1710	20 c2 18	jsr $18c2			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1713	80 a2		bra $16b7			bra 	EncodeLoop
.1715					_EPEncodeRoutine:
.1715	a0 01		ldy #$01			ldy 	#1							; get type bit
.1717	b1 10		lda ($10),y			lda 	(temp1),y
.1719	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.171b	29 10		and #$10			and 	#$10 						; but decoder comes first
.171d	f0 02		beq $1721			beq 	_EPENoDecoder
.171f	c8		iny				iny 								; so if it exists, adjust for it.
.1720	c8		iny				iny
.1721					_EPENoDecoder:
.1721	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.1723	85 12		sta $12				sta 	temp2
.1725	c8		iny				iny
.1726	b1 10		lda ($10),y			lda 	(temp1),y
.1728	85 13		sta $13				sta 	temp2+1
.172a	48		pha				pha 								; call routine preserving state
.172b	da		phx				phx
.172c	5a		phy				phy
.172d	20 39 17	jsr $1739			jsr 	_EPECallTemp2
.1730	7a		ply				ply
.1731	fa		plx				plx
.1732	68		pla				pla
.1733	20 c2 18	jsr $18c2			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1736	4c b7 16	jmp $16b7			jmp 	EncodeLoop
.1739					_EPECallTemp2:
.1739	6c 12 00	jmp ($0012)			jmp 	(temp2)
.173c					_EPNotInDictionary:
.173c	20 40 18	jsr $1840			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.173f	90 19		bcc $175a			bcc 	_EPNotDefined
.1741	48		pha				pha
.1742	a9 f2		lda #$f2			lda	 	#CallHandler & $FF 			; write code call handler
.1744	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1747	a9 1b		lda #$1b			lda	 	#CallHandler >> 8
.1749	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.174c	68		pla				pla 								; write line number
.174d	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1750	98		tya				tya
.1751	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1754	20 c2 18	jsr $18c2			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1757	4c b7 16	jmp $16b7			jmp 	EncodeLoop
.175a					_EPNotDefined:
.175a	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.175c	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.175e	f0 58		beq $17b8			beq 	_EPDefinition
.1760	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.1762	f0 2e		beq $1792			beq 	_EPCallDirect
.1764	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.1766	f0 47		beq $17af			beq 	_EPVariable
.1768	c9 40		cmp #$40			cmp 	#"@"
.176a	f0 43		beq $17af			beq 	_EPVariable
.176c	c9 26		cmp #$26			cmp 	#"&"
.176e	f0 3f		beq $17af			beq 	_EPVariable
.1770	a9 a4		lda #$a4			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.1772	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.1774	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1777					_EPOutputConstant:
.1777	20 d8 18	jsr $18d8			jsr 	EncodeGetConstant 			; extract that constant from the source
.177a	90 06		bcc $1782			bcc 	_EPFail 					; if can't find one, that's us done.
.177c	20 8e 18	jsr $188e			jsr 	EncodeWriteWord 			; write out the encoded value.
.177f	4c b7 16	jmp $16b7			jmp 	EncodeLoop 					; and go round again.
.1782					_EPFail:
.1782	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1785	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>178d	52 52 4f 52 00
.1792					_EPCallDirect:
.1792	a9 f2		lda #$f2			lda	 	#CallHandler & $FF 			; write code call handler
.1794	a0 1b		ldy #$1b			ldy	 	#CallHandler >> 8
.1796	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1799	a9 01		lda #$01			lda 	#1
.179b	20 ce 18	jsr $18ce			jsr 	EncodeAddSrcPtr 			; skip over the <
.179e	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.17a0					_EPToLast:
.17a0	c8		iny				iny
.17a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.17a3	10 fb		bpl $17a0			bpl	 	_EPToLast
.17a5	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.17a7	d0 d9		bne $1782			bne 	_EPFail
.17a9	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.17ab	91 08		sta ($08),y			sta 	(srcPtr),y
.17ad	80 c8		bra $1777			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.17af					_EPVariable:
.17af	20 86 19	jsr $1986			jsr 	EncodeVariableReference
.17b2	20 c2 18	jsr $18c2			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17b5	4c b7 16	jmp $16b7			jmp 	EncodeLoop
.17b8					_EPDefinition:
.17b8	a9 e8		lda #$e8			lda	 	#DefineCode & $FF 			; write code call handler
.17ba	a0 21		ldy #$21			ldy	 	#DefineCode >> 8
.17bc	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.17bf	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.17c2	a9 01		lda #$01			lda 	#1 							; write default size
.17c4	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.17c7	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.17c9	c8		iny		_EPCopy:iny
.17ca	b1 08		lda ($08),y			lda 	(srcPtr),y
.17cc	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.17cf	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.17d2	0a		asl a				asl 	a
.17d3	90 f4		bcc $17c9			bcc 	_EPCopy
.17d5	20 c2 18	jsr $18c2			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17d8	4c b7 16	jmp $16b7			jmp 	EncodeLoop

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.17db					EncodeCommentString:
.17db	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.17dd	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.17df	aa		tax				tax 								; save in X
.17e0	a9 bd		lda #$bd			lda 	#(SkipComment & $FF)		; get the routine to use
.17e2	a0 21		ldy #$21			ldy 	#(SkipComment >> 8)
.17e4	e0 27		cpx #$27			cpx 	#"'"
.17e6	f0 06		beq $17ee			beq 	_ECSGotCmd
.17e8	86 10		stx $10				stx		temp1 						; other terminator = "
.17ea	a9 cc		lda #$cc			lda 	#(LiteralString & $FF)
.17ec	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.17ee					_ECSGotCmd:
.17ee	20 8e 18	jsr $188e			jsr 	EncodeWriteWord 			; write word out.
.17f1	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.17f3	20 ce 18	jsr $18ce			jsr 	EncodeAddSrcPtr
.17f6	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.17f8	d0 03		bne $17fd			bne 	_ECNoSkipSpaces
.17fa	20 fd 18	jsr $18fd			jsr 	EncSkipSpaces
.17fd					_ECNoSkipSpaces:
.17fd	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1800	a9 01		lda #$01			lda 	#1
.1802	20 98 18	jsr $1898			jsr 	EncodeWriteByte 			; write total length, so far 1.
.1805	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.1807					_ECSCopyText:
.1807	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.1809	f0 18		beq $1823			beq 	_ECSEndOfLine 				; end of line ?
.180b	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.180d	f0 09		beq $1818			beq 	_ECSEndOfString 			; if so must be closing quote.
.180f	20 98 18	jsr $1898			jsr 	EncodeWriteByte 			; write the byte out
.1812	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.1815	c8		iny				iny 								; next character
.1816	80 ef		bra $1807			bra 	_ECSCopyText
.1818					_ECSEndOfString:
.1818	c8		iny				iny 								; skip closing quote.
.1819	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.181b	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.181e	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1821	80 18		bra $183b			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1823					_ECSEndOfLine:
.1823	a5 10		lda $10				lda 	temp1 						; missing closing quote
.1825	f0 14		beq $183b			beq 	_ECSComplete 				; if we were doing a string.
.1827	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>182a	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>1832	4e 47 20 51 55 4f 54 45 00
.183b					_ECSComplete:
.183b	98		tya				tya									; skip over.
.183c	20 ce 18	jsr $18ce			jsr 	EncodeAddSrcPtr
.183f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1840					EncodeSearchUserDefined:
.1840	38		sec				sec 								; temp1 = srcPtr-6 because the
.1841	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1843	e9 06		sbc #$06			sbc		#6
.1845	85 10		sta $10				sta 	temp1
.1847	a5 09		lda $09				lda 	srcPtr+1
.1849	e9 00		sbc #$00			sbc 	#0
.184b	85 11		sta $11				sta 	temp1+1
.184d	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.184f	85 12		sta $12				sta 	0+(temp2)
.1851	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1853	85 13		sta $13				sta 	1+(temp2)
.1855					_ESULoop:
.1855	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.1857	f0 33		beq $188c			beq 	_ESUFail
.1859	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.185b	b1 12		lda ($12),y			lda 	(temp2),y
.185d	c9 e8		cmp #$e8			cmp 	#DefineCode & $FF
.185f	d0 1e		bne $187f			bne 	_ESUNext
.1861	c8		iny				iny
.1862	b1 12		lda ($12),y			lda 	(temp2),y
.1864	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1866	d0 17		bne $187f			bne 	_ESUNext
.1868	c8		iny				iny 								; skip length byte.
.1869					_ESUCompare:
.1869	c8		iny				iny
.186a	b1 12		lda ($12),y			lda 	(temp2),y
.186c	d1 10		cmp ($10),y			cmp 	(temp1),y
.186e	d0 0f		bne $187f			bne 	_ESUNext
.1870	0a		asl a				asl 	a 							; bit 7 set => found it.
.1871	90 f6		bcc $1869			bcc 	_ESUCompare
.1873	a0 01		ldy #$01			ldy 	#1
.1875	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.1877	aa		tax				tax
.1878	c8		iny				iny
.1879	b1 12		lda ($12),y			lda 	(temp2),y
.187b	a8		tay				tay
.187c	8a		txa				txa
.187d	38		sec				sec 								; return with carry set as found
.187e	60		rts				rts
.187f					_ESUNext:
.187f	18		clc				clc
.1880	a5 12		lda $12				lda 	temp2
.1882	72 12		adc ($12)			adc 	(temp2)
.1884	85 12		sta $12				sta 	temp2
.1886	90 02		bcc $188a			bcc 	_NoCarryAdv
.1888	e6 13		inc $13				inc 	temp2+1
.188a					_NoCarryAdv:
.188a	80 c9		bra $1855			bra 	_ESULoop 					; and loop round
.188c					_ESUFail:
.188c	18		clc				clc
.188d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.188e					EncodeWriteWord:
.188e	48		pha				pha
.188f	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1892	98		tya				tya
.1893	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1896	68		pla				pla
.1897	60		rts				rts
.1898					EncodeWriteByte:
.1898	da		phx				phx
.1899	ae 10 09	ldx $0910			ldx 	encodeBuffer
.189c	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.189f	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.18a2	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.18a5	ee 10 09	inc $0910			inc 	encodeBuffer
.18a8	fa		plx				plx
.18a9	60		rts				rts
.18aa					CheckIsLetter:
.18aa	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.18ac	90 06		bcc $18b4			bcc 	_CILFail
.18ae	c9 5b		cmp #$5b			cmp 	#"Z"+1
.18b0	b0 02		bcs $18b4			bcs 	_CILFail
.18b2	38		sec				sec
.18b3	60		rts				rts
.18b4					_CILFail:
.18b4	18		clc				clc
.18b5	60		rts				rts
.18b6					CheckIsDigit:
.18b6	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.18b8	90 06		bcc $18c0			bcc 	_CIDFail
.18ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.18bc	b0 02		bcs $18c0			bcs 	_CIDFail
.18be	38		sec				sec
.18bf	60		rts				rts
.18c0					_CIDFail:
.18c0	18		clc				clc
.18c1	60		rts				rts
.18c2					EncodeMoveNextWord:
.18c2	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.18c4					_EPNWLoop:
.18c4	c8		iny				iny
.18c5	b1 08		lda ($08),y			lda 	(srcPtr),y
.18c7	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.18c9	b0 f9		bcs $18c4			bcs 	_EPNWLoop
.18cb	98		tya				tya
.18cc	80 00		bra $18ce			bra 	EncodeAddSrcPtr
.18ce					EncodeAddSrcPtr:
.18ce	18		clc				clc 								; add offset
.18cf	65 08		adc $08				adc 	srcPtr
.18d1	85 08		sta $08				sta 	srcPtr
.18d3	90 02		bcc $18d7			bcc 	_EASPNoCarry
.18d5	e6 09		inc $09				inc 	srcPtr+1					; carry through
.18d7					_EASPNoCarry:
.18d7	60		rts				rts
.18d8					EncodeGetConstant:
.18d8	a5 08		lda $08				lda 	srcPtr 						; get source
.18da	a4 09		ldy $09				ldy 	srcPtr+1
.18dc	20 11 22	jsr $2211			jsr 	ConvertToInteger 			; call converter
.18df	90 08		bcc $18e9			bcc 	_EGCExit
.18e1	20 ce 18	jsr $18ce			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.18e4	a5 14		lda $14				lda 	temp3 						; get result into YA
.18e6	a4 15		ldy $15				ldy 	temp3+1
.18e8	38		sec				sec 								; return CS
.18e9					_EGCExit:
.18e9	60		rts				rts
.18ea					EncSetBit7Word:
.18ea	08		php				php 								; save carry
.18eb	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.18ed					_ESB7Loop:
.18ed	c8		iny				iny
.18ee	b1 08		lda ($08),y			lda 	(srcPtr),y
.18f0	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.18f2	b0 f9		bcs $18ed			bcs 	_ESB7Loop
.18f4	88		dey				dey									; previous character
.18f5	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.18f7	0a		asl a				asl 	a 							; shift bit 7 out
.18f8	28		plp				plp 								; restore carry
.18f9	6a		ror a				ror 	a 							; shift it in
.18fa	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.18fc	60		rts				rts
.18fd					EncSkipSpaces:
.18fd	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.18ff	c9 20		cmp #$20			cmp 	#32
.1901	d0 07		bne $190a			bne 	_ESNotSpace
.1903	a9 01		lda #$01			lda 	#1
.1905	20 ce 18	jsr $18ce			jsr 	EncodeAddSrcPtr
.1908	80 f3		bra $18fd			bra	 	EncSkipSpaces
.190a					_ESNotSpace:
.190a	60		rts				rts
.190b					EncodeTrimTrailingSpaces:
.190b	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.190d					_ETTFindEnd:
.190d	c8		iny				iny
.190e	b1 08		lda ($08),y			lda 	(srcPtr),y
.1910	d0 fb		bne $190d			bne 	_ETTFindEnd
.1912					_ETTRemoveSpace:
.1912	c0 00		cpy #$00			cpy 	#0 							; start of string
.1914	f0 0d		beq $1923			beq 	_ETTExit
.1916	88		dey				dey 								; previous character 1..32
.1917	b1 08		lda ($08),y			lda 	(srcPtr),y
.1919	c9 21		cmp #$21			cmp 	#32+1
.191b	b0 06		bcs $1923			bcs 	_ETTExit
.191d	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.191f	91 08		sta ($08),y			sta 	(srcPtr),y
.1921	80 ef		bra $1912			bra 	_ETTRemoveSpace
.1923					_ETTExit:
.1923	60		rts				rts
.1924					EncodePushPosMarkerOnStack:
.1924	e6 05		inc $05				inc 	rsp 						; make space on rstack
.1926	a6 05		ldx $05				ldx 	rsp							; access it
.1928	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.192b	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.192e	9d 80 07	sta $0780,x			sta 	returnStackX,x
.1931	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.1932					EncodeSearchDictionary:
.1932	a9 f5		lda #$f5			lda 	#(Dictionary) & $FF
.1934	85 10		sta $10				sta 	0+(temp1)
.1936	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.1938	85 11		sta $11				sta 	1+(temp1)
.193a					_ESDLoop:
.193a	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.193c	18		clc				clc
.193d	f0 46		beq $1985			beq 	_ESDExit
.193f	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1941	b1 10		lda ($10),y			lda 	(temp1),y
.1943	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.1944	4a		lsr a				lsr 	a
.1945	4a		lsr a				lsr 	a
.1946	4a		lsr a				lsr 	a
.1947	c8		iny				iny 								; Y = 2
.1948	4a		lsr a				lsr 	a
.1949	90 01		bcc $194c			bcc 	_ESDNotDec
.194b	c8		iny				iny
.194c					_ESDNotDec:
.194c	4a		lsr a				lsr 	a
.194d	90 01		bcc $1950			bcc 	_ESDNotInc
.194f	c8		iny				iny
.1950					_ESDNotInc:
.1950	98		tya				tya
.1951	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1952	a8		tay				tay
.1953	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.1955	d2 08		cmp ($08)			cmp 	(srcPtr)
.1957	d0 1f		bne $1978			bne 	_ESDNext 					; do not match, go to next
.1959	98		tya				tya 								; make temp2 point to the name in
.195a	18		clc				clc 								; the dictionary.
.195b	65 10		adc $10				adc 	temp1
.195d	85 12		sta $12				sta 	temp2
.195f	a5 11		lda $11				lda 	temp1+1
.1961	69 00		adc #$00			adc 	#0
.1963	85 13		sta $13				sta 	temp2+1
.1965	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.1967					_ESDCompare:
.1967	c8		iny				iny
.1968	b1 08		lda ($08),y			lda 	(srcPtr),y
.196a	d1 12		cmp ($12),y			cmp 	(temp2),y
.196c	d0 0a		bne $1978			bne 	_ESDNext
.196e	0a		asl a				asl 	a
.196f	90 f6		bcc $1967			bcc 	_ESDCompare
.1971	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.1973	a4 11		ldy $11				ldy 	temp1+1
.1975	38		sec				sec
.1976	80 0d		bra $1985			bra 	_ESDExit
.1978					_ESDNext:
.1978	18		clc				clc
.1979	a5 10		lda $10				lda 	temp1
.197b	72 10		adc ($10)			adc 	(temp1)
.197d	85 10		sta $10				sta 	temp1
.197f	90 b9		bcc $193a			bcc 	_ESDLoop
.1981	e6 11		inc $11				inc 	temp1+1
.1983	80 b5		bra $193a			bra 	_ESDLoop
.1985					_ESDExit:
.1985	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encvar.src

.1986					EncodeVariableReference:
.1986	b2 08		lda ($08)			lda 	(srcPtr)					; get the type, use it to identify the routine
.1988	a2 4a		ldx #$4a			ldx 	#VarAddressHandler & $FF
.198a	a0 23		ldy #$23			ldy 	#VarAddressHandler >> 8
.198c	c9 26		cmp #$26			cmp 	#"&"
.198e	f0 0c		beq $199c			beq 	_EVFHaveAddress
.1990	a2 67		ldx #$67			ldx 	#VarReadHandler & $FF
.1992	a0 23		ldy #$23			ldy 	#VarReadHandler >> 8
.1994	c9 40		cmp #$40			cmp 	#"@"
.1996	f0 04		beq $199c			beq 	_EVFHaveAddress
.1998	a2 86		ldx #$86			ldx 	#VarWriteHandler & $FF
.199a	a0 23		ldy #$23			ldy 	#VarWriteHandler >> 8
.199c					_EVFHaveAddress:
.199c	8a		txa				txa
.199d	20 8e 18	jsr $188e			jsr 	EncodeWriteWord 			; write it out.
.19a0	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.19a2	b1 08		lda ($08),y			lda 	(srcPtr),y
.19a4	29 7f		and #$7f			and 	#$7F 						; might be the last.
.19a6	20 aa 18	jsr $18aa			jsr 	CheckIsLetter 				; is it A-Z
.19a9	90 54		bcc $19ff			bcc 	EVFFail
.19ab	29 1f		and #$1f			and 	#31 						; make 1-26
.19ad	85 10		sta $10				sta 	temp1 						; start building the name in temp1
.19af	64 11		stz $11				stz 	temp1+1
.19b1	38		sec				sec 								; possible char 2
.19b2	20 14 1a	jsr $1a14			jsr 	EncVarAlNum
.19b5	18		clc				clc 								; possible char 3
.19b6	20 14 1a	jsr $1a14			jsr 	EncVarAlNum
.19b9	5a		phy				phy
.19ba	a5 10		lda $10				lda 	temp1 						; write out variable identifier.
.19bc	a4 11		ldy $11				ldy 	temp1+1
.19be	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.19c1	7a		ply				ply
.19c2	b1 08		lda ($08),y			lda 	(srcPtr),y 					; more text after ?
.19c4	10 01		bpl $19c7			bpl 	_EVFCheckArray
.19c6	60		rts				rts
.19c7					_EVFCheckArray:
.19c7	c8		iny				iny 								; get the next character
.19c8	b1 08		lda ($08),y			lda 	(srcPtr),y
.19ca	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.19cc	d0 31		bne $19ff			bne 	EVFFail
.19ce	64 10		stz $10				stz 	temp1 						; zero temp1.
.19d0	c8		iny				iny  								; point to index
.19d1					_EVFGetIndex:
.19d1	06 10		asl $10				asl 	temp1 						; temp1 x 10
.19d3	a5 10		lda $10				lda 	temp1
.19d5	0a		asl a				asl 	a
.19d6	0a		asl a				asl		a
.19d7	65 10		adc $10				adc 	temp1
.19d9	85 10		sta $10				sta 	temp1
.19db	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get the digit
.19dd	20 b6 18	jsr $18b6			jsr 	CheckIsDigit
.19e0	90 1d		bcc $19ff			bcc 	EVFFail 					; failed, not digit
.19e2	29 0f		and #$0f			and 	#15
.19e4	18		clc				clc
.19e5	65 10		adc $10				adc 	temp1
.19e7	30 16		bmi $19ff			bmi 	EVFFail 					; failed, bad index.
.19e9	85 10		sta $10				sta 	temp1
.19eb	c8		iny				iny
.19ec	b1 08		lda ($08),y			lda 	(srcPtr),y
.19ee	c9 dd		cmp #$dd			cmp 	#"]"+$80
.19f0	d0 df		bne $19d1			bne 	_EVFGetIndex 				; index now in temp1.
.19f2	a9 a5		lda #$a5			lda 	#IndexHandler & $FF 		; output code
.19f4	a0 23		ldy #$23			ldy 	#IndexHandler >> 8
.19f6	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.19f9	a5 10		lda $10				lda 	temp1	 					; write index
.19fb	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.19fe	60		rts				rts
.19ff					EVFFail:
.19ff	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1a02	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>1a0a	41 42 4c 45 20 4e 41 4d 45 00
.1a14					EncVarAlNum:
.1a14	b1 08		lda ($08),y			lda 	(srcPtr),y 					; points to the  last char processed.
.1a16	10 01		bpl $1a19			bpl 	_EVAContinue
.1a18	60		rts				rts
.1a19					_EVAContinue:
.1a19	08		php				php 								; CS x 32 ; CC x 32 x 40
.1a1a	c8		iny				iny 								; get the next character, strip bit 7
.1a1b	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a1d	88		dey				dey
.1a1e	29 7f		and #$7f			and 	#$7F
.1a20	20 aa 18	jsr $18aa			jsr 	CheckIsLetter 				; letter ?
.1a23	b0 08		bcs $1a2d			bcs 	_EVACharOkay
.1a25	20 b6 18	jsr $18b6			jsr 	CheckIsDigit				; fail if not digit.
.1a28	90 32		bcc $1a5c			bcc 	_EVAExit
.1a2a	18		clc				clc
.1a2b	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.1a2d					_EVACharOkay:
.1a2d	c8		iny				iny 								; char okay advance to it.
.1a2e	38		sec				sec 								; range 1-36
.1a2f	e9 40		sbc #$40			sbc 	#64
.1a31	28		plp				plp 								; which multiplier ?
.1a32	90 0f		bcc $1a43			bcc 	_EVATimes32x40
.1a34	85 12		sta $12				sta 	temp2 						; save in temp2 - A x 32
.1a36	64 13		stz $13				stz 	temp2+1
.1a38	a2 05		ldx #$05			ldx 	#5
.1a3a	06 12		asl $12		_EVA32:	asl 	temp2
.1a3c	26 13		rol $13				rol 	temp2+1
.1a3e	ca		dex				dex
.1a3f	d0 f9		bne $1a3a			bne 	_EVA32
.1a41	80 0b		bra $1a4e			bra 	_EVAAddVar
.1a43					_EVATimes32x40:
.1a43	85 13		sta $13				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.1a45	64 12		stz $12				stz 	temp2
.1a47	0a		asl a				asl 	a
.1a48	0a		asl a				asl 	a
.1a49	18		clc				clc
.1a4a	65 13		adc $13				adc 	temp2+1
.1a4c	85 13		sta $13				sta 	temp2+1
.1a4e					_EVAAddVar:
.1a4e	18		clc				clc
.1a4f	a5 10		lda $10				lda 	temp1
.1a51	65 12		adc $12				adc 	temp2
.1a53	85 10		sta $10				sta 	temp1
.1a55	a5 11		lda $11				lda 	temp1+1
.1a57	65 13		adc $13				adc 	temp2+1
.1a59	85 11		sta $11				sta 	temp1+1
.1a5b	08		php				php
.1a5c					_EVAExit:
.1a5c	28		plp				plp
.1a5d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1a5e					ForHandler:
.1a5e	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1a60	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.1a62	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1a64	f0 18		beq $1a7e			beq 	_FHOverflow
.1a66	a5 07		lda $07				lda 	TOS+1
.1a68	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1a6b	a5 06		lda $06				lda 	TOS
.1a6d	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1a70	a9 ff		lda #$ff			lda 	#$FF
.1a72	99 80 07	sta $0780,y			sta 	returnStackX,y
.1a75	68		pla				pla
.1a76	85 07		sta $07				sta 	TOS+1
.1a78	68		pla				pla
.1a79	85 06		sta $06				sta 	TOS
.1a7b	4c 00 00	jmp $0000			jmp 	NextCode
.1a7e					_FHOverflow:
.1a7e	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1a81	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1a89	45 20 4f 56 45 52 46 4c 4f 57 00
.1a94					ForEncoder:
.1a94	a9 5e		lda #$5e			lda 	#ForHandler & $FF 			; for handler
.1a96	a0 1a		ldy #$1a			ldy 	#ForHandler >> 8
.1a98	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1a9b	a9 46		lda #$46			lda 	#"F" 						; for marker
.1a9d	20 24 19	jsr $1924			jsr 	EncodePushPosMarkerOnStack
.1aa0	60		rts				rts
.1aa1					NextHandler:
.1aa1	da		phx				phx
.1aa2	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1aa4	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1aa7	c9 ff		cmp #$ff			cmp 	#$FF
.1aa9	d0 21		bne $1acc			bne 	NHNoFor
.1aab	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1aae	d0 03		bne $1ab3			bne 	_NHNoBorrow
.1ab0	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1ab3					_NHNoBorrow:
.1ab3	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1ab6	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1ab9	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1abc	fa		plx				plx 								; restore X and re-test
.1abd	09 00		ora #$00			ora 	#0
.1abf	f0 05		beq $1ac6			beq 	_NHComplete 				; if so then complete, else loop.
.1ac1	e8		inx				inx 								; advance to branch
.1ac2	e8		inx				inx
.1ac3	4c e8 1b	jmp $1be8			jmp 	BranchAlways
.1ac6					_NHComplete:
.1ac6	e8		inx				inx 								; skip over the branch quantity
.1ac7	c6 05		dec $05				dec 	rsp 						; drop the indx
.1ac9	4c 00 00	jmp $0000			jmp 	NextCode
.1acc					NHNoFor:
.1acc	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1acf	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>1ad7	4f 52 20 53 43 4f 50 45 00
.1ae0					NextEncoder:
.1ae0	a9 a1		lda #$a1			lda 	#NextHandler & $FF 			; next code
.1ae2	a0 1a		ldy #$1a			ldy 	#NextHandler >> 8
.1ae4	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1ae7	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1ae9	c6 05		dec $05				dec 	rsp
.1aeb	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.1aee	c9 46		cmp #$46			cmp 	#"F"
.1af0	d0 07		bne $1af9			bne 	_NENoFor
.1af2	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1af5	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1af8	60		rts				rts
.1af9					_NENoFor:
.1af9	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1afc	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>1b04	46 4f 52 00
.1b08					GetIndex:
.1b08	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1b0a	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1b0d	c9 ff		cmp #$ff			cmp 	#$FF
.1b0f	d0 bb		bne $1acc			bne 	NHNoFor
.1b11	a5 06		lda $06				lda 	TOS
.1b13	48		pha				pha
.1b14	a5 07		lda $07				lda 	TOS+1
.1b16	48		pha				pha
.1b17	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1b1a	38		sec				sec
.1b1b	e9 01		sbc #$01			sbc 	#1
.1b1d	85 06		sta $06				sta 	TOS
.1b1f	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1b22	e9 00		sbc #$00			sbc 	#0
.1b24	85 07		sta $07				sta 	TOS+1
.1b26	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1b29					IfHandler:
.1b29	4c d0 1b	jmp $1bd0			jmp 	BranchIfZero
.1b2c					IfEncoder:
.1b2c	a9 29		lda #$29			lda 	#IfHandler & $FF 			; if handler
.1b2e	a0 1b		ldy #$1b			ldy 	#IfHandler >> 8
.1b30	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1b33	a9 49		lda #$49			lda 	#"I" 						; if marker
.1b35	20 24 19	jsr $1924			jsr 	EncodePushPosMarkerOnStack
.1b38	a9 00		lda #$00			lda 	#0
.1b3a	20 98 18	jsr $1898			jsr 	EncodeWriteByte 			; dummy write.
.1b3d	60		rts				rts
.1b3e					ElseHandler:
.1b3e	4c e6 1b	jmp $1be6			jmp 	BranchTestSucceedsNoPop
.1b41					ElseEncoder:
.1b41	a9 3e		lda #$3e			lda 	#ElseHandler & $FF 			; else handler
.1b43	a0 1b		ldy #$1b			ldy 	#ElseHandler >> 8
.1b45	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1b48	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.1b4b	48		pha				pha
.1b4c	a9 00		lda #$00			lda 	#0 							; zero branch
.1b4e	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1b51	20 6e 1b	jsr $1b6e			jsr 	IfPatch 					; fix up the branch.
.1b54	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.1b56	20 24 19	jsr $1924			jsr 	EncodePushPosMarkerOnStack
.1b59	68		pla				pla 								; address to patch
.1b5a	a6 05		ldx $05				ldx 	rsp
.1b5c	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.1b5f	60		rts				rts
.1b60					EndIfHandler:
.1b60	4c 00 00	jmp $0000			jmp 	NextCode
.1b63					EndIfEncoder:
.1b63	a9 60		lda #$60			lda 	#EndIfHandler & $FF 		; endif handler
.1b65	a0 1b		ldy #$1b			ldy 	#EndIfHandler >> 8
.1b67	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1b6a	20 6e 1b	jsr $1b6e			jsr 	IfPatch
.1b6d	60		rts				rts
.1b6e					IfPatch:
.1b6e	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1b70	c6 05		dec $05				dec 	rsp
.1b72	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1b75	c9 49		cmp #$49			cmp 	#"I"
.1b77	d0 0b		bne $1b84			bne 	_NENoIf
.1b79	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.1b7c	aa		tax				tax
.1b7d	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.1b80	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1b83	60		rts				rts
.1b84					_NENoIf:
.1b84	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1b87	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>1b8f	49 46 00

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1b92					RepeatHandler:
.1b92	4c 00 00	jmp $0000			jmp 	NextCode
.1b95					RepeatEncoder:
.1b95	a9 92		lda #$92			lda 	#RepeatHandler & $FF 		; repeat marker
.1b97	a0 1b		ldy #$1b			ldy 	#RepeatHandler >> 8
.1b99	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1b9c	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.1b9e	20 24 19	jsr $1924			jsr 	EncodePushPosMarkerOnStack
.1ba1	60		rts				rts
.1ba2					UntilHandler:
.1ba2	4c d0 1b	jmp $1bd0			jmp 	BranchIfZero
.1ba5					UntilEncoder:
.1ba5	a9 a2		lda #$a2			lda 	#UntilHandler & $FF 		; until code
.1ba7	a0 1b		ldy #$1b			ldy 	#UntilHandler >> 8
.1ba9	20 8e 18	jsr $188e			jsr 	EncodeWriteWord
.1bac	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1bae	c6 05		dec $05				dec 	rsp
.1bb0	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.1bb3	c9 52		cmp #$52			cmp 	#"R"
.1bb5	d0 07		bne $1bbe			bne 	_UENoRepeat
.1bb7	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1bba	20 98 18	jsr $1898			jsr 	EncodeWriteByte
.1bbd	60		rts				rts
.1bbe					_UENoRepeat:
.1bbe	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1bc1	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>1bc9	52 45 50 45 41 54 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1bd0					BranchIfZero:
.1bd0	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1bd2	05 07		ora $07				ora 	TOS+1
.1bd4	f0 0a		beq $1be0			beq 	BranchTestSucceeds
.1bd6					BranchTestFails:
.1bd6	68		pla				pla
.1bd7	85 07		sta $07				sta 	TOS+1
.1bd9	68		pla				pla
.1bda	85 06		sta $06				sta 	TOS
.1bdc	e8		inx				inx 								; skip over the relative branch.
.1bdd	4c 00 00	jmp $0000			jmp 	NextCode
.1be0					BranchTestSucceeds:
.1be0	68		pla				pla
.1be1	85 07		sta $07				sta 	TOS+1
.1be3	68		pla				pla
.1be4	85 06		sta $06				sta 	TOS
.1be6					BranchTestSucceedsNoPop:
.1be6	e8		inx				inx 								; advance by two, to the offset
.1be7	e8		inx				inx
.1be8					BranchAlways:
.1be8	8a		txa				txa 								; A = Y = position
.1be9	a8		tay				tay 								; (IP),Y now points to the branch target
.1bea	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1bec	aa		tax				tax 								; position back in this line.
.1bed	ca		dex				dex
.1bee	ca		dex				dex
.1bef	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1bf2					CallHandler:
.1bf2	e8		inx				inx									; bump X to the call address.
.1bf3	e8		inx				inx
.1bf4	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1bf6	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1bf8	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1bfa	f0 54		beq $1c50			beq 	_CHOverflow
.1bfc	a5 04		lda $04				lda 	IP+1
.1bfe	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1c01	a5 03		lda $03				lda 	IP
.1c03	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1c06	8a		txa				txa
.1c07	99 80 07	sta $0780,y			sta 	returnStackX,y
.1c0a	8a		txa				txa 								; get the line number into temp1.
.1c0b	a8		tay				tay
.1c0c	b1 03		lda ($03),y			lda 	(IP),y
.1c0e	85 10		sta $10				sta 	temp1
.1c10	c8		iny				iny
.1c11	b1 03		lda ($03),y			lda 	(IP),y
.1c13	85 11		sta $11				sta 	temp1+1
.1c15	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c17	85 03		sta $03				sta 	0+(IP)
.1c19	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c1b	85 04		sta $04				sta 	1+(IP)
.1c1d	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1c1f	f0 17		beq $1c38			beq 	_CHFail
.1c21	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1c23					_CHSearch:
.1c23	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1c25	c5 10		cmp $10				cmp 	temp1
.1c27	f0 3e		beq $1c67			beq 	_CHFoundLSB
.1c29					_CHSearchNext:
.1c29	18		clc				clc
.1c2a	a5 03		lda $03				lda 	IP
.1c2c	72 03		adc ($03)			adc 	(IP)
.1c2e	85 03		sta $03				sta 	IP
.1c30	90 02		bcc $1c34			bcc 	_NoCarryAdv
.1c32	e6 04		inc $04				inc 	IP+1
.1c34					_NoCarryAdv:
.1c34	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1c36	d0 eb		bne $1c23			bne 	_CHSearch
.1c38					_CHFail:
.1c38	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1c3b	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1c43	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.1c50					_CHOverflow:
.1c50	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1c53	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1c5b	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1c67					_CHFoundLSB:
.1c67	c8		iny				iny 								; get MSB
.1c68	b1 03		lda ($03),y			lda 	(IP),y
.1c6a	88		dey				dey
.1c6b	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1c6d	d0 ba		bne $1c29			bne 	_CHSearchNext
.1c6f	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1c71	b1 03		lda ($03),y			lda 	(IP),y
.1c73	c9 e8		cmp #$e8			cmp 	#DefineCode & $FF
.1c75	d0 c1		bne $1c38			bne 	_CHFail
.1c77	c8		iny				iny
.1c78	b1 03		lda ($03),y			lda 	(IP),y
.1c7a	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1c7c	d0 ba		bne $1c38			bne 	_CHFail
.1c7e	c8		iny				iny
.1c7f	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1c81	18		clc				clc
.1c82	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1c84	aa		tax				tax
.1c85	4c 00 00	jmp $0000			jmp 	NextCode
.1c88					ReturnHandler:
.1c88	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1c8a	f0 15		beq $1ca1			beq 	_RHUnderflow 				; if -ve underflowed
.1c8c	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1c8e	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1c91	85 04		sta $04				sta 	IP+1
.1c93	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1c96	85 03		sta $03				sta 	IP
.1c98	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1c9b	aa		tax				tax
.1c9c	f0 15		beq $1cb3			beq 	_RHInLoop 					; this means you have done :something for ; next
.1c9e	4c 00 00	jmp $0000			jmp 	NextCode
.1ca1					_RHUnderflow:
.1ca1	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1ca4	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>1cac	52 45 54 55 52 4e 00
.1cb3					_RHInLoop:
.1cb3	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1cb6	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>1cbe	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.1ccb					CallHandlerDecode:
.1ccb	a9 03		lda #$03			lda 	#CTH_Call					; space
.1ccd	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1cd0	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1cd2	aa		tax				tax
.1cd3	c8		iny				iny
.1cd4	b1 08		lda ($08),y			lda 	(srcPtr),y
.1cd6	a8		tay				tay
.1cd7	8a		txa				txa
.1cd8	20 15 1d	jsr $1d15			jsr 	FindLine 					; try to locate that line.
.1cdb	b0 11		bcs $1cee			bcs 	_CHDFound 					; if found .....
.1cdd					_CHDLineOnly:
.1cdd	48		pha				pha
.1cde	a9 3c		lda #$3c			lda 	#"<"
.1ce0	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1ce3	68		pla				pla
.1ce4	18		clc				clc 								; output unsigned
.1ce5	20 b5 1e	jsr $1eb5			jsr 	DecodeYAToBuffer
.1ce8	a9 3e		lda #$3e			lda 	#">"
.1cea	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1ced	60		rts				rts
.1cee					_CHDFound:
.1cee	48		pha				pha 								; save YA
.1cef	5a		phy				phy
.1cf0	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1cf2	b1 10		lda ($10),y			lda 	(temp1),y
.1cf4	c9 e8		cmp #$e8			cmp 	#DefineCode & 255
.1cf6	d0 07		bne $1cff			bne 	_CHDNoDefine
.1cf8	c8		iny				iny
.1cf9	b1 10		lda ($10),y			lda 	(temp1),y
.1cfb	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1cfd	f0 04		beq $1d03			beq 	_CHDFoundDefine
.1cff					_CHDNoDefine:
.1cff	7a		ply				ply									; restore the line number and print it in <>
.1d00	68		pla				pla
.1d01	80 da		bra $1cdd			bra 	_CHDLineOnly
.1d03					_CHDFoundDefine:
.1d03	68		pla				pla 								; throw saved line number.
.1d04	68		pla				pla
.1d05	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1d07					_CHDOutName:
.1d07	c8		iny				iny 								; next
.1d08	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1d0a	48		pha				pha
.1d0b	29 7f		and #$7f			and 	#$7F
.1d0d	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1d10	68		pla				pla
.1d11	0a		asl a				asl 	a 							; bit 7 to carry
.1d12	90 f3		bcc $1d07			bcc 	_CHDOutName
.1d14	60		rts				rts
.1d15					FindLine:
.1d15	48		pha				pha 								; save registers
.1d16	da		phx				phx
.1d17	5a		phy				phy
.1d18	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1d1a	84 13		sty $13				sty 	temp2+1
.1d1c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1d1e	85 10		sta $10				sta 	0+(temp1)
.1d20	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1d22	85 11		sta $11				sta 	1+(temp1)
.1d24					_FLLoop:
.1d24	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1d26	18		clc				clc									; if so exit with CC.
.1d27	f0 1d		beq $1d46			beq 	_FLExit
.1d29	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1d2b	b1 10		lda ($10),y			lda 	(temp1),y
.1d2d	c5 12		cmp $12				cmp 	temp2
.1d2f	d0 08		bne $1d39			bne 	_FLNext
.1d31	c8		iny				iny
.1d32	b1 10		lda ($10),y			lda 	(temp1),y
.1d34	c5 13		cmp $13				cmp 	temp2+1
.1d36	38		sec				sec 								; if so exit with CS
.1d37	f0 0d		beq $1d46			beq 	_FLExit
.1d39					_FLNext:
.1d39	18		clc				clc
.1d3a	a5 10		lda $10				lda 	temp1
.1d3c	72 10		adc ($10)			adc 	(temp1)
.1d3e	85 10		sta $10				sta 	temp1
.1d40	90 02		bcc $1d44			bcc 	_NoCarryAdv
.1d42	e6 11		inc $11				inc 	temp1+1
.1d44					_NoCarryAdv:
.1d44	80 de		bra $1d24			bra 	_FLLoop 					; keep looking.
.1d46					_FLExit:
.1d46	7a		ply				ply
.1d47	fa		plx				plx
.1d48	68		pla				pla
.1d49	60		rts				rts
.1d4a	18		clc				clc
.1d4b	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1d4c					NewHandler:
.1d4c	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1d4f	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1d52	4c 00 00	jmp $0000			jmp 	NextCode
.1d55					ClrHandler:
.1d55	86 10		stx $10				stx 	temp1
.1d57	a2 80		ldx #$80			ldx 	#NumberStackBase
.1d59	9a		txs				txs
.1d5a	a6 10		ldx $10				ldx 	temp1
.1d5c	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1d5f	4c 00 00	jmp $0000			jmp 	NextCode
.1d62					ClearVariableSpace:
.1d62	64 05		stz $05				stz 	rsp
.1d64	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1d66	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1d68	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1d6a	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1d6c	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1d6e					_CVSHashClear:
.1d6e	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1d70	99 40 06	sta $0640,y			sta 	hashTable,y
.1d73	88		dey				dey
.1d74	10 f8		bpl $1d6e			bpl 	_CVSHashClear
.1d76					_CVSFindEnd:
.1d76	18		clc				clc
.1d77	a5 0e		lda $0e				lda 	nextFreeMem
.1d79	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1d7b	85 0e		sta $0e				sta 	nextFreeMem
.1d7d	90 02		bcc $1d81			bcc 	_NoCarryAdv
.1d7f	e6 0f		inc $0f				inc 	nextFreeMem+1
.1d81					_NoCarryAdv:
.1d81	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1d83	d0 f1		bne $1d76			bne 	_CVSFindEnd
.1d85	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1d87	a0 00		ldy #$00			ldy 	#0
.1d89	20 8d 1d	jsr $1d8d			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1d8c	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1d8d					AdvanceFreeMem:
.1d8d	18		clc				clc
.1d8e	65 0e		adc $0e				adc 	nextFreeMem
.1d90	85 0e		sta $0e				sta 	nextFreeMem
.1d92	98		tya				tya
.1d93	65 0f		adc $0f				adc 	nextFreeMem+1
.1d95	85 0f		sta $0f				sta 	nextFreeMem+1
.1d97	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1d98					ExitDump:
.1d98	ba		tsx				tsx 								; save Data Stack in temp1
.1d99	86 10		stx $10				stx 	temp1
.1d9b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1d9e					BreakCmd:
>1d9e	ff						.byte 	$FF
.1d9f	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1da2					DecodeLineIntoBufPtr:
.1da2	48		pha				pha
.1da3	da		phx				phx
.1da4	5a		phy				phy
.1da5	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1da7	84 09		sty $09				sty 	srcPtr+1
.1da9	90 1b		bcc $1dc6			bcc 	_DecodeNoLineNumber
.1dab	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1dad	b1 08		lda ($08),y			lda 	(srcPtr),y
.1daf	aa		tax				tax
.1db0	c8		iny				iny
.1db1	b1 08		lda ($08),y			lda 	(srcPtr),y
.1db3	a8		tay				tay
.1db4	8a		txa				txa
.1db5	18		clc				clc
.1db6	20 b5 1e	jsr $1eb5			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1db9	aa		tax				tax 								; count in X
.1dba					_DecodeLineSpace:
.1dba	e0 05		cpx #$05			cpx 	#5
.1dbc	f0 08		beq $1dc6			beq 	_DecodeNoLineNumber
.1dbe	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1dc0	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1dc3	e8		inx				inx
.1dc4	80 f4		bra $1dba			bra 	_DecodeLineSpace
.1dc6					_DecodeNoLineNumber:
.1dc6	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1dc8					_DecodeLoop:
.1dc8	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1dca	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1dcc	c8		iny				iny
.1dcd	b1 08		lda ($08),y			lda 	(srcPtr),y
.1dcf	85 11		sta $11				sta 	temp1+1
.1dd1	c8		iny				iny 								; y points to the byte after it.
.1dd2	a5 10		lda $10				lda 	temp1
.1dd4	c9 a6		cmp #$a6			cmp 	#NextLine & $FF
.1dd6	d0 06		bne $1dde			bne 	_DecodeNotEOL
.1dd8	a5 11		lda $11				lda 	temp1+1
.1dda	c9 21		cmp #$21			cmp 	#NextLine >> 8
.1ddc	f0 0b		beq $1de9			beq 	_DecodeEOL
.1dde					_DecodeNotEOL:
.1dde	20 f1 1d	jsr $1df1			jsr 	IdentifyCodeWord
.1de1	20 3e 1e	jsr $1e3e			jsr 	DecodeFoundWord
.1de4	20 28 1e	jsr $1e28			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1de7	80 df		bra $1dc8			bra 	_DecodeLoop 				; and go round again
.1de9					_DecodeEOL:
.1de9	a9 00		lda #$00			lda 	#0
.1deb	92 0a		sta ($0a)			sta 	(bufPtr)
.1ded	7a		ply				ply 								; restore registers and exit
.1dee	fa		plx				plx
.1def	68		pla				pla
.1df0	60		rts				rts
.1df1					IdentifyCodeWord:
.1df1	5a		phy				phy 								; save current position on the stack.
.1df2	a9 f5		lda #$f5			lda 	#(Dictionary) & $FF
.1df4	85 0c		sta $0c				sta 	0+(matchPtr)
.1df6	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.1df8	85 0d		sta $0d				sta 	1+(matchPtr)
.1dfa					_DecodeIdentify:
.1dfa	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1dfc	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1dfe	c5 10		cmp $10				cmp 	temp1
.1e00	d0 07		bne $1e09			bne 	_DecodeIdNext
.1e02	c8		iny				iny
.1e03	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e05	c5 11		cmp $11				cmp 	temp1+1
.1e07	f0 1d		beq $1e26			beq 	_DecodeIdFound
.1e09					_DecodeIdNext:
.1e09	18		clc				clc
.1e0a	b2 0c		lda ($0c)			lda 	(matchPtr)
.1e0c	f0 0a		beq $1e18			beq 	_DecodeIdIssue
.1e0e	65 0c		adc $0c				adc 	matchPtr
.1e10	85 0c		sta $0c				sta 	matchPtr
.1e12	90 e6		bcc $1dfa			bcc 	_DecodeIdentify
.1e14	e6 0d		inc $0d				inc 	matchPtr+1
.1e16	80 e2		bra $1dfa			bra 	_DecodeIdentify
.1e18					_DecodeIdIssue:
.1e18	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>1e1b	44 45 43 4f 44 45 2f 42				.text 	"DECODE/BUG",0
>1e23	55 47 00
.1e26					_DecodeIdFound:
.1e26	7a		ply				ply 								; restore position.
.1e27	60		rts				rts
.1e28					AdvanceToNext:
.1e28	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1e29	a0 01		ldy #$01			ldy 	#1
.1e2b	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e2d	29 03		and #$03			and 	#3 							; bits 0-1.
.1e2f	7a		ply				ply
.1e30	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1e32	d0 02		bne $1e36			bne 	_ATN012
.1e34	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1e36					_ATN012:
.1e36	85 12		sta $12				sta 	temp2 						; now add that to Y
.1e38	98		tya				tya
.1e39	18		clc				clc
.1e3a	65 12		adc $12				adc 	temp2
.1e3c	a8		tay				tay
.1e3d	60		rts				rts
.1e3e					DecodeFoundWord:
.1e3e	5a		phy				phy 								; save current position
.1e3f	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1e41	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1e43	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1e45	29 10		and #$10			and 	#$10
.1e47	d0 0e		bne $1e57			bne 	_DFWSpecialDecoder
.1e49	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1e4b	30 08		bmi $1e55			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1e4d	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1e4f	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1e52	20 70 1e	jsr $1e70			jsr 	DecodeCurrentWord 			; expand that.
.1e55					_DFWExit:
.1e55	7a		ply				ply 								; restore current position
.1e56	60		rts				rts
.1e57					_DFWSpecialDecoder:
.1e57	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1e59	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1e5b	85 12		sta $12				sta 	temp2
.1e5d	c8		iny				iny
.1e5e	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e60	85 13		sta $13				sta 	temp2+1
.1e62	7a		ply				ply 	 							; restore current position into Y
.1e63	48		pha				pha 								; save registers
.1e64	da		phx				phx
.1e65	5a		phy				phy
.1e66	20 6d 1e	jsr $1e6d			jsr 	_DFWCallDecoder				; call the decoder routine
.1e69	7a		ply				ply 								; restore registers and exit
.1e6a	fa		plx				plx
.1e6b	68		pla				pla
.1e6c	60		rts				rts
.1e6d					_DFWCallDecoder:
.1e6d	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1e70					DecodeCurrentWord:
.1e70	5a		phy				phy
.1e71	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1e73	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e75	a0 04		ldy #$04			ldy 	#4 							; original offset
.1e77	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1e78	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1e79	4a		lsr a				lsr 	a 							; bit set.
.1e7a	4a		lsr a				lsr 	a
.1e7b	4a		lsr a				lsr 	a 							; decoder bit
.1e7c	90 02		bcc $1e80			bcc 	_DWBNoDec
.1e7e	c8		iny				iny
.1e7f	c8		iny				iny
.1e80					_DWBNoDec:
.1e80	4a		lsr a				lsr 	a
.1e81	90 02		bcc $1e85			bcc 	_DWBNoEnc
.1e83	c8		iny				iny
.1e84	c8		iny				iny
.1e85					_DWBNoEnc:
.1e85					_DWBWordOut:
.1e85	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1e87	48		pha				pha
.1e88	29 7f		and #$7f			and 	#$7F
.1e8a	20 93 1e	jsr $1e93			jsr		DecodeWriteBuffer
.1e8d	c8		iny				iny
.1e8e	68		pla				pla
.1e8f	10 f4		bpl $1e85			bpl 	_DWBWordOut
.1e91	7a		ply				ply 								; restore Y and exit
.1e92	60		rts				rts
.1e93					DecodeWriteBuffer:
.1e93	92 0a		sta ($0a)			sta 	(bufPtr)
.1e95	e6 0a		inc $0a				inc 	bufPtr
.1e97	d0 02		bne $1e9b			bne 	_DWBNoCarry
.1e99	e6 0b		inc $0b				inc 	bufPtr+1
.1e9b					_DWBNoCarry:
.1e9b	60		rts				rts
.1e9c					DecodeOutputData:
.1e9c	48		pha				pha
.1e9d	da		phx				phx
.1e9e	5a		phy				phy
.1e9f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1ea1	aa		tax				tax
.1ea2					_DODLoop:
.1ea2	ca		dex				dex 								; done it all ?
.1ea3	f0 0c		beq $1eb1			beq		_DODExit
.1ea5	c8		iny				iny 								; output next character
.1ea6	b1 08		lda ($08),y			lda 	(srcPtr),y
.1ea8	29 7f		and #$7f			and 	#$7F
.1eaa	f0 f6		beq $1ea2			beq 	_DODLoop 					; don't print NULL
.1eac	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.1eaf	80 f1		bra $1ea2			bra 	_DODLoop
.1eb1					_DODExit:
.1eb1	7a		ply				ply
.1eb2	fa		plx				plx
.1eb3	68		pla				pla
.1eb4	60		rts				rts
.1eb5					DecodeYAToBuffer:
.1eb5	da		phx				phx
.1eb6	5a		phy				phy
.1eb7	48		pha				pha
.1eb8	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1eba	85 12		sta $12				sta 	temp2
.1ebc	a5 0b		lda $0b				lda 	bufPtr+1
.1ebe	85 13		sta $13				sta 	temp2+1
.1ec0	68		pla				pla
.1ec1	20 df 22	jsr $22df			jsr 	ConvertToStringMain 		; convert YA to string there
.1ec4	aa		tax				tax 								; chars output to X
.1ec5	18		clc				clc
.1ec6	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1ec8	85 0a		sta $0a				sta 	bufPtr
.1eca	90 02		bcc $1ece			bcc 	_DYABNoCarry
.1ecc	e6 0b		inc $0b				inc 	bufPtr+1
.1ece					_DYABNoCarry:
.1ece	8a		txa				txa 								; count in A
.1ecf	7a		ply				ply									; restore and exit.
.1ed0	fa		plx				plx
.1ed1	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/edit.src

.1ed2					EditProgram:
.1ed2	20 4f 1f	jsr $1f4f			jsr 	EDFindLine					; find line address -> temp1
.1ed5	90 0f		bcc $1ee6			bcc 	_EPNotFound 				; if missing don't delete it.
.1ed7	a5 10		lda $10				lda 	temp1 						; save line address
.1ed9	48		pha				pha
.1eda	a5 11		lda $11				lda 	temp1+1
.1edc	48		pha				pha
.1edd	20 f4 1e	jsr $1ef4			jsr 	EDDeleteLine 				; delete the line
.1ee0	68		pla				pla 								; restore line address
.1ee1	85 11		sta $11				sta 	temp1+1
.1ee3	68		pla				pla
.1ee4	85 10		sta $10				sta 	temp1
.1ee6					_EPNotFound:
.1ee6	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1ee9	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1eeb	f0 03		beq $1ef0			beq 	_EPNoInsert
.1eed	20 17 1f	jsr $1f17			jsr 	EDInsertLine 				; insert line back in.
.1ef0					_EPNoInsert:
.1ef0	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace
.1ef3	60		rts				rts
.1ef4					EDDeleteLine:
.1ef4	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace
.1ef7	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1ef9	a2 00		ldx #$00			ldx 	#0
.1efb	b1 10		lda ($10),y			lda 	(temp1),y
.1efd	a8		tay				tay 								; put in Y
.1efe					_EDDelLoop:
.1efe	b1 10		lda ($10),y			lda 	(temp1),y 					; get it
.1f00	81 10		sta ($10,x)			sta 	(temp1,x) 					; write it.
.1f02	a5 10		lda $10				lda 	temp1 						; check if pointer has reached the end of
.1f04	c5 0e		cmp $0e				cmp		nextFreeMem 				; low memory. We will have copied down an
.1f06	d0 06		bne $1f0e			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1f08	a5 11		lda $11				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1f0a	c5 0f		cmp $0f				cmp 	nextFreeMem+1				; doesn't really matter.
.1f0c	f0 08		beq $1f16			beq		_EDDelExit
.1f0e					_EDDelNext:
.1f0e	e6 10		inc $10				inc 	temp1 						; go to next byte.
.1f10	d0 ec		bne $1efe			bne 	_EDDelLoop
.1f12	e6 11		inc $11				inc 	temp1+1
.1f14	80 e8		bra $1efe			bra 	_EDDelLoop
.1f16					_EDDelExit:
.1f16	60		rts				rts
.1f17					EDInsertLine:
.1f17	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace
.1f1a	a5 0e		lda $0e				lda 	nextFreeMem 				; copy high memory to temp3
.1f1c	85 14		sta $14				sta 	temp3
.1f1e	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f20	85 15		sta $15				sta 	temp3+1
.1f22	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1f25	a2 00		ldx #$00			ldx 	#0
.1f27					_EDInsLoop:
.1f27	a1 14		lda ($14,x)			lda 	(temp3,x)					; copy it up
.1f29	91 14		sta ($14),y			sta 	(temp3),y
.1f2b	a5 14		lda $14				lda 	temp3 						; reached the insert point (temp1)
.1f2d	c5 10		cmp $10				cmp 	temp1
.1f2f	d0 06		bne $1f37			bne 	_EDINextShift
.1f31	a5 15		lda $15				lda 	temp3+1
.1f33	c5 11		cmp $11				cmp 	temp1+1
.1f35	f0 0a		beq $1f41			beq 	_EDIShiftOver
.1f37					_EDINextShift:
.1f37	a5 14		lda $14				lda 	temp3 						; decrement the copy pointer.
.1f39	d0 02		bne $1f3d			bne 	_EDINoBorrow
.1f3b	c6 15		dec $15				dec 	temp3+1
.1f3d					_EDINoBorrow:
.1f3d	c6 14		dec $14				dec 	temp3
.1f3f	80 e6		bra $1f27			bra 	_EDInsLoop
.1f41					_EDIShiftOver:
.1f41	a0 00		ldy #$00			ldy 	#0
.1f43					_EDICopyCode:
.1f43	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1f46	91 10		sta ($10),y			sta 	(temp1),y 					; write out
.1f48	c8		iny				iny 								; bump pointers
.1f49	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1f4c	d0 f5		bne $1f43			bne 	_EDICopyCode
.1f4e	60		rts				rts
.1f4f					EDFindLine:
.1f4f	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1f51	85 10		sta $10				sta 	0+(temp1)
.1f53	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1f55	85 11		sta $11				sta 	1+(temp1)
.1f57					_EDFLLoop:
.1f57	b2 10		lda ($10)			lda 	(temp1) 					; check offset
.1f59	f0 24		beq $1f7f			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1f5b	a0 01		ldy #$01			ldy 	#1							; look at line #
.1f5d	38		sec				sec
.1f5e	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1f61	f1 10		sbc ($10),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1f63	aa		tax				tax	 								; this will return 10.
.1f64	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1f67	c8		iny				iny
.1f68	f1 10		sbc ($10),y			sbc 	(temp1),y
.1f6a	90 13		bcc $1f7f			bcc 	_EDFLFail					; if target < current then failed.
.1f6c	d0 04		bne $1f72			bne 	_EDFLNext 					; if non-zero then goto next
.1f6e	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1f70	f0 0f		beq $1f81			beq 	_EDFLFound
.1f72					_EDFLNext:
.1f72	18		clc				clc
.1f73	a5 10		lda $10				lda 	temp1
.1f75	72 10		adc ($10)			adc 	(temp1)
.1f77	85 10		sta $10				sta 	temp1
.1f79	90 02		bcc $1f7d			bcc 	_NoCarryAdv
.1f7b	e6 11		inc $11				inc 	temp1+1
.1f7d					_NoCarryAdv:
.1f7d	80 d8		bra $1f57			bra 	_EDFLLoop
.1f7f					_EDFLFail:
.1f7f	18		clc				clc
.1f80	60		rts				rts
.1f81					_EDFLFound:
.1f81	38		sec				sec
.1f82	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1f83					ListCode:
.1f83	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1f85	64 1f		stz $1f				stz 	ListLowest+1
.1f87	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1f89	85 1d		sta $1d				sta 	ListCount
.1f8b	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1f8d	85 18		sta $18				sta 	0+(listPtr)
.1f8f	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1f91	85 19		sta $19				sta 	1+(listPtr)
.1f93	86 10		stx $10				stx 	temp1						; S->A
.1f95	ba		tsx				tsx
.1f96	8a		txa				txa
.1f97	a6 10		ldx $10				ldx 	temp1
.1f99	c9 80		cmp #$80			cmp 	#NumberStackBase
.1f9b	f0 0e		beq $1fab			beq 	_LCLoop
.1f9d	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1f9f	85 1e		sta $1e				sta 	ListLowest
.1fa1	a5 07		lda $07				lda 	TOS+1
.1fa3	85 1f		sta $1f				sta 	ListLowest+1
.1fa5	68		pla				pla
.1fa6	85 07		sta $07				sta 	TOS+1
.1fa8	68		pla				pla
.1fa9	85 06		sta $06				sta 	TOS
.1fab					_LCLoop:
.1fab	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1fad	f0 4c		beq $1ffb			beq 	_LCExit
.1faf	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1fb1	b1 18		lda ($18),y			lda 	(listPtr),y
.1fb3	c5 1e		cmp $1e				cmp 	ListLowest
.1fb5	c8		iny				iny
.1fb6	b1 18		lda ($18),y			lda 	(listPtr),y
.1fb8	e5 1f		sbc $1f				sbc 	ListLowest+1
.1fba	90 32		bcc $1fee			bcc 	_LCNext
.1fbc	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1fbe	85 0a		sta $0a				sta 	0+(bufPtr)
.1fc0	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1fc2	85 0b		sta $0b				sta 	1+(bufPtr)
.1fc4	a5 18		lda $18				lda 	listPtr 					; output the line.
.1fc6	a4 19		ldy $19				ldy 	listPtr+1
.1fc8	38		sec				sec
.1fc9	20 a2 1d	jsr $1da2			jsr 	DecodeLineIntoBufPtr
.1fcc	a9 02		lda #$02			lda 	#CTH_LineNo
.1fce	20 68 11	jsr $1168			jsr 	ExternColour
.1fd1	a0 ff		ldy #$ff			ldy 	#255
.1fd3					_LCLoop2:
.1fd3	c8		iny				iny
.1fd4	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1fd7	f0 0e		beq $1fe7			beq 	_LCEnd
.1fd9	c9 20		cmp #$20			cmp 	#32
.1fdb	b0 05		bcs $1fe2			bcs 	_LCPrint
.1fdd	20 68 11	jsr $1168			jsr 	ExternColour
.1fe0	a9 20		lda #$20			lda 	#32
.1fe2					_LCPrint:
.1fe2	20 5c 11	jsr $115c			jsr 	ExternPrint
.1fe5	80 ec		bra $1fd3			bra 	_LCLoop2
.1fe7	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1fe9	20 5c 11	jsr $115c			jsr 	ExternPrint
.1fec	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1fee					_LCNext:
.1fee	18		clc				clc
.1fef	a5 18		lda $18				lda 	listPtr
.1ff1	72 18		adc ($18)			adc 	(listPtr)
.1ff3	85 18		sta $18				sta 	listPtr
.1ff5	90 02		bcc $1ff9			bcc 	_NoCarryAdv
.1ff7	e6 19		inc $19				inc 	listPtr+1
.1ff9					_NoCarryAdv:
.1ff9	80 b0		bra $1fab			bra 	_LCLoop 					; go round again.
.1ffb					_LCExit:
.1ffb	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1ffe					RunProgram:
.1ffe	86 10		stx $10				stx 	temp1
.2000	a2 80		ldx #$80			ldx 	#NumberStackBase
.2002	9a		txs				txs
.2003	a6 10		ldx $10				ldx 	temp1
.2005	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace 			; clear variables etc.
.2008	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.200a	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.200c	20 93 10	jsr $1093			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.200f	4c 00 00	jmp $0000			jmp 	NextCode
.2012					Call6502:
.2012	a5 06		lda $06				lda 	TOS 						; copy call address
.2014	85 10		sta $10				sta 	temp1
.2016	a5 07		lda $07				lda 	TOS+1
.2018	85 11		sta $11				sta 	temp1+1
.201a	68		pla				pla
.201b	85 07		sta $07				sta 	TOS+1
.201d	68		pla				pla
.201e	85 06		sta $06				sta 	TOS
.2020	20 26 20	jsr $2026			jsr 	_CallTemp1 					; call it
.2023	4c 00 00	jmp $0000			jmp 	NextCode
.2026					_CallTemp1:
.2026	6c 10 00	jmp ($0010)			jmp 	(temp1)
.2029					AssertCode:
.2029	a5 06		lda $06				lda 	TOS 						; TOS = 0
.202b	05 07		ora $07				ora 	TOS+1
.202d	f0 09		beq $2038			beq 	_ASFail 					; if zero fail
.202f	68		pla				pla
.2030	85 07		sta $07				sta 	TOS+1
.2032	68		pla				pla
.2033	85 06		sta $06				sta 	TOS
.2035	4c 00 00	jmp $0000			jmp 	NextCode
.2038					_ASFail:
.2038	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>203b	41 53 53 45 52 54 00				.text 	"ASSERT",0
.2042					StopCode:
.2042	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>2045	53 54 4f 50 00					.text 	"STOP",0
.204a					EndProgram:
.204a	4c 14 10	jmp $1014			jmp 	WarmStart
.204d					VlistCode:
.204d	a9 f5		lda #$f5			lda 	#(Dictionary) & $FF
.204f	85 10		sta $10				sta 	0+(temp1)
.2051	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.2053	85 11		sta $11				sta 	1+(temp1)
.2055	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.2057	b1 10		lda ($10),y			lda 	(temp1),y
.2059	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.205b	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.205c	4a		lsr a				lsr 	a
.205d	4a		lsr a				lsr		a
.205e	4a		lsr a				lsr 	a
.205f	4a		lsr a				lsr 	a 							; add those bits in
.2060	90 02		bcc $2064			bcc 	_VLNoDec
.2062	c8		iny				iny
.2063	c8		iny				iny
.2064					_VLNoDec:
.2064	4a		lsr a				lsr 	a
.2065	90 02		bcc $2069			bcc 	_VLNoEnc
.2067	c8		iny				iny
.2068	c8		iny				iny
.2069					_VLNoEnc:
.2069	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.206b	c9 24		cmp #$24			cmp 	#"$"
.206d	d0 06		bne $2075			bne 	_VLPrint
.206f	c8		iny				iny
.2070	51 10		eor ($10),y			eor 	(temp1),y
.2072	f0 13		beq $2087			beq 	_VLNext
.2074	88		dey				dey
.2075					_VLPrint:
.2075	b1 10		lda ($10),y			lda 	(temp1),y
.2077	48		pha				pha
.2078	c8		iny				iny
.2079	29 7f		and #$7f			and 	#$7F
.207b	20 5c 11	jsr $115c			jsr 	ExternPrint
.207e	68		pla				pla
.207f	0a		asl a				asl 	a
.2080	90 f3		bcc $2075			bcc 	_VLPrint
.2082	a9 20		lda #$20			lda 	#32
.2084	20 5c 11	jsr $115c			jsr 	ExternPrint
.2087					_VLNext:
.2087	18		clc				clc 								; go to next
.2088	b2 10		lda ($10)			lda 	(temp1)
.208a	65 10		adc $10				adc 	temp1
.208c	85 10		sta $10				sta 	temp1
.208e	90 02		bcc $2092			bcc 	_VLNoCarry
.2090	e6 11		inc $11				inc 	temp1+1
.2092					_VLNoCarry:
.2092	b2 10		lda ($10)			lda 	(temp1)
.2094	d0 bf		bne $2055			bne 	_VLLoop
.2096	a9 0d		lda #$0d			lda 	#13
.2098	20 5c 11	jsr $115c			jsr 	ExternPrint
.209b	4c 00 00	jmp $0000			jmp 	NextCode
.209e					DumpStack:
.209e	a9 5b		lda #$5b			lda		#"["
.20a0	20 5c 11	jsr $115c			jsr 	ExternPrint
.20a3	86 10		stx $10				stx 	temp1 						; X -> A
.20a5	ba		tsx				tsx
.20a6	8a		txa				txa
.20a7	a6 10		ldx $10				ldx 	temp1
.20a9	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.20ab	f0 2f		beq $20dc			beq 	_DSExit
.20ad	48		pha				pha 								; save it
.20ae	a9 07		lda #$07			lda 	#COL_WHITE
.20b0	20 68 11	jsr $1168			jsr 	ExternColour
.20b3	a5 06		lda $06				lda 	TOS 						; print TOS then stack values backwards
.20b5	a4 07		ldy $07				ldy 	TOS+1
.20b7	38		sec				sec 								; print unsigned.
.20b8	20 b9 22	jsr $22b9			jsr 	PrintYA
.20bb	a9 06		lda #$06			lda 	#COL_CYAN
.20bd	20 68 11	jsr $1168			jsr 	ExternColour
.20c0	7a		ply				ply 								; restore offset
.20c1					_DSLoop:
.20c1	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.20c3	f0 17		beq $20dc			beq 	_DSExit
.20c5	a9 20		lda #$20			lda 	#" " 						; space
.20c7	20 5c 11	jsr $115c			jsr 	ExternPrint
.20ca	5a		phy				phy 								; save pos
.20cb	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.20ce	48		pha				pha
.20cf	b9 02 01	lda $0102,y			lda 	$0102,y
.20d2	7a		ply				ply
.20d3	38		sec				sec
.20d4	20 b9 22	jsr $22b9			jsr 	PrintYA 					; print it
.20d7	7a		ply				ply 								; restore and advance pos
.20d8	c8		iny				iny
.20d9	c8		iny				iny
.20da	80 e5		bra $20c1			bra 	_DSLoop
.20dc					_DSExit:
.20dc	a9 5d		lda #$5d			lda		#"]"
.20de	20 5c 11	jsr $115c			jsr 	ExternPrint
.20e1	a9 0d		lda #$0d			lda 	#13
.20e3	20 5c 11	jsr $115c			jsr 	ExternPrint
.20e6	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/saveload.src

.20e9					System_Save:
.20e9	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace  		; make sure start/end are right
.20ec	20 6b 21	jsr $216b			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.20ef	20 17 21	jsr $2117			jsr 	SLGetFileName 				; get filename -> temp3
.20f2	a5 0e		lda $0e				lda 	nextFreeMem 				; end address
.20f4	85 10		sta $10				sta 	temp1
.20f6	a5 0f		lda $0f				lda 	nextFreeMem+1
.20f8	85 11		sta $11				sta 	temp1+1
.20fa	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.20fc	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.20fe	20 b0 11	jsr $11b0			jsr 	ExternSave
.2101	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace  		; make sure start/end are right
.2104	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack
.2107					System_Load:
.2107	20 17 21	jsr $2117			jsr 	SLGetFileName 				; get filename -> temp3
.210a	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.210c	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.210e	20 e6 11	jsr $11e6			jsr 	ExternLoad
.2111	20 62 1d	jsr $1d62			jsr 	ClearVariableSpace 			; reset everything.
.2114	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack
.2117					SLGetFileName:
.2117	ba		tsx				tsx
.2118	e0 80		cpx #$80			cpx 	#NumberStackBase
.211a	f0 3a		beq $2156			beq 	_SLFNFail
.211c	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.211e	85 14		sta $14				sta 	temp3
.2120	a9 08		lda #$08			lda 	#textBuffer >> 8
.2122	85 15		sta $15				sta 	temp3+1
.2124	a0 00		ldy #$00			ldy 	#0
.2126	b1 06		lda ($06),y	_SLCopy:lda 	(TOS),y
.2128	91 14		sta ($14),y			sta 	(temp3),y
.212a	c8		iny				iny
.212b	c9 00		cmp #$00			cmp		#0
.212d	d0 f7		bne $2126			bne 	_SLCopy
.212f	88		dey				dey
.2130	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.2132					_SLCheckEnd:
.2132	88		dey				dey
.2133	bd 66 21	lda $2166,x			lda 	_SLFNExtension,x
.2136	d1 14		cmp ($14),y			cmp 	(temp3),y
.2138	d0 05		bne $213f			bne 	_SLNoExtension
.213a	ca		dex				dex
.213b	10 f5		bpl $2132			bpl 	_SLCheckEnd
.213d	80 16		bra $2155			bra 	_SLExit
.213f					_SLNoExtension:
.213f	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.2141					_SLFindend:
.2141	c8		iny				iny
.2142	b9 10 08	lda $0810,y			lda 	textBuffer,y
.2145	d0 fa		bne $2141			bne 	_SLFindend
.2147	a2 00		ldx #$00			ldx 	#0
.2149					_SLAppend:
.2149	bd 66 21	lda $2166,x			lda 	_SLFNExtension,x
.214c	99 10 08	sta $0810,y			sta 	textBuffer,y
.214f	e8		inx				inx
.2150	c8		iny				iny
.2151	c9 00		cmp #$00			cmp 	#0
.2153	d0 f4		bne $2149			bne 	_SLAppend
.2155					_SLExit:
.2155	60		rts				rts
.2156					_SLFNFail:
.2156	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>2159	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>2161	4e 41 4d 45 00
.2166					_SLFNExtension:
>2166	2e 52 50 4c 00					.text 	".RPL",0
.216b					ExtendWithDictionary:
.216b	20 94 21	jsr $2194			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.216e	a9 f5		lda #$f5			lda 	#(Dictionary) & $FF
.2170	85 10		sta $10				sta 	0+(temp1)
.2172	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.2174	85 11		sta $11				sta 	1+(temp1)
.2176					_EWDLoop:
.2176	b2 10		lda ($10)			lda 	(temp1)						; end
.2178	f0 1a		beq $2194			beq 	_EWDMarker
.217a	a0 02		ldy #$02			ldy 	#2 							; output the address
.217c	b1 10		lda ($10),y			lda 	(temp1),y
.217e	20 9d 21	jsr $219d			jsr 	_EWDWrite
.2181	c8		iny				iny
.2182	b1 10		lda ($10),y			lda 	(temp1),y
.2184	20 9d 21	jsr $219d			jsr 	_EWDWrite
.2187	18		clc				clc 								; next entry.
.2188	a5 10		lda $10				lda 	temp1
.218a	72 10		adc ($10)			adc 	(temp1)
.218c	85 10		sta $10				sta 	temp1
.218e	90 e6		bcc $2176			bcc 	_EWDLoop
.2190	e6 11		inc $11				inc 	temp1+1
.2192	80 e2		bra $2176			bra 	_EWDLoop
.2194					_EWDMarker:
.2194	a9 ff		lda #$ff			lda 	#$FF
.2196	20 9d 21	jsr $219d			jsr 	_EWDWrite
.2199	20 9d 21	jsr $219d			jsr 	_EWDWrite
.219c	60		rts				rts
.219d					_EWDWrite:
.219d	92 0e		sta ($0e)			sta 	(nextFreeMem)
.219f	e6 0e		inc $0e				inc 	nextFreeMem
.21a1	d0 02		bne $21a5			bne 	_EWDExit
.21a3	e6 0f		inc $0f				inc 	nextFreeMem+1
.21a5					_EWDExit:
.21a5	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.21a6					NextLine:
.21a6	18		clc				clc
.21a7	a5 03		lda $03				lda 	IP
.21a9	72 03		adc ($03)			adc 	(IP)
.21ab	85 03		sta $03				sta 	IP
.21ad	90 02		bcc $21b1			bcc 	_NoCarryAdv
.21af	e6 04		inc $04				inc 	IP+1
.21b1					_NoCarryAdv:
.21b1	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.21b3	f0 05		beq $21ba			beq 	_NLGoEnd
.21b5	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.21b7	4c 00 00	jmp $0000			jmp 	NextCode
.21ba					_NLGoEnd:
.21ba	4c 14 10	jmp $1014			jmp 	WarmStart
.21bd					SkipComment:
.21bd	e8		inx				inx									; (IP),X points to the length.
.21be	e8		inx				inx
.21bf	8a		txa				txa
.21c0	a8		tay				tay 								; put into Y
.21c1	18		clc				clc
.21c2	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.21c4	aa		tax				tax 								; put back in X
.21c5	ca		dex				dex
.21c6	ca		dex				dex
.21c7	4c 00 00	jmp $0000			jmp 	NextCode
.21ca					CommentDecoder:
.21ca	a9 06		lda #$06			lda 	#CTH_Keyword
.21cc	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.21cf	a9 27		lda #$27			lda 	#"'"
.21d1	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.21d4	b1 08		lda ($08),y			lda 	(srcPtr),y 					; check if there is no data
.21d6	c9 01		cmp #$01			cmp 	#1
.21d8	f0 0d		beq $21e7			beq 	_CDEmpty 					; if so print nothing.
.21da	a9 0b		lda #$0b			lda 	#CTH_Comment
.21dc	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.21df	20 9c 1e	jsr $1e9c			jsr 	DecodeOutputData
.21e2	a9 20		lda #$20			lda 	#32
.21e4	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.21e7					_CDEmpty
.21e7	60		rts				rts
.21e8					DefineCode:
.21e8	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>21eb	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>21f3	44 45 46 49 4e 49 54 49 4f 4e 00
.21fe					DefineDecoder:
.21fe	a9 07		lda #$07			lda 	#CTH_Definition
.2200	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.2203	a9 3a		lda #$3a			lda 	#":"
.2205	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.2208	20 9c 1e	jsr $1e9c			jsr 	DecodeOutputData
.220b	a9 20		lda #$20			lda 	#32
.220d	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.2210	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.2211					ConvertToInteger:
.2211	84 17		sty $17				sty 	temp4+1
.2213	85 16		sta $16				sta 	temp4
.2215	64 14		stz $14				stz 	temp3 						; reset value
.2217	64 15		stz $15				stz 	temp3+1
.2219	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.221b	a0 00		ldy #$00			ldy 	#0 							; look at first character
.221d	b1 16		lda ($16),y			lda 	(temp4),y
.221f	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.2221	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.2223	d0 01		bne $2226			bne 	_CTINotMinus
.2225	c8		iny				iny									; skip -
.2226					_CTINotMinus:
.2226	b1 16		lda ($16),y			lda 	(temp4),y
.2228	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.222a	d0 03		bne $222f			bne 	_CTILoop
.222c	c6 10		dec $10				dec 	temp1
.222e	c8		iny				iny
.222f					_CTILoop:
.222f	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.2231	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.2233	38		sec				sec
.2234	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.2236	90 65		bcc $229d			bcc 	_CTIFail 					; out of range.
.2238	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.223a	90 0b		bcc $2247			bcc 	_CTILegal
.223c	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.223e	90 5d		bcc $229d			bcc 	_CTIFail
.2240	38		sec				sec
.2241	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.2243	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.2245	b0 56		bcs $229d			bcs 	_CTIFail
.2247					_CTILegal:
.2247	48		pha				pha 								; save digit value.
.2248	06 14		asl $14				asl 	temp3
.224a	26 15		rol $15				rol 	temp3+1
.224c	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.224e	85 12		sta $12				sta 	temp2
.2250	a5 15		lda $15				lda 	temp3+1
.2252	85 13		sta $13				sta 	temp2+1
.2254	06 14		asl $14				asl 	temp3
.2256	26 15		rol $15				rol 	temp3+1
.2258	06 14		asl $14				asl 	temp3
.225a	26 15		rol $15				rol 	temp3+1
.225c	24 10		bit $10				bit 	temp1 						; hexadecimal
.225e	10 07		bpl $2267			bpl 	_CTIDecimal
.2260	06 14		asl $14				asl 	temp3
.2262	26 15		rol $15				rol 	temp3+1
.2264	68		pla				pla 								; get digit back
.2265	80 12		bra $2279			bra 	_CTIAddLoop
.2267					_CTIDecimal:
.2267	18		clc				clc 								; x 8 + x 2 = x 10
.2268	a5 14		lda $14				lda 	temp3
.226a	65 12		adc $12				adc 	temp2
.226c	85 14		sta $14				sta 	temp3
.226e	a5 15		lda $15				lda 	temp3+1
.2270	65 13		adc $13				adc 	temp2+1
.2272	85 15		sta $15				sta 	temp3+1
.2274	68		pla				pla 								; check digit 0-9
.2275	c9 0a		cmp #$0a			cmp 	#10
.2277	b0 24		bcs $229d			bcs 	_CTIFail
.2279					_CTIAddLoop:
.2279	18		clc				clc
.227a	65 14		adc $14				adc 	temp3
.227c	85 14		sta $14				sta 	temp3
.227e	90 02		bcc $2282			bcc 	_CTINoCarry
.2280	e6 15		inc $15				inc 	temp3+1
.2282					_CTINoCarry:
.2282	c8		iny				iny
.2283	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.2285	c9 21		cmp #$21			cmp 	#32+1
.2287	b0 a6		bcs $222f			bcs 	_CTILoop 					; no, go back.
.2289	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.228b	d0 0d		bne $229a			bne 	_CTIOkay
.228d	38		sec				sec
.228e	a9 00		lda #$00			lda 	#0 							; negate temp3.
.2290	e5 14		sbc $14				sbc 	temp3
.2292	85 14		sta $14				sta 	temp3
.2294	a9 00		lda #$00			lda 	#0
.2296	e5 15		sbc $15				sbc 	temp3+1
.2298	85 15		sta $15				sta 	temp3+1
.229a					_CTIOkay:
.229a	98		tya				tya
.229b	38		sec				sec
.229c	60		rts				rts
.229d					_CTIFail:
.229d	18		clc				clc
.229e	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.229f					IntToString:
.229f	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22a1	85 12		sta $12				sta 	0+(temp2)
.22a3	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22a5	85 13		sta $13				sta 	1+(temp2)
.22a7	a5 06		lda $06				lda 	TOS 						; value in YA
.22a9	a4 07		ldy $07				ldy 	TOS+1
.22ab	20 db 22	jsr $22db			jsr 	ConvertToString
.22ae	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22b0	85 06		sta $06				sta 	0+(TOS)
.22b2	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22b4	85 07		sta $07				sta 	1+(TOS)
.22b6	4c 00 00	jmp $0000			jmp 	NextCode
.22b9					PrintYA:
.22b9	48		pha				pha
.22ba	da		phx				phx
.22bb	5a		phy				phy
.22bc	48		pha				pha
.22bd	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22bf	85 12		sta $12				sta 	0+(temp2)
.22c1	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22c3	85 13		sta $13				sta 	1+(temp2)
.22c5	68		pla				pla
.22c6	20 df 22	jsr $22df			jsr 	ConvertToStringMain
.22c9	a2 00		ldx #$00			ldx 	#0
.22cb					_PrintYALoop:
.22cb	bd 10 08	lda $0810,x			lda 	textBuffer,x
.22ce	20 5c 11	jsr $115c			jsr 	ExternPrint
.22d1	e8		inx				inx
.22d2	bd 10 08	lda $0810,x			lda 	textBuffer,x
.22d5	d0 f4		bne $22cb			bne 	_PrintYALoop
.22d7	7a		ply				ply
.22d8	fa		plx				plx
.22d9	68		pla				pla
.22da	60		rts				rts
.22db					ConvertToString:
.22db	38		sec				sec
.22dc	80 01		bra $22df			bra 	ConvertToStringMain
.22de					ConvertToStringUnsigned:
.22de	18		clc				clc
.22df					ConvertToStringMain:
.22df	da		phx				phx									; save XY
.22e0	5a		phy				phy
.22e1	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.22e3	85 10		sta $10				sta 	temp1 						; save YA in temp1
.22e5	84 11		sty $11				sty 	temp1+1
.22e7	a0 00		ldy #$00			ldy 	#0 							; index to result.
.22e9	90 16		bcc $2301			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.22eb	a5 11		lda $11				lda 	temp1+1 					; is it negative
.22ed	10 12		bpl $2301			bpl 	_CTSUnsigned
.22ef	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.22f1	91 12		sta ($12),y			sta 	(temp2),y
.22f3	c8		iny				iny
.22f4	38		sec				sec 								; negate temp1
.22f5	a9 00		lda #$00			lda 	#0
.22f7	e5 10		sbc $10				sbc 	temp1
.22f9	85 10		sta $10				sta 	temp1
.22fb	a9 00		lda #$00			lda 	#0
.22fd	e5 11		sbc $11				sbc 	temp1+1
.22ff	85 11		sta $11				sta 	temp1+1
.2301					_CTSUnsigned:
.2301	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.2303					_CTSLoop:
.2303	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.2305	91 12		sta ($12),y			sta 	(temp2),y
.2307					_CTSSubLoop:
.2307	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.2309	1a		inc a				inc 	a
.230a	91 12		sta ($12),y			sta 	(temp2),y
.230c	38		sec				sec 								; do subtraction saving interim result
.230d	a5 10		lda $10				lda 	temp1
.230f	fd 42 23	sbc $2342,x			sbc 	_CTSTable,x
.2312	48		pha				pha
.2313	a5 11		lda $11				lda 	temp1+1
.2315	fd 43 23	sbc $2343,x			sbc 	_CTSTable+1,x
.2318	90 07		bcc $2321			bcc 	_CTSCantSubtract 			; end of subtraction.
.231a	85 11		sta $11				sta 	temp1+1 					; save result back
.231c	68		pla				pla
.231d	85 10		sta $10				sta 	temp1
.231f	80 e6		bra $2307			bra 	_CTSSubLoop
.2321					_CTSCantSubtract:
.2321	68		pla				pla 								; throw away interim
.2322	e8		inx				inx 								; next subtractor
.2323	e8		inx				inx
.2324	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.2326	49 30		eor #$30			eor 	#"0"
.2328	05 1a		ora $1a				ora 	SignCount
.232a	85 1a		sta $1a				sta 	SignCount
.232c	f0 01		beq $232f			beq		_CTSLZ 						; if all zeros so far suppress.
.232e	c8		iny				iny 								; next character
.232f					_CTSLZ:
.232f	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.2331	d0 d0		bne $2303			bne 	_CTSLoop
.2333					_CTSComplete:
.2333	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.2335	09 30		ora #$30			ora 	#48 						; ASCII
.2337	91 12		sta ($12),y			sta 	(temp2),y					; write out
.2339	c8		iny				iny
.233a	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.233c	91 12		sta ($12),y			sta 	(temp2),y
.233e	98		tya				tya 								; size in A
.233f	7a		ply				ply									; pull and exit.
.2340	fa		plx				plx
.2341	60		rts				rts
.2342					_CTSTable:
>2342	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.234a					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.234a					VarAddressHandler:
.234a	18		clc				clc 								; find variable, error if it doesn't exist.
.234b	20 ed 23	jsr $23ed			jsr 	VariableFind
.234e	20 c7 23	jsr $23c7			jsr 	VariableCheckIndex
.2351	a5 06		lda $06				lda 	TOS
.2353	48		pha				pha
.2354	a5 07		lda $07				lda 	TOS+1
.2356	48		pha				pha
.2357	a5 10		lda $10				lda 	temp1 						; the address is the new value
.2359	85 06		sta $06				sta 	TOS
.235b	a5 11		lda $11				lda		temp1+1
.235d	85 07		sta $07				sta 	TOS+1
.235f	4c 00 00	jmp $0000			jmp 	NextCode
.2362					VarAddrHandlerDecode:
.2362	a9 26		lda #$26			lda 	#"&"
.2364	4c a2 24	jmp $24a2			jmp 	VarHandlerDecode
.2367					VarReadHandler:
.2367	18		clc				clc 								; find variable, error if it doesn't exist.
.2368	20 ed 23	jsr $23ed			jsr 	VariableFind
.236b	20 c7 23	jsr $23c7			jsr 	VariableCheckIndex
.236e	a5 06		lda $06				lda 	TOS
.2370	48		pha				pha
.2371	a5 07		lda $07				lda 	TOS+1
.2373	48		pha				pha
.2374	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.2376	85 06		sta $06				sta 	TOS
.2378	a0 01		ldy #$01			ldy 	#1
.237a	b1 10		lda ($10),y			lda 	(temp1),y
.237c	85 07		sta $07				sta 	TOS+1
.237e	4c 00 00	jmp $0000			jmp 	NextCode
.2381					VarReadHandlerDecode:
.2381	a9 40		lda #$40			lda 	#"@"
.2383	4c a2 24	jmp $24a2			jmp 	VarHandlerDecode
.2386					VarWriteHandler:
.2386	38		sec				sec 								; find variable, create it if it doesn't exist.
.2387	20 ed 23	jsr $23ed			jsr 	VariableFind
.238a	20 c7 23	jsr $23c7			jsr 	VariableCheckIndex
.238d	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.238f	92 10		sta ($10)			sta 	(temp1)
.2391	a5 07		lda $07				lda 	TOS+1
.2393	a0 01		ldy #$01			ldy 	#1
.2395	91 10		sta ($10),y			sta 	(temp1),y
.2397	68		pla				pla
.2398	85 07		sta $07				sta 	TOS+1
.239a	68		pla				pla
.239b	85 06		sta $06				sta 	TOS
.239d	4c 00 00	jmp $0000			jmp 	NextCode
.23a0					VarWriteHandlerDecode:
.23a0	a9 21		lda #$21			lda 	#"!"
.23a2	4c a2 24	jmp $24a2			jmp 	VarHandlerDecode
.23a5					IndexHandler:
.23a5	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>23a8	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>23b0	42 55 47 00
.23b4					IndexHandlerDecode:
.23b4	a9 5b		lda #$5b			lda 	#"["
.23b6	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.23b9	b1 08		lda ($08),y			lda 	(srcPtr),y
.23bb	a0 00		ldy #$00			ldy 	#0
.23bd	38		sec				sec
.23be	20 b5 1e	jsr $1eb5			jsr 	DecodeYAToBuffer
.23c1	a9 5d		lda #$5d			lda 	#"]"
.23c3	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.23c6	60		rts				rts
.23c7					VariableCheckIndex:
.23c7	8a		txa				txa 								; next is $$index ?
.23c8	a8		tay				tay
.23c9	c8		iny				iny
.23ca	c8		iny				iny
.23cb	b1 03		lda ($03),y			lda 	(IP),y
.23cd	c9 a5		cmp #$a5			cmp 	#IndexHandler & $FF
.23cf	d0 1b		bne $23ec			bne 	_VCIExit
.23d1	c8		iny				iny
.23d2	b1 03		lda ($03),y			lda 	(IP),y
.23d4	c9 23		cmp #$23			cmp 	#IndexHandler >> 8
.23d6	d0 14		bne $23ec			bne 	_VCIExit
.23d8	98		tya				tya 								; fix X backup 3 on from where we started
.23d9	aa		tax				tax
.23da	c8		iny				iny 								; get the index
.23db	b1 03		lda ($03),y			lda 	(IP),y
.23dd	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.23de	a0 01		ldy #$01			ldy 	#1
.23e0	72 10		adc ($10)			adc 	(temp1) 					; do the indirection e.g. the look up.
.23e2	48		pha				pha
.23e3	b1 10		lda ($10),y			lda 	(temp1),y
.23e5	69 00		adc #$00			adc 	#0
.23e7	85 11		sta $11				sta 	temp1+1
.23e9	68		pla				pla
.23ea	85 10		sta $10				sta 	temp1
.23ec					_VCIExit:
.23ec	60		rts				rts
.23ed					VariableFind:
.23ed	08		php				php 								; save autocreate flag.
.23ee	e8		inx				inx 								; advance to/over the variable name.
.23ef	e8		inx				inx
.23f0	8a		txa				txa 								; put in Y
.23f1	a8		tay				tay
.23f2	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.23f4	85 12		sta $12				sta 	temp2
.23f6	c8		iny				iny
.23f7	b1 03		lda ($03),y			lda 	(IP),y
.23f9	85 13		sta $13				sta 	temp2+1
.23fb	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.23fd	b0 0f		bcs $240e			bcs 	_VFLong
.23ff	a5 13		lda $13				lda 	temp2+1
.2401	d0 0b		bne $240e			bne 	_VFLong
.2403	a5 12		lda $12				lda 	temp2						; this is the index
.2405	0a		asl a				asl 	a 							; double it
.2406	85 10		sta $10				sta 	temp1
.2408	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.240a	85 11		sta $11				sta 	temp1+1
.240c	28		plp				plp 								; throw creation flag, it always exists.
.240d	60		rts				rts
.240e					_VFLong:
.240e	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.2410	6a		ror a				ror 	a
.2411	6a		ror a				ror 	a
.2412	6a		ror a				ror 	a
.2413	6a		ror a				ror 	a
.2414	45 12		eor $12				eor 	temp2
.2416	45 13		eor $13				eor 	temp2+1
.2418	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.241a	0a		asl a				asl 	a
.241b	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.241d	85 10		sta $10				sta 	temp1
.241f	85 14		sta $14				sta 	temp3
.2421	a9 06		lda #$06			lda 	#hashTable >> 8
.2423	85 11		sta $11				sta 	temp1+1
.2425	85 15		sta $15				sta 	temp3+1
.2427					_VFSearch:
.2427	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.2429	b1 10		lda ($10),y			lda 	(temp1),y
.242b	f0 23		beq $2450			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.242d	a8		tay				tay 								; follow the link through.
.242e	b2 10		lda ($10)			lda 	(temp1)
.2430	85 10		sta $10				sta 	temp1
.2432	84 11		sty $11				sty 	temp1+1
.2434	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.2436	b1 10		lda ($10),y			lda 	(temp1),y
.2438	c5 12		cmp $12				cmp 	temp2
.243a	d0 eb		bne $2427			bne 	_VFSearch 					; if it doesn't, follow the next link.
.243c	c8		iny				iny 								; same for 2nd byte of name
.243d	b1 10		lda ($10),y			lda 	(temp1),y
.243f	c5 13		cmp $13				cmp 	temp2+1
.2441	d0 e4		bne $2427			bne 	_VFSearch
.2443	18		clc				clc
.2444	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.2446	69 02		adc #$02			adc 	#2
.2448	85 10		sta $10				sta 	temp1
.244a	90 02		bcc $244e			bcc 	_VFNoPage1
.244c	e6 11		inc $11				inc 	temp1+1
.244e					_VFNoPage1:
.244e	28		plp				plp 								; don't need to worry about creation flag
.244f	60		rts				rts
.2450					_VFNotFound:
.2450	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.2451	b0 14		bcs $2467			bcs 	_VFCreate
.2453	20 fc 10	jsr $10fc			jsr 	ErrorHandler
>2456	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>245e	56 41 52 49 41 42 4c 45 00
.2467					_VFCreate:
.2467	a0 01		ldy #$01			ldy 	#1
.2469	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.246b	92 0e		sta ($0e)			sta 	(nextFreeMem)
.246d	b1 14		lda ($14),y			lda 	(temp3),y
.246f	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2471	c8		iny				iny
.2472	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.2474	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2476	c8		iny				iny
.2477	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2479	c8		iny				iny
.247a	a5 12		lda $12				lda 	temp2 						; copy the name out
.247c	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.247e	c8		iny				iny
.247f	a5 13		lda $13				lda 	temp2+1
.2481	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2483	a0 01		ldy #$01			ldy 	#1
.2485	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.2487	92 14		sta ($14)			sta 	(temp3)
.2489	a5 0f		lda $0f				lda 	nextFreeMem+1
.248b	91 14		sta ($14),y			sta 	(temp3),y
.248d	18		clc				clc
.248e	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.2490	69 02		adc #$02			adc 	#2
.2492	85 10		sta $10				sta 	temp1
.2494	a5 0f		lda $0f				lda 	nextFreeMem+1
.2496	69 00		adc #$00			adc 	#0
.2498	85 11		sta $11				sta 	temp1+1
.249a	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.249c	a0 00		ldy #$00			ldy 	#0
.249e	20 8d 1d	jsr $1d8d			jsr 	AdvanceFreeMem
.24a1	60		rts				rts
.24a2					VarHandlerDecode:
.24a2	48		pha				pha 								; save, leading space
.24a3	a9 07		lda #$07			lda 	#CTH_Variable
.24a5	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.24a8	68		pla				pla 								; restore and write type
.24a9	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.24ac	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.24ae	85 10		sta $10				sta 	temp1
.24b0	c8		iny				iny
.24b1	b1 08		lda ($08),y			lda 	(srcPtr),y
.24b3	85 11		sta $11				sta 	temp1+1
.24b5	a5 10		lda $10				lda 	temp1 						; output the first character
.24b7	29 1f		and #$1f			and 	#31
.24b9	20 e4 24	jsr $24e4			jsr 	VHOutVarChar
.24bc	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.24be					_VHDShift:
.24be	46 11		lsr $11				lsr 	temp1+1
.24c0	66 10		ror $10				ror 	temp1
.24c2	ca		dex				dex
.24c3	d0 f9		bne $24be			bne 	_VHDShift
.24c5	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.24c7					_VHDDiv40:
.24c7	e8		inx				inx
.24c8	38		sec				sec
.24c9	a5 10		lda $10				lda 	temp1
.24cb	e9 28		sbc #$28			sbc 	#40
.24cd	a8		tay				tay
.24ce	a5 11		lda $11				lda 	temp1+1
.24d0	e9 00		sbc #$00			sbc 	#0
.24d2	90 06		bcc $24da			bcc 	_VHDivDone
.24d4	85 11		sta $11				sta 	temp1+1
.24d6	84 10		sty $10				sty 	temp1
.24d8	80 ed		bra $24c7			bra 	_VHDDiv40
.24da					_VHDivDone:
.24da	a5 10		lda $10				lda 	temp1 						; remainder
.24dc	20 e4 24	jsr $24e4			jsr 	VHOutVarChar
.24df	8a		txa				txa
.24e0	20 e4 24	jsr $24e4			jsr 	VHOutVarChar 				; and result.
.24e3	60		rts				rts
.24e4					VHOutVarChar:
.24e4	c9 00		cmp #$00			cmp 	#0
.24e6	f0 0c		beq $24f4			beq 	_VHOExit
.24e8	18		clc				clc
.24e9	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.24eb	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.24ed	90 02		bcc $24f1			bcc 	_VHOOut
.24ef	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.24f1					_VHOOut:
.24f1	20 93 1e	jsr $1e93			jsr 	DecodeWriteBuffer
.24f4					_VHOExit:
.24f4	60		rts				rts

;******  Return to file: kernel.asm

.24f5					Dictionary:

;******  Processing file: generated/dictionary.inc

>24f5	05					.byte	_end0-*
>24f6	00					.byte	$00
>24f7	4d 16					.word	WordWrite
>24f9	a1					.byte	$a1
.24fa					_end0:
>24fa	10					.byte	_end1-*
>24fb	52					.byte	$52
>24fc	86 23					.word	VarWriteHandler
>24fe	a0 23					.word	VarWriteHandlerDecode
>2500	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>2508	45 d2
.250a					_end1:
>250a	10					.byte	_end2-*
>250b	52					.byte	$52
>250c	4a 23					.word	VarAddressHandler
>250e	62 23					.word	VarAddrHandlerDecode
>2510	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>2518	45 d2
.251a					_end2:
>251a	10					.byte	_end3-*
>251b	52					.byte	$52
>251c	67 23					.word	VarReadHandler
>251e	81 23					.word	VarReadHandlerDecode
>2520	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>2528	45 d2
.252a					_end3:
>252a	0c					.byte	_end4-*
>252b	52					.byte	$52
>252c	f2 1b					.word	CallHandler
>252e	cb 1c					.word	CallHandlerDecode
>2530	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.2536					_end4:
>2536	0f					.byte	_end5-*
>2537	53					.byte	$53
>2538	bd 21					.word	SkipComment
>253a	ca 21					.word	CommentDecoder
>253c	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>2544	d4
.2545					_end5:
>2545	0e					.byte	_end6-*
>2546	53					.byte	$53
>2547	e8 21					.word	DefineCode
>2549	fe 21					.word	DefineDecoder
>254b	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2553					_end6:
>2553	0f					.byte	_end7-*
>2554	52					.byte	$52
>2555	a4 10					.word	Literal2Byte
>2557	ba 10					.word	Literal2ByteDecode
>2559	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2561	cc
.2562					_end7:
>2562	0e					.byte	_end8-*
>2563	80					.byte	$80
>2564	a6 21					.word	NextLine
>2566	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>256e	4e c5
.2570					_end8:
>2570	0e					.byte	_end9-*
>2571	53					.byte	$53
>2572	cc 10					.word	LiteralString
>2574	eb 10					.word	LiteralStringDecoder
>2576	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.257e					_end9:
>257e	05					.byte	_end10-*
>257f	00					.byte	$00
>2580	c9 13					.word	Multiply16x16
>2582	aa					.byte	$aa
.2583					_end10:
>2583	05					.byte	_end11-*
>2584	00					.byte	$00
>2585	3a 12					.word	Add
>2587	ab					.byte	$ab
.2588					_end11:
>2588	06					.byte	_end12-*
>2589	00					.byte	$00
>258a	5e 16					.word	WordAdd
>258c	2b a1					.byte	$2b,$a1
.258e					_end12:
>258e	05					.byte	_end13-*
>258f	00					.byte	$00
>2590	49 12					.word	Subtract
>2592	ad					.byte	$ad
.2593					_end13:
>2593	06					.byte	_end14-*
>2594	00					.byte	$00
>2595	05 15					.word	ConstantMinus1
>2597	2d b1					.byte	$2d,$b1
.2599					_end14:
>2599	06					.byte	_end15-*
>259a	00					.byte	$00
>259b	9e 20					.word	DumpStack
>259d	2e ae					.byte	$2e,$ae
.259f					_end15:
>259f	05					.byte	_end16-*
>25a0	00					.byte	$00
>25a1	1a 13					.word	Divide16x16
>25a3	af					.byte	$af
.25a4					_end16:
>25a4	05					.byte	_end17-*
>25a5	00					.byte	$00
>25a6	f8 14					.word	Constant0
>25a8	b0					.byte	$b0
.25a9					_end17:
>25a9	06					.byte	_end18-*
>25aa	00					.byte	$00
>25ab	5e 14					.word	CheckMinus
>25ad	30 bc					.byte	$30,$bc
.25af					_end18:
>25af	06					.byte	_end19-*
>25b0	00					.byte	$00
>25b1	72 14					.word	CheckZero
>25b3	30 bd					.byte	$30,$bd
.25b5					_end19:
>25b5	05					.byte	_end20-*
>25b6	00					.byte	$00
>25b7	14 15					.word	C1
>25b9	b1					.byte	$b1
.25ba					_end20:
>25ba	06					.byte	_end21-*
>25bb	00					.byte	$00
>25bc	08 14					.word	Unary1Plus
>25be	31 ab					.byte	$31,$ab
.25c0					_end21:
>25c0	06					.byte	_end22-*
>25c1	00					.byte	$00
>25c2	1f 14					.word	Unary1Minus
>25c4	31 ad					.byte	$31,$ad
.25c6					_end22:
>25c6	06					.byte	_end23-*
>25c7	00					.byte	$00
>25c8	2c 15					.word	C10
>25ca	31 b0					.byte	$31,$b0
.25cc					_end23:
>25cc	07					.byte	_end24-*
>25cd	00					.byte	$00
>25ce	55 15					.word	C100
>25d0	31 30 b0				.byte	$31,$30,$b0
.25d3					_end24:
>25d3	08					.byte	_end25-*
>25d4	00					.byte	$00
>25d5	84 15					.word	C1024
>25d7	31 30 32 b4				.byte	$31,$30,$32,$b4
.25db					_end25:
>25db	07					.byte	_end26-*
>25dc	00					.byte	$00
>25dd	59 15					.word	C127
>25df	31 32 b7				.byte	$31,$32,$b7
.25e2					_end26:
>25e2	07					.byte	_end27-*
>25e3	00					.byte	$00
>25e4	5d 15					.word	C128
>25e6	31 32 b8				.byte	$31,$32,$b8
.25e9					_end27:
>25e9	06					.byte	_end28-*
>25ea	00					.byte	$00
>25eb	30 15					.word	C15
>25ed	31 b5					.byte	$31,$b5
.25ef					_end28:
>25ef	06					.byte	_end29-*
>25f0	00					.byte	$00
>25f1	34 15					.word	C16
>25f3	31 b6					.byte	$31,$b6
.25f5					_end29:
>25f5	07					.byte	_end30-*
>25f6	00					.byte	$00
>25f7	96 14					.word	Times16
>25f9	31 36 aa				.byte	$31,$36,$aa
.25fc					_end30:
>25fc	07					.byte	_end31-*
>25fd	00					.byte	$00
>25fe	a9 14					.word	Divide16
>2600	31 36 af				.byte	$31,$36,$af
.2603					_end31:
>2603	05					.byte	_end32-*
>2604	00					.byte	$00
>2605	18 15					.word	C2
>2607	b2					.byte	$b2
.2608					_end32:
>2608	06					.byte	_end33-*
>2609	00					.byte	$00
>260a	a2 14					.word	Times2
>260c	32 aa					.byte	$32,$aa
.260e					_end33:
>260e	06					.byte	_end34-*
>260f	00					.byte	$00
>2610	11 14					.word	Unary2Plus
>2612	32 ab					.byte	$32,$ab
.2614					_end34:
>2614	06					.byte	_end35-*
>2615	00					.byte	$00
>2616	2a 14					.word	Unary2Minus
>2618	32 ad					.byte	$32,$ad
.261a					_end35:
>261a	06					.byte	_end36-*
>261b	00					.byte	$00
>261c	b5 14					.word	Divide2
>261e	32 af					.byte	$32,$af
.2620					_end36:
>2620	06					.byte	_end37-*
>2621	00					.byte	$00
>2622	38 15					.word	C24
>2624	32 b4					.byte	$32,$b4
.2626					_end37:
>2626	07					.byte	_end38-*
>2627	00					.byte	$00
>2628	61 15					.word	C255
>262a	32 35 b5				.byte	$32,$35,$b5
.262d					_end38:
>262d	07					.byte	_end39-*
>262e	00					.byte	$00
>262f	6c 15					.word	C256
>2631	32 35 b6				.byte	$32,$35,$b6
.2634					_end39:
>2634	08					.byte	_end40-*
>2635	00					.byte	$00
>2636	bc 14					.word	Times256
>2638	32 35 36 aa				.byte	$32,$35,$36,$aa
.263c					_end40:
>263c	08					.byte	_end41-*
>263d	00					.byte	$00
>263e	c5 14					.word	Divide256
>2640	32 35 36 af				.byte	$32,$35,$36,$af
.2644					_end41:
>2644	05					.byte	_end42-*
>2645	00					.byte	$00
>2646	1c 15					.word	C3
>2648	b3					.byte	$b3
.2649					_end42:
>2649	06					.byte	_end43-*
>264a	00					.byte	$00
>264b	49 15					.word	C32
>264d	33 b2					.byte	$33,$b2
.264f					_end43:
>264f	09					.byte	_end44-*
>2650	00					.byte	$00
>2651	9c 15					.word	C32767
>2653	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.2658					_end44:
>2658	09					.byte	_end45-*
>2659	00					.byte	$00
>265a	a8 15					.word	C32768
>265c	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2661					_end45:
>2661	05					.byte	_end46-*
>2662	00					.byte	$00
>2663	20 15					.word	C4
>2665	b4					.byte	$b4
.2666					_end46:
>2666	06					.byte	_end47-*
>2667	00					.byte	$00
>2668	9e 14					.word	Times4
>266a	34 aa					.byte	$34,$aa
.266c					_end47:
>266c	06					.byte	_end48-*
>266d	00					.byte	$00
>266e	b1 14					.word	Divide4
>2670	34 af					.byte	$34,$af
.2672					_end48:
>2672	08					.byte	_end49-*
>2673	00					.byte	$00
>2674	90 15					.word	C4096
>2676	34 30 39 b6				.byte	$34,$30,$39,$b6
.267a					_end49:
>267a	05					.byte	_end50-*
>267b	00					.byte	$00
>267c	24 15					.word	C5
>267e	b5					.byte	$b5
.267f					_end50:
>267f	07					.byte	_end51-*
>2680	00					.byte	$00
>2681	78 15					.word	C512
>2683	35 31 b2				.byte	$35,$31,$b2
.2686					_end51:
>2686	06					.byte	_end52-*
>2687	00					.byte	$00
>2688	4d 15					.word	C63
>268a	36 b3					.byte	$36,$b3
.268c					_end52:
>268c	06					.byte	_end53-*
>268d	00					.byte	$00
>268e	51 15					.word	C64
>2690	36 b4					.byte	$36,$b4
.2692					_end53:
>2692	05					.byte	_end54-*
>2693	00					.byte	$00
>2694	28 15					.word	C8
>2696	b8					.byte	$b8
.2697					_end54:
>2697	06					.byte	_end55-*
>2698	00					.byte	$00
>2699	9a 14					.word	Times8
>269b	38 aa					.byte	$38,$aa
.269d					_end55:
>269d	06					.byte	_end56-*
>269e	00					.byte	$00
>269f	ad 14					.word	Divide8
>26a1	38 af					.byte	$38,$af
.26a3					_end56:
>26a3	05					.byte	_end57-*
>26a4	40					.byte	$40
>26a5	88 1c					.word	ReturnHandler
>26a7	bb					.byte	$bb
.26a8					_end57:
>26a8	05					.byte	_end58-*
>26a9	00					.byte	$00
>26aa	b6 12					.word	CheckLess
>26ac	bc					.byte	$bc
.26ad					_end58:
>26ad	06					.byte	_end59-*
>26ae	00					.byte	$00
>26af	cf 12					.word	CheckLessEq
>26b1	3c bd					.byte	$3c,$bd
.26b3					_end59:
>26b3	06					.byte	_end60-*
>26b4	00					.byte	$00
>26b5	7f 12					.word	CheckNotEqual
>26b7	3c be					.byte	$3c,$be
.26b9					_end60:
>26b9	05					.byte	_end61-*
>26ba	00					.byte	$00
>26bb	82 12					.word	CheckEqual
>26bd	bd					.byte	$bd
.26be					_end61:
>26be	05					.byte	_end62-*
>26bf	00					.byte	$00
>26c0	d2 12					.word	CheckGreater
>26c2	be					.byte	$be
.26c3					_end62:
>26c3	06					.byte	_end63-*
>26c4	00					.byte	$00
>26c5	b3 12					.word	CheckGreaterEq
>26c7	3e bd					.byte	$3e,$bd
.26c9					_end63:
>26c9	08					.byte	_end64-*
>26ca	00					.byte	$00
>26cb	bd 15					.word	TestDup
>26cd	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.26d1					_end64:
>26d1	05					.byte	_end65-*
>26d2	00					.byte	$00
>26d3	32 16					.word	WordRead
>26d5	c0					.byte	$c0
.26d6					_end65:
>26d6	07					.byte	_end66-*
>26d7	00					.byte	$00
>26d8	38 14					.word	Absolute
>26da	41 42 d3				.byte	$41,$42,$d3
.26dd					_end66:
>26dd	09					.byte	_end67-*
>26de	00					.byte	$00
>26df	75 16					.word	AllocateMemory
>26e1	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.26e6					_end67:
>26e6	07					.byte	_end68-*
>26e7	00					.byte	$00
>26e8	58 12					.word	And
>26ea	41 4e c4				.byte	$41,$4e,$c4
.26ed					_end68:
>26ed	0a					.byte	_end69-*
>26ee	00					.byte	$00
>26ef	29 20					.word	AssertCode
>26f1	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.26f7					_end69:
>26f7	09					.byte	_end70-*
>26f8	00					.byte	$00
>26f9	8b 14					.word	ByteSwap
>26fb	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2700					_end70:
>2700	06					.byte	_end71-*
>2701	00					.byte	$00
>2702	40 16					.word	ByteWrite
>2704	43 a1					.byte	$43,$a1
.2706					_end71:
>2706	06					.byte	_end72-*
>2707	00					.byte	$00
>2708	29 16					.word	ByteRead
>270a	43 c0					.byte	$43,$c0
.270c					_end72:
>270c	07					.byte	_end73-*
>270d	00					.byte	$00
>270e	55 1d					.word	ClrHandler
>2710	43 4c d2				.byte	$43,$4c,$d2
.2713					_end73:
>2713	08					.byte	_end74-*
>2714	00					.byte	$00
>2715	b4 15					.word	Drop
>2717	44 52 4f d0				.byte	$44,$52,$4f,$d0
.271b					_end74:
>271b	07					.byte	_end75-*
>271c	00					.byte	$00
>271d	c6 15					.word	Dup
>271f	44 55 d0				.byte	$44,$55,$d0
.2722					_end75:
>2722	0a					.byte	_end76-*
>2723	21					.byte	$21
>2724	3e 1b					.word	ElseHandler
>2726	41 1b					.word	ElseEncoder
>2728	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.272c					_end76:
>272c	07					.byte	_end77-*
>272d	00					.byte	$00
>272e	4a 20					.word	EndProgram
>2730	45 4e c4				.byte	$45,$4e,$c4
.2733					_end77:
>2733	0b					.byte	_end78-*
>2734	20					.byte	$20
>2735	60 1b					.word	EndIfHandler
>2737	63 1b					.word	EndIfEncoder
>2739	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.273e					_end78:
>273e	09					.byte	_end79-*
>273f	20					.byte	$20
>2740	5e 1a					.word	ForHandler
>2742	94 1a					.word	ForEncoder
>2744	46 4f d2				.byte	$46,$4f,$d2
.2747					_end79:
>2747	08					.byte	_end80-*
>2748	21					.byte	$21
>2749	29 1b					.word	IfHandler
>274b	2c 1b					.word	IfEncoder
>274d	49 c6					.byte	$49,$c6
.274f					_end80:
>274f	09					.byte	_end81-*
>2750	00					.byte	$00
>2751	08 1b					.word	GetIndex
>2753	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.2758					_end81:
>2758	08					.byte	_end82-*
>2759	00					.byte	$00
>275a	83 1f					.word	ListCode
>275c	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2760					_end82:
>2760	07					.byte	_end83-*
>2761	00					.byte	$00
>2762	ef 12					.word	Maximum
>2764	4d 41 d8				.byte	$4d,$41,$d8
.2767					_end83:
>2767	07					.byte	_end84-*
>2768	00					.byte	$00
>2769	eb 12					.word	Minimum
>276b	4d 49 ce				.byte	$4d,$49,$ce
.276e					_end84:
>276e	07					.byte	_end85-*
>276f	00					.byte	$00
>2770	2b 13					.word	Modulus16x16
>2772	4d 4f c4				.byte	$4d,$4f,$c4
.2775					_end85:
>2775	0a					.byte	_end86-*
>2776	00					.byte	$00
>2777	3f 14					.word	Negate
>2779	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.277f					_end86:
>277f	07					.byte	_end87-*
>2780	00					.byte	$00
>2781	4c 1d					.word	NewHandler
>2783	4e 45 d7				.byte	$4e,$45,$d7
.2786					_end87:
>2786	0a					.byte	_end88-*
>2787	21					.byte	$21
>2788	a1 1a					.word	NextHandler
>278a	e0 1a					.word	NextEncoder
>278c	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2790					_end88:
>2790	07					.byte	_end89-*
>2791	00					.byte	$00
>2792	fa 15					.word	Nip
>2794	4e 49 d0				.byte	$4e,$49,$d0
.2797					_end89:
>2797	07					.byte	_end90-*
>2798	00					.byte	$00
>2799	4f 14					.word	OneComplement
>279b	4e 4f d4				.byte	$4e,$4f,$d4
.279e					_end90:
>279e	06					.byte	_end91-*
>279f	00					.byte	$00
>27a0	72 12					.word	LogOr
>27a2	4f d2					.byte	$4f,$d2
.27a4					_end91:
>27a4	08					.byte	_end92-*
>27a5	00					.byte	$00
>27a6	e2 15					.word	Over
>27a8	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.27ac					_end92:
>27ac	0c					.byte	_end93-*
>27ad	20					.byte	$20
>27ae	92 1b					.word	RepeatHandler
>27b0	95 1b					.word	RepeatEncoder
>27b2	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.27b8					_end93:
>27b8	07					.byte	_end94-*
>27b9	00					.byte	$00
>27ba	ce 14					.word	RandomNumber
>27bc	52 4e c4				.byte	$52,$4e,$c4
.27bf					_end94:
>27bf	07					.byte	_end95-*
>27c0	00					.byte	$00
>27c1	ff 15					.word	Rot
>27c3	52 4f d4				.byte	$52,$4f,$d4
.27c6					_end95:
>27c6	07					.byte	_end96-*
>27c7	00					.byte	$00
>27c8	fe 1f					.word	RunProgram
>27ca	52 55 ce				.byte	$52,$55,$ce
.27cd					_end96:
>27cd	07					.byte	_end97-*
>27ce	00					.byte	$00
>27cf	7a 14					.word	SignTOS
>27d1	53 47 ce				.byte	$53,$47,$ce
.27d4					_end97:
>27d4	08					.byte	_end98-*
>27d5	00					.byte	$00
>27d6	42 20					.word	StopCode
>27d8	53 54 4f d0				.byte	$53,$54,$4f,$d0
.27dc					_end98:
>27dc	08					.byte	_end99-*
>27dd	00					.byte	$00
>27de	cf 15					.word	Swap
>27e0	53 57 41 d0				.byte	$53,$57,$41,$d0
.27e4					_end99:
>27e4	07					.byte	_end100-*
>27e5	00					.byte	$00
>27e6	12 20					.word	Call6502
>27e8	53 59 d3				.byte	$53,$59,$d3
.27eb					_end100:
>27eb	0d					.byte	_end101-*
>27ec	00					.byte	$00
>27ed	9f 22					.word	IntToString
>27ef	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>27f7	c7
.27f8					_end101:
>27f8	0b					.byte	_end102-*
>27f9	21					.byte	$21
>27fa	a2 1b					.word	UntilHandler
>27fc	a5 1b					.word	UntilEncoder
>27fe	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2803					_end102:
>2803	09					.byte	_end103-*
>2804	00					.byte	$00
>2805	4d 20					.word	VlistCode
>2807	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.280c					_end103:
>280c	0a					.byte	_end104-*
>280d	40					.byte	$40
>280e	9e 1d					.word	BreakCmd
>2810	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2816					_end104:
>2816	09					.byte	_end105-*
>2817	00					.byte	$00
>2818	98 1d					.word	ExitDump
>281a	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.281f					_end105:
>281f	07					.byte	_end106-*
>2820	00					.byte	$00
>2821	65 12					.word	Xor
>2823	58 4f d2				.byte	$58,$4f,$d2
.2826					_end106:
>2826	08					.byte	_end107-*
>2827	00					.byte	$00
>2828	e9 20					.word	System_Save
>282a	53 41 56 c5				.byte	$53,$41,$56,$c5
.282e					_end107:
>282e	08					.byte	_end108-*
>282f	00					.byte	$00
>2830	07 21					.word	System_Load
>2832	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.2836					_end108:
>2836	0d					.byte	_end109-*
>2837	11					.byte	$11
>2838	a5 23					.word	IndexHandler
>283a	b4 23					.word	IndexHandlerDecode
>283c	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.2843					_end109:
>2843	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
