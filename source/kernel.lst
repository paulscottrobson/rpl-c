
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Tue Jan 14 13:15:23 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 31 11	jsr $1131			jsr 	ExternInitialise
.1006	a9 43		lda #$43			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 21 12	jsr $1221			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	86 10		stx $10				stx 	temp1
.100f	a2 80		ldx #$80			ldx 	#NumberStackBase
.1011	9a		txs				txs
.1012	a6 10		ldx $10				ldx 	temp1
.1014					WarmStart:
.1014	a9 03		lda #$03			lda 	#COL_Yellow
.1016	20 68 11	jsr $1168			jsr 	ExternColour
.1019	20 8b 11	jsr $118b			jsr 	ExternInput
.101c	a9 06		lda #$06			lda 	#COL_Cyan
.101e	20 68 11	jsr $1168			jsr 	ExternColour
.1021	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.1023	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.1025	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.1028	a9 10		lda #$10			lda 	#textBuffer & $FF
.102a	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.102c	20 8d 16	jsr $168d			jsr 	EncodeProgram
.102f	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.1032	0d 12 09	ora $0912			ora 	encodeBuffer+2
.1035	d0 07		bne $103e			bne 	LineEditor 					; if so, do the line editing code.
.1037	a9 ff		lda #$ff			lda 	#$FF
.1039	85 05		sta $05				sta 	rsp
.103b	4c 00 00	jmp $0000			jmp 	NextCode
.103e					LineEditor:
.103e	20 9f 1d	jsr $1d9f			jsr 	EditProgram
.1041	80 ca		bra $100d			bra 	WarmStartBlankStack
.1043					BootMsg:
>1043	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>104b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>105b	2a 0d 0d
>105e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1066	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1076	30 32 30 0d 0d
>107b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1082	5b 32 30 2d 30 31 2d 31			.text	"[20-01-14 13:15]"
>108a	34 20 31 33 3a 31 35 5d

;******  Return to file: kernel.asm

>1092	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/core.src

.1095					InitialiseCoreCode:
.1095	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1097	85 00		sta $00				sta 	NextCode
.1099	85 01		sta $01				sta 	NextCode+1
.109b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.109d	85 02		sta $02				sta 	NextCode+2
.109f	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.10a1	84 04		sty $04				sty 	NextCode+4
.10a3	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.10a5	60		rts				rts								; (2 INX skip offset and line#)
.10a6					Literal2Byte:
.10a6	a5 06		lda $06				lda 	TOS
.10a8	48		pha				pha
.10a9	a5 07		lda $07				lda 	TOS+1
.10ab	48		pha				pha
.10ac	e8		inx				inx  							; point X to the word
.10ad	e8		inx				inx
.10ae	8a		txa				txa 							; copy into Y
.10af	a8		tay				tay
.10b0	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.10b2	85 06		sta $06				sta 	TOS
.10b4	c8		iny				iny 							; read and push the MSB
.10b5	b1 03		lda ($03),y			lda 	(IP),y
.10b7	85 07		sta $07				sta 	TOS+1
.10b9	4c 00 00	jmp $0000			jmp 	NextCode
.10bc					Literal2ByteDecode:
.10bc	a9 06		lda #$06			lda 	#CTH_Keyword
.10be	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.10c1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c3	aa		tax				tax
.10c4	c8		iny				iny
.10c5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c7	a8		tay				tay
.10c8	8a		txa				txa
.10c9	38		sec				sec 							; output signed
.10ca	20 82 1d	jsr $1d82			jsr 	DecodeYAToBuffer
.10cd	60		rts				rts
.10ce					LiteralString:
.10ce	a5 06		lda $06				lda 	TOS
.10d0	48		pha				pha
.10d1	a5 07		lda $07				lda 	TOS+1
.10d3	48		pha				pha
.10d4	e8		inx				inx
.10d5	e8		inx				inx 							; skip over current word
.10d6	8a		txa				txa 							; add to IP + 1 to give string address
.10d7	a8		tay				tay 							; put in Y
.10d8	38		sec				sec 							; make that TOS
.10d9	65 03		adc $03				adc 	IP
.10db	85 06		sta $06				sta 	TOS
.10dd	a5 04		lda $04				lda 	IP+1
.10df	69 00		adc #$00			adc 	#0
.10e1	85 07		sta $07				sta 	TOS+1
.10e3	8a		txa				txa 							; add data length to X
.10e4	18		clc				clc
.10e5	71 03		adc ($03),y			adc 	(IP),y
.10e7	aa		tax				tax
.10e8	ca		dex				dex
.10e9	ca		dex				dex
.10ea	4c 00 00	jmp $0000			jmp 	NextCode
.10ed					LiteralStringDecoder:
.10ed	a9 05		lda #$05			lda 	#CTH_String
.10ef	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.10f2	a9 22		lda #$22			lda 	#'"'
.10f4	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.10f7	20 69 1d	jsr $1d69			jsr 	DecodeOutputData
.10fa	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.10fd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: code/error.asm

.10fe					ErrorHandler:
.10fe	68		pla				pla 								; get message address
.10ff	7a		ply				ply
.1100	1a		inc a				inc 	a
.1101	d0 01		bne $1104			bne 	_EHNoCarry
.1103	c8		iny				iny
.1104					_EHNoCarry:
.1104	20 21 12	jsr $1221			jsr 	EXPrintString
.1107	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.1109	b1 03		lda ($03),y			lda 	(IP),y
.110b	c8		iny				iny
.110c	11 03		ora ($03),y			ora 	(IP),y
.110e	f0 14		beq $1124			beq 	_EHNoLine
.1110	a9 2c		lda #$2c			lda 	#_EHMsg2 & $FF 				; print " at "
.1112	a0 11		ldy #$11			ldy 	#_EHMsg2 >> 8
.1114	20 21 12	jsr $1221			jsr 	EXPrintString
.1117	a0 02		ldy #$02			ldy 	#2 							; print line number
.1119	b1 03		lda ($03),y			lda 	(IP),y
.111b	48		pha				pha
.111c	88		dey				dey
.111d	b1 03		lda ($03),y			lda 	(IP),y
.111f	7a		ply				ply
.1120	18		clc				clc
.1121	20 cb 20	jsr $20cb			jsr 	PrintYA
.1124					_EHNoLine:
.1124	a9 0d		lda #$0d			lda 	#13
.1126	20 5e 11	jsr $115e			jsr 	ExternPrint
.1129	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack			; S is indeterminate
>112c	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/export.asm


;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.1131					ExternInitialise:
.1131	a9 90		lda #$90			lda 	#144 						; set colour
.1133	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1136	a9 01		lda #$01			lda 	#$01
.1138	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.113b	a9 0e		lda #$0e			lda 	#14							; lower case
.113d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1140	a9 93		lda #$93			lda 	#147 						; clear screen
.1142	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1145	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.1147	4c 68 11	jmp $1168			jmp 	ExternColour
.114a					ExternCheckBreak:
.114a	da		phx				phx 								; make sure we keep XY
.114b	5a		phy				phy
.114c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.114f	f0 03		beq $1154			beq		_ECBExit 					; stopped
.1151	7a		ply				ply 								; restore and exit.
.1152	fa		plx				plx
.1153	60		rts				rts
.1154					_ECBExit:
.1154	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1157	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.115e					ExternPrint:
.115e	48		pha				pha
.115f	da		phx				phx
.1160	5a		phy				phy
.1161	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1164	7a		ply				ply
.1165	fa		plx				plx
.1166	68		pla				pla
.1167	60		rts				rts
.1168					ExternColour:
.1168	48		pha				pha
.1169	da		phx				phx
.116a	48		pha				pha
.116b	29 08		and #$08			and 	#8
.116d	0a		asl a				asl 	a
.116e	0a		asl a				asl 	a
.116f	0a		asl a				asl 	a
.1170	0a		asl a				asl 	a
.1171	49 92		eor #$92			eor 	#$92
.1173	20 5e 11	jsr $115e			jsr 	ExternPrint
.1176	68		pla				pla
.1177	29 07		and #$07			and 	#7
.1179	aa		tax				tax
.117a	bd 83 11	lda $1183,x			lda 	_ECTable,x
.117d	20 5e 11	jsr $115e			jsr 	ExternPrint
.1180	fa		plx				plx
.1181	68		pla				pla
.1182	60		rts				rts
.1183					_ECTable:
>1183	90						.byte 	144
>1184	1c						.byte 	28
>1185	1e						.byte 	30
>1186	9e						.byte 	158
>1187	1f						.byte 	31
>1188	9c						.byte 	156
>1189	9f						.byte 	159
>118a	05						.byte 	5
.118b					ExternInput:
.118b	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.118d	85 14		sta $14				sta 	temp3
.118f	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1191	85 15		sta $15				sta 	temp3+1
.1193	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1196	29 7f		and #$7f			and 	#$7F
.1198	c9 0d		cmp #$0d			cmp 	#13
.119a	f0 0a		beq $11a6			beq 	_EIExit
.119c	92 14		sta ($14)			sta 	(temp3)
.119e	e6 14		inc $14				inc 	temp3
.11a0	d0 f1		bne $1193			bne 	_EIRead
.11a2	e6 15		inc $15				inc 	temp3+1
.11a4	80 ed		bra $1193			bra 	_EIRead
.11a6	a9 00		lda #$00	_EIExit:lda 	#0
.11a8	92 14		sta ($14)			sta 	(temp3)
.11aa	a9 0d		lda #$0d			lda 	#13
.11ac	20 5e 11	jsr $115e			jsr 	ExternPrint
.11af	60		rts				rts
.11b0					ExternSave:
.11b0	da		phx				phx
.11b1	5a		phy				phy
.11b2	85 12		sta $12				sta 	temp2 						; save start
.11b4	84 13		sty $13				sty 	temp2+1
.11b6	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11b9	a6 14		ldx $14				ldx 	temp3
.11bb	a4 15		ldy $15				ldy 	temp3+1
.11bd	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11c0	a9 01		lda #$01			lda 	#1
.11c2	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11c4	a0 00		ldy #$00			ldy 	#0
.11c6	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11c9	a6 10		ldx $10				ldx 	temp1 						; end address
.11cb	a4 11		ldy $11				ldy 	temp1+1
.11cd	a9 12		lda #$12			lda 	#temp2
.11cf	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.11d2	b0 03		bcs $11d7			bcs 	_ESSave
.11d4	7a		ply				ply
.11d5	fa		plx				plx
.11d6	60		rts				rts
.11d7					_ESSave:
.11d7	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>11da	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>11e2	4c 45 44 00
.11e6					ExternLoad:
.11e6	da		phx				phx 								; save XY
.11e7	5a		phy				phy
.11e8	48		pha				pha 								; save target
.11e9	5a		phy				phy
.11ea	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11ed	a6 14		ldx $14				ldx 	temp3
.11ef	a4 15		ldy $15				ldy 	temp3+1
.11f1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11f4	a9 01		lda #$01			lda 	#1
.11f6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11f8	a0 00		ldy #$00			ldy 	#0
.11fa	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11fd	7a		ply				ply 								; restore target to YX and call load
.11fe	fa		plx				plx
.11ff	a9 00		lda #$00			lda 	#0 							; load command
.1201	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1204	b0 03		bcs $1209			bcs 	_ESLoad
.1206	7a		ply				ply
.1207	fa		plx				plx
.1208	60		rts				rts
.1209					_ESLoad:
.1209	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>120c	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>1214	4c 45 44 00
.1218					EXGetLength:
.1218	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.121a	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.121c	d0 02		bne $1220			bne 	_EXGLExit
.121e	e6 15		inc $15				inc 	temp3+1
.1220					_EXGLExit:
.1220	60		rts				rts
.1221					EXPrintString:
.1221	48		pha				pha
.1222	5a		phy				phy
.1223	84 11		sty $11				sty 	temp1+1
.1225	85 10		sta $10				sta 	temp1
.1227	a0 00		ldy #$00			ldy 	#0
.1229					_EXPSLoop:
.1229	b1 10		lda ($10),y			lda 	(temp1),y
.122b	f0 08		beq $1235			beq 	_EXPSExit
.122d	29 7f		and #$7f			and 	#$7F
.122f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1232	c8		iny				iny
.1233	80 f4		bra $1229			bra 	_EXPSLoop
.1235					_EXPSExit:
.1235	7a		ply				ply
.1236	68		pla				pla
.1237	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.1238					Add:
.1238	7a		ply				ply
.1239	68		pla				pla
.123a	18		clc				clc
.123b	65 06		adc $06				adc 	TOS
.123d	85 06		sta $06				sta 	TOS
.123f	98		tya				tya
.1240	65 07		adc $07				adc 	TOS+1
.1242	85 07		sta $07				sta 	TOS+1
.1244	4c 00 00	jmp $0000			jmp 	NextCode
.1247					Subtract:
.1247	7a		ply				ply
.1248	68		pla				pla
.1249	38		sec				sec
.124a	49 ff		eor #$ff			eor 	#$FF
.124c	65 06		adc $06				adc 	TOS
.124e	85 06		sta $06				sta 	TOS
.1250	98		tya				tya
.1251	49 ff		eor #$ff			eor 	#$FF
.1253	65 07		adc $07				adc 	TOS+1
.1255	85 07		sta $07				sta 	TOS+1
.1257	4c 00 00	jmp $0000			jmp 	NextCode
.125a					And:
.125a	68		pla				pla
.125b	25 07		and $07				and 	TOS+1
.125d	85 07		sta $07				sta 	TOS+1
.125f	68		pla				pla
.1260	25 06		and $06				and 	TOS
.1262	85 06		sta $06				sta 	TOS
.1264	4c 00 00	jmp $0000			jmp 	NextCode
.1267					Xor:
.1267	68		pla				pla
.1268	45 07		eor $07				eor 	TOS+1
.126a	85 07		sta $07				sta 	TOS+1
.126c	68		pla				pla
.126d	45 06		eor $06				eor 	TOS
.126f	85 06		sta $06				sta 	TOS
.1271	4c 00 00	jmp $0000			jmp 	NextCode
.1274					LogOr:
.1274	68		pla				pla
.1275	05 07		ora $07				ora 	TOS+1
.1277	85 07		sta $07				sta 	TOS+1
.1279	68		pla				pla
.127a	05 06		ora $06				ora 	TOS
.127c	85 06		sta $06				sta 	TOS
.127e	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.1281					CheckNotEqual:
.1281	38		sec				sec
.1282	80 01		bra $1285			bra 	CECode
.1284					CheckEqual:
.1284	18		clc				clc
.1285					CECode:
.1285	86 10		stx $10				stx 	temp1
.1287	ba		tsx				tsx
.1288	08		php				php
.1289	a5 06		lda $06				lda 	TOS
.128b	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.128e	d0 17		bne $12a7			bne	 	CompareFalse
.1290	a5 07		lda $07				lda 	TOS+1
.1292	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1295	d0 10		bne $12a7			bne 	CompareFalse
.1297					CompareTrue:
.1297	a6 10		ldx $10				ldx 	temp1
.1299	28		plp				plp
.129a	b0 10		bcs $12ac			bcs		CompareFalse2
.129c					CompareTrue2:
.129c	68		pla				pla
.129d	68		pla				pla
.129e	a9 ff		lda #$ff			lda 	#$FF
.12a0	85 06		sta $06				sta 	TOS
.12a2	85 07		sta $07				sta 	TOS+1
.12a4	4c 00 00	jmp $0000			jmp 	NextCode
.12a7					CompareFalse:
.12a7	a6 10		ldx $10				ldx 	temp1
.12a9	28		plp				plp
.12aa	b0 f0		bcs $129c			bcs		CompareTrue2
.12ac					CompareFalse2:
.12ac	68		pla				pla
.12ad	68		pla				pla
.12ae	64 06		stz $06				stz 	TOS
.12b0	64 07		stz $07				stz 	TOS+1
.12b2	4c 00 00	jmp $0000			jmp 	NextCode
.12b5					CheckGreaterEq:
.12b5	38		sec				sec
.12b6	80 01		bra $12b9			bra		CLCode
.12b8					CheckLess:
.12b8	18		clc				clc
.12b9	86 10		stx $10		CLCode:	stx 	temp1
.12bb	ba		tsx				tsx
.12bc	08		php				php
.12bd	18		clc				clc
.12be	a5 06		lda $06				lda 	TOS
.12c0	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12c3	a5 07		lda $07				lda 	TOS+1
.12c5	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12c8	50 02		bvc $12cc			bvc 	_CLNoFlip
.12ca	49 80		eor #$80			eor 	#$80
.12cc					_CLNoFlip:
.12cc	0a		asl a				asl 	a
.12cd	b0 d8		bcs $12a7			bcs 	CompareFalse
.12cf	80 c6		bra $1297			bra 	CompareTrue
.12d1					CheckLessEq:
.12d1	38		sec				sec
.12d2	80 01		bra $12d5			bra		CGCode
.12d4					CheckGreater:
.12d4	18		clc				clc
.12d5					CGCode:
.12d5	86 10		stx $10				stx 	temp1
.12d7	ba		tsx				tsx
.12d8	08		php				php
.12d9	18		clc				clc
.12da	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12dd	e5 06		sbc $06				sbc 	TOS
.12df	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12e2	e5 07		sbc $07				sbc 	TOS+1
.12e4	50 02		bvc $12e8			bvc 	_CGNoFlip
.12e6	49 80		eor #$80			eor 	#$80
.12e8					_CGNoFlip:
.12e8	0a		asl a				asl 	a
.12e9	b0 bc		bcs $12a7			bcs 	CompareFalse
.12eb	80 aa		bra $1297			bra 	CompareTrue
.12ed					Minimum:
.12ed	a9 00		lda #$00			lda 	#0
.12ef	80 02		bra $12f3			bra 	MinMaxCode
.12f1					Maximum:
.12f1	a9 80		lda #$80			lda 	#$80
.12f3					MinMaxCode:
.12f3	85 11		sta $11				sta 	temp1+1
.12f5	86 10		stx $10				stx 	temp1
.12f7	ba		tsx				tsx
.12f8	38		sec				sec
.12f9	a5 06		lda $06				lda 	TOS
.12fb	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12fe	a5 07		lda $07				lda 	TOS+1
.1300	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1303	50 02		bvc $1307			bvc 	_MMNoFlip
.1305	49 80		eor #$80			eor 	#$80
.1307					_MMNoFlip:
.1307	45 11		eor $11				eor 	temp1+1
.1309	30 0a		bmi $1315			bmi 	_MMNoCopy
.130b	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.130e	85 06		sta $06				sta 	TOS
.1310	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1313	85 07		sta $07				sta 	TOS+1
.1315					_MMNoCopy:
.1315	a6 10		ldx $10				ldx 	temp1
.1317	68		pla				pla
.1318	68		pla				pla
.1319	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.131c					Divide16x16:
.131c	86 12		stx $12				stx 	temp2
.131e	ba		tsx				tsx
.131f	20 42 13	jsr $1342			jsr 	IntegerDivide
.1322	68		pla				pla
.1323	85 07		sta $07				sta 	TOS+1
.1325	68		pla				pla
.1326	85 06		sta $06				sta 	TOS
.1328	a6 12		ldx $12				ldx 	temp2
.132a	4c 00 00	jmp $0000			jmp 	NextCode
.132d					Modulus16x16:
.132d	86 12		stx $12				stx 	temp2
.132f	ba		tsx				tsx
.1330	20 42 13	jsr $1342			jsr 	IntegerDivide
.1333	a6 12		ldx $12				ldx 	temp2
.1335	68		pla				pla
.1336	68		pla				pla
.1337	a5 10		lda $10				lda 	temp1
.1339	85 06		sta $06				sta 	TOS
.133b	a5 11		lda $11				lda 	temp1+1
.133d	85 07		sta $07				sta 	TOS+1
.133f	4c 00 00	jmp $0000			jmp 	NextCode
.1342					IntegerDivide:
.1342	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.1344	05 07		ora $07				ora 	TOS+1
.1346	d0 14		bne $135c			bne 	_BFDOkay
.1348	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>134b	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1353	20 42 59 20 5a 45 52 4f 00
.135c					_BFDOkay:
.135c	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.135e	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.1360	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1362	20 9d 13	jsr $139d			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1365	20 b7 13	jsr $13b7			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1368	5a		phy				phy 								; Y is the counter
.1369	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.136b					_BFDLoop:
.136b	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.136e	3e 01 01	rol $0101,x			rol 	Stack2High,x
.1371	26 10		rol $10				rol 	temp1
.1373	26 11		rol $11				rol 	temp1+1
.1375	38		sec				sec
.1376	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1378	e5 06		sbc $06				sbc 	TOS
.137a	48		pha				pha
.137b	a5 11		lda $11				lda 	temp1+1
.137d	e5 07		sbc $07				sbc 	TOS+1
.137f	90 0f		bcc $1390			bcc 	_BFDNoAdd
.1381	85 11		sta $11				sta 	temp1+1
.1383	68		pla				pla
.1384	85 10		sta $10				sta 	temp1+0
.1386	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1389	09 01		ora #$01			ora 	#1
.138b	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.138e	80 01		bra $1391			bra 	_BFDNext
.1390					_BFDNoAdd:
.1390	68		pla				pla 								; Throw away the intermediate calculations
.1391					_BFDNext:
.1391	88		dey				dey
.1392	d0 d7		bne $136b			bne 	_BFDLoop
.1394	7a		ply				ply 								; restore Y
.1395	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1397	90 03		bcc $139c			bcc 	_BFDUnsigned 				; then the result is signed
.1399	20 a3 13	jsr $13a3			jsr		IntegerNegateAlways 		; negate the result
.139c					_BFDUnsigned:
.139c	60		rts				rts
.139d					CheckIntegerNegate:
.139d	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.13a0	30 01		bmi $13a3			bmi 	IntegerNegateAlways 		; if so negate it
.13a2	60		rts				rts
.13a3					IntegerNegateAlways:
.13a3	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.13a5	38		sec				sec 								; negate
.13a6	a9 00		lda #$00			lda 	#0
.13a8	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.13ab	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ae	a9 00		lda #$00			lda 	#0
.13b0	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.13b3	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13b6	60		rts				rts
.13b7					CheckTOSNegate:
.13b7	a5 07		lda $07				lda 	TOS+1
.13b9	10 0f		bpl $13ca			bpl		CTNNoChange
.13bb	e6 1a		inc $1a				inc 	SignCount
.13bd					TOSNegateAlways:
.13bd	38		sec				sec
.13be	a9 00		lda #$00			lda 	#0
.13c0	e5 06		sbc $06				sbc 	TOS
.13c2	85 06		sta $06				sta 	TOS
.13c4	a9 00		lda #$00			lda 	#0
.13c6	e5 07		sbc $07				sbc 	TOS+1
.13c8	85 07		sta $07				sta 	TOS+1
.13ca					CTNNoChange:
.13ca	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.13cb					Multiply16x16:
.13cb	86 10		stx $10				stx 	temp1
.13cd	ba		tsx				tsx
.13ce	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.13d1	85 12		sta $12				sta 	temp2
.13d3	bd 01 01	lda $0101,x			lda		Stack2High,x
.13d6	85 13		sta $13				sta 	temp2+1
.13d8	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.13db	9e 01 01	stz $0101,x			stz 	Stack2High,x
.13de					_MultLoop:
.13de	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.13e0	66 12		ror $12				ror 	temp2
.13e2	90 11		bcc $13f5			bcc 	_MultNoAdd
.13e4	18		clc				clc 								; add 1st to 2nd
.13e5	a5 06		lda $06				lda 	TOS
.13e7	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.13ea	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ed	a5 07		lda $07				lda 	TOS+1
.13ef	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13f2	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13f5					_MultNoAdd:
.13f5	06 06		asl $06				asl 	TOS 						; shift 1st left
.13f7	26 07		rol $07				rol 	TOS+1
.13f9	a5 12		lda $12				lda 	temp2	 					; until zero
.13fb	05 13		ora $13				ora 	temp2+1
.13fd	d0 df		bne $13de			bne 	_MultLoop
.13ff	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.1401	68		pla				pla
.1402	85 07		sta $07				sta 	TOS+1
.1404	68		pla				pla
.1405	85 06		sta $06				sta 	TOS
.1407	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.140a					Unary1Plus:
.140a	e6 06		inc $06				inc 	TOS
.140c	d0 02		bne $1410			bne 	_U1PSkip
.140e	e6 07		inc $07				inc 	TOS+1
.1410					_U1PSkip:
.1410	4c 00 00	jmp $0000			jmp 	NextCode
.1413					Unary2Plus:
.1413	18		clc				clc
.1414	a5 06		lda $06				lda 	TOS
.1416	69 02		adc #$02			adc 	#2
.1418	85 06		sta $06				sta 	TOS
.141a	90 02		bcc $141e			bcc 	_U1PSkip
.141c	e6 07		inc $07				inc 	TOS+1
.141e					_U1PSkip:
.141e	4c 00 00	jmp $0000			jmp 	NextCode
.1421					Unary1Minus:
.1421	a5 06		lda $06				lda 	TOS
.1423	d0 02		bne $1427			bne 	_U1MSkip
.1425	c6 07		dec $07				dec 	TOS+1
.1427					_U1MSkip:
.1427	c6 06		dec $06				dec 	TOS
.1429	4c 00 00	jmp $0000			jmp 	NextCode
.142c					Unary2Minus:
.142c	38		sec				sec
.142d	a5 06		lda $06				lda 	TOS
.142f	e9 02		sbc #$02			sbc 	#2
.1431	85 06		sta $06				sta 	TOS
.1433	b0 02		bcs $1437			bcs 	_U1PSkip
.1435	c6 07		dec $07				dec 	TOS+1
.1437					_U1PSkip:
.1437	4c 00 00	jmp $0000			jmp 	NextCode
.143a					Absolute:
.143a	a5 07		lda $07				lda 	TOS+1
.143c	30 03		bmi $1441			bmi 	Negate
.143e	4c 00 00	jmp $0000			jmp 	NextCode
.1441					Negate:
.1441	38		sec				sec
.1442	a9 00		lda #$00			lda 	#0
.1444	e5 06		sbc $06				sbc 	TOS
.1446	85 06		sta $06				sta 	TOS
.1448	a9 00		lda #$00			lda 	#0
.144a	e5 07		sbc $07				sbc 	TOS+1
.144c	85 07		sta $07				sta 	TOS+1
.144e	4c 00 00	jmp $0000			jmp 	NextCode
.1451					OneComplement:
.1451	a5 06		lda $06				lda 	TOS
.1453	49 ff		eor #$ff			eor 	#$FF
.1455	85 06		sta $06				sta 	TOS
.1457	a5 07		lda $07				lda 	TOS+1
.1459	49 ff		eor #$ff			eor 	#$FF
.145b	85 07		sta $07				sta 	TOS+1
.145d	4c 00 00	jmp $0000			jmp 	NextCode
.1460					CheckMinus:
.1460	a5 07		lda $07				lda 	TOS+1
.1462	30 07		bmi $146b			bmi 	UnaryTrue
.1464					UnaryFalse:
.1464	64 06		stz $06				stz 	TOS
.1466	64 07		stz $07				stz 	TOS+1
.1468	4c 00 00	jmp $0000			jmp 	NextCode
.146b					UnaryTrue:
.146b	a9 ff		lda #$ff			lda 	#$FF
.146d	85 06		sta $06				sta 	TOS
.146f	85 07		sta $07				sta 	TOS+1
.1471	4c 00 00	jmp $0000			jmp 	NextCode
.1474					CheckZero:
.1474	a5 06		lda $06				lda 	TOS
.1476	05 07		ora $07				ora 	TOS+1
.1478	d0 ea		bne $1464			bne 	UnaryFalse
.147a	80 ef		bra $146b			bra 	UnaryTrue
.147c					SignTOS:
.147c	a5 07		lda $07				lda 	TOS+1
.147e	30 eb		bmi $146b			bmi		UnaryTrue
.1480	05 06		ora $06				ora 	TOS
.1482	f0 e0		beq $1464			beq 	UnaryFalse
.1484	a9 01		lda #$01			lda 	#1
.1486	85 06		sta $06				sta 	TOS
.1488	64 07		stz $07				stz		TOS+1
.148a	4c 00 00	jmp $0000			jmp 	NextCode
.148d					ByteSwap:
.148d	a5 06		lda $06				lda 	TOS
.148f	a4 07		ldy $07				ldy 	TOS+1
.1491	85 07		sta $07				sta 	TOS+1
.1493	84 06		sty $06				sty 	TOS
.1495	4c 00 00	jmp $0000			jmp 	NextCode
.1498					Times16:
.1498	06 06		asl $06				asl 	TOS
.149a	26 07		rol $07				rol 	TOS+1
.149c					Times8:
.149c	06 06		asl $06				asl 	TOS
.149e	26 07		rol $07				rol 	TOS+1
.14a0					Times4:
.14a0	06 06		asl $06				asl 	TOS
.14a2	26 07		rol $07				rol 	TOS+1
.14a4					Times2:
.14a4	06 06		asl $06				asl 	TOS
.14a6	26 07		rol $07				rol 	TOS+1
.14a8	4c 00 00	jmp $0000			jmp 	NextCode
.14ab					Divide16:
.14ab	46 07		lsr $07				lsr 	TOS+1
.14ad	66 06		ror $06				ror 	TOS
.14af					Divide8:
.14af	46 07		lsr $07				lsr 	TOS+1
.14b1	66 06		ror $06				ror 	TOS
.14b3					Divide4:
.14b3	46 07		lsr $07				lsr 	TOS+1
.14b5	66 06		ror $06				ror 	TOS
.14b7					Divide2:
.14b7	46 07		lsr $07				lsr 	TOS+1
.14b9	66 06		ror $06				ror 	TOS
.14bb	4c 00 00	jmp $0000			jmp 	NextCode
.14be					Times256:
.14be	a5 06		lda $06				lda 	TOS
.14c0	85 07		sta $07				sta 	TOS+1
.14c2	64 06		stz $06				stz 	TOS
.14c4	4c 00 00	jmp $0000			jmp 	NextCode
.14c7					Divide256:
.14c7	a5 07		lda $07				lda 	TOS+1
.14c9	85 06		sta $06				sta 	TOS
.14cb	64 07		stz $07				stz 	TOS+1
.14cd	4c 00 00	jmp $0000			jmp 	NextCode
.14d0					RandomNumber:
.14d0	a5 06		lda $06				lda 	TOS
.14d2	48		pha				pha
.14d3	a5 07		lda $07				lda 	TOS+1
.14d5	48		pha				pha
.14d6	a5 1b		lda $1b				lda 	randomSeed
.14d8	05 1c		ora $1c				ora 	randomSeed+1
.14da	d0 08		bne $14e4			bne 	_RH_NoInit
.14dc	a9 7c		lda #$7c			lda 	#$7C
.14de	85 1b		sta $1b				sta 	randomSeed
.14e0	a9 a1		lda #$a1			lda 	#$A1
.14e2	85 1c		sta $1c				sta 	randomSeed+1
.14e4					_RH_NoInit:
.14e4	a5 1b		lda $1b				lda 	randomSeed
.14e6	4a		lsr a		        lsr		a
.14e7	26 1c		rol $1c		        rol 	randomSeed+1
.14e9	90 02		bcc $14ed	        bcc 	_RH_NoEor
.14eb	49 b4		eor #$b4	        eor 	#$B4
.14ed					_RH_NoEor:
.14ed	85 1b		sta $1b		        sta 	randomSeed
.14ef	45 1c		eor $1c		        eor 	randomSeed+1
.14f1	85 07		sta $07		        sta 	TOS+1
.14f3	a5 1b		lda $1b		        lda 	randomSeed
.14f5	85 06		sta $06		        sta 	TOS
.14f7	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14fa					Constant0:
.14fa	a5 06		lda $06				lda 	TOS
.14fc	48		pha				pha
.14fd	a5 07		lda $07				lda 	TOS+1
.14ff	48		pha				pha
.1500	64 06		stz $06				stz 	TOS
.1502	64 07		stz $07				stz 	TOS+1
.1504	4c 00 00	jmp $0000			jmp 	NextCode
.1507					ConstantMinus1:
.1507	a5 06		lda $06				lda 	TOS
.1509	48		pha				pha
.150a	a5 07		lda $07				lda 	TOS+1
.150c	48		pha				pha
.150d	a9 ff		lda #$ff			lda 	#$FF
.150f	85 06		sta $06				sta 	TOS
.1511	85 07		sta $07				sta 	TOS+1
.1513	4c 00 00	jmp $0000			jmp 	NextCode
.1516					C1:
.1516	a0 01		ldy #$01			ldy 	#1
.1518	80 24		bra $153e			bra 	Const1Byte
.151a					C2:
.151a	a0 02		ldy #$02			ldy 	#2
.151c	80 20		bra $153e			bra 	Const1Byte
.151e					C3:
.151e	a0 03		ldy #$03			ldy 	#3
.1520	80 1c		bra $153e			bra 	Const1Byte
.1522					C4:
.1522	a0 04		ldy #$04			ldy 	#4
.1524	80 18		bra $153e			bra 	Const1Byte
.1526					C5:
.1526	a0 05		ldy #$05			ldy 	#5
.1528	80 14		bra $153e			bra 	Const1Byte
.152a					C8:
.152a	a0 08		ldy #$08			ldy 	#8
.152c	80 10		bra $153e			bra 	Const1Byte
.152e					C10:
.152e	a0 0a		ldy #$0a			ldy 	#10
.1530	80 0c		bra $153e			bra 	Const1Byte
.1532					C15:
.1532	a0 0f		ldy #$0f			ldy 	#15
.1534	80 08		bra $153e			bra 	Const1Byte
.1536					C16:
.1536	a0 10		ldy #$10			ldy 	#16
.1538	80 04		bra $153e			bra 	Const1Byte
.153a					C24:
.153a	a0 18		ldy #$18			ldy 	#24
.153c	80 00		bra $153e			bra 	Const1Byte
.153e					Const1Byte:
.153e	a5 06		lda $06				lda 	TOS
.1540	48		pha				pha
.1541	a5 07		lda $07				lda 	TOS+1
.1543	48		pha				pha
.1544	84 06		sty $06				sty 	TOS
.1546	64 07		stz $07				stz 	TOS+1
.1548	4c 00 00	jmp $0000			jmp 	NextCode
.154b					C32:
.154b	a0 20		ldy #$20			ldy 	#32
.154d	80 ef		bra $153e			bra 	Const1Byte
.154f					C63:
.154f	a0 3f		ldy #$3f			ldy 	#63
.1551	80 eb		bra $153e			bra 	Const1Byte
.1553					C64:
.1553	a0 40		ldy #$40			ldy 	#64
.1555	80 e7		bra $153e			bra 	Const1Byte
.1557					C100:
.1557	a0 64		ldy #$64			ldy 	#100
.1559	80 e3		bra $153e			bra 	Const1Byte
.155b					C127:
.155b	a0 7f		ldy #$7f			ldy 	#127
.155d	80 df		bra $153e			bra 	Const1Byte
.155f					C128:
.155f	a0 80		ldy #$80			ldy 	#128
.1561	80 db		bra $153e			bra 	Const1Byte
.1563					C255:
.1563	a0 ff		ldy #$ff			ldy 	#255
.1565	80 d7		bra $153e			bra 	Const1Byte
.1567					Const2Byte:
.1567	85 06		sta $06				sta 	TOS
.1569	84 07		sty $07				sty 	TOS+1
.156b	4c 00 00	jmp $0000			jmp 	NextCode
.156e					C256:
.156e	a5 06		lda $06				lda 	TOS
.1570	48		pha				pha
.1571	a5 07		lda $07				lda 	TOS+1
.1573	48		pha				pha
.1574	a9 00		lda #$00			lda 	#(256) & $FF
.1576	a0 01		ldy #$01			ldy 	#(256) >> 8
.1578	80 ed		bra $1567			bra 	Const2Byte
.157a					C512:
.157a	a5 06		lda $06				lda 	TOS
.157c	48		pha				pha
.157d	a5 07		lda $07				lda 	TOS+1
.157f	48		pha				pha
.1580	a9 00		lda #$00			lda 	#(512) & $FF
.1582	a0 02		ldy #$02			ldy 	#(512) >> 8
.1584	80 e1		bra $1567			bra 	Const2Byte
.1586					C1024:
.1586	a5 06		lda $06				lda 	TOS
.1588	48		pha				pha
.1589	a5 07		lda $07				lda 	TOS+1
.158b	48		pha				pha
.158c	a9 00		lda #$00			lda 	#(1024) & $FF
.158e	a0 04		ldy #$04			ldy 	#(1024) >> 8
.1590	80 d5		bra $1567			bra 	Const2Byte
.1592					C4096:
.1592	a5 06		lda $06				lda 	TOS
.1594	48		pha				pha
.1595	a5 07		lda $07				lda 	TOS+1
.1597	48		pha				pha
.1598	a9 00		lda #$00			lda 	#(4096) & $FF
.159a	a0 10		ldy #$10			ldy 	#(4096) >> 8
.159c	80 c9		bra $1567			bra 	Const2Byte
.159e					C32767:
.159e	a5 06		lda $06				lda 	TOS
.15a0	48		pha				pha
.15a1	a5 07		lda $07				lda 	TOS+1
.15a3	48		pha				pha
.15a4	a9 ff		lda #$ff			lda 	#(32767) & $FF
.15a6	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.15a8	80 bd		bra $1567			bra 	Const2Byte
.15aa					C32768:
.15aa	a5 06		lda $06				lda 	TOS
.15ac	48		pha				pha
.15ad	a5 07		lda $07				lda 	TOS+1
.15af	48		pha				pha
.15b0	a9 00		lda #$00			lda 	#(32768) & $FF
.15b2	a0 80		ldy #$80			ldy 	#(32768) >> 8
.15b4	80 b1		bra $1567			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.15b6					Drop:
.15b6	68		pla				pla
.15b7	85 07		sta $07				sta 	TOS+1
.15b9	68		pla				pla
.15ba	85 06		sta $06				sta 	TOS
.15bc	4c 00 00	jmp $0000			jmp 	NextCode
.15bf					TestDup:
.15bf	a5 06		lda $06				lda 	TOS
.15c1	05 07		ora $07				ora 	TOS+1
.15c3	d0 03		bne $15c8			bne 	Dup
.15c5	4c 00 00	jmp $0000			jmp 	NextCode
.15c8					Dup:
.15c8	a5 06		lda $06				lda 	TOS
.15ca	48		pha				pha
.15cb	a5 07		lda $07				lda 	TOS+1
.15cd	48		pha				pha
.15ce	4c 00 00	jmp $0000			jmp 	NextCode
.15d1					Swap:
.15d1	86 10		stx $10				stx 	temp1
.15d3	7a		ply				ply
.15d4	fa		plx				plx
.15d5	a5 06		lda $06				lda 	TOS
.15d7	48		pha				pha
.15d8	a5 07		lda $07				lda 	TOS+1
.15da	48		pha				pha
.15db	86 06		stx $06				stx 	TOS
.15dd	84 07		sty $07				sty 	TOS+1
.15df	a6 10		ldx $10				ldx 	temp1
.15e1	4c 00 00	jmp $0000			jmp 	NextCode
.15e4					Over:
.15e4	a5 06		lda $06				lda 	TOS
.15e6	48		pha				pha
.15e7	a5 07		lda $07				lda 	TOS+1
.15e9	48		pha				pha
.15ea	86 10		stx $10				stx 	temp1
.15ec	ba		tsx				tsx
.15ed	bd 04 01	lda $0104,x			lda 	stack3low,x
.15f0	85 06		sta $06				sta 	TOS
.15f2	bd 03 01	lda $0103,x			lda 	stack3High,x
.15f5	85 07		sta $07				sta 	TOS+1
.15f7	a6 10		ldx $10				ldx 	temp1
.15f9	4c 00 00	jmp $0000			jmp 	NextCode
.15fc					Nip:
.15fc	68		pla				pla
.15fd	68		pla				pla
.15fe	4c 00 00	jmp $0000			jmp 	NextCode
.1601					Rot:
.1601	86 10		stx $10				stx 	temp1
.1603	ba		tsx				tsx
.1604	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.1607	a8		tay				tay
.1608	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.160b	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.160e	a5 06		lda $06				lda 	TOS
.1610	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1613	84 06		sty $06				sty 	TOS
.1615	bd 03 01	lda $0103,x			lda 	Stack3High,x
.1618	a8		tay				tay
.1619	bd 01 01	lda $0101,x			lda 	Stack2High,x
.161c	9d 03 01	sta $0103,x			sta 	Stack3High,x
.161f	a5 07		lda $07				lda 	TOS+1
.1621	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1624	84 07		sty $07				sty 	TOS+1
.1626	a6 10		ldx $10				ldx 	temp1
.1628	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.162b					ByteRead:
.162b	b2 06		lda ($06)			lda 	(TOS)
.162d	85 06		sta $06				sta 	TOS
.162f	64 07		stz $07				stz 	TOS+1
.1631	4c 00 00	jmp $0000			jmp 	NextCode
.1634					WordRead:
.1634	a0 01		ldy #$01			ldy 	#1
.1636	b1 06		lda ($06),y			lda 	(TOS),y
.1638	a8		tay				tay
.1639	b2 06		lda ($06)			lda 	(TOS)
.163b	85 06		sta $06				sta 	TOS
.163d	84 07		sty $07				sty 	TOS+1
.163f	4c 00 00	jmp $0000			jmp 	NextCode
.1642					ByteWrite:
.1642	68		pla				pla
.1643	68		pla				pla
.1644	92 06		sta ($06)			sta 	(TOS)
.1646	68		pla				pla
.1647	85 07		sta $07				sta 	TOS+1
.1649	68		pla				pla
.164a	85 06		sta $06				sta 	TOS
.164c	4c 00 00	jmp $0000			jmp 	NextCode
.164f					WordWrite:
.164f	68		pla				pla
.1650	a0 01		ldy #$01			ldy 	#1
.1652	91 06		sta ($06),y			sta 	(TOS),y
.1654	68		pla				pla
.1655	92 06		sta ($06)			sta 	(TOS)
.1657	68		pla				pla
.1658	85 07		sta $07				sta 	TOS+1
.165a	68		pla				pla
.165b	85 06		sta $06				sta 	TOS
.165d	4c 00 00	jmp $0000			jmp 	NextCode
.1660					WordAdd:
.1660	7a		ply				ply
.1661	68		pla				pla
.1662	18		clc				clc
.1663	72 06		adc ($06)			adc 	(TOS)
.1665	92 06		sta ($06)			sta 	(TOS)
.1667	98		tya				tya
.1668	a0 01		ldy #$01			ldy 	#1
.166a	71 06		adc ($06),y			adc 	(TOS),y
.166c	91 06		sta ($06),y			sta 	(TOS),y
.166e	68		pla				pla
.166f	85 07		sta $07				sta 	TOS+1
.1671	68		pla				pla
.1672	85 06		sta $06				sta 	TOS
.1674	4c 00 00	jmp $0000			jmp 	NextCode
.1677					AllocateMemory:
.1677	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1679	48		pha				pha
.167a	a5 07		lda $07				lda 	TOS+1
.167c	48		pha				pha
.167d	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.167f	85 06		sta $06				sta 	TOS
.1681	a5 0f		lda $0f				lda 	nextFreeMem+1
.1683	85 07		sta $07				sta 	TOS+1
.1685	7a		ply				ply 								; advance the free ram pointer
.1686	68		pla				pla
.1687	20 5a 1c	jsr $1c5a			jsr 	AdvanceFreeMem
.168a	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.168d					EncodeProgram:
.168d	48		pha				pha 								; save registers.
.168e	da		phx				phx
.168f	5a		phy				phy
.1690	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1692	85 08		sta $08				sta		srcPtr
.1694	20 ef 18	jsr $18ef			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.1697	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1699	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.169c	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.169f	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.16a2	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.16a4	20 9a 18	jsr $189a			jsr 	CheckIsDigit
.16a7	90 09		bcc $16b2			bcc 	_EPNoLineNumber 			; if so there is a line number
.16a9	20 bc 18	jsr $18bc			jsr 	EncodeGetConstant 			; extract that constant from the source
.16ac	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.16af	8c 12 09	sty $0912			sty 	encodeBuffer+2
.16b2					_EPNoLineNumber:
.16b2					EncodeLoop:
.16b2	20 e1 18	jsr $18e1			jsr 	EncSkipSpaces 				; skip over spaces
.16b5	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.16b7	d0 0b		bne $16c4			bne 	_EPNotEnd
.16b9					_EPEndEncode:
.16b9	a9 46		lda #$46			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.16bb	a0 20		ldy #$20			ldy 	#NextLine >> 8
.16bd	20 72 18	jsr $1872			jsr 	EncodeWriteWord
.16c0	7a		ply				ply									; restore and exit.
.16c1	fa		plx				plx
.16c2	68		pla				pla
.16c3	60		rts				rts
.16c4					_EPNotEnd:
.16c4	b2 08		lda ($08)			lda 	(srcPtr)
.16c6	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.16c8	f0 04		beq $16ce			beq 	_EPIsComStr
.16ca	c9 27		cmp #$27			cmp 	#"'"
.16cc	d0 05		bne $16d3			bne 	_EPNotComStr
.16ce					_EPIsComStr:
.16ce	20 bf 17	jsr $17bf			jsr 	EncodeCommentString
.16d1	80 df		bra $16b2			bra 	EncodeLoop
.16d3					_EPNotComStr:
.16d3	38		sec				sec
.16d4	20 ce 18	jsr $18ce			jsr 	EncSetBit7Word
.16d7	20 08 19	jsr $1908			jsr 	EncodeSearchDictionary		; look it up
.16da	90 44		bcc $1720			bcc 	_EPNotInDictionary
.16dc	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16de	84 11		sty $11				sty 	temp1+1
.16e0	a0 01		ldy #$01			ldy 	#1
.16e2	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.16e4	29 20		and #$20			and 	#$20
.16e6	d0 12		bne $16fa			bne 	_EPEncodeRoutine 			; if so, do special routine.
.16e8	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.16ea	b1 10		lda ($10),y			lda 	(temp1),y
.16ec	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.16ef	c8		iny				iny
.16f0	b1 10		lda ($10),y			lda 	(temp1),y
.16f2	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.16f5	20 a6 18	jsr $18a6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16f8	80 b8		bra $16b2			bra 	EncodeLoop
.16fa					_EPEncodeRoutine:
.16fa	a0 01		ldy #$01			ldy 	#1							; get type bit
.16fc	b1 10		lda ($10),y			lda 	(temp1),y
.16fe	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.1700	29 10		and #$10			and 	#$10 						; but decoder comes first
.1702	f0 02		beq $1706			beq 	_EPENoDecoder
.1704	c8		iny				iny 								; so if it exists, adjust for it.
.1705	c8		iny				iny
.1706					_EPENoDecoder:
.1706	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.1708	85 12		sta $12				sta 	temp2
.170a	c8		iny				iny
.170b	b1 10		lda ($10),y			lda 	(temp1),y
.170d	85 13		sta $13				sta 	temp2+1
.170f	48		pha				pha 								; call routine preserving state
.1710	da		phx				phx
.1711	5a		phy				phy
.1712	20 1d 17	jsr $171d			jsr 	_EPECallTemp2
.1715	7a		ply				ply
.1716	fa		plx				plx
.1717	68		pla				pla
.1718	20 a6 18	jsr $18a6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.171b	80 95		bra $16b2			bra 	EncodeLoop
.171d					_EPECallTemp2:
.171d	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1720					_EPNotInDictionary:
.1720	20 24 18	jsr $1824			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.1723	90 19		bcc $173e			bcc 	_EPNotDefined
.1725	48		pha				pha
.1726	a9 bd		lda #$bd			lda	 	#CallHandler & $FF 			; write code call handler
.1728	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.172b	a9 1a		lda #$1a			lda	 	#CallHandler >> 8
.172d	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.1730	68		pla				pla 								; write line number
.1731	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.1734	98		tya				tya
.1735	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.1738	20 a6 18	jsr $18a6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.173b	4c b2 16	jmp $16b2			jmp 	EncodeLoop
.173e					_EPNotDefined:
.173e	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.1740	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.1742	f0 58		beq $179c			beq 	_EPDefinition
.1744	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.1746	f0 2e		beq $1776			beq 	_EPCallDirect
.1748	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.174a	f0 47		beq $1793			beq 	_EPVariable
.174c	c9 40		cmp #$40			cmp 	#"@"
.174e	f0 43		beq $1793			beq 	_EPVariable
.1750	c9 26		cmp #$26			cmp 	#"&"
.1752	f0 3f		beq $1793			beq 	_EPVariable
.1754	a9 a6		lda #$a6			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.1756	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.1758	20 72 18	jsr $1872			jsr 	EncodeWriteWord
.175b					_EPOutputConstant:
.175b	20 bc 18	jsr $18bc			jsr 	EncodeGetConstant 			; extract that constant from the source
.175e	90 06		bcc $1766			bcc 	_EPFail 					; if can't find one, that's us done.
.1760	20 72 18	jsr $1872			jsr 	EncodeWriteWord 			; write out the encoded value.
.1763	4c b2 16	jmp $16b2			jmp 	EncodeLoop 					; and go round again.
.1766					_EPFail:
.1766	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1769	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>1771	52 52 4f 52 00
.1776					_EPCallDirect:
.1776	a9 bd		lda #$bd			lda	 	#CallHandler & $FF 			; write code call handler
.1778	a0 1a		ldy #$1a			ldy	 	#CallHandler >> 8
.177a	20 72 18	jsr $1872			jsr 	EncodeWriteWord
.177d	a9 01		lda #$01			lda 	#1
.177f	20 b2 18	jsr $18b2			jsr 	EncodeAddSrcPtr 			; skip over the <
.1782	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.1784					_EPToLast:
.1784	c8		iny				iny
.1785	b1 08		lda ($08),y			lda 	(srcPtr),y
.1787	10 fb		bpl $1784			bpl	 	_EPToLast
.1789	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.178b	d0 d9		bne $1766			bne 	_EPFail
.178d	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.178f	91 08		sta ($08),y			sta 	(srcPtr),y
.1791	80 c8		bra $175b			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.1793					_EPVariable:
.1793	20 5c 19	jsr $195c			jsr 	EncodeVariableReference
.1796	20 a6 18	jsr $18a6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1799	4c b2 16	jmp $16b2			jmp 	EncodeLoop
.179c					_EPDefinition:
.179c	a9 88		lda #$88			lda	 	#DefineCode & $FF 			; write code call handler
.179e	a0 20		ldy #$20			ldy	 	#DefineCode >> 8
.17a0	20 72 18	jsr $1872			jsr 	EncodeWriteWord
.17a3	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.17a6	a9 01		lda #$01			lda 	#1 							; write default size
.17a8	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.17ab	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.17ad	c8		iny		_EPCopy:iny
.17ae	b1 08		lda ($08),y			lda 	(srcPtr),y
.17b0	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.17b3	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.17b6	0a		asl a				asl 	a
.17b7	90 f4		bcc $17ad			bcc 	_EPCopy
.17b9	20 a6 18	jsr $18a6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17bc	4c b2 16	jmp $16b2			jmp 	EncodeLoop

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.17bf					EncodeCommentString:
.17bf	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.17c1	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.17c3	aa		tax				tax 								; save in X
.17c4	a9 5d		lda #$5d			lda 	#(SkipComment & $FF)		; get the routine to use
.17c6	a0 20		ldy #$20			ldy 	#(SkipComment >> 8)
.17c8	e0 27		cpx #$27			cpx 	#"'"
.17ca	f0 06		beq $17d2			beq 	_ECSGotCmd
.17cc	86 10		stx $10				stx		temp1 						; other terminator = "
.17ce	a9 ce		lda #$ce			lda 	#(LiteralString & $FF)
.17d0	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.17d2					_ECSGotCmd:
.17d2	20 72 18	jsr $1872			jsr 	EncodeWriteWord 			; write word out.
.17d5	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.17d7	20 b2 18	jsr $18b2			jsr 	EncodeAddSrcPtr
.17da	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.17dc	d0 03		bne $17e1			bne 	_ECNoSkipSpaces
.17de	20 e1 18	jsr $18e1			jsr 	EncSkipSpaces
.17e1					_ECNoSkipSpaces:
.17e1	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.17e4	a9 01		lda #$01			lda 	#1
.17e6	20 7c 18	jsr $187c			jsr 	EncodeWriteByte 			; write total length, so far 1.
.17e9	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.17eb					_ECSCopyText:
.17eb	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.17ed	f0 18		beq $1807			beq 	_ECSEndOfLine 				; end of line ?
.17ef	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.17f1	f0 09		beq $17fc			beq 	_ECSEndOfString 			; if so must be closing quote.
.17f3	20 7c 18	jsr $187c			jsr 	EncodeWriteByte 			; write the byte out
.17f6	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.17f9	c8		iny				iny 								; next character
.17fa	80 ef		bra $17eb			bra 	_ECSCopyText
.17fc					_ECSEndOfString:
.17fc	c8		iny				iny 								; skip closing quote.
.17fd	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.17ff	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.1802	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1805	80 18		bra $181f			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1807					_ECSEndOfLine:
.1807	a5 10		lda $10				lda 	temp1 						; missing closing quote
.1809	f0 14		beq $181f			beq 	_ECSComplete 				; if we were doing a string.
.180b	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>180e	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>1816	4e 47 20 51 55 4f 54 45 00
.181f					_ECSComplete:
.181f	98		tya				tya									; skip over.
.1820	20 b2 18	jsr $18b2			jsr 	EncodeAddSrcPtr
.1823	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1824					EncodeSearchUserDefined:
.1824	38		sec				sec 								; temp1 = srcPtr-6 because the
.1825	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1827	e9 06		sbc #$06			sbc		#6
.1829	85 10		sta $10				sta 	temp1
.182b	a5 09		lda $09				lda 	srcPtr+1
.182d	e9 00		sbc #$00			sbc 	#0
.182f	85 11		sta $11				sta 	temp1+1
.1831	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1833	85 12		sta $12				sta 	0+(temp2)
.1835	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1837	85 13		sta $13				sta 	1+(temp2)
.1839					_ESULoop:
.1839	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.183b	f0 33		beq $1870			beq 	_ESUFail
.183d	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.183f	b1 12		lda ($12),y			lda 	(temp2),y
.1841	c9 88		cmp #$88			cmp 	#DefineCode & $FF
.1843	d0 1e		bne $1863			bne 	_ESUNext
.1845	c8		iny				iny
.1846	b1 12		lda ($12),y			lda 	(temp2),y
.1848	c9 20		cmp #$20			cmp 	#DefineCode >> 8
.184a	d0 17		bne $1863			bne 	_ESUNext
.184c	c8		iny				iny 								; skip length byte.
.184d					_ESUCompare:
.184d	c8		iny				iny
.184e	b1 12		lda ($12),y			lda 	(temp2),y
.1850	d1 10		cmp ($10),y			cmp 	(temp1),y
.1852	d0 0f		bne $1863			bne 	_ESUNext
.1854	0a		asl a				asl 	a 							; bit 7 set => found it.
.1855	90 f6		bcc $184d			bcc 	_ESUCompare
.1857	a0 01		ldy #$01			ldy 	#1
.1859	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.185b	aa		tax				tax
.185c	c8		iny				iny
.185d	b1 12		lda ($12),y			lda 	(temp2),y
.185f	a8		tay				tay
.1860	8a		txa				txa
.1861	38		sec				sec 								; return with carry set as found
.1862	60		rts				rts
.1863					_ESUNext:
.1863	18		clc				clc
.1864	a5 12		lda $12				lda 	temp2
.1866	72 12		adc ($12)			adc 	(temp2)
.1868	85 12		sta $12				sta 	temp2
.186a	90 02		bcc $186e			bcc 	_NoCarryAdv
.186c	e6 13		inc $13				inc 	temp2+1
.186e					_NoCarryAdv:
.186e	80 c9		bra $1839			bra 	_ESULoop 					; and loop round
.1870					_ESUFail:
.1870	18		clc				clc
.1871	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.1872					EncodeWriteWord:
.1872	48		pha				pha
.1873	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.1876	98		tya				tya
.1877	20 7c 18	jsr $187c			jsr 	EncodeWriteByte
.187a	68		pla				pla
.187b	60		rts				rts
.187c					EncodeWriteByte:
.187c	da		phx				phx
.187d	ae 10 09	ldx $0910			ldx 	encodeBuffer
.1880	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1883	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.1886	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.1889	ee 10 09	inc $0910			inc 	encodeBuffer
.188c	fa		plx				plx
.188d	60		rts				rts
.188e					CheckIsLetter:
.188e	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.1890	90 06		bcc $1898			bcc 	_CILFail
.1892	c9 5b		cmp #$5b			cmp 	#"Z"+1
.1894	b0 02		bcs $1898			bcs 	_CILFail
.1896	38		sec				sec
.1897	60		rts				rts
.1898					_CILFail:
.1898	18		clc				clc
.1899	60		rts				rts
.189a					CheckIsDigit:
.189a	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.189c	90 06		bcc $18a4			bcc 	_CIDFail
.189e	c9 3a		cmp #$3a			cmp 	#"9"+1
.18a0	b0 02		bcs $18a4			bcs 	_CIDFail
.18a2	38		sec				sec
.18a3	60		rts				rts
.18a4					_CIDFail:
.18a4	18		clc				clc
.18a5	60		rts				rts
.18a6					EncodeMoveNextWord:
.18a6	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.18a8					_EPNWLoop:
.18a8	c8		iny				iny
.18a9	b1 08		lda ($08),y			lda 	(srcPtr),y
.18ab	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.18ad	b0 f9		bcs $18a8			bcs 	_EPNWLoop
.18af	98		tya				tya
.18b0	80 00		bra $18b2			bra 	EncodeAddSrcPtr
.18b2					EncodeAddSrcPtr:
.18b2	18		clc				clc 								; add offset
.18b3	65 08		adc $08				adc 	srcPtr
.18b5	85 08		sta $08				sta 	srcPtr
.18b7	90 02		bcc $18bb			bcc 	_EASPNoCarry
.18b9	e6 09		inc $09				inc 	srcPtr+1					; carry through
.18bb					_EASPNoCarry:
.18bb	60		rts				rts
.18bc					EncodeGetConstant:
.18bc	a5 08		lda $08				lda 	srcPtr 						; get source
.18be	a4 09		ldy $09				ldy 	srcPtr+1
.18c0	20 b8 1f	jsr $1fb8			jsr 	ConvertToInteger 			; call converter
.18c3	90 08		bcc $18cd			bcc 	_EGCExit
.18c5	20 b2 18	jsr $18b2			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.18c8	a5 14		lda $14				lda 	temp3 						; get result into YA
.18ca	a4 15		ldy $15				ldy 	temp3+1
.18cc	38		sec				sec 								; return CS
.18cd					_EGCExit:
.18cd	60		rts				rts
.18ce					EncSetBit7Word:
.18ce	08		php				php 								; save carry
.18cf	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.18d1					_ESB7Loop:
.18d1	c8		iny				iny
.18d2	b1 08		lda ($08),y			lda 	(srcPtr),y
.18d4	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.18d6	b0 f9		bcs $18d1			bcs 	_ESB7Loop
.18d8	88		dey				dey									; previous character
.18d9	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.18db	0a		asl a				asl 	a 							; shift bit 7 out
.18dc	28		plp				plp 								; restore carry
.18dd	6a		ror a				ror 	a 							; shift it in
.18de	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.18e0	60		rts				rts
.18e1					EncSkipSpaces:
.18e1	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.18e3	c9 20		cmp #$20			cmp 	#32
.18e5	d0 07		bne $18ee			bne 	_ESNotSpace
.18e7	a9 01		lda #$01			lda 	#1
.18e9	20 b2 18	jsr $18b2			jsr 	EncodeAddSrcPtr
.18ec	80 f3		bra $18e1			bra	 	EncSkipSpaces
.18ee					_ESNotSpace:
.18ee	60		rts				rts
.18ef					EncodeTrimTrailingSpaces:
.18ef	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.18f1					_ETTFindEnd:
.18f1	c8		iny				iny
.18f2	b1 08		lda ($08),y			lda 	(srcPtr),y
.18f4	d0 fb		bne $18f1			bne 	_ETTFindEnd
.18f6					_ETTRemoveSpace:
.18f6	c0 00		cpy #$00			cpy 	#0 							; start of string
.18f8	f0 0d		beq $1907			beq 	_ETTExit
.18fa	88		dey				dey 								; previous character 1..32
.18fb	b1 08		lda ($08),y			lda 	(srcPtr),y
.18fd	c9 21		cmp #$21			cmp 	#32+1
.18ff	b0 06		bcs $1907			bcs 	_ETTExit
.1901	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.1903	91 08		sta ($08),y			sta 	(srcPtr),y
.1905	80 ef		bra $18f6			bra 	_ETTRemoveSpace
.1907					_ETTExit:
.1907	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.1908					EncodeSearchDictionary:
.1908	a9 b6		lda #$b6			lda 	#(Dictionary) & $FF
.190a	85 10		sta $10				sta 	0+(temp1)
.190c	a9 22		lda #$22			lda 	#(Dictionary) >> 8
.190e	85 11		sta $11				sta 	1+(temp1)
.1910					_ESDLoop:
.1910	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.1912	18		clc				clc
.1913	f0 46		beq $195b			beq 	_ESDExit
.1915	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1917	b1 10		lda ($10),y			lda 	(temp1),y
.1919	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.191a	4a		lsr a				lsr 	a
.191b	4a		lsr a				lsr 	a
.191c	4a		lsr a				lsr 	a
.191d	c8		iny				iny 								; Y = 2
.191e	4a		lsr a				lsr 	a
.191f	90 01		bcc $1922			bcc 	_ESDNotDec
.1921	c8		iny				iny
.1922					_ESDNotDec:
.1922	4a		lsr a				lsr 	a
.1923	90 01		bcc $1926			bcc 	_ESDNotInc
.1925	c8		iny				iny
.1926					_ESDNotInc:
.1926	98		tya				tya
.1927	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1928	a8		tay				tay
.1929	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.192b	d2 08		cmp ($08)			cmp 	(srcPtr)
.192d	d0 1f		bne $194e			bne 	_ESDNext 					; do not match, go to next
.192f	98		tya				tya 								; make temp2 point to the name in
.1930	18		clc				clc 								; the dictionary.
.1931	65 10		adc $10				adc 	temp1
.1933	85 12		sta $12				sta 	temp2
.1935	a5 11		lda $11				lda 	temp1+1
.1937	69 00		adc #$00			adc 	#0
.1939	85 13		sta $13				sta 	temp2+1
.193b	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.193d					_ESDCompare:
.193d	c8		iny				iny
.193e	b1 08		lda ($08),y			lda 	(srcPtr),y
.1940	d1 12		cmp ($12),y			cmp 	(temp2),y
.1942	d0 0a		bne $194e			bne 	_ESDNext
.1944	0a		asl a				asl 	a
.1945	90 f6		bcc $193d			bcc 	_ESDCompare
.1947	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.1949	a4 11		ldy $11				ldy 	temp1+1
.194b	38		sec				sec
.194c	80 0d		bra $195b			bra 	_ESDExit
.194e					_ESDNext:
.194e	18		clc				clc
.194f	a5 10		lda $10				lda 	temp1
.1951	72 10		adc ($10)			adc 	(temp1)
.1953	85 10		sta $10				sta 	temp1
.1955	90 b9		bcc $1910			bcc 	_ESDLoop
.1957	e6 11		inc $11				inc 	temp1+1
.1959	80 b5		bra $1910			bra 	_ESDLoop
.195b					_ESDExit:
.195b	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encvar.src

.195c					EncodeVariableReference:
.195c	b2 08		lda ($08)			lda 	(srcPtr)					; get the type, use it to identify the routine
.195e	a2 5c		ldx #$5c			ldx 	#VarAddressHandler & $FF
.1960	a0 21		ldy #$21			ldy 	#VarAddressHandler >> 8
.1962	c9 26		cmp #$26			cmp 	#"&"
.1964	f0 0c		beq $1972			beq 	_EVFHaveAddress
.1966	a2 76		ldx #$76			ldx 	#VarReadHandler & $FF
.1968	a0 21		ldy #$21			ldy 	#VarReadHandler >> 8
.196a	c9 40		cmp #$40			cmp 	#"@"
.196c	f0 04		beq $1972			beq 	_EVFHaveAddress
.196e	a2 92		ldx #$92			ldx 	#VarWriteHandler & $FF
.1970	a0 21		ldy #$21			ldy 	#VarWriteHandler >> 8
.1972					_EVFHaveAddress:
.1972	8a		txa				txa
.1973	20 72 18	jsr $1872			jsr 	EncodeWriteWord 			; write it out.
.1976	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.1978	b1 08		lda ($08),y			lda 	(srcPtr),y
.197a	29 7f		and #$7f			and 	#$7F 						; might be the last.
.197c	20 8e 18	jsr $188e			jsr 	CheckIsLetter 				; is it A-Z
.197f	90 1a		bcc $199b			bcc 	EVFFail
.1981	29 1f		and #$1f			and 	#31 						; make 1-26
.1983	85 10		sta $10				sta 	temp1 						; start building the name in temp1
.1985	64 11		stz $11				stz 	temp1+1
.1987	38		sec				sec 								; possible char 2
.1988	20 b0 19	jsr $19b0			jsr 	EncVarAlNum
.198b	18		clc				clc 								; possible char 3
.198c	20 b0 19	jsr $19b0			jsr 	EncVarAlNum
.198f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; more text after ?
.1991	10 08		bpl $199b			bpl 	EVFFail
.1993	a5 10		lda $10				lda 	temp1 						; write out variable identifier.
.1995	a4 11		ldy $11				ldy 	temp1+1
.1997	20 72 18	jsr $1872			jsr 	EncodeWriteWord
.199a	60		rts				rts
.199b					EVFFail:
.199b	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>199e	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>19a6	41 42 4c 45 20 4e 41 4d 45 00
.19b0					EncVarAlNum:
.19b0	b1 08		lda ($08),y			lda 	(srcPtr),y 					; points to the  last char processed.
.19b2	10 01		bpl $19b5			bpl 	_EVAContinue
.19b4	60		rts				rts
.19b5					_EVAContinue:
.19b5	08		php				php 								; CS x 32 ; CC x 32 x 40
.19b6	c8		iny				iny 								; get the next character, strip bit 7
.19b7	b1 08		lda ($08),y			lda 	(srcPtr),y
.19b9	29 7f		and #$7f			and 	#$7F
.19bb	20 8e 18	jsr $188e			jsr 	CheckIsLetter 				; letter ?
.19be	b0 08		bcs $19c8			bcs 	_EVACharOkay
.19c0	20 9a 18	jsr $189a			jsr 	CheckIsDigit				; fail if not digit.
.19c3	90 d6		bcc $199b			bcc 	EVFFail
.19c5	18		clc				clc
.19c6	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.19c8					_EVACharOkay:
.19c8	38		sec				sec 								; range 1-36
.19c9	e9 40		sbc #$40			sbc 	#64
.19cb	28		plp				plp 								; which multiplier ?
.19cc	90 0f		bcc $19dd			bcc 	_EVATimes32x40
.19ce	85 12		sta $12				sta 	temp2 						; save in temp2 - A x 32
.19d0	64 13		stz $13				stz 	temp2+1
.19d2	a2 05		ldx #$05			ldx 	#5
.19d4	06 12		asl $12		_EVA32:	asl 	temp2
.19d6	26 13		rol $13				rol 	temp2+1
.19d8	ca		dex				dex
.19d9	d0 f9		bne $19d4			bne 	_EVA32
.19db	80 0b		bra $19e8			bra 	_EVAAddVar
.19dd					_EVATimes32x40:
.19dd	85 13		sta $13				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.19df	64 12		stz $12				stz 	temp2
.19e1	0a		asl a				asl 	a
.19e2	0a		asl a				asl 	a
.19e3	18		clc				clc
.19e4	65 13		adc $13				adc 	temp2+1
.19e6	85 13		sta $13				sta 	temp2+1
.19e8					_EVAAddVar:
.19e8	18		clc				clc
.19e9	a5 10		lda $10				lda 	temp1
.19eb	65 12		adc $12				adc 	temp2
.19ed	85 10		sta $10				sta 	temp1
.19ef	a5 11		lda $11				lda 	temp1+1
.19f1	65 13		adc $13				adc 	temp2+1
.19f3	85 11		sta $11				sta 	temp1+1
.19f5	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.19f6					ForHandler:
.19f6	e6 05		inc $05				inc 	rsp 						; bump the RSP
.19f8	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.19fa	c0 40		cpy #$40			cpy 	#$40 						; overflow
.19fc	f0 18		beq $1a16			beq 	_FHOverflow
.19fe	a5 07		lda $07				lda 	TOS+1
.1a00	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1a03	a5 06		lda $06				lda 	TOS
.1a05	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1a08	a9 ff		lda #$ff			lda 	#$FF
.1a0a	99 80 07	sta $0780,y			sta 	returnStackX,y
.1a0d	68		pla				pla
.1a0e	85 07		sta $07				sta 	TOS+1
.1a10	68		pla				pla
.1a11	85 06		sta $06				sta 	TOS
.1a13	4c 00 00	jmp $0000			jmp 	NextCode
.1a16					_FHOverflow:
.1a16	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a19	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1a21	45 20 4f 56 45 52 46 4c 4f 57 00
.1a2c					NextHandler:
.1a2c	da		phx				phx
.1a2d	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1a2f	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1a32	c9 ff		cmp #$ff			cmp 	#$FF
.1a34	d0 21		bne $1a57			bne 	NHNoFor
.1a36	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1a39	d0 03		bne $1a3e			bne 	_NHNoBorrow
.1a3b	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1a3e					_NHNoBorrow:
.1a3e	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1a41	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1a44	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1a47	fa		plx				plx 								; restore X and re-test
.1a48	09 00		ora #$00			ora 	#0
.1a4a	f0 05		beq $1a51			beq 	_NHComplete 				; if so then complete, else loop.
.1a4c	e8		inx				inx 								; advance to branch
.1a4d	e8		inx				inx
.1a4e	4c b3 1a	jmp $1ab3			jmp 	BranchAlways
.1a51					_NHComplete:
.1a51	e8		inx				inx 								; skip over the branch quantity
.1a52	c6 05		dec $05				dec 	rsp 						; drop the indx
.1a54	4c 00 00	jmp $0000			jmp 	NextCode
.1a57					NHNoFor:
.1a57	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a5a	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>1a62	4f 52 20 53 43 4f 50 45 00
.1a6b					GetIndex:
.1a6b	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1a6d	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1a70	c9 ff		cmp #$ff			cmp 	#$FF
.1a72	d0 e3		bne $1a57			bne 	NHNoFor
.1a74	a5 06		lda $06				lda 	TOS
.1a76	48		pha				pha
.1a77	a5 07		lda $07				lda 	TOS+1
.1a79	48		pha				pha
.1a7a	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1a7d	38		sec				sec
.1a7e	e9 01		sbc #$01			sbc 	#1
.1a80	85 06		sta $06				sta 	TOS
.1a82	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1a85	e9 00		sbc #$00			sbc 	#0
.1a87	85 07		sta $07				sta 	TOS+1
.1a89	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1a8c					IfHandler:
.1a8c	4c 9b 1a	jmp $1a9b			jmp 	BranchIfZero
.1a8f					ElseHandler:
.1a8f	4c b1 1a	jmp $1ab1			jmp 	BranchTestSucceedsNoPop
.1a92					EndIfHandler:
.1a92	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1a95					RepeatHandler:
.1a95	4c 00 00	jmp $0000			jmp 	NextCode
.1a98					UntilHandler:
.1a98	4c 9b 1a	jmp $1a9b			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1a9b					BranchIfZero:
.1a9b	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1a9d	05 07		ora $07				ora 	TOS+1
.1a9f	f0 0a		beq $1aab			beq 	BranchTestSucceeds
.1aa1					BranchTestFails:
.1aa1	68		pla				pla
.1aa2	85 07		sta $07				sta 	TOS+1
.1aa4	68		pla				pla
.1aa5	85 06		sta $06				sta 	TOS
.1aa7	e8		inx				inx 								; skip over the relative branch.
.1aa8	4c 00 00	jmp $0000			jmp 	NextCode
.1aab					BranchTestSucceeds:
.1aab	68		pla				pla
.1aac	85 07		sta $07				sta 	TOS+1
.1aae	68		pla				pla
.1aaf	85 06		sta $06				sta 	TOS
.1ab1					BranchTestSucceedsNoPop:
.1ab1	e8		inx				inx 								; advance by two, to the offset
.1ab2	e8		inx				inx
.1ab3					BranchAlways:
.1ab3	8a		txa				txa 								; A = Y = position
.1ab4	a8		tay				tay 								; (IP),Y now points to the branch target
.1ab5	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1ab7	aa		tax				tax 								; position back in this line.
.1ab8	ca		dex				dex
.1ab9	ca		dex				dex
.1aba	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1abd					CallHandler:
.1abd	e8		inx				inx									; bump X to the call address.
.1abe	e8		inx				inx
.1abf	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1ac1	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1ac3	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1ac5	f0 54		beq $1b1b			beq 	_CHOverflow
.1ac7	a5 04		lda $04				lda 	IP+1
.1ac9	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1acc	a5 03		lda $03				lda 	IP
.1ace	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1ad1	8a		txa				txa
.1ad2	99 80 07	sta $0780,y			sta 	returnStackX,y
.1ad5	8a		txa				txa 								; get the line number into temp1.
.1ad6	a8		tay				tay
.1ad7	b1 03		lda ($03),y			lda 	(IP),y
.1ad9	85 10		sta $10				sta 	temp1
.1adb	c8		iny				iny
.1adc	b1 03		lda ($03),y			lda 	(IP),y
.1ade	85 11		sta $11				sta 	temp1+1
.1ae0	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1ae2	85 03		sta $03				sta 	0+(IP)
.1ae4	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1ae6	85 04		sta $04				sta 	1+(IP)
.1ae8	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1aea	f0 17		beq $1b03			beq 	_CHFail
.1aec	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1aee					_CHSearch:
.1aee	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1af0	c5 10		cmp $10				cmp 	temp1
.1af2	f0 3e		beq $1b32			beq 	_CHFoundLSB
.1af4					_CHSearchNext:
.1af4	18		clc				clc
.1af5	a5 03		lda $03				lda 	IP
.1af7	72 03		adc ($03)			adc 	(IP)
.1af9	85 03		sta $03				sta 	IP
.1afb	90 02		bcc $1aff			bcc 	_NoCarryAdv
.1afd	e6 04		inc $04				inc 	IP+1
.1aff					_NoCarryAdv:
.1aff	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1b01	d0 eb		bne $1aee			bne 	_CHSearch
.1b03					_CHFail:
.1b03	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b06	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1b0e	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.1b1b					_CHOverflow:
.1b1b	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b1e	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1b26	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1b32					_CHFoundLSB:
.1b32	c8		iny				iny 								; get MSB
.1b33	b1 03		lda ($03),y			lda 	(IP),y
.1b35	88		dey				dey
.1b36	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1b38	d0 ba		bne $1af4			bne 	_CHSearchNext
.1b3a	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1b3c	b1 03		lda ($03),y			lda 	(IP),y
.1b3e	c9 88		cmp #$88			cmp 	#DefineCode & $FF
.1b40	d0 c1		bne $1b03			bne 	_CHFail
.1b42	c8		iny				iny
.1b43	b1 03		lda ($03),y			lda 	(IP),y
.1b45	c9 20		cmp #$20			cmp 	#DefineCode >> 8
.1b47	d0 ba		bne $1b03			bne 	_CHFail
.1b49	c8		iny				iny
.1b4a	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1b4c	18		clc				clc
.1b4d	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1b4f	aa		tax				tax
.1b50	4c 00 00	jmp $0000			jmp 	NextCode
.1b53					ReturnHandler:
.1b53	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1b55	30 15		bmi $1b6c			bmi 	_RHUnderflow 				; if -ve underflowed
.1b57	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1b59	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1b5c	85 04		sta $04				sta 	IP+1
.1b5e	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1b61	85 03		sta $03				sta 	IP
.1b63	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1b66	aa		tax				tax
.1b67	f0 15		beq $1b7e			beq 	_RHInLoop 					; this means you have done :something for ; next
.1b69	4c 00 00	jmp $0000			jmp 	NextCode
.1b6c					_RHUnderflow:
.1b6c	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b6f	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>1b77	52 45 54 55 52 4e 00
.1b7e					_RHInLoop:
.1b7e	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b81	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>1b89	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.1b96					CallHandlerDecode:
.1b96	a9 03		lda #$03			lda 	#CTH_Call					; space
.1b98	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1b9b	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1b9d	aa		tax				tax
.1b9e	c8		iny				iny
.1b9f	b1 08		lda ($08),y			lda 	(srcPtr),y
.1ba1	a8		tay				tay
.1ba2	8a		txa				txa
.1ba3	20 e0 1b	jsr $1be0			jsr 	FindLine 					; try to locate that line.
.1ba6	b0 11		bcs $1bb9			bcs 	_CHDFound 					; if found .....
.1ba8					_CHDLineOnly:
.1ba8	48		pha				pha
.1ba9	a9 3c		lda #$3c			lda 	#"<"
.1bab	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1bae	68		pla				pla
.1baf	18		clc				clc 								; output unsigned
.1bb0	20 82 1d	jsr $1d82			jsr 	DecodeYAToBuffer
.1bb3	a9 3e		lda #$3e			lda 	#">"
.1bb5	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1bb8	60		rts				rts
.1bb9					_CHDFound:
.1bb9	48		pha				pha 								; save YA
.1bba	5a		phy				phy
.1bbb	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1bbd	b1 10		lda ($10),y			lda 	(temp1),y
.1bbf	c9 88		cmp #$88			cmp 	#DefineCode & 255
.1bc1	d0 07		bne $1bca			bne 	_CHDNoDefine
.1bc3	c8		iny				iny
.1bc4	b1 10		lda ($10),y			lda 	(temp1),y
.1bc6	c9 20		cmp #$20			cmp 	#DefineCode >> 8
.1bc8	f0 04		beq $1bce			beq 	_CHDFoundDefine
.1bca					_CHDNoDefine:
.1bca	7a		ply				ply									; restore the line number and print it in <>
.1bcb	68		pla				pla
.1bcc	80 da		bra $1ba8			bra 	_CHDLineOnly
.1bce					_CHDFoundDefine:
.1bce	68		pla				pla 								; throw saved line number.
.1bcf	68		pla				pla
.1bd0	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1bd2					_CHDOutName:
.1bd2	c8		iny				iny 								; next
.1bd3	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1bd5	48		pha				pha
.1bd6	29 7f		and #$7f			and 	#$7F
.1bd8	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1bdb	68		pla				pla
.1bdc	0a		asl a				asl 	a 							; bit 7 to carry
.1bdd	90 f3		bcc $1bd2			bcc 	_CHDOutName
.1bdf	60		rts				rts
.1be0					FindLine:
.1be0	48		pha				pha 								; save registers
.1be1	da		phx				phx
.1be2	5a		phy				phy
.1be3	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1be5	84 13		sty $13				sty 	temp2+1
.1be7	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1be9	85 10		sta $10				sta 	0+(temp1)
.1beb	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1bed	85 11		sta $11				sta 	1+(temp1)
.1bef					_FLLoop:
.1bef	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1bf1	18		clc				clc									; if so exit with CC.
.1bf2	f0 1d		beq $1c11			beq 	_FLExit
.1bf4	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1bf6	b1 10		lda ($10),y			lda 	(temp1),y
.1bf8	c5 12		cmp $12				cmp 	temp2
.1bfa	d0 08		bne $1c04			bne 	_FLNext
.1bfc	c8		iny				iny
.1bfd	b1 10		lda ($10),y			lda 	(temp1),y
.1bff	c5 13		cmp $13				cmp 	temp2+1
.1c01	38		sec				sec 								; if so exit with CS
.1c02	f0 0d		beq $1c11			beq 	_FLExit
.1c04					_FLNext:
.1c04	18		clc				clc
.1c05	a5 10		lda $10				lda 	temp1
.1c07	72 10		adc ($10)			adc 	(temp1)
.1c09	85 10		sta $10				sta 	temp1
.1c0b	90 02		bcc $1c0f			bcc 	_NoCarryAdv
.1c0d	e6 11		inc $11				inc 	temp1+1
.1c0f					_NoCarryAdv:
.1c0f	80 de		bra $1bef			bra 	_FLLoop 					; keep looking.
.1c11					_FLExit:
.1c11	7a		ply				ply
.1c12	fa		plx				plx
.1c13	68		pla				pla
.1c14	60		rts				rts
.1c15	18		clc				clc
.1c16	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1c17					NewHandler:
.1c17	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1c1a	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1c1d	4c 00 00	jmp $0000			jmp 	NextCode
.1c20					ClrHandler:
.1c20	86 10		stx $10				stx 	temp1
.1c22	a2 80		ldx #$80			ldx 	#NumberStackBase
.1c24	9a		txs				txs
.1c25	a6 10		ldx $10				ldx 	temp1
.1c27	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1c2a	4c 00 00	jmp $0000			jmp 	NextCode
.1c2d					ClearVariableSpace:
.1c2d	a9 ff		lda #$ff			lda 	#$FF
.1c2f	85 05		sta $05				sta 	rsp
.1c31	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c33	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1c35	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c37	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1c39	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1c3b					_CVSHashClear:
.1c3b	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1c3d	99 40 06	sta $0640,y			sta 	hashTable,y
.1c40	88		dey				dey
.1c41	10 f8		bpl $1c3b			bpl 	_CVSHashClear
.1c43					_CVSFindEnd:
.1c43	18		clc				clc
.1c44	a5 0e		lda $0e				lda 	nextFreeMem
.1c46	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1c48	85 0e		sta $0e				sta 	nextFreeMem
.1c4a	90 02		bcc $1c4e			bcc 	_NoCarryAdv
.1c4c	e6 0f		inc $0f				inc 	nextFreeMem+1
.1c4e					_NoCarryAdv:
.1c4e	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1c50	d0 f1		bne $1c43			bne 	_CVSFindEnd
.1c52	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1c54	a0 00		ldy #$00			ldy 	#0
.1c56	20 5a 1c	jsr $1c5a			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1c59	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1c5a					AdvanceFreeMem:
.1c5a	18		clc				clc
.1c5b	65 0e		adc $0e				adc 	nextFreeMem
.1c5d	85 0e		sta $0e				sta 	nextFreeMem
.1c5f	98		tya				tya
.1c60	65 0f		adc $0f				adc 	nextFreeMem+1
.1c62	85 0f		sta $0f				sta 	nextFreeMem+1
.1c64	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1c65					ExitDump:
.1c65	ba		tsx				tsx 								; save Data Stack in temp1
.1c66	86 10		stx $10				stx 	temp1
.1c68	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1c6b					BreakCmd:
>1c6b	ff						.byte 	$FF
.1c6c	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1c6f					DecodeLineIntoBufPtr:
.1c6f	48		pha				pha
.1c70	da		phx				phx
.1c71	5a		phy				phy
.1c72	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1c74	84 09		sty $09				sty 	srcPtr+1
.1c76	90 1b		bcc $1c93			bcc 	_DecodeNoLineNumber
.1c78	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1c7a	b1 08		lda ($08),y			lda 	(srcPtr),y
.1c7c	aa		tax				tax
.1c7d	c8		iny				iny
.1c7e	b1 08		lda ($08),y			lda 	(srcPtr),y
.1c80	a8		tay				tay
.1c81	8a		txa				txa
.1c82	18		clc				clc
.1c83	20 82 1d	jsr $1d82			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1c86	aa		tax				tax 								; count in X
.1c87					_DecodeLineSpace:
.1c87	e0 05		cpx #$05			cpx 	#5
.1c89	f0 08		beq $1c93			beq 	_DecodeNoLineNumber
.1c8b	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1c8d	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1c90	e8		inx				inx
.1c91	80 f4		bra $1c87			bra 	_DecodeLineSpace
.1c93					_DecodeNoLineNumber:
.1c93	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1c95					_DecodeLoop:
.1c95	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1c97	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1c99	c8		iny				iny
.1c9a	b1 08		lda ($08),y			lda 	(srcPtr),y
.1c9c	85 11		sta $11				sta 	temp1+1
.1c9e	c8		iny				iny 								; y points to the byte after it.
.1c9f	a5 10		lda $10				lda 	temp1
.1ca1	c9 46		cmp #$46			cmp 	#NextLine & $FF
.1ca3	d0 06		bne $1cab			bne 	_DecodeNotEOL
.1ca5	a5 11		lda $11				lda 	temp1+1
.1ca7	c9 20		cmp #$20			cmp 	#NextLine >> 8
.1ca9	f0 0b		beq $1cb6			beq 	_DecodeEOL
.1cab					_DecodeNotEOL:
.1cab	20 be 1c	jsr $1cbe			jsr 	IdentifyCodeWord
.1cae	20 0b 1d	jsr $1d0b			jsr 	DecodeFoundWord
.1cb1	20 f5 1c	jsr $1cf5			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1cb4	80 df		bra $1c95			bra 	_DecodeLoop 				; and go round again
.1cb6					_DecodeEOL:
.1cb6	a9 00		lda #$00			lda 	#0
.1cb8	92 0a		sta ($0a)			sta 	(bufPtr)
.1cba	7a		ply				ply 								; restore registers and exit
.1cbb	fa		plx				plx
.1cbc	68		pla				pla
.1cbd	60		rts				rts
.1cbe					IdentifyCodeWord:
.1cbe	5a		phy				phy 								; save current position on the stack.
.1cbf	a9 b6		lda #$b6			lda 	#(Dictionary) & $FF
.1cc1	85 0c		sta $0c				sta 	0+(matchPtr)
.1cc3	a9 22		lda #$22			lda 	#(Dictionary) >> 8
.1cc5	85 0d		sta $0d				sta 	1+(matchPtr)
.1cc7					_DecodeIdentify:
.1cc7	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1cc9	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1ccb	c5 10		cmp $10				cmp 	temp1
.1ccd	d0 07		bne $1cd6			bne 	_DecodeIdNext
.1ccf	c8		iny				iny
.1cd0	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1cd2	c5 11		cmp $11				cmp 	temp1+1
.1cd4	f0 1d		beq $1cf3			beq 	_DecodeIdFound
.1cd6					_DecodeIdNext:
.1cd6	18		clc				clc
.1cd7	b2 0c		lda ($0c)			lda 	(matchPtr)
.1cd9	f0 0a		beq $1ce5			beq 	_DecodeIdIssue
.1cdb	65 0c		adc $0c				adc 	matchPtr
.1cdd	85 0c		sta $0c				sta 	matchPtr
.1cdf	90 e6		bcc $1cc7			bcc 	_DecodeIdentify
.1ce1	e6 0d		inc $0d				inc 	matchPtr+1
.1ce3	80 e2		bra $1cc7			bra 	_DecodeIdentify
.1ce5					_DecodeIdIssue:
.1ce5	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1ce8	44 45 43 4f 44 45 2f 42				.text 	"DECODE/BUG",0
>1cf0	55 47 00
.1cf3					_DecodeIdFound:
.1cf3	7a		ply				ply 								; restore position.
.1cf4	60		rts				rts
.1cf5					AdvanceToNext:
.1cf5	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1cf6	a0 01		ldy #$01			ldy 	#1
.1cf8	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1cfa	29 03		and #$03			and 	#3 							; bits 0-1.
.1cfc	7a		ply				ply
.1cfd	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1cff	d0 02		bne $1d03			bne 	_ATN012
.1d01	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1d03					_ATN012:
.1d03	85 12		sta $12				sta 	temp2 						; now add that to Y
.1d05	98		tya				tya
.1d06	18		clc				clc
.1d07	65 12		adc $12				adc 	temp2
.1d09	a8		tay				tay
.1d0a	60		rts				rts
.1d0b					DecodeFoundWord:
.1d0b	5a		phy				phy 								; save current position
.1d0c	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1d0e	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1d10	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1d12	29 10		and #$10			and 	#$10
.1d14	d0 0e		bne $1d24			bne 	_DFWSpecialDecoder
.1d16	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1d18	30 08		bmi $1d22			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1d1a	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1d1c	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1d1f	20 3d 1d	jsr $1d3d			jsr 	DecodeCurrentWord 			; expand that.
.1d22					_DFWExit:
.1d22	7a		ply				ply 								; restore current position
.1d23	60		rts				rts
.1d24					_DFWSpecialDecoder:
.1d24	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1d26	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1d28	85 12		sta $12				sta 	temp2
.1d2a	c8		iny				iny
.1d2b	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1d2d	85 13		sta $13				sta 	temp2+1
.1d2f	7a		ply				ply 	 							; restore current position into Y
.1d30	48		pha				pha 								; save registers
.1d31	da		phx				phx
.1d32	5a		phy				phy
.1d33	20 3a 1d	jsr $1d3a			jsr 	_DFWCallDecoder				; call the decoder routine
.1d36	7a		ply				ply 								; restore registers and exit
.1d37	fa		plx				plx
.1d38	68		pla				pla
.1d39	60		rts				rts
.1d3a					_DFWCallDecoder:
.1d3a	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1d3d					DecodeCurrentWord:
.1d3d	5a		phy				phy
.1d3e	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1d40	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1d42	a0 04		ldy #$04			ldy 	#4 							; original offset
.1d44	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1d45	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1d46	4a		lsr a				lsr 	a 							; bit set.
.1d47	4a		lsr a				lsr 	a
.1d48	4a		lsr a				lsr 	a 							; decoder bit
.1d49	90 02		bcc $1d4d			bcc 	_DWBNoDec
.1d4b	c8		iny				iny
.1d4c	c8		iny				iny
.1d4d					_DWBNoDec:
.1d4d	4a		lsr a				lsr 	a
.1d4e	90 02		bcc $1d52			bcc 	_DWBNoEnc
.1d50	c8		iny				iny
.1d51	c8		iny				iny
.1d52					_DWBNoEnc:
.1d52					_DWBWordOut:
.1d52	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1d54	48		pha				pha
.1d55	29 7f		and #$7f			and 	#$7F
.1d57	20 60 1d	jsr $1d60			jsr		DecodeWriteBuffer
.1d5a	c8		iny				iny
.1d5b	68		pla				pla
.1d5c	10 f4		bpl $1d52			bpl 	_DWBWordOut
.1d5e	7a		ply				ply 								; restore Y and exit
.1d5f	60		rts				rts
.1d60					DecodeWriteBuffer:
.1d60	92 0a		sta ($0a)			sta 	(bufPtr)
.1d62	e6 0a		inc $0a				inc 	bufPtr
.1d64	d0 02		bne $1d68			bne 	_DWBNoCarry
.1d66	e6 0b		inc $0b				inc 	bufPtr+1
.1d68					_DWBNoCarry:
.1d68	60		rts				rts
.1d69					DecodeOutputData:
.1d69	48		pha				pha
.1d6a	da		phx				phx
.1d6b	5a		phy				phy
.1d6c	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1d6e	aa		tax				tax
.1d6f					_DODLoop:
.1d6f	ca		dex				dex 								; done it all ?
.1d70	f0 0c		beq $1d7e			beq		_DODExit
.1d72	c8		iny				iny 								; output next character
.1d73	b1 08		lda ($08),y			lda 	(srcPtr),y
.1d75	29 7f		and #$7f			and 	#$7F
.1d77	f0 f6		beq $1d6f			beq 	_DODLoop 					; don't print NULL
.1d79	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.1d7c	80 f1		bra $1d6f			bra 	_DODLoop
.1d7e					_DODExit:
.1d7e	7a		ply				ply
.1d7f	fa		plx				plx
.1d80	68		pla				pla
.1d81	60		rts				rts
.1d82					DecodeYAToBuffer:
.1d82	da		phx				phx
.1d83	5a		phy				phy
.1d84	48		pha				pha
.1d85	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1d87	85 12		sta $12				sta 	temp2
.1d89	a5 0b		lda $0b				lda 	bufPtr+1
.1d8b	85 13		sta $13				sta 	temp2+1
.1d8d	68		pla				pla
.1d8e	20 f1 20	jsr $20f1			jsr 	ConvertToStringMain 		; convert YA to string there
.1d91	aa		tax				tax 								; chars output to X
.1d92	18		clc				clc
.1d93	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1d95	85 0a		sta $0a				sta 	bufPtr
.1d97	90 02		bcc $1d9b			bcc 	_DYABNoCarry
.1d99	e6 0b		inc $0b				inc 	bufPtr+1
.1d9b					_DYABNoCarry:
.1d9b	8a		txa				txa 								; count in A
.1d9c	7a		ply				ply									; restore and exit.
.1d9d	fa		plx				plx
.1d9e	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/edit.src

.1d9f					EditProgram:
.1d9f	20 1c 1e	jsr $1e1c			jsr 	EDFindLine					; find line address -> temp1
.1da2	90 0f		bcc $1db3			bcc 	_EPNotFound 				; if missing don't delete it.
.1da4	a5 10		lda $10				lda 	temp1 						; save line address
.1da6	48		pha				pha
.1da7	a5 11		lda $11				lda 	temp1+1
.1da9	48		pha				pha
.1daa	20 c1 1d	jsr $1dc1			jsr 	EDDeleteLine 				; delete the line
.1dad	68		pla				pla 								; restore line address
.1dae	85 11		sta $11				sta 	temp1+1
.1db0	68		pla				pla
.1db1	85 10		sta $10				sta 	temp1
.1db3					_EPNotFound:
.1db3	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1db6	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1db8	f0 03		beq $1dbd			beq 	_EPNoInsert
.1dba	20 e4 1d	jsr $1de4			jsr 	EDInsertLine 				; insert line back in.
.1dbd					_EPNoInsert:
.1dbd	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace
.1dc0	60		rts				rts
.1dc1					EDDeleteLine:
.1dc1	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace
.1dc4	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1dc6	a2 00		ldx #$00			ldx 	#0
.1dc8	b1 10		lda ($10),y			lda 	(temp1),y
.1dca	a8		tay				tay 								; put in Y
.1dcb					_EDDelLoop:
.1dcb	b1 10		lda ($10),y			lda 	(temp1),y 					; get it
.1dcd	81 10		sta ($10,x)			sta 	(temp1,x) 					; write it.
.1dcf	a5 10		lda $10				lda 	temp1 						; check if pointer has reached the end of
.1dd1	c5 0e		cmp $0e				cmp		nextFreeMem 				; low memory. We will have copied down an
.1dd3	d0 06		bne $1ddb			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1dd5	a5 11		lda $11				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1dd7	c5 0f		cmp $0f				cmp 	nextFreeMem+1				; doesn't really matter.
.1dd9	f0 08		beq $1de3			beq		_EDDelExit
.1ddb					_EDDelNext:
.1ddb	e6 10		inc $10				inc 	temp1 						; go to next byte.
.1ddd	d0 ec		bne $1dcb			bne 	_EDDelLoop
.1ddf	e6 11		inc $11				inc 	temp1+1
.1de1	80 e8		bra $1dcb			bra 	_EDDelLoop
.1de3					_EDDelExit:
.1de3	60		rts				rts
.1de4					EDInsertLine:
.1de4	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace
.1de7	a5 0e		lda $0e				lda 	nextFreeMem 				; copy high memory to temp3
.1de9	85 14		sta $14				sta 	temp3
.1deb	a5 0f		lda $0f				lda 	nextFreeMem+1
.1ded	85 15		sta $15				sta 	temp3+1
.1def	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1df2	a2 00		ldx #$00			ldx 	#0
.1df4					_EDInsLoop:
.1df4	a1 14		lda ($14,x)			lda 	(temp3,x)					; copy it up
.1df6	91 14		sta ($14),y			sta 	(temp3),y
.1df8	a5 14		lda $14				lda 	temp3 						; reached the insert point (temp1)
.1dfa	c5 10		cmp $10				cmp 	temp1
.1dfc	d0 06		bne $1e04			bne 	_EDINextShift
.1dfe	a5 15		lda $15				lda 	temp3+1
.1e00	c5 11		cmp $11				cmp 	temp1+1
.1e02	f0 0a		beq $1e0e			beq 	_EDIShiftOver
.1e04					_EDINextShift:
.1e04	a5 14		lda $14				lda 	temp3 						; decrement the copy pointer.
.1e06	d0 02		bne $1e0a			bne 	_EDINoBorrow
.1e08	c6 15		dec $15				dec 	temp3+1
.1e0a					_EDINoBorrow:
.1e0a	c6 14		dec $14				dec 	temp3
.1e0c	80 e6		bra $1df4			bra 	_EDInsLoop
.1e0e					_EDIShiftOver:
.1e0e	a0 00		ldy #$00			ldy 	#0
.1e10					_EDICopyCode:
.1e10	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1e13	91 10		sta ($10),y			sta 	(temp1),y 					; write out
.1e15	c8		iny				iny 								; bump pointers
.1e16	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1e19	d0 f5		bne $1e10			bne 	_EDICopyCode
.1e1b	60		rts				rts
.1e1c					EDFindLine:
.1e1c	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1e1e	85 10		sta $10				sta 	0+(temp1)
.1e20	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1e22	85 11		sta $11				sta 	1+(temp1)
.1e24					_EDFLLoop:
.1e24	b2 10		lda ($10)			lda 	(temp1) 					; check offset
.1e26	f0 24		beq $1e4c			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1e28	a0 01		ldy #$01			ldy 	#1							; look at line #
.1e2a	38		sec				sec
.1e2b	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1e2e	f1 10		sbc ($10),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1e30	aa		tax				tax	 								; this will return 10.
.1e31	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1e34	c8		iny				iny
.1e35	f1 10		sbc ($10),y			sbc 	(temp1),y
.1e37	90 13		bcc $1e4c			bcc 	_EDFLFail					; if target < current then failed.
.1e39	d0 04		bne $1e3f			bne 	_EDFLNext 					; if non-zero then goto next
.1e3b	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1e3d	f0 0f		beq $1e4e			beq 	_EDFLFound
.1e3f					_EDFLNext:
.1e3f	18		clc				clc
.1e40	a5 10		lda $10				lda 	temp1
.1e42	72 10		adc ($10)			adc 	(temp1)
.1e44	85 10		sta $10				sta 	temp1
.1e46	90 02		bcc $1e4a			bcc 	_NoCarryAdv
.1e48	e6 11		inc $11				inc 	temp1+1
.1e4a					_NoCarryAdv:
.1e4a	80 d8		bra $1e24			bra 	_EDFLLoop
.1e4c					_EDFLFail:
.1e4c	18		clc				clc
.1e4d	60		rts				rts
.1e4e					_EDFLFound:
.1e4e	38		sec				sec
.1e4f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1e50					ListCode:
.1e50	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1e52	64 1f		stz $1f				stz 	ListLowest+1
.1e54	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1e56	85 1d		sta $1d				sta 	ListCount
.1e58	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1e5a	85 18		sta $18				sta 	0+(listPtr)
.1e5c	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1e5e	85 19		sta $19				sta 	1+(listPtr)
.1e60	86 10		stx $10				stx 	temp1						; S->A
.1e62	ba		tsx				tsx
.1e63	8a		txa				txa
.1e64	a6 10		ldx $10				ldx 	temp1
.1e66	c9 80		cmp #$80			cmp 	#NumberStackBase
.1e68	f0 0e		beq $1e78			beq 	_LCLoop
.1e6a	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1e6c	85 1e		sta $1e				sta 	ListLowest
.1e6e	a5 07		lda $07				lda 	TOS+1
.1e70	85 1f		sta $1f				sta 	ListLowest+1
.1e72	68		pla				pla
.1e73	85 07		sta $07				sta 	TOS+1
.1e75	68		pla				pla
.1e76	85 06		sta $06				sta 	TOS
.1e78					_LCLoop:
.1e78	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1e7a	f0 4e		beq $1eca			beq 	_LCExit
.1e7c	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1e7e	b1 18		lda ($18),y			lda 	(listPtr),y
.1e80	c5 1e		cmp $1e				cmp 	ListLowest
.1e82	c8		iny				iny
.1e83	b1 18		lda ($18),y			lda 	(listPtr),y
.1e85	e5 1f		sbc $1f				sbc 	ListLowest+1
.1e87	90 34		bcc $1ebd			bcc 	_LCNext
.1e89	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e8b	85 0a		sta $0a				sta 	0+(bufPtr)
.1e8d	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e8f	85 0b		sta $0b				sta 	1+(bufPtr)
.1e91	a5 18		lda $18				lda 	listPtr 					; output the line.
.1e93	a4 19		ldy $19				ldy 	listPtr+1
.1e95	38		sec				sec
.1e96	20 6f 1c	jsr $1c6f			jsr 	DecodeLineIntoBufPtr
.1e99	a9 02		lda #$02			lda 	#CTH_LineNo
.1e9b	20 68 11	jsr $1168			jsr 	ExternColour
.1e9e	a0 ff		ldy #$ff			ldy 	#255
.1ea0					_LCLoop2:
.1ea0	c8		iny				iny
.1ea1	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1ea4	f0 0e		beq $1eb4			beq 	_LCEnd
.1ea6	c9 20		cmp #$20			cmp 	#32
.1ea8	b0 05		bcs $1eaf			bcs 	_LCPrint
.1eaa	20 68 11	jsr $1168			jsr 	ExternColour
.1ead	a9 20		lda #$20			lda 	#32
.1eaf					_LCPrint:
.1eaf	20 5e 11	jsr $115e			jsr 	ExternPrint
.1eb2	80 ec		bra $1ea0			bra 	_LCLoop2
.1eb4	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1eb6	20 5e 11	jsr $115e			jsr 	ExternPrint
.1eb9	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1ebb	f0 0d		beq $1eca			beq 	_LCExit
.1ebd					_LCNext:
.1ebd	18		clc				clc
.1ebe	a5 18		lda $18				lda 	listPtr
.1ec0	72 18		adc ($18)			adc 	(listPtr)
.1ec2	85 18		sta $18				sta 	listPtr
.1ec4	90 02		bcc $1ec8			bcc 	_NoCarryAdv
.1ec6	e6 19		inc $19				inc 	listPtr+1
.1ec8					_NoCarryAdv:
.1ec8	80 ae		bra $1e78			bra 	_LCLoop 					; go round again.
.1eca					_LCExit:
.1eca	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1ecd					RunProgram:
.1ecd	86 10		stx $10				stx 	temp1
.1ecf	a2 80		ldx #$80			ldx 	#NumberStackBase
.1ed1	9a		txs				txs
.1ed2	a6 10		ldx $10				ldx 	temp1
.1ed4	20 2d 1c	jsr $1c2d			jsr 	ClearVariableSpace 			; clear variables etc.
.1ed7	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1ed9	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1edb	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1ede	4c 00 00	jmp $0000			jmp 	NextCode
.1ee1					Call6502:
.1ee1	a5 06		lda $06				lda 	TOS 						; copy call address
.1ee3	85 10		sta $10				sta 	temp1
.1ee5	a5 07		lda $07				lda 	TOS+1
.1ee7	85 11		sta $11				sta 	temp1+1
.1ee9	68		pla				pla
.1eea	85 07		sta $07				sta 	TOS+1
.1eec	68		pla				pla
.1eed	85 06		sta $06				sta 	TOS
.1eef	20 f5 1e	jsr $1ef5			jsr 	_CallTemp1 					; call it
.1ef2	4c 00 00	jmp $0000			jmp 	NextCode
.1ef5					_CallTemp1:
.1ef5	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1ef8					AssertCode:
.1ef8	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1efa	05 07		ora $07				ora 	TOS+1
.1efc	f0 09		beq $1f07			beq 	_ASFail 					; if zero fail
.1efe	68		pla				pla
.1eff	85 07		sta $07				sta 	TOS+1
.1f01	68		pla				pla
.1f02	85 06		sta $06				sta 	TOS
.1f04	4c 00 00	jmp $0000			jmp 	NextCode
.1f07					_ASFail:
.1f07	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1f0a	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1f11					StopCode:
.1f11	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1f14	53 54 4f 50 00					.text 	"STOP",0
.1f19					EndProgram:
.1f19	4c 14 10	jmp $1014			jmp 	WarmStart
.1f1c					VlistCode:
.1f1c	a9 b6		lda #$b6			lda 	#(Dictionary) & $FF
.1f1e	85 10		sta $10				sta 	0+(temp1)
.1f20	a9 22		lda #$22			lda 	#(Dictionary) >> 8
.1f22	85 11		sta $11				sta 	1+(temp1)
.1f24	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1f26	b1 10		lda ($10),y			lda 	(temp1),y
.1f28	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1f2a	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1f2b	4a		lsr a				lsr 	a
.1f2c	4a		lsr a				lsr		a
.1f2d	4a		lsr a				lsr 	a
.1f2e	4a		lsr a				lsr 	a 							; add those bits in
.1f2f	90 02		bcc $1f33			bcc 	_VLNoDec
.1f31	c8		iny				iny
.1f32	c8		iny				iny
.1f33					_VLNoDec:
.1f33	4a		lsr a				lsr 	a
.1f34	90 02		bcc $1f38			bcc 	_VLNoEnc
.1f36	c8		iny				iny
.1f37	c8		iny				iny
.1f38					_VLNoEnc:
.1f38	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1f3a	c9 24		cmp #$24			cmp 	#"$"
.1f3c	d0 06		bne $1f44			bne 	_VLPrint
.1f3e	c8		iny				iny
.1f3f	51 10		eor ($10),y			eor 	(temp1),y
.1f41	f0 13		beq $1f56			beq 	_VLNext
.1f43	88		dey				dey
.1f44					_VLPrint:
.1f44	b1 10		lda ($10),y			lda 	(temp1),y
.1f46	48		pha				pha
.1f47	c8		iny				iny
.1f48	29 7f		and #$7f			and 	#$7F
.1f4a	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f4d	68		pla				pla
.1f4e	0a		asl a				asl 	a
.1f4f	90 f3		bcc $1f44			bcc 	_VLPrint
.1f51	a9 20		lda #$20			lda 	#32
.1f53	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f56					_VLNext:
.1f56	18		clc				clc 								; go to next
.1f57	b2 10		lda ($10)			lda 	(temp1)
.1f59	65 10		adc $10				adc 	temp1
.1f5b	85 10		sta $10				sta 	temp1
.1f5d	90 02		bcc $1f61			bcc 	_VLNoCarry
.1f5f	e6 11		inc $11				inc 	temp1+1
.1f61					_VLNoCarry:
.1f61	b2 10		lda ($10)			lda 	(temp1)
.1f63	d0 bf		bne $1f24			bne 	_VLLoop
.1f65	a9 0d		lda #$0d			lda 	#13
.1f67	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f6a	4c 00 00	jmp $0000			jmp 	NextCode
.1f6d					DumpStack:
.1f6d	a9 5b		lda #$5b			lda		#"["
.1f6f	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f72	86 10		stx $10				stx 	temp1 						; X -> A
.1f74	ba		tsx				tsx
.1f75	8a		txa				txa
.1f76	a6 10		ldx $10				ldx 	temp1
.1f78	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.1f7a	f0 2f		beq $1fab			beq 	_DSExit
.1f7c	48		pha				pha 								; save it
.1f7d	a9 07		lda #$07			lda 	#COL_WHITE
.1f7f	20 68 11	jsr $1168			jsr 	ExternColour
.1f82	a5 06		lda $06				lda 	TOS 						; print TOS then stack values backwards
.1f84	a4 07		ldy $07				ldy 	TOS+1
.1f86	38		sec				sec 								; print unsigned.
.1f87	20 cb 20	jsr $20cb			jsr 	PrintYA
.1f8a	a9 06		lda #$06			lda 	#COL_CYAN
.1f8c	20 68 11	jsr $1168			jsr 	ExternColour
.1f8f	7a		ply				ply 								; restore offset
.1f90					_DSLoop:
.1f90	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.1f92	f0 17		beq $1fab			beq 	_DSExit
.1f94	a9 20		lda #$20			lda 	#" " 						; space
.1f96	20 5e 11	jsr $115e			jsr 	ExternPrint
.1f99	5a		phy				phy 								; save pos
.1f9a	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.1f9d	48		pha				pha
.1f9e	b9 02 01	lda $0102,y			lda 	$0102,y
.1fa1	7a		ply				ply
.1fa2	38		sec				sec
.1fa3	20 cb 20	jsr $20cb			jsr 	PrintYA 					; print it
.1fa6	7a		ply				ply 								; restore and advance pos
.1fa7	c8		iny				iny
.1fa8	c8		iny				iny
.1fa9	80 e5		bra $1f90			bra 	_DSLoop
.1fab					_DSExit:
.1fab	a9 5d		lda #$5d			lda		#"]"
.1fad	20 5e 11	jsr $115e			jsr 	ExternPrint
.1fb0	a9 0d		lda #$0d			lda 	#13
.1fb2	20 5e 11	jsr $115e			jsr 	ExternPrint
.1fb5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1fb8					ConvertToInteger:
.1fb8	84 17		sty $17				sty 	temp4+1
.1fba	85 16		sta $16				sta 	temp4
.1fbc	64 14		stz $14				stz 	temp3 						; reset value
.1fbe	64 15		stz $15				stz 	temp3+1
.1fc0	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1fc2	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1fc4	b1 16		lda ($16),y			lda 	(temp4),y
.1fc6	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1fc8	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1fca	d0 01		bne $1fcd			bne 	_CTINotMinus
.1fcc	c8		iny				iny									; skip -
.1fcd					_CTINotMinus:
.1fcd	b1 16		lda ($16),y			lda 	(temp4),y
.1fcf	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1fd1	d0 03		bne $1fd6			bne 	_CTILoop
.1fd3	c6 10		dec $10				dec 	temp1
.1fd5	c8		iny				iny
.1fd6					_CTILoop:
.1fd6	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1fd8	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1fda	38		sec				sec
.1fdb	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1fdd	90 65		bcc $2044			bcc 	_CTIFail 					; out of range.
.1fdf	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1fe1	90 0b		bcc $1fee			bcc 	_CTILegal
.1fe3	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1fe5	90 5d		bcc $2044			bcc 	_CTIFail
.1fe7	38		sec				sec
.1fe8	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1fea	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1fec	b0 56		bcs $2044			bcs 	_CTIFail
.1fee					_CTILegal:
.1fee	48		pha				pha 								; save digit value.
.1fef	06 14		asl $14				asl 	temp3
.1ff1	26 15		rol $15				rol 	temp3+1
.1ff3	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1ff5	85 12		sta $12				sta 	temp2
.1ff7	a5 15		lda $15				lda 	temp3+1
.1ff9	85 13		sta $13				sta 	temp2+1
.1ffb	06 14		asl $14				asl 	temp3
.1ffd	26 15		rol $15				rol 	temp3+1
.1fff	06 14		asl $14				asl 	temp3
.2001	26 15		rol $15				rol 	temp3+1
.2003	24 10		bit $10				bit 	temp1 						; hexadecimal
.2005	10 07		bpl $200e			bpl 	_CTIDecimal
.2007	06 14		asl $14				asl 	temp3
.2009	26 15		rol $15				rol 	temp3+1
.200b	68		pla				pla 								; get digit back
.200c	80 12		bra $2020			bra 	_CTIAddLoop
.200e					_CTIDecimal:
.200e	18		clc				clc 								; x 8 + x 2 = x 10
.200f	a5 14		lda $14				lda 	temp3
.2011	65 12		adc $12				adc 	temp2
.2013	85 14		sta $14				sta 	temp3
.2015	a5 15		lda $15				lda 	temp3+1
.2017	65 13		adc $13				adc 	temp2+1
.2019	85 15		sta $15				sta 	temp3+1
.201b	68		pla				pla 								; check digit 0-9
.201c	c9 0a		cmp #$0a			cmp 	#10
.201e	b0 24		bcs $2044			bcs 	_CTIFail
.2020					_CTIAddLoop:
.2020	18		clc				clc
.2021	65 14		adc $14				adc 	temp3
.2023	85 14		sta $14				sta 	temp3
.2025	90 02		bcc $2029			bcc 	_CTINoCarry
.2027	e6 15		inc $15				inc 	temp3+1
.2029					_CTINoCarry:
.2029	c8		iny				iny
.202a	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.202c	c9 21		cmp #$21			cmp 	#32+1
.202e	b0 a6		bcs $1fd6			bcs 	_CTILoop 					; no, go back.
.2030	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.2032	d0 0d		bne $2041			bne 	_CTIOkay
.2034	38		sec				sec
.2035	a9 00		lda #$00			lda 	#0 							; negate temp3.
.2037	e5 14		sbc $14				sbc 	temp3
.2039	85 14		sta $14				sta 	temp3
.203b	a9 00		lda #$00			lda 	#0
.203d	e5 15		sbc $15				sbc 	temp3+1
.203f	85 15		sta $15				sta 	temp3+1
.2041					_CTIOkay:
.2041	98		tya				tya
.2042	38		sec				sec
.2043	60		rts				rts
.2044					_CTIFail:
.2044	18		clc				clc
.2045	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.2046					NextLine:
.2046	18		clc				clc
.2047	a5 03		lda $03				lda 	IP
.2049	72 03		adc ($03)			adc 	(IP)
.204b	85 03		sta $03				sta 	IP
.204d	90 02		bcc $2051			bcc 	_NoCarryAdv
.204f	e6 04		inc $04				inc 	IP+1
.2051					_NoCarryAdv:
.2051	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.2053	f0 05		beq $205a			beq 	_NLGoEnd
.2055	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.2057	4c 00 00	jmp $0000			jmp 	NextCode
.205a					_NLGoEnd:
.205a	4c 14 10	jmp $1014			jmp 	WarmStart
.205d					SkipComment:
.205d	e8		inx				inx									; (IP),X points to the length.
.205e	e8		inx				inx
.205f	8a		txa				txa
.2060	a8		tay				tay 								; put into Y
.2061	18		clc				clc
.2062	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.2064	aa		tax				tax 								; put back in X
.2065	ca		dex				dex
.2066	ca		dex				dex
.2067	4c 00 00	jmp $0000			jmp 	NextCode
.206a					CommentDecoder:
.206a	a9 06		lda #$06			lda 	#CTH_Keyword
.206c	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.206f	a9 27		lda #$27			lda 	#"'"
.2071	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.2074	b1 08		lda ($08),y			lda 	(srcPtr),y 					; check if there is no data
.2076	c9 01		cmp #$01			cmp 	#1
.2078	f0 0d		beq $2087			beq 	_CDEmpty 					; if so print nothing.
.207a	a9 0b		lda #$0b			lda 	#CTH_Comment
.207c	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.207f	20 69 1d	jsr $1d69			jsr 	DecodeOutputData
.2082	a9 20		lda #$20			lda 	#32
.2084	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.2087					_CDEmpty
.2087	60		rts				rts
.2088					DefineCode:
.2088	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>208b	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>2093	44 45 46 49 4e 49 54 49 4f 4e 00
.209e					DefineDecoder:
.209e	a9 07		lda #$07			lda 	#CTH_Definition
.20a0	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.20a3	a9 3a		lda #$3a			lda 	#":"
.20a5	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.20a8	20 69 1d	jsr $1d69			jsr 	DecodeOutputData
.20ab	a9 20		lda #$20			lda 	#32
.20ad	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.20b0	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.20b1					IntToString:
.20b1	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.20b3	85 12		sta $12				sta 	0+(temp2)
.20b5	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.20b7	85 13		sta $13				sta 	1+(temp2)
.20b9	a5 06		lda $06				lda 	TOS 						; value in YA
.20bb	a4 07		ldy $07				ldy 	TOS+1
.20bd	20 ed 20	jsr $20ed			jsr 	ConvertToString
.20c0	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.20c2	85 06		sta $06				sta 	0+(TOS)
.20c4	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.20c6	85 07		sta $07				sta 	1+(TOS)
.20c8	4c 00 00	jmp $0000			jmp 	NextCode
.20cb					PrintYA:
.20cb	48		pha				pha
.20cc	da		phx				phx
.20cd	5a		phy				phy
.20ce	48		pha				pha
.20cf	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.20d1	85 12		sta $12				sta 	0+(temp2)
.20d3	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.20d5	85 13		sta $13				sta 	1+(temp2)
.20d7	68		pla				pla
.20d8	20 f1 20	jsr $20f1			jsr 	ConvertToStringMain
.20db	a2 00		ldx #$00			ldx 	#0
.20dd					_PrintYALoop:
.20dd	bd 10 08	lda $0810,x			lda 	textBuffer,x
.20e0	20 5e 11	jsr $115e			jsr 	ExternPrint
.20e3	e8		inx				inx
.20e4	bd 10 08	lda $0810,x			lda 	textBuffer,x
.20e7	d0 f4		bne $20dd			bne 	_PrintYALoop
.20e9	7a		ply				ply
.20ea	fa		plx				plx
.20eb	68		pla				pla
.20ec	60		rts				rts
.20ed					ConvertToString:
.20ed	38		sec				sec
.20ee	80 01		bra $20f1			bra 	ConvertToStringMain
.20f0					ConvertToStringUnsigned:
.20f0	18		clc				clc
.20f1					ConvertToStringMain:
.20f1	da		phx				phx									; save XY
.20f2	5a		phy				phy
.20f3	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.20f5	85 10		sta $10				sta 	temp1 						; save YA in temp1
.20f7	84 11		sty $11				sty 	temp1+1
.20f9	a0 00		ldy #$00			ldy 	#0 							; index to result.
.20fb	90 16		bcc $2113			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.20fd	a5 11		lda $11				lda 	temp1+1 					; is it negative
.20ff	10 12		bpl $2113			bpl 	_CTSUnsigned
.2101	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.2103	91 12		sta ($12),y			sta 	(temp2),y
.2105	c8		iny				iny
.2106	38		sec				sec 								; negate temp1
.2107	a9 00		lda #$00			lda 	#0
.2109	e5 10		sbc $10				sbc 	temp1
.210b	85 10		sta $10				sta 	temp1
.210d	a9 00		lda #$00			lda 	#0
.210f	e5 11		sbc $11				sbc 	temp1+1
.2111	85 11		sta $11				sta 	temp1+1
.2113					_CTSUnsigned:
.2113	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.2115					_CTSLoop:
.2115	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.2117	91 12		sta ($12),y			sta 	(temp2),y
.2119					_CTSSubLoop:
.2119	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.211b	1a		inc a				inc 	a
.211c	91 12		sta ($12),y			sta 	(temp2),y
.211e	38		sec				sec 								; do subtraction saving interim result
.211f	a5 10		lda $10				lda 	temp1
.2121	fd 54 21	sbc $2154,x			sbc 	_CTSTable,x
.2124	48		pha				pha
.2125	a5 11		lda $11				lda 	temp1+1
.2127	fd 55 21	sbc $2155,x			sbc 	_CTSTable+1,x
.212a	90 07		bcc $2133			bcc 	_CTSCantSubtract 			; end of subtraction.
.212c	85 11		sta $11				sta 	temp1+1 					; save result back
.212e	68		pla				pla
.212f	85 10		sta $10				sta 	temp1
.2131	80 e6		bra $2119			bra 	_CTSSubLoop
.2133					_CTSCantSubtract:
.2133	68		pla				pla 								; throw away interim
.2134	e8		inx				inx 								; next subtractor
.2135	e8		inx				inx
.2136	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.2138	49 30		eor #$30			eor 	#"0"
.213a	05 1a		ora $1a				ora 	SignCount
.213c	85 1a		sta $1a				sta 	SignCount
.213e	f0 01		beq $2141			beq		_CTSLZ 						; if all zeros so far suppress.
.2140	c8		iny				iny 								; next character
.2141					_CTSLZ:
.2141	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.2143	d0 d0		bne $2115			bne 	_CTSLoop
.2145					_CTSComplete:
.2145	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.2147	09 30		ora #$30			ora 	#48 						; ASCII
.2149	91 12		sta ($12),y			sta 	(temp2),y					; write out
.214b	c8		iny				iny
.214c	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.214e	91 12		sta ($12),y			sta 	(temp2),y
.2150	98		tya				tya 								; size in A
.2151	7a		ply				ply									; pull and exit.
.2152	fa		plx				plx
.2153	60		rts				rts
.2154					_CTSTable:
>2154	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.215c					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.215c					VarAddressHandler:
.215c	18		clc				clc 								; find variable, error if it doesn't exist.
.215d	20 ae 21	jsr $21ae			jsr 	VariableFind
.2160	a5 06		lda $06				lda 	TOS
.2162	48		pha				pha
.2163	a5 07		lda $07				lda 	TOS+1
.2165	48		pha				pha
.2166	a5 10		lda $10				lda 	temp1 						; the address is the new value
.2168	85 06		sta $06				sta 	TOS
.216a	a5 11		lda $11				lda		temp1+1
.216c	85 07		sta $07				sta 	TOS+1
.216e	4c 00 00	jmp $0000			jmp 	NextCode
.2171					VarAddrHandlerDecode:
.2171	a9 26		lda #$26			lda 	#"&"
.2173	4c 63 22	jmp $2263			jmp 	VarHandlerDecode
.2176					VarReadHandler:
.2176	18		clc				clc 								; find variable, error if it doesn't exist.
.2177	20 ae 21	jsr $21ae			jsr 	VariableFind
.217a	a5 06		lda $06				lda 	TOS
.217c	48		pha				pha
.217d	a5 07		lda $07				lda 	TOS+1
.217f	48		pha				pha
.2180	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.2182	85 06		sta $06				sta 	TOS
.2184	a0 01		ldy #$01			ldy 	#1
.2186	b1 10		lda ($10),y			lda 	(temp1),y
.2188	85 07		sta $07				sta 	TOS+1
.218a	4c 00 00	jmp $0000			jmp 	NextCode
.218d					VarReadHandlerDecode:
.218d	a9 40		lda #$40			lda 	#"@"
.218f	4c 63 22	jmp $2263			jmp 	VarHandlerDecode
.2192					VarWriteHandler:
.2192	38		sec				sec 								; find variable, create it if it doesn't exist.
.2193	20 ae 21	jsr $21ae			jsr 	VariableFind
.2196	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.2198	92 10		sta ($10)			sta 	(temp1)
.219a	a5 07		lda $07				lda 	TOS+1
.219c	a0 01		ldy #$01			ldy 	#1
.219e	91 10		sta ($10),y			sta 	(temp1),y
.21a0	68		pla				pla
.21a1	85 07		sta $07				sta 	TOS+1
.21a3	68		pla				pla
.21a4	85 06		sta $06				sta 	TOS
.21a6	4c 00 00	jmp $0000			jmp 	NextCode
.21a9					VarWriteHandlerDecode:
.21a9	a9 21		lda #$21			lda 	#"!"
.21ab	4c 63 22	jmp $2263			jmp 	VarHandlerDecode
.21ae					VariableFind:
.21ae	08		php				php 								; save autocreate flag.
.21af	e8		inx				inx 								; advance to/over the variable name.
.21b0	e8		inx				inx
.21b1	8a		txa				txa 								; put in Y
.21b2	a8		tay				tay
.21b3	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.21b5	85 12		sta $12				sta 	temp2
.21b7	c8		iny				iny
.21b8	b1 03		lda ($03),y			lda 	(IP),y
.21ba	85 13		sta $13				sta 	temp2+1
.21bc	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.21be	b0 0f		bcs $21cf			bcs 	_VFLong
.21c0	a5 13		lda $13				lda 	temp2+1
.21c2	d0 0b		bne $21cf			bne 	_VFLong
.21c4	a5 12		lda $12				lda 	temp2						; this is the index
.21c6	0a		asl a				asl 	a 							; double it
.21c7	85 10		sta $10				sta 	temp1
.21c9	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.21cb	85 11		sta $11				sta 	temp1+1
.21cd	28		plp				plp 								; throw creation flag, it always exists.
.21ce	60		rts				rts
.21cf					_VFLong:
.21cf	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.21d1	6a		ror a				ror 	a
.21d2	6a		ror a				ror 	a
.21d3	6a		ror a				ror 	a
.21d4	6a		ror a				ror 	a
.21d5	45 12		eor $12				eor 	temp2
.21d7	45 13		eor $13				eor 	temp2+1
.21d9	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.21db	0a		asl a				asl 	a
.21dc	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.21de	85 10		sta $10				sta 	temp1
.21e0	85 14		sta $14				sta 	temp3
.21e2	a9 06		lda #$06			lda 	#hashTable >> 8
.21e4	85 11		sta $11				sta 	temp1+1
.21e6	85 15		sta $15				sta 	temp3+1
.21e8					_VFSearch:
.21e8	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.21ea	b1 10		lda ($10),y			lda 	(temp1),y
.21ec	f0 23		beq $2211			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.21ee	a8		tay				tay 								; follow the link through.
.21ef	b2 10		lda ($10)			lda 	(temp1)
.21f1	85 10		sta $10				sta 	temp1
.21f3	84 11		sty $11				sty 	temp1+1
.21f5	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.21f7	b1 10		lda ($10),y			lda 	(temp1),y
.21f9	c5 12		cmp $12				cmp 	temp2
.21fb	d0 eb		bne $21e8			bne 	_VFSearch 					; if it doesn't, follow the next link.
.21fd	c8		iny				iny 								; same for 2nd byte of name
.21fe	b1 10		lda ($10),y			lda 	(temp1),y
.2200	c5 13		cmp $13				cmp 	temp2+1
.2202	d0 e4		bne $21e8			bne 	_VFSearch
.2204	18		clc				clc
.2205	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.2207	69 02		adc #$02			adc 	#2
.2209	85 10		sta $10				sta 	temp1
.220b	90 02		bcc $220f			bcc 	_VFNoPage1
.220d	e6 11		inc $11				inc 	temp1+1
.220f					_VFNoPage1:
.220f	28		plp				plp 								; don't need to worry about creation flag
.2210	60		rts				rts
.2211					_VFNotFound:
.2211	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.2212	b0 14		bcs $2228			bcs 	_VFCreate
.2214	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>2217	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>221f	56 41 52 49 41 42 4c 45 00
.2228					_VFCreate:
.2228	a0 01		ldy #$01			ldy 	#1
.222a	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.222c	92 0e		sta ($0e)			sta 	(nextFreeMem)
.222e	b1 14		lda ($14),y			lda 	(temp3),y
.2230	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2232	c8		iny				iny
.2233	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.2235	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2237	c8		iny				iny
.2238	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.223a	c8		iny				iny
.223b	a5 12		lda $12				lda 	temp2 						; copy the name out
.223d	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.223f	c8		iny				iny
.2240	a5 13		lda $13				lda 	temp2+1
.2242	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2244	a0 01		ldy #$01			ldy 	#1
.2246	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.2248	92 14		sta ($14)			sta 	(temp3)
.224a	a5 0f		lda $0f				lda 	nextFreeMem+1
.224c	91 14		sta ($14),y			sta 	(temp3),y
.224e	18		clc				clc
.224f	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.2251	69 02		adc #$02			adc 	#2
.2253	85 10		sta $10				sta 	temp1
.2255	a5 0f		lda $0f				lda 	nextFreeMem+1
.2257	69 00		adc #$00			adc 	#0
.2259	85 11		sta $11				sta 	temp1+1
.225b	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.225d	a0 00		ldy #$00			ldy 	#0
.225f	20 5a 1c	jsr $1c5a			jsr 	AdvanceFreeMem
.2262	60		rts				rts
.2263					VarHandlerDecode:
.2263	48		pha				pha 								; save, leading space
.2264	a9 07		lda #$07			lda 	#CTH_Variable
.2266	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.2269	68		pla				pla 								; restore and write type
.226a	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.226d	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.226f	85 10		sta $10				sta 	temp1
.2271	c8		iny				iny
.2272	b1 08		lda ($08),y			lda 	(srcPtr),y
.2274	85 11		sta $11				sta 	temp1+1
.2276	a5 10		lda $10				lda 	temp1 						; output the first character
.2278	29 1f		and #$1f			and 	#31
.227a	20 a5 22	jsr $22a5			jsr 	VHOutVarChar
.227d	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.227f					_VHDShift:
.227f	46 11		lsr $11				lsr 	temp1+1
.2281	66 10		ror $10				ror 	temp1
.2283	ca		dex				dex
.2284	d0 f9		bne $227f			bne 	_VHDShift
.2286	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.2288					_VHDDiv40:
.2288	e8		inx				inx
.2289	38		sec				sec
.228a	a5 10		lda $10				lda 	temp1
.228c	e9 28		sbc #$28			sbc 	#40
.228e	a8		tay				tay
.228f	a5 11		lda $11				lda 	temp1+1
.2291	e9 00		sbc #$00			sbc 	#0
.2293	90 06		bcc $229b			bcc 	_VHDivDone
.2295	85 11		sta $11				sta 	temp1+1
.2297	84 10		sty $10				sty 	temp1
.2299	80 ed		bra $2288			bra 	_VHDDiv40
.229b					_VHDivDone:
.229b	a5 10		lda $10				lda 	temp1 						; remainder
.229d	20 a5 22	jsr $22a5			jsr 	VHOutVarChar
.22a0	8a		txa				txa
.22a1	20 a5 22	jsr $22a5			jsr 	VHOutVarChar 				; and result.
.22a4	60		rts				rts
.22a5					VHOutVarChar:
.22a5	c9 00		cmp #$00			cmp 	#0
.22a7	f0 0c		beq $22b5			beq 	_VHOExit
.22a9	18		clc				clc
.22aa	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.22ac	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.22ae	90 02		bcc $22b2			bcc 	_VHOOut
.22b0	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.22b2					_VHOOut:
.22b2	20 60 1d	jsr $1d60			jsr 	DecodeWriteBuffer
.22b5					_VHOExit:
.22b5	60		rts				rts

;******  Return to file: kernel.asm

.22b6					Dictionary:

;******  Processing file: generated/dictionary.inc

>22b6	05					.byte	_end1-*
>22b7	00					.byte	$00
>22b8	4f 16					.word	WordWrite
>22ba	a1					.byte	$a1
.22bb					_end1:
>22bb	10					.byte	_end2-*
>22bc	52					.byte	$52
>22bd	92 21					.word	VarWriteHandler
>22bf	a9 21					.word	VarWriteHandlerDecode
>22c1	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>22c9	45 d2
.22cb					_end2:
>22cb	10					.byte	_end3-*
>22cc	52					.byte	$52
>22cd	5c 21					.word	VarAddressHandler
>22cf	71 21					.word	VarAddrHandlerDecode
>22d1	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>22d9	45 d2
.22db					_end3:
>22db	10					.byte	_end4-*
>22dc	52					.byte	$52
>22dd	76 21					.word	VarReadHandler
>22df	8d 21					.word	VarReadHandlerDecode
>22e1	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>22e9	45 d2
.22eb					_end4:
>22eb	0c					.byte	_end5-*
>22ec	52					.byte	$52
>22ed	bd 1a					.word	CallHandler
>22ef	96 1b					.word	CallHandlerDecode
>22f1	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.22f7					_end5:
>22f7	0f					.byte	_end6-*
>22f8	53					.byte	$53
>22f9	5d 20					.word	SkipComment
>22fb	6a 20					.word	CommentDecoder
>22fd	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>2305	d4
.2306					_end6:
>2306	0e					.byte	_end7-*
>2307	53					.byte	$53
>2308	88 20					.word	DefineCode
>230a	9e 20					.word	DefineDecoder
>230c	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2314					_end7:
>2314	0f					.byte	_end8-*
>2315	52					.byte	$52
>2316	a6 10					.word	Literal2Byte
>2318	bc 10					.word	Literal2ByteDecode
>231a	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2322	cc
.2323					_end8:
>2323	0e					.byte	_end9-*
>2324	80					.byte	$80
>2325	46 20					.word	NextLine
>2327	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>232f	4e c5
.2331					_end9:
>2331	0e					.byte	_end10-*
>2332	53					.byte	$53
>2333	ce 10					.word	LiteralString
>2335	ed 10					.word	LiteralStringDecoder
>2337	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.233f					_end10:
>233f	05					.byte	_end11-*
>2340	00					.byte	$00
>2341	cb 13					.word	Multiply16x16
>2343	aa					.byte	$aa
.2344					_end11:
>2344	05					.byte	_end12-*
>2345	00					.byte	$00
>2346	38 12					.word	Add
>2348	ab					.byte	$ab
.2349					_end12:
>2349	06					.byte	_end13-*
>234a	00					.byte	$00
>234b	60 16					.word	WordAdd
>234d	2b a1					.byte	$2b,$a1
.234f					_end13:
>234f	05					.byte	_end14-*
>2350	00					.byte	$00
>2351	47 12					.word	Subtract
>2353	ad					.byte	$ad
.2354					_end14:
>2354	06					.byte	_end15-*
>2355	00					.byte	$00
>2356	07 15					.word	ConstantMinus1
>2358	2d b1					.byte	$2d,$b1
.235a					_end15:
>235a	06					.byte	_end16-*
>235b	00					.byte	$00
>235c	6d 1f					.word	DumpStack
>235e	2e ae					.byte	$2e,$ae
.2360					_end16:
>2360	05					.byte	_end17-*
>2361	00					.byte	$00
>2362	1c 13					.word	Divide16x16
>2364	af					.byte	$af
.2365					_end17:
>2365	05					.byte	_end18-*
>2366	00					.byte	$00
>2367	fa 14					.word	Constant0
>2369	b0					.byte	$b0
.236a					_end18:
>236a	06					.byte	_end19-*
>236b	00					.byte	$00
>236c	60 14					.word	CheckMinus
>236e	30 bc					.byte	$30,$bc
.2370					_end19:
>2370	06					.byte	_end20-*
>2371	00					.byte	$00
>2372	74 14					.word	CheckZero
>2374	30 bd					.byte	$30,$bd
.2376					_end20:
>2376	05					.byte	_end21-*
>2377	00					.byte	$00
>2378	16 15					.word	C1
>237a	b1					.byte	$b1
.237b					_end21:
>237b	06					.byte	_end22-*
>237c	00					.byte	$00
>237d	0a 14					.word	Unary1Plus
>237f	31 ab					.byte	$31,$ab
.2381					_end22:
>2381	06					.byte	_end23-*
>2382	00					.byte	$00
>2383	21 14					.word	Unary1Minus
>2385	31 ad					.byte	$31,$ad
.2387					_end23:
>2387	06					.byte	_end24-*
>2388	00					.byte	$00
>2389	2e 15					.word	C10
>238b	31 b0					.byte	$31,$b0
.238d					_end24:
>238d	07					.byte	_end25-*
>238e	00					.byte	$00
>238f	57 15					.word	C100
>2391	31 30 b0				.byte	$31,$30,$b0
.2394					_end25:
>2394	08					.byte	_end26-*
>2395	00					.byte	$00
>2396	86 15					.word	C1024
>2398	31 30 32 b4				.byte	$31,$30,$32,$b4
.239c					_end26:
>239c	07					.byte	_end27-*
>239d	00					.byte	$00
>239e	5b 15					.word	C127
>23a0	31 32 b7				.byte	$31,$32,$b7
.23a3					_end27:
>23a3	07					.byte	_end28-*
>23a4	00					.byte	$00
>23a5	5f 15					.word	C128
>23a7	31 32 b8				.byte	$31,$32,$b8
.23aa					_end28:
>23aa	06					.byte	_end29-*
>23ab	00					.byte	$00
>23ac	32 15					.word	C15
>23ae	31 b5					.byte	$31,$b5
.23b0					_end29:
>23b0	06					.byte	_end30-*
>23b1	00					.byte	$00
>23b2	36 15					.word	C16
>23b4	31 b6					.byte	$31,$b6
.23b6					_end30:
>23b6	07					.byte	_end31-*
>23b7	00					.byte	$00
>23b8	98 14					.word	Times16
>23ba	31 36 aa				.byte	$31,$36,$aa
.23bd					_end31:
>23bd	07					.byte	_end32-*
>23be	00					.byte	$00
>23bf	ab 14					.word	Divide16
>23c1	31 36 af				.byte	$31,$36,$af
.23c4					_end32:
>23c4	05					.byte	_end33-*
>23c5	00					.byte	$00
>23c6	1a 15					.word	C2
>23c8	b2					.byte	$b2
.23c9					_end33:
>23c9	06					.byte	_end34-*
>23ca	00					.byte	$00
>23cb	a4 14					.word	Times2
>23cd	32 aa					.byte	$32,$aa
.23cf					_end34:
>23cf	06					.byte	_end35-*
>23d0	00					.byte	$00
>23d1	13 14					.word	Unary2Plus
>23d3	32 ab					.byte	$32,$ab
.23d5					_end35:
>23d5	06					.byte	_end36-*
>23d6	00					.byte	$00
>23d7	2c 14					.word	Unary2Minus
>23d9	32 ad					.byte	$32,$ad
.23db					_end36:
>23db	06					.byte	_end37-*
>23dc	00					.byte	$00
>23dd	b7 14					.word	Divide2
>23df	32 af					.byte	$32,$af
.23e1					_end37:
>23e1	06					.byte	_end38-*
>23e2	00					.byte	$00
>23e3	3a 15					.word	C24
>23e5	32 b4					.byte	$32,$b4
.23e7					_end38:
>23e7	07					.byte	_end39-*
>23e8	00					.byte	$00
>23e9	63 15					.word	C255
>23eb	32 35 b5				.byte	$32,$35,$b5
.23ee					_end39:
>23ee	07					.byte	_end40-*
>23ef	00					.byte	$00
>23f0	6e 15					.word	C256
>23f2	32 35 b6				.byte	$32,$35,$b6
.23f5					_end40:
>23f5	08					.byte	_end41-*
>23f6	00					.byte	$00
>23f7	be 14					.word	Times256
>23f9	32 35 36 aa				.byte	$32,$35,$36,$aa
.23fd					_end41:
>23fd	08					.byte	_end42-*
>23fe	00					.byte	$00
>23ff	c7 14					.word	Divide256
>2401	32 35 36 af				.byte	$32,$35,$36,$af
.2405					_end42:
>2405	05					.byte	_end43-*
>2406	00					.byte	$00
>2407	1e 15					.word	C3
>2409	b3					.byte	$b3
.240a					_end43:
>240a	06					.byte	_end44-*
>240b	00					.byte	$00
>240c	4b 15					.word	C32
>240e	33 b2					.byte	$33,$b2
.2410					_end44:
>2410	09					.byte	_end45-*
>2411	00					.byte	$00
>2412	9e 15					.word	C32767
>2414	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.2419					_end45:
>2419	09					.byte	_end46-*
>241a	00					.byte	$00
>241b	aa 15					.word	C32768
>241d	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2422					_end46:
>2422	05					.byte	_end47-*
>2423	00					.byte	$00
>2424	22 15					.word	C4
>2426	b4					.byte	$b4
.2427					_end47:
>2427	06					.byte	_end48-*
>2428	00					.byte	$00
>2429	a0 14					.word	Times4
>242b	34 aa					.byte	$34,$aa
.242d					_end48:
>242d	06					.byte	_end49-*
>242e	00					.byte	$00
>242f	b3 14					.word	Divide4
>2431	34 af					.byte	$34,$af
.2433					_end49:
>2433	08					.byte	_end50-*
>2434	00					.byte	$00
>2435	92 15					.word	C4096
>2437	34 30 39 b6				.byte	$34,$30,$39,$b6
.243b					_end50:
>243b	05					.byte	_end51-*
>243c	00					.byte	$00
>243d	26 15					.word	C5
>243f	b5					.byte	$b5
.2440					_end51:
>2440	07					.byte	_end52-*
>2441	00					.byte	$00
>2442	7a 15					.word	C512
>2444	35 31 b2				.byte	$35,$31,$b2
.2447					_end52:
>2447	06					.byte	_end53-*
>2448	00					.byte	$00
>2449	4f 15					.word	C63
>244b	36 b3					.byte	$36,$b3
.244d					_end53:
>244d	06					.byte	_end54-*
>244e	00					.byte	$00
>244f	53 15					.word	C64
>2451	36 b4					.byte	$36,$b4
.2453					_end54:
>2453	05					.byte	_end55-*
>2454	00					.byte	$00
>2455	2a 15					.word	C8
>2457	b8					.byte	$b8
.2458					_end55:
>2458	06					.byte	_end56-*
>2459	00					.byte	$00
>245a	9c 14					.word	Times8
>245c	38 aa					.byte	$38,$aa
.245e					_end56:
>245e	06					.byte	_end57-*
>245f	00					.byte	$00
>2460	af 14					.word	Divide8
>2462	38 af					.byte	$38,$af
.2464					_end57:
>2464	05					.byte	_end58-*
>2465	40					.byte	$40
>2466	53 1b					.word	ReturnHandler
>2468	bb					.byte	$bb
.2469					_end58:
>2469	05					.byte	_end59-*
>246a	00					.byte	$00
>246b	b8 12					.word	CheckLess
>246d	bc					.byte	$bc
.246e					_end59:
>246e	06					.byte	_end60-*
>246f	00					.byte	$00
>2470	d1 12					.word	CheckLessEq
>2472	3c bd					.byte	$3c,$bd
.2474					_end60:
>2474	06					.byte	_end61-*
>2475	00					.byte	$00
>2476	81 12					.word	CheckNotEqual
>2478	3c be					.byte	$3c,$be
.247a					_end61:
>247a	05					.byte	_end62-*
>247b	00					.byte	$00
>247c	84 12					.word	CheckEqual
>247e	bd					.byte	$bd
.247f					_end62:
>247f	05					.byte	_end63-*
>2480	00					.byte	$00
>2481	d4 12					.word	CheckGreater
>2483	be					.byte	$be
.2484					_end63:
>2484	06					.byte	_end64-*
>2485	00					.byte	$00
>2486	b5 12					.word	CheckGreaterEq
>2488	3e bd					.byte	$3e,$bd
.248a					_end64:
>248a	08					.byte	_end65-*
>248b	00					.byte	$00
>248c	bf 15					.word	TestDup
>248e	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.2492					_end65:
>2492	05					.byte	_end66-*
>2493	00					.byte	$00
>2494	34 16					.word	WordRead
>2496	c0					.byte	$c0
.2497					_end66:
>2497	07					.byte	_end67-*
>2498	00					.byte	$00
>2499	3a 14					.word	Absolute
>249b	41 42 d3				.byte	$41,$42,$d3
.249e					_end67:
>249e	09					.byte	_end68-*
>249f	00					.byte	$00
>24a0	77 16					.word	AllocateMemory
>24a2	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.24a7					_end68:
>24a7	07					.byte	_end69-*
>24a8	00					.byte	$00
>24a9	5a 12					.word	And
>24ab	41 4e c4				.byte	$41,$4e,$c4
.24ae					_end69:
>24ae	0a					.byte	_end70-*
>24af	00					.byte	$00
>24b0	f8 1e					.word	AssertCode
>24b2	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.24b8					_end70:
>24b8	09					.byte	_end71-*
>24b9	00					.byte	$00
>24ba	8d 14					.word	ByteSwap
>24bc	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.24c1					_end71:
>24c1	06					.byte	_end72-*
>24c2	00					.byte	$00
>24c3	42 16					.word	ByteWrite
>24c5	43 a1					.byte	$43,$a1
.24c7					_end72:
>24c7	06					.byte	_end73-*
>24c8	00					.byte	$00
>24c9	2b 16					.word	ByteRead
>24cb	43 c0					.byte	$43,$c0
.24cd					_end73:
>24cd	07					.byte	_end74-*
>24ce	00					.byte	$00
>24cf	20 1c					.word	ClrHandler
>24d1	43 4c d2				.byte	$43,$4c,$d2
.24d4					_end74:
>24d4	08					.byte	_end75-*
>24d5	00					.byte	$00
>24d6	b6 15					.word	Drop
>24d8	44 52 4f d0				.byte	$44,$52,$4f,$d0
.24dc					_end75:
>24dc	07					.byte	_end76-*
>24dd	00					.byte	$00
>24de	c8 15					.word	Dup
>24e0	44 55 d0				.byte	$44,$55,$d0
.24e3					_end76:
>24e3	08					.byte	_end77-*
>24e4	01					.byte	$01
>24e5	8f 1a					.word	ElseHandler
>24e7	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.24eb					_end77:
>24eb	07					.byte	_end78-*
>24ec	00					.byte	$00
>24ed	19 1f					.word	EndProgram
>24ef	45 4e c4				.byte	$45,$4e,$c4
.24f2					_end78:
>24f2	09					.byte	_end79-*
>24f3	00					.byte	$00
>24f4	92 1a					.word	EndIfHandler
>24f6	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.24fb					_end79:
>24fb	07					.byte	_end80-*
>24fc	00					.byte	$00
>24fd	f6 19					.word	ForHandler
>24ff	46 4f d2				.byte	$46,$4f,$d2
.2502					_end80:
>2502	06					.byte	_end81-*
>2503	01					.byte	$01
>2504	8c 1a					.word	IfHandler
>2506	49 c6					.byte	$49,$c6
.2508					_end81:
>2508	09					.byte	_end82-*
>2509	00					.byte	$00
>250a	6b 1a					.word	GetIndex
>250c	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.2511					_end82:
>2511	08					.byte	_end83-*
>2512	00					.byte	$00
>2513	50 1e					.word	ListCode
>2515	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2519					_end83:
>2519	07					.byte	_end84-*
>251a	00					.byte	$00
>251b	f1 12					.word	Maximum
>251d	4d 41 d8				.byte	$4d,$41,$d8
.2520					_end84:
>2520	07					.byte	_end85-*
>2521	00					.byte	$00
>2522	ed 12					.word	Minimum
>2524	4d 49 ce				.byte	$4d,$49,$ce
.2527					_end85:
>2527	07					.byte	_end86-*
>2528	00					.byte	$00
>2529	2d 13					.word	Modulus16x16
>252b	4d 4f c4				.byte	$4d,$4f,$c4
.252e					_end86:
>252e	0a					.byte	_end87-*
>252f	00					.byte	$00
>2530	41 14					.word	Negate
>2532	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2538					_end87:
>2538	07					.byte	_end88-*
>2539	00					.byte	$00
>253a	17 1c					.word	NewHandler
>253c	4e 45 d7				.byte	$4e,$45,$d7
.253f					_end88:
>253f	08					.byte	_end89-*
>2540	01					.byte	$01
>2541	2c 1a					.word	NextHandler
>2543	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2547					_end89:
>2547	07					.byte	_end90-*
>2548	00					.byte	$00
>2549	fc 15					.word	Nip
>254b	4e 49 d0				.byte	$4e,$49,$d0
.254e					_end90:
>254e	07					.byte	_end91-*
>254f	00					.byte	$00
>2550	51 14					.word	OneComplement
>2552	4e 4f d4				.byte	$4e,$4f,$d4
.2555					_end91:
>2555	06					.byte	_end92-*
>2556	00					.byte	$00
>2557	74 12					.word	LogOr
>2559	4f d2					.byte	$4f,$d2
.255b					_end92:
>255b	08					.byte	_end93-*
>255c	00					.byte	$00
>255d	e4 15					.word	Over
>255f	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.2563					_end93:
>2563	0a					.byte	_end94-*
>2564	00					.byte	$00
>2565	95 1a					.word	RepeatHandler
>2567	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.256d					_end94:
>256d	07					.byte	_end95-*
>256e	00					.byte	$00
>256f	d0 14					.word	RandomNumber
>2571	52 4e c4				.byte	$52,$4e,$c4
.2574					_end95:
>2574	07					.byte	_end96-*
>2575	00					.byte	$00
>2576	01 16					.word	Rot
>2578	52 4f d4				.byte	$52,$4f,$d4
.257b					_end96:
>257b	07					.byte	_end97-*
>257c	00					.byte	$00
>257d	cd 1e					.word	RunProgram
>257f	52 55 ce				.byte	$52,$55,$ce
.2582					_end97:
>2582	07					.byte	_end98-*
>2583	00					.byte	$00
>2584	7c 14					.word	SignTOS
>2586	53 47 ce				.byte	$53,$47,$ce
.2589					_end98:
>2589	08					.byte	_end99-*
>258a	00					.byte	$00
>258b	11 1f					.word	StopCode
>258d	53 54 4f d0				.byte	$53,$54,$4f,$d0
.2591					_end99:
>2591	08					.byte	_end100-*
>2592	00					.byte	$00
>2593	d1 15					.word	Swap
>2595	53 57 41 d0				.byte	$53,$57,$41,$d0
.2599					_end100:
>2599	07					.byte	_end101-*
>259a	00					.byte	$00
>259b	e1 1e					.word	Call6502
>259d	53 59 d3				.byte	$53,$59,$d3
.25a0					_end101:
>25a0	0d					.byte	_end102-*
>25a1	00					.byte	$00
>25a2	b1 20					.word	IntToString
>25a4	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>25ac	c7
.25ad					_end102:
>25ad	09					.byte	_end103-*
>25ae	01					.byte	$01
>25af	98 1a					.word	UntilHandler
>25b1	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.25b6					_end103:
>25b6	09					.byte	_end104-*
>25b7	00					.byte	$00
>25b8	1c 1f					.word	VlistCode
>25ba	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.25bf					_end104:
>25bf	0a					.byte	_end105-*
>25c0	40					.byte	$40
>25c1	6b 1c					.word	BreakCmd
>25c3	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.25c9					_end105:
>25c9	09					.byte	_end106-*
>25ca	00					.byte	$00
>25cb	65 1c					.word	ExitDump
>25cd	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.25d2					_end106:
>25d2	07					.byte	_end107-*
>25d3	00					.byte	$00
>25d4	67 12					.word	Xor
>25d6	58 4f d2				.byte	$58,$4f,$d2
.25d9					_end107:
>25d9	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
