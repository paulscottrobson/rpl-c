
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Wed Jan 15 20:43:15 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 31 11	jsr $1131			jsr 	ExternInitialise
.1006	a9 43		lda #$43			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 23 12	jsr $1223			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	86 10		stx $10				stx 	temp1
.100f	a2 80		ldx #$80			ldx 	#NumberStackBase
.1011	9a		txs				txs
.1012	a6 10		ldx $10				ldx 	temp1
.1014					WarmStart:
.1014	a9 03		lda #$03			lda 	#COL_Yellow
.1016	20 68 11	jsr $1168			jsr 	ExternColour
.1019	20 8b 11	jsr $118b			jsr 	ExternInput
.101c	a9 06		lda #$06			lda 	#COL_Cyan
.101e	20 68 11	jsr $1168			jsr 	ExternColour
.1021	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.1023	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.1025	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.1028	a9 10		lda #$10			lda 	#textBuffer & $FF
.102a	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.102c	20 8b 16	jsr $168b			jsr 	EncodeProgram
.102f	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.1032	0d 12 09	ora $0912			ora 	encodeBuffer+2
.1035	d0 07		bne $103e			bne 	LineEditor 					; if so, do the line editing code.
.1037	a9 ff		lda #$ff			lda 	#$FF
.1039	85 05		sta $05				sta 	rsp
.103b	4c 00 00	jmp $0000			jmp 	NextCode
.103e					LineEditor:
.103e	20 d8 1e	jsr $1ed8			jsr 	EditProgram
.1041	80 ca		bra $100d			bra 	WarmStartBlankStack
.1043					BootMsg:
>1043	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>104b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>105b	2a 0d 0d
>105e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1066	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1076	30 32 30 0d 0d
>107b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1082	5b 32 30 2d 30 31 2d 31			.text	"[20-01-15 20:43]"
>108a	35 20 32 30 3a 34 33 5d

;******  Return to file: kernel.asm

>1092	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/core.src

.1095					InitialiseCoreCode:
.1095	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1097	85 00		sta $00				sta 	NextCode
.1099	85 01		sta $01				sta 	NextCode+1
.109b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.109d	85 02		sta $02				sta 	NextCode+2
.109f	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.10a1	84 04		sty $04				sty 	NextCode+4
.10a3	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.10a5	60		rts				rts								; (2 INX skip offset and line#)
.10a6					Literal2Byte:
.10a6	a5 06		lda $06				lda 	TOS
.10a8	48		pha				pha
.10a9	a5 07		lda $07				lda 	TOS+1
.10ab	48		pha				pha
.10ac	e8		inx				inx  							; point X to the word
.10ad	e8		inx				inx
.10ae	8a		txa				txa 							; copy into Y
.10af	a8		tay				tay
.10b0	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.10b2	85 06		sta $06				sta 	TOS
.10b4	c8		iny				iny 							; read and push the MSB
.10b5	b1 03		lda ($03),y			lda 	(IP),y
.10b7	85 07		sta $07				sta 	TOS+1
.10b9	4c 00 00	jmp $0000			jmp 	NextCode
.10bc					Literal2ByteDecode:
.10bc	a9 06		lda #$06			lda 	#CTH_Keyword
.10be	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.10c1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c3	aa		tax				tax
.10c4	c8		iny				iny
.10c5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10c7	a8		tay				tay
.10c8	8a		txa				txa
.10c9	38		sec				sec 							; output signed
.10ca	20 bb 1e	jsr $1ebb			jsr 	DecodeYAToBuffer
.10cd	60		rts				rts
.10ce					LiteralString:
.10ce	a5 06		lda $06				lda 	TOS
.10d0	48		pha				pha
.10d1	a5 07		lda $07				lda 	TOS+1
.10d3	48		pha				pha
.10d4	e8		inx				inx
.10d5	e8		inx				inx 							; skip over current word
.10d6	8a		txa				txa 							; add to IP + 1 to give string address
.10d7	a8		tay				tay 							; put in Y
.10d8	38		sec				sec 							; make that TOS
.10d9	65 03		adc $03				adc 	IP
.10db	85 06		sta $06				sta 	TOS
.10dd	a5 04		lda $04				lda 	IP+1
.10df	69 00		adc #$00			adc 	#0
.10e1	85 07		sta $07				sta 	TOS+1
.10e3	8a		txa				txa 							; add data length to X
.10e4	18		clc				clc
.10e5	71 03		adc ($03),y			adc 	(IP),y
.10e7	aa		tax				tax
.10e8	ca		dex				dex
.10e9	ca		dex				dex
.10ea	4c 00 00	jmp $0000			jmp 	NextCode
.10ed					LiteralStringDecoder:
.10ed	a9 05		lda #$05			lda 	#CTH_String
.10ef	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.10f2	a9 22		lda #$22			lda 	#'"'
.10f4	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.10f7	20 a2 1e	jsr $1ea2			jsr 	DecodeOutputData
.10fa	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.10fd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: code/error.asm

.10fe					ErrorHandler:
.10fe	68		pla				pla 								; get message address
.10ff	7a		ply				ply
.1100	1a		inc a				inc 	a
.1101	d0 01		bne $1104			bne 	_EHNoCarry
.1103	c8		iny				iny
.1104					_EHNoCarry:
.1104	20 23 12	jsr $1223			jsr 	EXPrintString
.1107	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.1109	b1 03		lda ($03),y			lda 	(IP),y
.110b	c8		iny				iny
.110c	11 03		ora ($03),y			ora 	(IP),y
.110e	f0 14		beq $1124			beq 	_EHNoLine
.1110	a9 2c		lda #$2c			lda 	#_EHMsg2 & $FF 				; print " at "
.1112	a0 11		ldy #$11			ldy 	#_EHMsg2 >> 8
.1114	20 23 12	jsr $1223			jsr 	EXPrintString
.1117	a0 02		ldy #$02			ldy 	#2 							; print line number
.1119	b1 03		lda ($03),y			lda 	(IP),y
.111b	48		pha				pha
.111c	88		dey				dey
.111d	b1 03		lda ($03),y			lda 	(IP),y
.111f	7a		ply				ply
.1120	18		clc				clc
.1121	20 bf 22	jsr $22bf			jsr 	PrintYA
.1124					_EHNoLine:
.1124	a9 0d		lda #$0d			lda 	#13
.1126	20 5e 11	jsr $115e			jsr 	ExternPrint
.1129	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack			; S is indeterminate
>112c	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.1131					ExternInitialise:
.1131	a9 90		lda #$90			lda 	#144 						; set colour
.1133	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1136	a9 01		lda #$01			lda 	#$01
.1138	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.113b	a9 0e		lda #$0e			lda 	#14							; lower case
.113d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1140	a9 93		lda #$93			lda 	#147 						; clear screen
.1142	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1145	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.1147	4c 68 11	jmp $1168			jmp 	ExternColour
.114a					ExternCheckBreak:
.114a	da		phx				phx 								; make sure we keep XY
.114b	5a		phy				phy
.114c	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.114f	f0 03		beq $1154			beq		_ECBExit 					; stopped
.1151	7a		ply				ply 								; restore and exit.
.1152	fa		plx				plx
.1153	60		rts				rts
.1154					_ECBExit:
.1154	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1157	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.115e					ExternPrint:
.115e	48		pha				pha
.115f	da		phx				phx
.1160	5a		phy				phy
.1161	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1164	7a		ply				ply
.1165	fa		plx				plx
.1166	68		pla				pla
.1167	60		rts				rts
.1168					ExternColour:
.1168	48		pha				pha
.1169	da		phx				phx
.116a	48		pha				pha
.116b	29 08		and #$08			and 	#8
.116d	0a		asl a				asl 	a
.116e	0a		asl a				asl 	a
.116f	0a		asl a				asl 	a
.1170	0a		asl a				asl 	a
.1171	49 92		eor #$92			eor 	#$92
.1173	20 5e 11	jsr $115e			jsr 	ExternPrint
.1176	68		pla				pla
.1177	29 07		and #$07			and 	#7
.1179	aa		tax				tax
.117a	bd 83 11	lda $1183,x			lda 	_ECTable,x
.117d	20 5e 11	jsr $115e			jsr 	ExternPrint
.1180	fa		plx				plx
.1181	68		pla				pla
.1182	60		rts				rts
.1183					_ECTable:
>1183	90						.byte 	144
>1184	1c						.byte 	28
>1185	1e						.byte 	30
>1186	9e						.byte 	158
>1187	1f						.byte 	31
>1188	9c						.byte 	156
>1189	9f						.byte 	159
>118a	05						.byte 	5
.118b					ExternInput:
.118b	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.118d	85 14		sta $14				sta 	temp3
.118f	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.1191	85 15		sta $15				sta 	temp3+1
.1193	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1196	29 7f		and #$7f			and 	#$7F
.1198	c9 0d		cmp #$0d			cmp 	#13
.119a	f0 0a		beq $11a6			beq 	_EIExit
.119c	92 14		sta ($14)			sta 	(temp3)
.119e	e6 14		inc $14				inc 	temp3
.11a0	d0 f1		bne $1193			bne 	_EIRead
.11a2	e6 15		inc $15				inc 	temp3+1
.11a4	80 ed		bra $1193			bra 	_EIRead
.11a6	a9 00		lda #$00	_EIExit:lda 	#0
.11a8	92 14		sta ($14)			sta 	(temp3)
.11aa	a9 0d		lda #$0d			lda 	#13
.11ac	20 5e 11	jsr $115e			jsr 	ExternPrint
.11af	60		rts				rts
.11b0					ExternSave:
.11b0	da		phx				phx
.11b1	5a		phy				phy
.11b2	85 12		sta $12				sta 	temp2 						; save start
.11b4	84 13		sty $13				sty 	temp2+1
.11b6	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11b9	a6 14		ldx $14				ldx 	temp3
.11bb	a4 15		ldy $15				ldy 	temp3+1
.11bd	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11c0	a9 01		lda #$01			lda 	#1
.11c2	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11c4	a0 00		ldy #$00			ldy 	#0
.11c6	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11c9	a6 10		ldx $10				ldx 	temp1 						; end address
.11cb	a4 11		ldy $11				ldy 	temp1+1
.11cd	a9 12		lda #$12			lda 	#temp2
.11cf	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.11d2	b0 03		bcs $11d7			bcs 	_ESSave
.11d4	7a		ply				ply
.11d5	fa		plx				plx
.11d6	60		rts				rts
.11d7					_ESSave:
.11d7	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>11da	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>11e2	4c 45 44 00
.11e6					ExternLoad:
.11e6	da		phx				phx 								; save XY
.11e7	5a		phy				phy
.11e8	48		pha				pha 								; save target
.11e9	5a		phy				phy
.11ea	20 18 12	jsr $1218			jsr 	EXGetLength 				; get length of file into A
.11ed	a6 14		ldx $14				ldx 	temp3
.11ef	a4 15		ldy $15				ldy 	temp3+1
.11f1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11f4	a9 01		lda #$01			lda 	#1
.11f6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11f8	a0 00		ldy #$00			ldy 	#0
.11fa	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11fd	7a		ply				ply 								; restore target to YX and call load
.11fe	fa		plx				plx
.11ff	a9 00		lda #$00			lda 	#0 							; load command
.1201	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1204	b0 03		bcs $1209			bcs 	_ESLoad
.1206	7a		ply				ply
.1207	fa		plx				plx
.1208	60		rts				rts
.1209					_ESLoad:
.1209	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>120c	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>1214	4c 45 44 00
.1218					EXGetLength:
.1218	5a		phy				phy
.1219	a0 ff		ldy #$ff			ldy 	#255
.121b	c8		iny		_EXGL0:	iny
.121c	b1 14		lda ($14),y			lda 	(temp3),y
.121e	d0 fb		bne $121b			bne 	_EXGL0
.1220	98		tya				tya
.1221	7a		ply				ply
.1222	60		rts				rts
.1223					EXPrintString:
.1223	48		pha				pha
.1224	5a		phy				phy
.1225	84 11		sty $11				sty 	temp1+1
.1227	85 10		sta $10				sta 	temp1
.1229	a0 00		ldy #$00			ldy 	#0
.122b					_EXPSLoop:
.122b	b1 10		lda ($10),y			lda 	(temp1),y
.122d	f0 08		beq $1237			beq 	_EXPSExit
.122f	29 7f		and #$7f			and 	#$7F
.1231	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1234	c8		iny				iny
.1235	80 f4		bra $122b			bra 	_EXPSLoop
.1237					_EXPSExit:
.1237	7a		ply				ply
.1238	68		pla				pla
.1239	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.123a					Add:
.123a	7a		ply				ply
.123b	68		pla				pla
.123c	18		clc				clc
.123d	65 06		adc $06				adc 	TOS
.123f	85 06		sta $06				sta 	TOS
.1241	98		tya				tya
.1242	65 07		adc $07				adc 	TOS+1
.1244	85 07		sta $07				sta 	TOS+1
.1246	4c 00 00	jmp $0000			jmp 	NextCode
.1249					Subtract:
.1249	7a		ply				ply
.124a	68		pla				pla
.124b	38		sec				sec
.124c	e5 06		sbc $06				sbc 	TOS
.124e	85 06		sta $06				sta 	TOS
.1250	98		tya				tya
.1251	e5 07		sbc $07				sbc 	TOS+1
.1253	85 07		sta $07				sta 	TOS+1
.1255	4c 00 00	jmp $0000			jmp 	NextCode
.1258					And:
.1258	68		pla				pla
.1259	25 07		and $07				and 	TOS+1
.125b	85 07		sta $07				sta 	TOS+1
.125d	68		pla				pla
.125e	25 06		and $06				and 	TOS
.1260	85 06		sta $06				sta 	TOS
.1262	4c 00 00	jmp $0000			jmp 	NextCode
.1265					Xor:
.1265	68		pla				pla
.1266	45 07		eor $07				eor 	TOS+1
.1268	85 07		sta $07				sta 	TOS+1
.126a	68		pla				pla
.126b	45 06		eor $06				eor 	TOS
.126d	85 06		sta $06				sta 	TOS
.126f	4c 00 00	jmp $0000			jmp 	NextCode
.1272					LogOr:
.1272	68		pla				pla
.1273	05 07		ora $07				ora 	TOS+1
.1275	85 07		sta $07				sta 	TOS+1
.1277	68		pla				pla
.1278	05 06		ora $06				ora 	TOS
.127a	85 06		sta $06				sta 	TOS
.127c	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.127f					CheckNotEqual:
.127f	38		sec				sec
.1280	80 01		bra $1283			bra 	CECode
.1282					CheckEqual:
.1282	18		clc				clc
.1283					CECode:
.1283	86 10		stx $10				stx 	temp1
.1285	ba		tsx				tsx
.1286	08		php				php
.1287	a5 06		lda $06				lda 	TOS
.1289	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.128c	d0 17		bne $12a5			bne	 	CompareFalse
.128e	a5 07		lda $07				lda 	TOS+1
.1290	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1293	d0 10		bne $12a5			bne 	CompareFalse
.1295					CompareTrue:
.1295	a6 10		ldx $10				ldx 	temp1
.1297	28		plp				plp
.1298	b0 10		bcs $12aa			bcs		CompareFalse2
.129a					CompareTrue2:
.129a	68		pla				pla
.129b	68		pla				pla
.129c	a9 ff		lda #$ff			lda 	#$FF
.129e	85 06		sta $06				sta 	TOS
.12a0	85 07		sta $07				sta 	TOS+1
.12a2	4c 00 00	jmp $0000			jmp 	NextCode
.12a5					CompareFalse:
.12a5	a6 10		ldx $10				ldx 	temp1
.12a7	28		plp				plp
.12a8	b0 f0		bcs $129a			bcs		CompareTrue2
.12aa					CompareFalse2:
.12aa	68		pla				pla
.12ab	68		pla				pla
.12ac	64 06		stz $06				stz 	TOS
.12ae	64 07		stz $07				stz 	TOS+1
.12b0	4c 00 00	jmp $0000			jmp 	NextCode
.12b3					CheckGreaterEq:
.12b3	38		sec				sec
.12b4	80 01		bra $12b7			bra		CLCode
.12b6					CheckLess:
.12b6	18		clc				clc
.12b7	86 10		stx $10		CLCode:	stx 	temp1
.12b9	ba		tsx				tsx
.12ba	08		php				php
.12bb	18		clc				clc
.12bc	a5 06		lda $06				lda 	TOS
.12be	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12c1	a5 07		lda $07				lda 	TOS+1
.12c3	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12c6	50 02		bvc $12ca			bvc 	_CLNoFlip
.12c8	49 80		eor #$80			eor 	#$80
.12ca					_CLNoFlip:
.12ca	0a		asl a				asl 	a
.12cb	b0 d8		bcs $12a5			bcs 	CompareFalse
.12cd	80 c6		bra $1295			bra 	CompareTrue
.12cf					CheckLessEq:
.12cf	38		sec				sec
.12d0	80 01		bra $12d3			bra		CGCode
.12d2					CheckGreater:
.12d2	18		clc				clc
.12d3					CGCode:
.12d3	86 10		stx $10				stx 	temp1
.12d5	ba		tsx				tsx
.12d6	08		php				php
.12d7	18		clc				clc
.12d8	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12db	e5 06		sbc $06				sbc 	TOS
.12dd	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12e0	e5 07		sbc $07				sbc 	TOS+1
.12e2	50 02		bvc $12e6			bvc 	_CGNoFlip
.12e4	49 80		eor #$80			eor 	#$80
.12e6					_CGNoFlip:
.12e6	0a		asl a				asl 	a
.12e7	b0 bc		bcs $12a5			bcs 	CompareFalse
.12e9	80 aa		bra $1295			bra 	CompareTrue
.12eb					Minimum:
.12eb	a9 00		lda #$00			lda 	#0
.12ed	80 02		bra $12f1			bra 	MinMaxCode
.12ef					Maximum:
.12ef	a9 80		lda #$80			lda 	#$80
.12f1					MinMaxCode:
.12f1	85 11		sta $11				sta 	temp1+1
.12f3	86 10		stx $10				stx 	temp1
.12f5	ba		tsx				tsx
.12f6	38		sec				sec
.12f7	a5 06		lda $06				lda 	TOS
.12f9	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12fc	a5 07		lda $07				lda 	TOS+1
.12fe	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1301	50 02		bvc $1305			bvc 	_MMNoFlip
.1303	49 80		eor #$80			eor 	#$80
.1305					_MMNoFlip:
.1305	45 11		eor $11				eor 	temp1+1
.1307	30 0a		bmi $1313			bmi 	_MMNoCopy
.1309	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.130c	85 06		sta $06				sta 	TOS
.130e	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1311	85 07		sta $07				sta 	TOS+1
.1313					_MMNoCopy:
.1313	a6 10		ldx $10				ldx 	temp1
.1315	68		pla				pla
.1316	68		pla				pla
.1317	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.131a					Divide16x16:
.131a	86 12		stx $12				stx 	temp2
.131c	ba		tsx				tsx
.131d	20 40 13	jsr $1340			jsr 	IntegerDivide
.1320	68		pla				pla
.1321	85 07		sta $07				sta 	TOS+1
.1323	68		pla				pla
.1324	85 06		sta $06				sta 	TOS
.1326	a6 12		ldx $12				ldx 	temp2
.1328	4c 00 00	jmp $0000			jmp 	NextCode
.132b					Modulus16x16:
.132b	86 12		stx $12				stx 	temp2
.132d	ba		tsx				tsx
.132e	20 40 13	jsr $1340			jsr 	IntegerDivide
.1331	a6 12		ldx $12				ldx 	temp2
.1333	68		pla				pla
.1334	68		pla				pla
.1335	a5 10		lda $10				lda 	temp1
.1337	85 06		sta $06				sta 	TOS
.1339	a5 11		lda $11				lda 	temp1+1
.133b	85 07		sta $07				sta 	TOS+1
.133d	4c 00 00	jmp $0000			jmp 	NextCode
.1340					IntegerDivide:
.1340	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.1342	05 07		ora $07				ora 	TOS+1
.1344	d0 14		bne $135a			bne 	_BFDOkay
.1346	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1349	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1351	20 42 59 20 5a 45 52 4f 00
.135a					_BFDOkay:
.135a	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.135c	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.135e	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1360	20 9b 13	jsr $139b			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1363	20 b5 13	jsr $13b5			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1366	5a		phy				phy 								; Y is the counter
.1367	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1369					_BFDLoop:
.1369	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.136c	3e 01 01	rol $0101,x			rol 	Stack2High,x
.136f	26 10		rol $10				rol 	temp1
.1371	26 11		rol $11				rol 	temp1+1
.1373	38		sec				sec
.1374	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1376	e5 06		sbc $06				sbc 	TOS
.1378	48		pha				pha
.1379	a5 11		lda $11				lda 	temp1+1
.137b	e5 07		sbc $07				sbc 	TOS+1
.137d	90 0f		bcc $138e			bcc 	_BFDNoAdd
.137f	85 11		sta $11				sta 	temp1+1
.1381	68		pla				pla
.1382	85 10		sta $10				sta 	temp1+0
.1384	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1387	09 01		ora #$01			ora 	#1
.1389	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.138c	80 01		bra $138f			bra 	_BFDNext
.138e					_BFDNoAdd:
.138e	68		pla				pla 								; Throw away the intermediate calculations
.138f					_BFDNext:
.138f	88		dey				dey
.1390	d0 d7		bne $1369			bne 	_BFDLoop
.1392	7a		ply				ply 								; restore Y
.1393	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1395	90 03		bcc $139a			bcc 	_BFDUnsigned 				; then the result is signed
.1397	20 a1 13	jsr $13a1			jsr		IntegerNegateAlways 		; negate the result
.139a					_BFDUnsigned:
.139a	60		rts				rts
.139b					CheckIntegerNegate:
.139b	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.139e	30 01		bmi $13a1			bmi 	IntegerNegateAlways 		; if so negate it
.13a0	60		rts				rts
.13a1					IntegerNegateAlways:
.13a1	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.13a3	38		sec				sec 								; negate
.13a4	a9 00		lda #$00			lda 	#0
.13a6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.13a9	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13ac	a9 00		lda #$00			lda 	#0
.13ae	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.13b1	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13b4	60		rts				rts
.13b5					CheckTOSNegate:
.13b5	a5 07		lda $07				lda 	TOS+1
.13b7	10 0f		bpl $13c8			bpl		CTNNoChange
.13b9	e6 1a		inc $1a				inc 	SignCount
.13bb					TOSNegateAlways:
.13bb	38		sec				sec
.13bc	a9 00		lda #$00			lda 	#0
.13be	e5 06		sbc $06				sbc 	TOS
.13c0	85 06		sta $06				sta 	TOS
.13c2	a9 00		lda #$00			lda 	#0
.13c4	e5 07		sbc $07				sbc 	TOS+1
.13c6	85 07		sta $07				sta 	TOS+1
.13c8					CTNNoChange:
.13c8	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.13c9					Multiply16x16:
.13c9	86 10		stx $10				stx 	temp1
.13cb	ba		tsx				tsx
.13cc	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.13cf	85 12		sta $12				sta 	temp2
.13d1	bd 01 01	lda $0101,x			lda		Stack2High,x
.13d4	85 13		sta $13				sta 	temp2+1
.13d6	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.13d9	9e 01 01	stz $0101,x			stz 	Stack2High,x
.13dc					_MultLoop:
.13dc	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.13de	66 12		ror $12				ror 	temp2
.13e0	90 11		bcc $13f3			bcc 	_MultNoAdd
.13e2	18		clc				clc 								; add 1st to 2nd
.13e3	a5 06		lda $06				lda 	TOS
.13e5	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.13e8	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13eb	a5 07		lda $07				lda 	TOS+1
.13ed	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13f0	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13f3					_MultNoAdd:
.13f3	06 06		asl $06				asl 	TOS 						; shift 1st left
.13f5	26 07		rol $07				rol 	TOS+1
.13f7	a5 12		lda $12				lda 	temp2	 					; until zero
.13f9	05 13		ora $13				ora 	temp2+1
.13fb	d0 df		bne $13dc			bne 	_MultLoop
.13fd	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ff	68		pla				pla
.1400	85 07		sta $07				sta 	TOS+1
.1402	68		pla				pla
.1403	85 06		sta $06				sta 	TOS
.1405	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.1408					Unary1Plus:
.1408	e6 06		inc $06				inc 	TOS
.140a	d0 02		bne $140e			bne 	_U1PSkip
.140c	e6 07		inc $07				inc 	TOS+1
.140e					_U1PSkip:
.140e	4c 00 00	jmp $0000			jmp 	NextCode
.1411					Unary2Plus:
.1411	18		clc				clc
.1412	a5 06		lda $06				lda 	TOS
.1414	69 02		adc #$02			adc 	#2
.1416	85 06		sta $06				sta 	TOS
.1418	90 02		bcc $141c			bcc 	_U1PSkip
.141a	e6 07		inc $07				inc 	TOS+1
.141c					_U1PSkip:
.141c	4c 00 00	jmp $0000			jmp 	NextCode
.141f					Unary1Minus:
.141f	a5 06		lda $06				lda 	TOS
.1421	d0 02		bne $1425			bne 	_U1MSkip
.1423	c6 07		dec $07				dec 	TOS+1
.1425					_U1MSkip:
.1425	c6 06		dec $06				dec 	TOS
.1427	4c 00 00	jmp $0000			jmp 	NextCode
.142a					Unary2Minus:
.142a	38		sec				sec
.142b	a5 06		lda $06				lda 	TOS
.142d	e9 02		sbc #$02			sbc 	#2
.142f	85 06		sta $06				sta 	TOS
.1431	b0 02		bcs $1435			bcs 	_U1PSkip
.1433	c6 07		dec $07				dec 	TOS+1
.1435					_U1PSkip:
.1435	4c 00 00	jmp $0000			jmp 	NextCode
.1438					Absolute:
.1438	a5 07		lda $07				lda 	TOS+1
.143a	30 03		bmi $143f			bmi 	Negate
.143c	4c 00 00	jmp $0000			jmp 	NextCode
.143f					Negate:
.143f	38		sec				sec
.1440	a9 00		lda #$00			lda 	#0
.1442	e5 06		sbc $06				sbc 	TOS
.1444	85 06		sta $06				sta 	TOS
.1446	a9 00		lda #$00			lda 	#0
.1448	e5 07		sbc $07				sbc 	TOS+1
.144a	85 07		sta $07				sta 	TOS+1
.144c	4c 00 00	jmp $0000			jmp 	NextCode
.144f					OneComplement:
.144f	a5 06		lda $06				lda 	TOS
.1451	49 ff		eor #$ff			eor 	#$FF
.1453	85 06		sta $06				sta 	TOS
.1455	a5 07		lda $07				lda 	TOS+1
.1457	49 ff		eor #$ff			eor 	#$FF
.1459	85 07		sta $07				sta 	TOS+1
.145b	4c 00 00	jmp $0000			jmp 	NextCode
.145e					CheckMinus:
.145e	a5 07		lda $07				lda 	TOS+1
.1460	30 07		bmi $1469			bmi 	UnaryTrue
.1462					UnaryFalse:
.1462	64 06		stz $06				stz 	TOS
.1464	64 07		stz $07				stz 	TOS+1
.1466	4c 00 00	jmp $0000			jmp 	NextCode
.1469					UnaryTrue:
.1469	a9 ff		lda #$ff			lda 	#$FF
.146b	85 06		sta $06				sta 	TOS
.146d	85 07		sta $07				sta 	TOS+1
.146f	4c 00 00	jmp $0000			jmp 	NextCode
.1472					CheckZero:
.1472	a5 06		lda $06				lda 	TOS
.1474	05 07		ora $07				ora 	TOS+1
.1476	d0 ea		bne $1462			bne 	UnaryFalse
.1478	80 ef		bra $1469			bra 	UnaryTrue
.147a					SignTOS:
.147a	a5 07		lda $07				lda 	TOS+1
.147c	30 eb		bmi $1469			bmi		UnaryTrue
.147e	05 06		ora $06				ora 	TOS
.1480	f0 e0		beq $1462			beq 	UnaryFalse
.1482	a9 01		lda #$01			lda 	#1
.1484	85 06		sta $06				sta 	TOS
.1486	64 07		stz $07				stz		TOS+1
.1488	4c 00 00	jmp $0000			jmp 	NextCode
.148b					ByteSwap:
.148b	a5 06		lda $06				lda 	TOS
.148d	a4 07		ldy $07				ldy 	TOS+1
.148f	85 07		sta $07				sta 	TOS+1
.1491	84 06		sty $06				sty 	TOS
.1493	4c 00 00	jmp $0000			jmp 	NextCode
.1496					Times16:
.1496	06 06		asl $06				asl 	TOS
.1498	26 07		rol $07				rol 	TOS+1
.149a					Times8:
.149a	06 06		asl $06				asl 	TOS
.149c	26 07		rol $07				rol 	TOS+1
.149e					Times4:
.149e	06 06		asl $06				asl 	TOS
.14a0	26 07		rol $07				rol 	TOS+1
.14a2					Times2:
.14a2	06 06		asl $06				asl 	TOS
.14a4	26 07		rol $07				rol 	TOS+1
.14a6	4c 00 00	jmp $0000			jmp 	NextCode
.14a9					Divide16:
.14a9	46 07		lsr $07				lsr 	TOS+1
.14ab	66 06		ror $06				ror 	TOS
.14ad					Divide8:
.14ad	46 07		lsr $07				lsr 	TOS+1
.14af	66 06		ror $06				ror 	TOS
.14b1					Divide4:
.14b1	46 07		lsr $07				lsr 	TOS+1
.14b3	66 06		ror $06				ror 	TOS
.14b5					Divide2:
.14b5	46 07		lsr $07				lsr 	TOS+1
.14b7	66 06		ror $06				ror 	TOS
.14b9	4c 00 00	jmp $0000			jmp 	NextCode
.14bc					Times256:
.14bc	a5 06		lda $06				lda 	TOS
.14be	85 07		sta $07				sta 	TOS+1
.14c0	64 06		stz $06				stz 	TOS
.14c2	4c 00 00	jmp $0000			jmp 	NextCode
.14c5					Divide256:
.14c5	a5 07		lda $07				lda 	TOS+1
.14c7	85 06		sta $06				sta 	TOS
.14c9	64 07		stz $07				stz 	TOS+1
.14cb	4c 00 00	jmp $0000			jmp 	NextCode
.14ce					RandomNumber:
.14ce	a5 06		lda $06				lda 	TOS
.14d0	48		pha				pha
.14d1	a5 07		lda $07				lda 	TOS+1
.14d3	48		pha				pha
.14d4	a5 1b		lda $1b				lda 	randomSeed
.14d6	05 1c		ora $1c				ora 	randomSeed+1
.14d8	d0 08		bne $14e2			bne 	_RH_NoInit
.14da	a9 7c		lda #$7c			lda 	#$7C
.14dc	85 1b		sta $1b				sta 	randomSeed
.14de	a9 a1		lda #$a1			lda 	#$A1
.14e0	85 1c		sta $1c				sta 	randomSeed+1
.14e2					_RH_NoInit:
.14e2	a5 1b		lda $1b				lda 	randomSeed
.14e4	4a		lsr a		        lsr		a
.14e5	26 1c		rol $1c		        rol 	randomSeed+1
.14e7	90 02		bcc $14eb	        bcc 	_RH_NoEor
.14e9	49 b4		eor #$b4	        eor 	#$B4
.14eb					_RH_NoEor:
.14eb	85 1b		sta $1b		        sta 	randomSeed
.14ed	45 1c		eor $1c		        eor 	randomSeed+1
.14ef	85 07		sta $07		        sta 	TOS+1
.14f1	a5 1b		lda $1b		        lda 	randomSeed
.14f3	85 06		sta $06		        sta 	TOS
.14f5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14f8					Constant0:
.14f8	a5 06		lda $06				lda 	TOS
.14fa	48		pha				pha
.14fb	a5 07		lda $07				lda 	TOS+1
.14fd	48		pha				pha
.14fe	64 06		stz $06				stz 	TOS
.1500	64 07		stz $07				stz 	TOS+1
.1502	4c 00 00	jmp $0000			jmp 	NextCode
.1505					ConstantMinus1:
.1505	a5 06		lda $06				lda 	TOS
.1507	48		pha				pha
.1508	a5 07		lda $07				lda 	TOS+1
.150a	48		pha				pha
.150b	a9 ff		lda #$ff			lda 	#$FF
.150d	85 06		sta $06				sta 	TOS
.150f	85 07		sta $07				sta 	TOS+1
.1511	4c 00 00	jmp $0000			jmp 	NextCode
.1514					C1:
.1514	a0 01		ldy #$01			ldy 	#1
.1516	80 24		bra $153c			bra 	Const1Byte
.1518					C2:
.1518	a0 02		ldy #$02			ldy 	#2
.151a	80 20		bra $153c			bra 	Const1Byte
.151c					C3:
.151c	a0 03		ldy #$03			ldy 	#3
.151e	80 1c		bra $153c			bra 	Const1Byte
.1520					C4:
.1520	a0 04		ldy #$04			ldy 	#4
.1522	80 18		bra $153c			bra 	Const1Byte
.1524					C5:
.1524	a0 05		ldy #$05			ldy 	#5
.1526	80 14		bra $153c			bra 	Const1Byte
.1528					C8:
.1528	a0 08		ldy #$08			ldy 	#8
.152a	80 10		bra $153c			bra 	Const1Byte
.152c					C10:
.152c	a0 0a		ldy #$0a			ldy 	#10
.152e	80 0c		bra $153c			bra 	Const1Byte
.1530					C15:
.1530	a0 0f		ldy #$0f			ldy 	#15
.1532	80 08		bra $153c			bra 	Const1Byte
.1534					C16:
.1534	a0 10		ldy #$10			ldy 	#16
.1536	80 04		bra $153c			bra 	Const1Byte
.1538					C24:
.1538	a0 18		ldy #$18			ldy 	#24
.153a	80 00		bra $153c			bra 	Const1Byte
.153c					Const1Byte:
.153c	a5 06		lda $06				lda 	TOS
.153e	48		pha				pha
.153f	a5 07		lda $07				lda 	TOS+1
.1541	48		pha				pha
.1542	84 06		sty $06				sty 	TOS
.1544	64 07		stz $07				stz 	TOS+1
.1546	4c 00 00	jmp $0000			jmp 	NextCode
.1549					C32:
.1549	a0 20		ldy #$20			ldy 	#32
.154b	80 ef		bra $153c			bra 	Const1Byte
.154d					C63:
.154d	a0 3f		ldy #$3f			ldy 	#63
.154f	80 eb		bra $153c			bra 	Const1Byte
.1551					C64:
.1551	a0 40		ldy #$40			ldy 	#64
.1553	80 e7		bra $153c			bra 	Const1Byte
.1555					C100:
.1555	a0 64		ldy #$64			ldy 	#100
.1557	80 e3		bra $153c			bra 	Const1Byte
.1559					C127:
.1559	a0 7f		ldy #$7f			ldy 	#127
.155b	80 df		bra $153c			bra 	Const1Byte
.155d					C128:
.155d	a0 80		ldy #$80			ldy 	#128
.155f	80 db		bra $153c			bra 	Const1Byte
.1561					C255:
.1561	a0 ff		ldy #$ff			ldy 	#255
.1563	80 d7		bra $153c			bra 	Const1Byte
.1565					Const2Byte:
.1565	85 06		sta $06				sta 	TOS
.1567	84 07		sty $07				sty 	TOS+1
.1569	4c 00 00	jmp $0000			jmp 	NextCode
.156c					C256:
.156c	a5 06		lda $06				lda 	TOS
.156e	48		pha				pha
.156f	a5 07		lda $07				lda 	TOS+1
.1571	48		pha				pha
.1572	a9 00		lda #$00			lda 	#(256) & $FF
.1574	a0 01		ldy #$01			ldy 	#(256) >> 8
.1576	80 ed		bra $1565			bra 	Const2Byte
.1578					C512:
.1578	a5 06		lda $06				lda 	TOS
.157a	48		pha				pha
.157b	a5 07		lda $07				lda 	TOS+1
.157d	48		pha				pha
.157e	a9 00		lda #$00			lda 	#(512) & $FF
.1580	a0 02		ldy #$02			ldy 	#(512) >> 8
.1582	80 e1		bra $1565			bra 	Const2Byte
.1584					C1024:
.1584	a5 06		lda $06				lda 	TOS
.1586	48		pha				pha
.1587	a5 07		lda $07				lda 	TOS+1
.1589	48		pha				pha
.158a	a9 00		lda #$00			lda 	#(1024) & $FF
.158c	a0 04		ldy #$04			ldy 	#(1024) >> 8
.158e	80 d5		bra $1565			bra 	Const2Byte
.1590					C4096:
.1590	a5 06		lda $06				lda 	TOS
.1592	48		pha				pha
.1593	a5 07		lda $07				lda 	TOS+1
.1595	48		pha				pha
.1596	a9 00		lda #$00			lda 	#(4096) & $FF
.1598	a0 10		ldy #$10			ldy 	#(4096) >> 8
.159a	80 c9		bra $1565			bra 	Const2Byte
.159c					C32767:
.159c	a5 06		lda $06				lda 	TOS
.159e	48		pha				pha
.159f	a5 07		lda $07				lda 	TOS+1
.15a1	48		pha				pha
.15a2	a9 ff		lda #$ff			lda 	#(32767) & $FF
.15a4	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.15a6	80 bd		bra $1565			bra 	Const2Byte
.15a8					C32768:
.15a8	a5 06		lda $06				lda 	TOS
.15aa	48		pha				pha
.15ab	a5 07		lda $07				lda 	TOS+1
.15ad	48		pha				pha
.15ae	a9 00		lda #$00			lda 	#(32768) & $FF
.15b0	a0 80		ldy #$80			ldy 	#(32768) >> 8
.15b2	80 b1		bra $1565			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.15b4					Drop:
.15b4	68		pla				pla
.15b5	85 07		sta $07				sta 	TOS+1
.15b7	68		pla				pla
.15b8	85 06		sta $06				sta 	TOS
.15ba	4c 00 00	jmp $0000			jmp 	NextCode
.15bd					TestDup:
.15bd	a5 06		lda $06				lda 	TOS
.15bf	05 07		ora $07				ora 	TOS+1
.15c1	d0 03		bne $15c6			bne 	Dup
.15c3	4c 00 00	jmp $0000			jmp 	NextCode
.15c6					Dup:
.15c6	a5 06		lda $06				lda 	TOS
.15c8	48		pha				pha
.15c9	a5 07		lda $07				lda 	TOS+1
.15cb	48		pha				pha
.15cc	4c 00 00	jmp $0000			jmp 	NextCode
.15cf					Swap:
.15cf	86 10		stx $10				stx 	temp1
.15d1	7a		ply				ply
.15d2	fa		plx				plx
.15d3	a5 06		lda $06				lda 	TOS
.15d5	48		pha				pha
.15d6	a5 07		lda $07				lda 	TOS+1
.15d8	48		pha				pha
.15d9	86 06		stx $06				stx 	TOS
.15db	84 07		sty $07				sty 	TOS+1
.15dd	a6 10		ldx $10				ldx 	temp1
.15df	4c 00 00	jmp $0000			jmp 	NextCode
.15e2					Over:
.15e2	a5 06		lda $06				lda 	TOS
.15e4	48		pha				pha
.15e5	a5 07		lda $07				lda 	TOS+1
.15e7	48		pha				pha
.15e8	86 10		stx $10				stx 	temp1
.15ea	ba		tsx				tsx
.15eb	bd 04 01	lda $0104,x			lda 	stack3low,x
.15ee	85 06		sta $06				sta 	TOS
.15f0	bd 03 01	lda $0103,x			lda 	stack3High,x
.15f3	85 07		sta $07				sta 	TOS+1
.15f5	a6 10		ldx $10				ldx 	temp1
.15f7	4c 00 00	jmp $0000			jmp 	NextCode
.15fa					Nip:
.15fa	68		pla				pla
.15fb	68		pla				pla
.15fc	4c 00 00	jmp $0000			jmp 	NextCode
.15ff					Rot:
.15ff	86 10		stx $10				stx 	temp1
.1601	ba		tsx				tsx
.1602	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.1605	a8		tay				tay
.1606	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1609	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.160c	a5 06		lda $06				lda 	TOS
.160e	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1611	84 06		sty $06				sty 	TOS
.1613	bd 03 01	lda $0103,x			lda 	Stack3High,x
.1616	a8		tay				tay
.1617	bd 01 01	lda $0101,x			lda 	Stack2High,x
.161a	9d 03 01	sta $0103,x			sta 	Stack3High,x
.161d	a5 07		lda $07				lda 	TOS+1
.161f	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1622	84 07		sty $07				sty 	TOS+1
.1624	a6 10		ldx $10				ldx 	temp1
.1626	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.1629					ByteRead:
.1629	b2 06		lda ($06)			lda 	(TOS)
.162b	85 06		sta $06				sta 	TOS
.162d	64 07		stz $07				stz 	TOS+1
.162f	4c 00 00	jmp $0000			jmp 	NextCode
.1632					WordRead:
.1632	a0 01		ldy #$01			ldy 	#1
.1634	b1 06		lda ($06),y			lda 	(TOS),y
.1636	a8		tay				tay
.1637	b2 06		lda ($06)			lda 	(TOS)
.1639	85 06		sta $06				sta 	TOS
.163b	84 07		sty $07				sty 	TOS+1
.163d	4c 00 00	jmp $0000			jmp 	NextCode
.1640					ByteWrite:
.1640	68		pla				pla
.1641	68		pla				pla
.1642	92 06		sta ($06)			sta 	(TOS)
.1644	68		pla				pla
.1645	85 07		sta $07				sta 	TOS+1
.1647	68		pla				pla
.1648	85 06		sta $06				sta 	TOS
.164a	4c 00 00	jmp $0000			jmp 	NextCode
.164d					WordWrite:
.164d	68		pla				pla
.164e	a0 01		ldy #$01			ldy 	#1
.1650	91 06		sta ($06),y			sta 	(TOS),y
.1652	68		pla				pla
.1653	92 06		sta ($06)			sta 	(TOS)
.1655	68		pla				pla
.1656	85 07		sta $07				sta 	TOS+1
.1658	68		pla				pla
.1659	85 06		sta $06				sta 	TOS
.165b	4c 00 00	jmp $0000			jmp 	NextCode
.165e					WordAdd:
.165e	7a		ply				ply
.165f	68		pla				pla
.1660	18		clc				clc
.1661	72 06		adc ($06)			adc 	(TOS)
.1663	92 06		sta ($06)			sta 	(TOS)
.1665	98		tya				tya
.1666	a0 01		ldy #$01			ldy 	#1
.1668	71 06		adc ($06),y			adc 	(TOS),y
.166a	91 06		sta ($06),y			sta 	(TOS),y
.166c	68		pla				pla
.166d	85 07		sta $07				sta 	TOS+1
.166f	68		pla				pla
.1670	85 06		sta $06				sta 	TOS
.1672	4c 00 00	jmp $0000			jmp 	NextCode
.1675					AllocateMemory:
.1675	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1677	48		pha				pha
.1678	a5 07		lda $07				lda 	TOS+1
.167a	48		pha				pha
.167b	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.167d	85 06		sta $06				sta 	TOS
.167f	a5 0f		lda $0f				lda 	nextFreeMem+1
.1681	85 07		sta $07				sta 	TOS+1
.1683	7a		ply				ply 								; advance the free ram pointer
.1684	68		pla				pla
.1685	20 93 1d	jsr $1d93			jsr 	AdvanceFreeMem
.1688	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.168b					EncodeProgram:
.168b	48		pha				pha 								; save registers.
.168c	da		phx				phx
.168d	5a		phy				phy
.168e	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1690	85 08		sta $08				sta		srcPtr
.1692	a9 ff		lda #$ff			lda 	#$FF
.1694	85 05		sta $05				sta 	rsp
.1696	a6 05		ldx $05				ldx 	rsp 						; this is the current stack entry type, so $00 means
.1698	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.169b	20 0f 19	jsr $190f			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.169e	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.16a0	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.16a3	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.16a6	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.16a9	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.16ab	20 ba 18	jsr $18ba			jsr 	CheckIsDigit
.16ae	90 09		bcc $16b9			bcc 	_EPNoLineNumber 			; if so there is a line number
.16b0	20 dc 18	jsr $18dc			jsr 	EncodeGetConstant 			; extract that constant from the source
.16b3	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.16b6	8c 12 09	sty $0912			sty 	encodeBuffer+2
.16b9					_EPNoLineNumber:
.16b9					EncodeLoop:
.16b9	20 01 19	jsr $1901			jsr 	EncSkipSpaces 				; skip over spaces
.16bc	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.16be	d0 23		bne $16e3			bne 	_EPNotEnd
.16c0					_EPEndEncode:
.16c0	a9 ac		lda #$ac			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.16c2	a0 21		ldy #$21			ldy 	#NextLine >> 8
.16c4	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.16c7	a5 05		lda $05				lda 	rsp 						; is the return stack empty ?
.16c9	c9 ff		cmp #$ff			cmp 	#$FF
.16cb	d0 04		bne $16d1			bne 	_EPIncomplete
.16cd	7a		ply				ply									; restore and exit.
.16ce	fa		plx				plx
.16cf	68		pla				pla
.16d0	60		rts				rts
.16d1					_EPIncomplete:
.16d1	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>16d4	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>16dc	45 20 4f 50 45 4e 00
.16e3					_EPNotEnd:
.16e3	b2 08		lda ($08)			lda 	(srcPtr)
.16e5	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.16e7	f0 04		beq $16ed			beq 	_EPIsComStr
.16e9	c9 27		cmp #$27			cmp 	#"'"
.16eb	d0 05		bne $16f2			bne 	_EPNotComStr
.16ed					_EPIsComStr:
.16ed	20 df 17	jsr $17df			jsr 	EncodeCommentString
.16f0	80 c7		bra $16b9			bra 	EncodeLoop
.16f2					_EPNotComStr:
.16f2	38		sec				sec
.16f3	20 ee 18	jsr $18ee			jsr 	EncSetBit7Word
.16f6	20 36 19	jsr $1936			jsr 	EncodeSearchDictionary		; look it up
.16f9	90 45		bcc $1740			bcc 	_EPNotInDictionary
.16fb	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16fd	84 11		sty $11				sty 	temp1+1
.16ff	a0 01		ldy #$01			ldy 	#1
.1701	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.1703	29 20		and #$20			and 	#$20
.1705	d0 12		bne $1719			bne 	_EPEncodeRoutine 			; if so, do special routine.
.1707	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.1709	b1 10		lda ($10),y			lda 	(temp1),y
.170b	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.170e	c8		iny				iny
.170f	b1 10		lda ($10),y			lda 	(temp1),y
.1711	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1714	20 c6 18	jsr $18c6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.1717	80 a0		bra $16b9			bra 	EncodeLoop
.1719					_EPEncodeRoutine:
.1719	a0 01		ldy #$01			ldy 	#1							; get type bit
.171b	b1 10		lda ($10),y			lda 	(temp1),y
.171d	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.171f	29 10		and #$10			and 	#$10 						; but decoder comes first
.1721	f0 02		beq $1725			beq 	_EPENoDecoder
.1723	c8		iny				iny 								; so if it exists, adjust for it.
.1724	c8		iny				iny
.1725					_EPENoDecoder:
.1725	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.1727	85 12		sta $12				sta 	temp2
.1729	c8		iny				iny
.172a	b1 10		lda ($10),y			lda 	(temp1),y
.172c	85 13		sta $13				sta 	temp2+1
.172e	48		pha				pha 								; call routine preserving state
.172f	da		phx				phx
.1730	5a		phy				phy
.1731	20 3d 17	jsr $173d			jsr 	_EPECallTemp2
.1734	7a		ply				ply
.1735	fa		plx				plx
.1736	68		pla				pla
.1737	20 c6 18	jsr $18c6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.173a	4c b9 16	jmp $16b9			jmp 	EncodeLoop
.173d					_EPECallTemp2:
.173d	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1740					_EPNotInDictionary:
.1740	20 44 18	jsr $1844			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.1743	90 19		bcc $175e			bcc 	_EPNotDefined
.1745	48		pha				pha
.1746	a9 f6		lda #$f6			lda	 	#CallHandler & $FF 			; write code call handler
.1748	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.174b	a9 1b		lda #$1b			lda	 	#CallHandler >> 8
.174d	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1750	68		pla				pla 								; write line number
.1751	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1754	98		tya				tya
.1755	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1758	20 c6 18	jsr $18c6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.175b	4c b9 16	jmp $16b9			jmp 	EncodeLoop
.175e					_EPNotDefined:
.175e	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.1760	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.1762	f0 58		beq $17bc			beq 	_EPDefinition
.1764	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.1766	f0 2e		beq $1796			beq 	_EPCallDirect
.1768	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.176a	f0 47		beq $17b3			beq 	_EPVariable
.176c	c9 40		cmp #$40			cmp 	#"@"
.176e	f0 43		beq $17b3			beq 	_EPVariable
.1770	c9 26		cmp #$26			cmp 	#"&"
.1772	f0 3f		beq $17b3			beq 	_EPVariable
.1774	a9 a6		lda #$a6			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.1776	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.1778	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.177b					_EPOutputConstant:
.177b	20 dc 18	jsr $18dc			jsr 	EncodeGetConstant 			; extract that constant from the source
.177e	90 06		bcc $1786			bcc 	_EPFail 					; if can't find one, that's us done.
.1780	20 92 18	jsr $1892			jsr 	EncodeWriteWord 			; write out the encoded value.
.1783	4c b9 16	jmp $16b9			jmp 	EncodeLoop 					; and go round again.
.1786					_EPFail:
.1786	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1789	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>1791	52 52 4f 52 00
.1796					_EPCallDirect:
.1796	a9 f6		lda #$f6			lda	 	#CallHandler & $FF 			; write code call handler
.1798	a0 1b		ldy #$1b			ldy	 	#CallHandler >> 8
.179a	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.179d	a9 01		lda #$01			lda 	#1
.179f	20 d2 18	jsr $18d2			jsr 	EncodeAddSrcPtr 			; skip over the <
.17a2	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.17a4					_EPToLast:
.17a4	c8		iny				iny
.17a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.17a7	10 fb		bpl $17a4			bpl	 	_EPToLast
.17a9	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.17ab	d0 d9		bne $1786			bne 	_EPFail
.17ad	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.17af	91 08		sta ($08),y			sta 	(srcPtr),y
.17b1	80 c8		bra $177b			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.17b3					_EPVariable:
.17b3	20 8a 19	jsr $198a			jsr 	EncodeVariableReference
.17b6	20 c6 18	jsr $18c6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17b9	4c b9 16	jmp $16b9			jmp 	EncodeLoop
.17bc					_EPDefinition:
.17bc	a9 ee		lda #$ee			lda	 	#DefineCode & $FF 			; write code call handler
.17be	a0 21		ldy #$21			ldy	 	#DefineCode >> 8
.17c0	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.17c3	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.17c6	a9 01		lda #$01			lda 	#1 							; write default size
.17c8	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.17cb	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.17cd	c8		iny		_EPCopy:iny
.17ce	b1 08		lda ($08),y			lda 	(srcPtr),y
.17d0	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.17d3	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.17d6	0a		asl a				asl 	a
.17d7	90 f4		bcc $17cd			bcc 	_EPCopy
.17d9	20 c6 18	jsr $18c6			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.17dc	4c b9 16	jmp $16b9			jmp 	EncodeLoop

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.17df					EncodeCommentString:
.17df	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.17e1	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.17e3	aa		tax				tax 								; save in X
.17e4	a9 c3		lda #$c3			lda 	#(SkipComment & $FF)		; get the routine to use
.17e6	a0 21		ldy #$21			ldy 	#(SkipComment >> 8)
.17e8	e0 27		cpx #$27			cpx 	#"'"
.17ea	f0 06		beq $17f2			beq 	_ECSGotCmd
.17ec	86 10		stx $10				stx		temp1 						; other terminator = "
.17ee	a9 ce		lda #$ce			lda 	#(LiteralString & $FF)
.17f0	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.17f2					_ECSGotCmd:
.17f2	20 92 18	jsr $1892			jsr 	EncodeWriteWord 			; write word out.
.17f5	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.17f7	20 d2 18	jsr $18d2			jsr 	EncodeAddSrcPtr
.17fa	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.17fc	d0 03		bne $1801			bne 	_ECNoSkipSpaces
.17fe	20 01 19	jsr $1901			jsr 	EncSkipSpaces
.1801					_ECNoSkipSpaces:
.1801	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1804	a9 01		lda #$01			lda 	#1
.1806	20 9c 18	jsr $189c			jsr 	EncodeWriteByte 			; write total length, so far 1.
.1809	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.180b					_ECSCopyText:
.180b	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.180d	f0 18		beq $1827			beq 	_ECSEndOfLine 				; end of line ?
.180f	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.1811	f0 09		beq $181c			beq 	_ECSEndOfString 			; if so must be closing quote.
.1813	20 9c 18	jsr $189c			jsr 	EncodeWriteByte 			; write the byte out
.1816	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.1819	c8		iny				iny 								; next character
.181a	80 ef		bra $180b			bra 	_ECSCopyText
.181c					_ECSEndOfString:
.181c	c8		iny				iny 								; skip closing quote.
.181d	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.181f	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1822	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1825	80 18		bra $183f			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1827					_ECSEndOfLine:
.1827	a5 10		lda $10				lda 	temp1 						; missing closing quote
.1829	f0 14		beq $183f			beq 	_ECSComplete 				; if we were doing a string.
.182b	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>182e	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>1836	4e 47 20 51 55 4f 54 45 00
.183f					_ECSComplete:
.183f	98		tya				tya									; skip over.
.1840	20 d2 18	jsr $18d2			jsr 	EncodeAddSrcPtr
.1843	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1844					EncodeSearchUserDefined:
.1844	38		sec				sec 								; temp1 = srcPtr-6 because the
.1845	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1847	e9 06		sbc #$06			sbc		#6
.1849	85 10		sta $10				sta 	temp1
.184b	a5 09		lda $09				lda 	srcPtr+1
.184d	e9 00		sbc #$00			sbc 	#0
.184f	85 11		sta $11				sta 	temp1+1
.1851	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1853	85 12		sta $12				sta 	0+(temp2)
.1855	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1857	85 13		sta $13				sta 	1+(temp2)
.1859					_ESULoop:
.1859	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.185b	f0 33		beq $1890			beq 	_ESUFail
.185d	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.185f	b1 12		lda ($12),y			lda 	(temp2),y
.1861	c9 ee		cmp #$ee			cmp 	#DefineCode & $FF
.1863	d0 1e		bne $1883			bne 	_ESUNext
.1865	c8		iny				iny
.1866	b1 12		lda ($12),y			lda 	(temp2),y
.1868	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.186a	d0 17		bne $1883			bne 	_ESUNext
.186c	c8		iny				iny 								; skip length byte.
.186d					_ESUCompare:
.186d	c8		iny				iny
.186e	b1 12		lda ($12),y			lda 	(temp2),y
.1870	d1 10		cmp ($10),y			cmp 	(temp1),y
.1872	d0 0f		bne $1883			bne 	_ESUNext
.1874	0a		asl a				asl 	a 							; bit 7 set => found it.
.1875	90 f6		bcc $186d			bcc 	_ESUCompare
.1877	a0 01		ldy #$01			ldy 	#1
.1879	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.187b	aa		tax				tax
.187c	c8		iny				iny
.187d	b1 12		lda ($12),y			lda 	(temp2),y
.187f	a8		tay				tay
.1880	8a		txa				txa
.1881	38		sec				sec 								; return with carry set as found
.1882	60		rts				rts
.1883					_ESUNext:
.1883	18		clc				clc
.1884	a5 12		lda $12				lda 	temp2
.1886	72 12		adc ($12)			adc 	(temp2)
.1888	85 12		sta $12				sta 	temp2
.188a	90 02		bcc $188e			bcc 	_NoCarryAdv
.188c	e6 13		inc $13				inc 	temp2+1
.188e					_NoCarryAdv:
.188e	80 c9		bra $1859			bra 	_ESULoop 					; and loop round
.1890					_ESUFail:
.1890	18		clc				clc
.1891	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.1892					EncodeWriteWord:
.1892	48		pha				pha
.1893	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1896	98		tya				tya
.1897	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.189a	68		pla				pla
.189b	60		rts				rts
.189c					EncodeWriteByte:
.189c	da		phx				phx
.189d	ae 10 09	ldx $0910			ldx 	encodeBuffer
.18a0	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.18a3	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.18a6	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.18a9	ee 10 09	inc $0910			inc 	encodeBuffer
.18ac	fa		plx				plx
.18ad	60		rts				rts
.18ae					CheckIsLetter:
.18ae	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.18b0	90 06		bcc $18b8			bcc 	_CILFail
.18b2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.18b4	b0 02		bcs $18b8			bcs 	_CILFail
.18b6	38		sec				sec
.18b7	60		rts				rts
.18b8					_CILFail:
.18b8	18		clc				clc
.18b9	60		rts				rts
.18ba					CheckIsDigit:
.18ba	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.18bc	90 06		bcc $18c4			bcc 	_CIDFail
.18be	c9 3a		cmp #$3a			cmp 	#"9"+1
.18c0	b0 02		bcs $18c4			bcs 	_CIDFail
.18c2	38		sec				sec
.18c3	60		rts				rts
.18c4					_CIDFail:
.18c4	18		clc				clc
.18c5	60		rts				rts
.18c6					EncodeMoveNextWord:
.18c6	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.18c8					_EPNWLoop:
.18c8	c8		iny				iny
.18c9	b1 08		lda ($08),y			lda 	(srcPtr),y
.18cb	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.18cd	b0 f9		bcs $18c8			bcs 	_EPNWLoop
.18cf	98		tya				tya
.18d0	80 00		bra $18d2			bra 	EncodeAddSrcPtr
.18d2					EncodeAddSrcPtr:
.18d2	18		clc				clc 								; add offset
.18d3	65 08		adc $08				adc 	srcPtr
.18d5	85 08		sta $08				sta 	srcPtr
.18d7	90 02		bcc $18db			bcc 	_EASPNoCarry
.18d9	e6 09		inc $09				inc 	srcPtr+1					; carry through
.18db					_EASPNoCarry:
.18db	60		rts				rts
.18dc					EncodeGetConstant:
.18dc	a5 08		lda $08				lda 	srcPtr 						; get source
.18de	a4 09		ldy $09				ldy 	srcPtr+1
.18e0	20 17 22	jsr $2217			jsr 	ConvertToInteger 			; call converter
.18e3	90 08		bcc $18ed			bcc 	_EGCExit
.18e5	20 d2 18	jsr $18d2			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.18e8	a5 14		lda $14				lda 	temp3 						; get result into YA
.18ea	a4 15		ldy $15				ldy 	temp3+1
.18ec	38		sec				sec 								; return CS
.18ed					_EGCExit:
.18ed	60		rts				rts
.18ee					EncSetBit7Word:
.18ee	08		php				php 								; save carry
.18ef	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.18f1					_ESB7Loop:
.18f1	c8		iny				iny
.18f2	b1 08		lda ($08),y			lda 	(srcPtr),y
.18f4	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.18f6	b0 f9		bcs $18f1			bcs 	_ESB7Loop
.18f8	88		dey				dey									; previous character
.18f9	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.18fb	0a		asl a				asl 	a 							; shift bit 7 out
.18fc	28		plp				plp 								; restore carry
.18fd	6a		ror a				ror 	a 							; shift it in
.18fe	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.1900	60		rts				rts
.1901					EncSkipSpaces:
.1901	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.1903	c9 20		cmp #$20			cmp 	#32
.1905	d0 07		bne $190e			bne 	_ESNotSpace
.1907	a9 01		lda #$01			lda 	#1
.1909	20 d2 18	jsr $18d2			jsr 	EncodeAddSrcPtr
.190c	80 f3		bra $1901			bra	 	EncSkipSpaces
.190e					_ESNotSpace:
.190e	60		rts				rts
.190f					EncodeTrimTrailingSpaces:
.190f	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.1911					_ETTFindEnd:
.1911	c8		iny				iny
.1912	b1 08		lda ($08),y			lda 	(srcPtr),y
.1914	d0 fb		bne $1911			bne 	_ETTFindEnd
.1916					_ETTRemoveSpace:
.1916	c0 00		cpy #$00			cpy 	#0 							; start of string
.1918	f0 0d		beq $1927			beq 	_ETTExit
.191a	88		dey				dey 								; previous character 1..32
.191b	b1 08		lda ($08),y			lda 	(srcPtr),y
.191d	c9 21		cmp #$21			cmp 	#32+1
.191f	b0 06		bcs $1927			bcs 	_ETTExit
.1921	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.1923	91 08		sta ($08),y			sta 	(srcPtr),y
.1925	80 ef		bra $1916			bra 	_ETTRemoveSpace
.1927					_ETTExit:
.1927	60		rts				rts
.1928					EncodePushPosMarkerOnStack:
.1928	e6 05		inc $05				inc 	rsp 						; make space on rstack
.192a	a6 05		ldx $05				ldx 	rsp							; access it
.192c	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.192f	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.1932	9d 80 07	sta $0780,x			sta 	returnStackX,x
.1935	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.1936					EncodeSearchDictionary:
.1936	a9 fb		lda #$fb			lda 	#(Dictionary) & $FF
.1938	85 10		sta $10				sta 	0+(temp1)
.193a	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.193c	85 11		sta $11				sta 	1+(temp1)
.193e					_ESDLoop:
.193e	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.1940	18		clc				clc
.1941	f0 46		beq $1989			beq 	_ESDExit
.1943	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1945	b1 10		lda ($10),y			lda 	(temp1),y
.1947	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.1948	4a		lsr a				lsr 	a
.1949	4a		lsr a				lsr 	a
.194a	4a		lsr a				lsr 	a
.194b	c8		iny				iny 								; Y = 2
.194c	4a		lsr a				lsr 	a
.194d	90 01		bcc $1950			bcc 	_ESDNotDec
.194f	c8		iny				iny
.1950					_ESDNotDec:
.1950	4a		lsr a				lsr 	a
.1951	90 01		bcc $1954			bcc 	_ESDNotInc
.1953	c8		iny				iny
.1954					_ESDNotInc:
.1954	98		tya				tya
.1955	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1956	a8		tay				tay
.1957	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.1959	d2 08		cmp ($08)			cmp 	(srcPtr)
.195b	d0 1f		bne $197c			bne 	_ESDNext 					; do not match, go to next
.195d	98		tya				tya 								; make temp2 point to the name in
.195e	18		clc				clc 								; the dictionary.
.195f	65 10		adc $10				adc 	temp1
.1961	85 12		sta $12				sta 	temp2
.1963	a5 11		lda $11				lda 	temp1+1
.1965	69 00		adc #$00			adc 	#0
.1967	85 13		sta $13				sta 	temp2+1
.1969	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.196b					_ESDCompare:
.196b	c8		iny				iny
.196c	b1 08		lda ($08),y			lda 	(srcPtr),y
.196e	d1 12		cmp ($12),y			cmp 	(temp2),y
.1970	d0 0a		bne $197c			bne 	_ESDNext
.1972	0a		asl a				asl 	a
.1973	90 f6		bcc $196b			bcc 	_ESDCompare
.1975	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.1977	a4 11		ldy $11				ldy 	temp1+1
.1979	38		sec				sec
.197a	80 0d		bra $1989			bra 	_ESDExit
.197c					_ESDNext:
.197c	18		clc				clc
.197d	a5 10		lda $10				lda 	temp1
.197f	72 10		adc ($10)			adc 	(temp1)
.1981	85 10		sta $10				sta 	temp1
.1983	90 b9		bcc $193e			bcc 	_ESDLoop
.1985	e6 11		inc $11				inc 	temp1+1
.1987	80 b5		bra $193e			bra 	_ESDLoop
.1989					_ESDExit:
.1989	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encvar.src

.198a					EncodeVariableReference:
.198a	b2 08		lda ($08)			lda 	(srcPtr)					; get the type, use it to identify the routine
.198c	a2 50		ldx #$50			ldx 	#VarAddressHandler & $FF
.198e	a0 23		ldy #$23			ldy 	#VarAddressHandler >> 8
.1990	c9 26		cmp #$26			cmp 	#"&"
.1992	f0 0c		beq $19a0			beq 	_EVFHaveAddress
.1994	a2 6d		ldx #$6d			ldx 	#VarReadHandler & $FF
.1996	a0 23		ldy #$23			ldy 	#VarReadHandler >> 8
.1998	c9 40		cmp #$40			cmp 	#"@"
.199a	f0 04		beq $19a0			beq 	_EVFHaveAddress
.199c	a2 8c		ldx #$8c			ldx 	#VarWriteHandler & $FF
.199e	a0 23		ldy #$23			ldy 	#VarWriteHandler >> 8
.19a0					_EVFHaveAddress:
.19a0	8a		txa				txa
.19a1	20 92 18	jsr $1892			jsr 	EncodeWriteWord 			; write it out.
.19a4	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.19a6	b1 08		lda ($08),y			lda 	(srcPtr),y
.19a8	29 7f		and #$7f			and 	#$7F 						; might be the last.
.19aa	20 ae 18	jsr $18ae			jsr 	CheckIsLetter 				; is it A-Z
.19ad	90 54		bcc $1a03			bcc 	EVFFail
.19af	29 1f		and #$1f			and 	#31 						; make 1-26
.19b1	85 10		sta $10				sta 	temp1 						; start building the name in temp1
.19b3	64 11		stz $11				stz 	temp1+1
.19b5	38		sec				sec 								; possible char 2
.19b6	20 18 1a	jsr $1a18			jsr 	EncVarAlNum
.19b9	18		clc				clc 								; possible char 3
.19ba	20 18 1a	jsr $1a18			jsr 	EncVarAlNum
.19bd	5a		phy				phy
.19be	a5 10		lda $10				lda 	temp1 						; write out variable identifier.
.19c0	a4 11		ldy $11				ldy 	temp1+1
.19c2	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.19c5	7a		ply				ply
.19c6	b1 08		lda ($08),y			lda 	(srcPtr),y 					; more text after ?
.19c8	10 01		bpl $19cb			bpl 	_EVFCheckArray
.19ca	60		rts				rts
.19cb					_EVFCheckArray:
.19cb	c8		iny				iny 								; get the next character
.19cc	b1 08		lda ($08),y			lda 	(srcPtr),y
.19ce	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.19d0	d0 31		bne $1a03			bne 	EVFFail
.19d2	64 10		stz $10				stz 	temp1 						; zero temp1.
.19d4	c8		iny				iny  								; point to index
.19d5					_EVFGetIndex:
.19d5	06 10		asl $10				asl 	temp1 						; temp1 x 10
.19d7	a5 10		lda $10				lda 	temp1
.19d9	0a		asl a				asl 	a
.19da	0a		asl a				asl		a
.19db	65 10		adc $10				adc 	temp1
.19dd	85 10		sta $10				sta 	temp1
.19df	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get the digit
.19e1	20 ba 18	jsr $18ba			jsr 	CheckIsDigit
.19e4	90 1d		bcc $1a03			bcc 	EVFFail 					; failed, not digit
.19e6	29 0f		and #$0f			and 	#15
.19e8	18		clc				clc
.19e9	65 10		adc $10				adc 	temp1
.19eb	30 16		bmi $1a03			bmi 	EVFFail 					; failed, bad index.
.19ed	85 10		sta $10				sta 	temp1
.19ef	c8		iny				iny
.19f0	b1 08		lda ($08),y			lda 	(srcPtr),y
.19f2	c9 dd		cmp #$dd			cmp 	#"]"+$80
.19f4	d0 df		bne $19d5			bne 	_EVFGetIndex 				; index now in temp1.
.19f6	a9 ab		lda #$ab			lda 	#IndexHandler & $FF 		; output code
.19f8	a0 23		ldy #$23			ldy 	#IndexHandler >> 8
.19fa	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.19fd	a5 10		lda $10				lda 	temp1	 					; write index
.19ff	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1a02	60		rts				rts
.1a03					EVFFail:
.1a03	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a06	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>1a0e	41 42 4c 45 20 4e 41 4d 45 00
.1a18					EncVarAlNum:
.1a18	b1 08		lda ($08),y			lda 	(srcPtr),y 					; points to the  last char processed.
.1a1a	10 01		bpl $1a1d			bpl 	_EVAContinue
.1a1c	60		rts				rts
.1a1d					_EVAContinue:
.1a1d	08		php				php 								; CS x 32 ; CC x 32 x 40
.1a1e	c8		iny				iny 								; get the next character, strip bit 7
.1a1f	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a21	88		dey				dey
.1a22	29 7f		and #$7f			and 	#$7F
.1a24	20 ae 18	jsr $18ae			jsr 	CheckIsLetter 				; letter ?
.1a27	b0 08		bcs $1a31			bcs 	_EVACharOkay
.1a29	20 ba 18	jsr $18ba			jsr 	CheckIsDigit				; fail if not digit.
.1a2c	90 32		bcc $1a60			bcc 	_EVAExit
.1a2e	18		clc				clc
.1a2f	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.1a31					_EVACharOkay:
.1a31	c8		iny				iny 								; char okay advance to it.
.1a32	38		sec				sec 								; range 1-36
.1a33	e9 40		sbc #$40			sbc 	#64
.1a35	28		plp				plp 								; which multiplier ?
.1a36	90 0f		bcc $1a47			bcc 	_EVATimes32x40
.1a38	85 12		sta $12				sta 	temp2 						; save in temp2 - A x 32
.1a3a	64 13		stz $13				stz 	temp2+1
.1a3c	a2 05		ldx #$05			ldx 	#5
.1a3e	06 12		asl $12		_EVA32:	asl 	temp2
.1a40	26 13		rol $13				rol 	temp2+1
.1a42	ca		dex				dex
.1a43	d0 f9		bne $1a3e			bne 	_EVA32
.1a45	80 0b		bra $1a52			bra 	_EVAAddVar
.1a47					_EVATimes32x40:
.1a47	85 13		sta $13				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.1a49	64 12		stz $12				stz 	temp2
.1a4b	0a		asl a				asl 	a
.1a4c	0a		asl a				asl 	a
.1a4d	18		clc				clc
.1a4e	65 13		adc $13				adc 	temp2+1
.1a50	85 13		sta $13				sta 	temp2+1
.1a52					_EVAAddVar:
.1a52	18		clc				clc
.1a53	a5 10		lda $10				lda 	temp1
.1a55	65 12		adc $12				adc 	temp2
.1a57	85 10		sta $10				sta 	temp1
.1a59	a5 11		lda $11				lda 	temp1+1
.1a5b	65 13		adc $13				adc 	temp2+1
.1a5d	85 11		sta $11				sta 	temp1+1
.1a5f	08		php				php
.1a60					_EVAExit:
.1a60	28		plp				plp
.1a61	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1a62					ForHandler:
.1a62	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1a64	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.1a66	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1a68	f0 18		beq $1a82			beq 	_FHOverflow
.1a6a	a5 07		lda $07				lda 	TOS+1
.1a6c	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1a6f	a5 06		lda $06				lda 	TOS
.1a71	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1a74	a9 ff		lda #$ff			lda 	#$FF
.1a76	99 80 07	sta $0780,y			sta 	returnStackX,y
.1a79	68		pla				pla
.1a7a	85 07		sta $07				sta 	TOS+1
.1a7c	68		pla				pla
.1a7d	85 06		sta $06				sta 	TOS
.1a7f	4c 00 00	jmp $0000			jmp 	NextCode
.1a82					_FHOverflow:
.1a82	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1a85	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1a8d	45 20 4f 56 45 52 46 4c 4f 57 00
.1a98					ForEncoder:
.1a98	a9 62		lda #$62			lda 	#ForHandler & $FF 			; for handler
.1a9a	a0 1a		ldy #$1a			ldy 	#ForHandler >> 8
.1a9c	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1a9f	a9 46		lda #$46			lda 	#"F" 						; for marker
.1aa1	20 28 19	jsr $1928			jsr 	EncodePushPosMarkerOnStack
.1aa4	60		rts				rts
.1aa5					NextHandler:
.1aa5	da		phx				phx
.1aa6	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1aa8	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1aab	c9 ff		cmp #$ff			cmp 	#$FF
.1aad	d0 21		bne $1ad0			bne 	NHNoFor
.1aaf	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1ab2	d0 03		bne $1ab7			bne 	_NHNoBorrow
.1ab4	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1ab7					_NHNoBorrow:
.1ab7	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1aba	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1abd	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1ac0	fa		plx				plx 								; restore X and re-test
.1ac1	09 00		ora #$00			ora 	#0
.1ac3	f0 05		beq $1aca			beq 	_NHComplete 				; if so then complete, else loop.
.1ac5	e8		inx				inx 								; advance to branch
.1ac6	e8		inx				inx
.1ac7	4c ec 1b	jmp $1bec			jmp 	BranchAlways
.1aca					_NHComplete:
.1aca	e8		inx				inx 								; skip over the branch quantity
.1acb	c6 05		dec $05				dec 	rsp 						; drop the indx
.1acd	4c 00 00	jmp $0000			jmp 	NextCode
.1ad0					NHNoFor:
.1ad0	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1ad3	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>1adb	4f 52 20 53 43 4f 50 45 00
.1ae4					NextEncoder:
.1ae4	a9 a5		lda #$a5			lda 	#NextHandler & $FF 			; next code
.1ae6	a0 1a		ldy #$1a			ldy 	#NextHandler >> 8
.1ae8	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1aeb	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1aed	c6 05		dec $05				dec 	rsp
.1aef	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.1af2	c9 46		cmp #$46			cmp 	#"F"
.1af4	d0 07		bne $1afd			bne 	_NENoFor
.1af6	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1af9	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1afc	60		rts				rts
.1afd					_NENoFor:
.1afd	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b00	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>1b08	46 4f 52 00
.1b0c					GetIndex:
.1b0c	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1b0e	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.1b11	c9 ff		cmp #$ff			cmp 	#$FF
.1b13	d0 bb		bne $1ad0			bne 	NHNoFor
.1b15	a5 06		lda $06				lda 	TOS
.1b17	48		pha				pha
.1b18	a5 07		lda $07				lda 	TOS+1
.1b1a	48		pha				pha
.1b1b	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1b1e	38		sec				sec
.1b1f	e9 01		sbc #$01			sbc 	#1
.1b21	85 06		sta $06				sta 	TOS
.1b23	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1b26	e9 00		sbc #$00			sbc 	#0
.1b28	85 07		sta $07				sta 	TOS+1
.1b2a	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1b2d					IfHandler:
.1b2d	4c d4 1b	jmp $1bd4			jmp 	BranchIfZero
.1b30					IfEncoder:
.1b30	a9 2d		lda #$2d			lda 	#IfHandler & $FF 			; if handler
.1b32	a0 1b		ldy #$1b			ldy 	#IfHandler >> 8
.1b34	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1b37	a9 49		lda #$49			lda 	#"I" 						; if marker
.1b39	20 28 19	jsr $1928			jsr 	EncodePushPosMarkerOnStack
.1b3c	a9 00		lda #$00			lda 	#0
.1b3e	20 9c 18	jsr $189c			jsr 	EncodeWriteByte 			; dummy write.
.1b41	60		rts				rts
.1b42					ElseHandler:
.1b42	4c ea 1b	jmp $1bea			jmp 	BranchTestSucceedsNoPop
.1b45					ElseEncoder:
.1b45	a9 42		lda #$42			lda 	#ElseHandler & $FF 			; else handler
.1b47	a0 1b		ldy #$1b			ldy 	#ElseHandler >> 8
.1b49	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1b4c	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.1b4f	48		pha				pha
.1b50	a9 00		lda #$00			lda 	#0 							; zero branch
.1b52	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1b55	20 72 1b	jsr $1b72			jsr 	IfPatch 					; fix up the branch.
.1b58	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.1b5a	20 28 19	jsr $1928			jsr 	EncodePushPosMarkerOnStack
.1b5d	68		pla				pla 								; address to patch
.1b5e	a6 05		ldx $05				ldx 	rsp
.1b60	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.1b63	60		rts				rts
.1b64					EndIfHandler:
.1b64	4c 00 00	jmp $0000			jmp 	NextCode
.1b67					EndIfEncoder:
.1b67	a9 64		lda #$64			lda 	#EndIfHandler & $FF 		; endif handler
.1b69	a0 1b		ldy #$1b			ldy 	#EndIfHandler >> 8
.1b6b	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1b6e	20 72 1b	jsr $1b72			jsr 	IfPatch
.1b71	60		rts				rts
.1b72					IfPatch:
.1b72	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1b74	c6 05		dec $05				dec 	rsp
.1b76	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1b79	c9 49		cmp #$49			cmp 	#"I"
.1b7b	d0 0b		bne $1b88			bne 	_NENoIf
.1b7d	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.1b80	aa		tax				tax
.1b81	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.1b84	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1b87	60		rts				rts
.1b88					_NENoIf:
.1b88	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1b8b	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>1b93	49 46 00

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1b96					RepeatHandler:
.1b96	4c 00 00	jmp $0000			jmp 	NextCode
.1b99					RepeatEncoder:
.1b99	a9 96		lda #$96			lda 	#RepeatHandler & $FF 		; repeat marker
.1b9b	a0 1b		ldy #$1b			ldy 	#RepeatHandler >> 8
.1b9d	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1ba0	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.1ba2	20 28 19	jsr $1928			jsr 	EncodePushPosMarkerOnStack
.1ba5	60		rts				rts
.1ba6					UntilHandler:
.1ba6	4c d4 1b	jmp $1bd4			jmp 	BranchIfZero
.1ba9					UntilEncoder:
.1ba9	a9 a6		lda #$a6			lda 	#UntilHandler & $FF 		; until code
.1bab	a0 1b		ldy #$1b			ldy 	#UntilHandler >> 8
.1bad	20 92 18	jsr $1892			jsr 	EncodeWriteWord
.1bb0	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1bb2	c6 05		dec $05				dec 	rsp
.1bb4	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.1bb7	c9 52		cmp #$52			cmp 	#"R"
.1bb9	d0 07		bne $1bc2			bne 	_UENoRepeat
.1bbb	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1bbe	20 9c 18	jsr $189c			jsr 	EncodeWriteByte
.1bc1	60		rts				rts
.1bc2					_UENoRepeat:
.1bc2	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1bc5	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>1bcd	52 45 50 45 41 54 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1bd4					BranchIfZero:
.1bd4	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1bd6	05 07		ora $07				ora 	TOS+1
.1bd8	f0 0a		beq $1be4			beq 	BranchTestSucceeds
.1bda					BranchTestFails:
.1bda	68		pla				pla
.1bdb	85 07		sta $07				sta 	TOS+1
.1bdd	68		pla				pla
.1bde	85 06		sta $06				sta 	TOS
.1be0	e8		inx				inx 								; skip over the relative branch.
.1be1	4c 00 00	jmp $0000			jmp 	NextCode
.1be4					BranchTestSucceeds:
.1be4	68		pla				pla
.1be5	85 07		sta $07				sta 	TOS+1
.1be7	68		pla				pla
.1be8	85 06		sta $06				sta 	TOS
.1bea					BranchTestSucceedsNoPop:
.1bea	e8		inx				inx 								; advance by two, to the offset
.1beb	e8		inx				inx
.1bec					BranchAlways:
.1bec	8a		txa				txa 								; A = Y = position
.1bed	a8		tay				tay 								; (IP),Y now points to the branch target
.1bee	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1bf0	aa		tax				tax 								; position back in this line.
.1bf1	ca		dex				dex
.1bf2	ca		dex				dex
.1bf3	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1bf6					CallHandler:
.1bf6	e8		inx				inx									; bump X to the call address.
.1bf7	e8		inx				inx
.1bf8	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1bfa	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1bfc	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1bfe	f0 54		beq $1c54			beq 	_CHOverflow
.1c00	a5 04		lda $04				lda 	IP+1
.1c02	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1c05	a5 03		lda $03				lda 	IP
.1c07	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1c0a	8a		txa				txa
.1c0b	99 80 07	sta $0780,y			sta 	returnStackX,y
.1c0e	8a		txa				txa 								; get the line number into temp1.
.1c0f	a8		tay				tay
.1c10	b1 03		lda ($03),y			lda 	(IP),y
.1c12	85 10		sta $10				sta 	temp1
.1c14	c8		iny				iny
.1c15	b1 03		lda ($03),y			lda 	(IP),y
.1c17	85 11		sta $11				sta 	temp1+1
.1c19	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c1b	85 03		sta $03				sta 	0+(IP)
.1c1d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c1f	85 04		sta $04				sta 	1+(IP)
.1c21	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1c23	f0 17		beq $1c3c			beq 	_CHFail
.1c25	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1c27					_CHSearch:
.1c27	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1c29	c5 10		cmp $10				cmp 	temp1
.1c2b	f0 3e		beq $1c6b			beq 	_CHFoundLSB
.1c2d					_CHSearchNext:
.1c2d	18		clc				clc
.1c2e	a5 03		lda $03				lda 	IP
.1c30	72 03		adc ($03)			adc 	(IP)
.1c32	85 03		sta $03				sta 	IP
.1c34	90 02		bcc $1c38			bcc 	_NoCarryAdv
.1c36	e6 04		inc $04				inc 	IP+1
.1c38					_NoCarryAdv:
.1c38	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1c3a	d0 eb		bne $1c27			bne 	_CHSearch
.1c3c					_CHFail:
.1c3c	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1c3f	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1c47	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.1c54					_CHOverflow:
.1c54	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1c57	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1c5f	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1c6b					_CHFoundLSB:
.1c6b	c8		iny				iny 								; get MSB
.1c6c	b1 03		lda ($03),y			lda 	(IP),y
.1c6e	88		dey				dey
.1c6f	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1c71	d0 ba		bne $1c2d			bne 	_CHSearchNext
.1c73	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1c75	b1 03		lda ($03),y			lda 	(IP),y
.1c77	c9 ee		cmp #$ee			cmp 	#DefineCode & $FF
.1c79	d0 c1		bne $1c3c			bne 	_CHFail
.1c7b	c8		iny				iny
.1c7c	b1 03		lda ($03),y			lda 	(IP),y
.1c7e	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1c80	d0 ba		bne $1c3c			bne 	_CHFail
.1c82	c8		iny				iny
.1c83	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1c85	18		clc				clc
.1c86	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1c88	aa		tax				tax
.1c89	4c 00 00	jmp $0000			jmp 	NextCode
.1c8c					ReturnHandler:
.1c8c	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1c8e	30 15		bmi $1ca5			bmi 	_RHUnderflow 				; if -ve underflowed
.1c90	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1c92	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1c95	85 04		sta $04				sta 	IP+1
.1c97	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1c9a	85 03		sta $03				sta 	IP
.1c9c	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1c9f	aa		tax				tax
.1ca0	f0 15		beq $1cb7			beq 	_RHInLoop 					; this means you have done :something for ; next
.1ca2	4c 00 00	jmp $0000			jmp 	NextCode
.1ca5					_RHUnderflow:
.1ca5	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1ca8	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>1cb0	52 45 54 55 52 4e 00
.1cb7					_RHInLoop:
.1cb7	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1cba	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>1cc2	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.1ccf					CallHandlerDecode:
.1ccf	a9 03		lda #$03			lda 	#CTH_Call					; space
.1cd1	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1cd4	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1cd6	aa		tax				tax
.1cd7	c8		iny				iny
.1cd8	b1 08		lda ($08),y			lda 	(srcPtr),y
.1cda	a8		tay				tay
.1cdb	8a		txa				txa
.1cdc	20 19 1d	jsr $1d19			jsr 	FindLine 					; try to locate that line.
.1cdf	b0 11		bcs $1cf2			bcs 	_CHDFound 					; if found .....
.1ce1					_CHDLineOnly:
.1ce1	48		pha				pha
.1ce2	a9 3c		lda #$3c			lda 	#"<"
.1ce4	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1ce7	68		pla				pla
.1ce8	18		clc				clc 								; output unsigned
.1ce9	20 bb 1e	jsr $1ebb			jsr 	DecodeYAToBuffer
.1cec	a9 3e		lda #$3e			lda 	#">"
.1cee	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1cf1	60		rts				rts
.1cf2					_CHDFound:
.1cf2	48		pha				pha 								; save YA
.1cf3	5a		phy				phy
.1cf4	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1cf6	b1 10		lda ($10),y			lda 	(temp1),y
.1cf8	c9 ee		cmp #$ee			cmp 	#DefineCode & 255
.1cfa	d0 07		bne $1d03			bne 	_CHDNoDefine
.1cfc	c8		iny				iny
.1cfd	b1 10		lda ($10),y			lda 	(temp1),y
.1cff	c9 21		cmp #$21			cmp 	#DefineCode >> 8
.1d01	f0 04		beq $1d07			beq 	_CHDFoundDefine
.1d03					_CHDNoDefine:
.1d03	7a		ply				ply									; restore the line number and print it in <>
.1d04	68		pla				pla
.1d05	80 da		bra $1ce1			bra 	_CHDLineOnly
.1d07					_CHDFoundDefine:
.1d07	68		pla				pla 								; throw saved line number.
.1d08	68		pla				pla
.1d09	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1d0b					_CHDOutName:
.1d0b	c8		iny				iny 								; next
.1d0c	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1d0e	48		pha				pha
.1d0f	29 7f		and #$7f			and 	#$7F
.1d11	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1d14	68		pla				pla
.1d15	0a		asl a				asl 	a 							; bit 7 to carry
.1d16	90 f3		bcc $1d0b			bcc 	_CHDOutName
.1d18	60		rts				rts
.1d19					FindLine:
.1d19	48		pha				pha 								; save registers
.1d1a	da		phx				phx
.1d1b	5a		phy				phy
.1d1c	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1d1e	84 13		sty $13				sty 	temp2+1
.1d20	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1d22	85 10		sta $10				sta 	0+(temp1)
.1d24	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1d26	85 11		sta $11				sta 	1+(temp1)
.1d28					_FLLoop:
.1d28	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1d2a	18		clc				clc									; if so exit with CC.
.1d2b	f0 1d		beq $1d4a			beq 	_FLExit
.1d2d	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1d2f	b1 10		lda ($10),y			lda 	(temp1),y
.1d31	c5 12		cmp $12				cmp 	temp2
.1d33	d0 08		bne $1d3d			bne 	_FLNext
.1d35	c8		iny				iny
.1d36	b1 10		lda ($10),y			lda 	(temp1),y
.1d38	c5 13		cmp $13				cmp 	temp2+1
.1d3a	38		sec				sec 								; if so exit with CS
.1d3b	f0 0d		beq $1d4a			beq 	_FLExit
.1d3d					_FLNext:
.1d3d	18		clc				clc
.1d3e	a5 10		lda $10				lda 	temp1
.1d40	72 10		adc ($10)			adc 	(temp1)
.1d42	85 10		sta $10				sta 	temp1
.1d44	90 02		bcc $1d48			bcc 	_NoCarryAdv
.1d46	e6 11		inc $11				inc 	temp1+1
.1d48					_NoCarryAdv:
.1d48	80 de		bra $1d28			bra 	_FLLoop 					; keep looking.
.1d4a					_FLExit:
.1d4a	7a		ply				ply
.1d4b	fa		plx				plx
.1d4c	68		pla				pla
.1d4d	60		rts				rts
.1d4e	18		clc				clc
.1d4f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1d50					NewHandler:
.1d50	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1d53	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1d56	4c 00 00	jmp $0000			jmp 	NextCode
.1d59					ClrHandler:
.1d59	86 10		stx $10				stx 	temp1
.1d5b	a2 80		ldx #$80			ldx 	#NumberStackBase
.1d5d	9a		txs				txs
.1d5e	a6 10		ldx $10				ldx 	temp1
.1d60	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1d63	4c 00 00	jmp $0000			jmp 	NextCode
.1d66					ClearVariableSpace:
.1d66	a9 ff		lda #$ff			lda 	#$FF
.1d68	85 05		sta $05				sta 	rsp
.1d6a	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1d6c	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1d6e	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1d70	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1d72	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1d74					_CVSHashClear:
.1d74	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1d76	99 40 06	sta $0640,y			sta 	hashTable,y
.1d79	88		dey				dey
.1d7a	10 f8		bpl $1d74			bpl 	_CVSHashClear
.1d7c					_CVSFindEnd:
.1d7c	18		clc				clc
.1d7d	a5 0e		lda $0e				lda 	nextFreeMem
.1d7f	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1d81	85 0e		sta $0e				sta 	nextFreeMem
.1d83	90 02		bcc $1d87			bcc 	_NoCarryAdv
.1d85	e6 0f		inc $0f				inc 	nextFreeMem+1
.1d87					_NoCarryAdv:
.1d87	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1d89	d0 f1		bne $1d7c			bne 	_CVSFindEnd
.1d8b	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1d8d	a0 00		ldy #$00			ldy 	#0
.1d8f	20 93 1d	jsr $1d93			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1d92	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1d93					AdvanceFreeMem:
.1d93	18		clc				clc
.1d94	65 0e		adc $0e				adc 	nextFreeMem
.1d96	85 0e		sta $0e				sta 	nextFreeMem
.1d98	98		tya				tya
.1d99	65 0f		adc $0f				adc 	nextFreeMem+1
.1d9b	85 0f		sta $0f				sta 	nextFreeMem+1
.1d9d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1d9e					ExitDump:
.1d9e	ba		tsx				tsx 								; save Data Stack in temp1
.1d9f	86 10		stx $10				stx 	temp1
.1da1	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1da4					BreakCmd:
>1da4	ff						.byte 	$FF
.1da5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1da8					DecodeLineIntoBufPtr:
.1da8	48		pha				pha
.1da9	da		phx				phx
.1daa	5a		phy				phy
.1dab	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1dad	84 09		sty $09				sty 	srcPtr+1
.1daf	90 1b		bcc $1dcc			bcc 	_DecodeNoLineNumber
.1db1	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1db3	b1 08		lda ($08),y			lda 	(srcPtr),y
.1db5	aa		tax				tax
.1db6	c8		iny				iny
.1db7	b1 08		lda ($08),y			lda 	(srcPtr),y
.1db9	a8		tay				tay
.1dba	8a		txa				txa
.1dbb	18		clc				clc
.1dbc	20 bb 1e	jsr $1ebb			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1dbf	aa		tax				tax 								; count in X
.1dc0					_DecodeLineSpace:
.1dc0	e0 05		cpx #$05			cpx 	#5
.1dc2	f0 08		beq $1dcc			beq 	_DecodeNoLineNumber
.1dc4	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1dc6	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1dc9	e8		inx				inx
.1dca	80 f4		bra $1dc0			bra 	_DecodeLineSpace
.1dcc					_DecodeNoLineNumber:
.1dcc	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1dce					_DecodeLoop:
.1dce	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1dd0	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1dd2	c8		iny				iny
.1dd3	b1 08		lda ($08),y			lda 	(srcPtr),y
.1dd5	85 11		sta $11				sta 	temp1+1
.1dd7	c8		iny				iny 								; y points to the byte after it.
.1dd8	a5 10		lda $10				lda 	temp1
.1dda	c9 ac		cmp #$ac			cmp 	#NextLine & $FF
.1ddc	d0 06		bne $1de4			bne 	_DecodeNotEOL
.1dde	a5 11		lda $11				lda 	temp1+1
.1de0	c9 21		cmp #$21			cmp 	#NextLine >> 8
.1de2	f0 0b		beq $1def			beq 	_DecodeEOL
.1de4					_DecodeNotEOL:
.1de4	20 f7 1d	jsr $1df7			jsr 	IdentifyCodeWord
.1de7	20 44 1e	jsr $1e44			jsr 	DecodeFoundWord
.1dea	20 2e 1e	jsr $1e2e			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1ded	80 df		bra $1dce			bra 	_DecodeLoop 				; and go round again
.1def					_DecodeEOL:
.1def	a9 00		lda #$00			lda 	#0
.1df1	92 0a		sta ($0a)			sta 	(bufPtr)
.1df3	7a		ply				ply 								; restore registers and exit
.1df4	fa		plx				plx
.1df5	68		pla				pla
.1df6	60		rts				rts
.1df7					IdentifyCodeWord:
.1df7	5a		phy				phy 								; save current position on the stack.
.1df8	a9 fb		lda #$fb			lda 	#(Dictionary) & $FF
.1dfa	85 0c		sta $0c				sta 	0+(matchPtr)
.1dfc	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.1dfe	85 0d		sta $0d				sta 	1+(matchPtr)
.1e00					_DecodeIdentify:
.1e00	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1e02	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e04	c5 10		cmp $10				cmp 	temp1
.1e06	d0 07		bne $1e0f			bne 	_DecodeIdNext
.1e08	c8		iny				iny
.1e09	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e0b	c5 11		cmp $11				cmp 	temp1+1
.1e0d	f0 1d		beq $1e2c			beq 	_DecodeIdFound
.1e0f					_DecodeIdNext:
.1e0f	18		clc				clc
.1e10	b2 0c		lda ($0c)			lda 	(matchPtr)
.1e12	f0 0a		beq $1e1e			beq 	_DecodeIdIssue
.1e14	65 0c		adc $0c				adc 	matchPtr
.1e16	85 0c		sta $0c				sta 	matchPtr
.1e18	90 e6		bcc $1e00			bcc 	_DecodeIdentify
.1e1a	e6 0d		inc $0d				inc 	matchPtr+1
.1e1c	80 e2		bra $1e00			bra 	_DecodeIdentify
.1e1e					_DecodeIdIssue:
.1e1e	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>1e21	44 45 43 4f 44 45 2f 42				.text 	"DECODE/BUG",0
>1e29	55 47 00
.1e2c					_DecodeIdFound:
.1e2c	7a		ply				ply 								; restore position.
.1e2d	60		rts				rts
.1e2e					AdvanceToNext:
.1e2e	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1e2f	a0 01		ldy #$01			ldy 	#1
.1e31	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e33	29 03		and #$03			and 	#3 							; bits 0-1.
.1e35	7a		ply				ply
.1e36	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1e38	d0 02		bne $1e3c			bne 	_ATN012
.1e3a	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1e3c					_ATN012:
.1e3c	85 12		sta $12				sta 	temp2 						; now add that to Y
.1e3e	98		tya				tya
.1e3f	18		clc				clc
.1e40	65 12		adc $12				adc 	temp2
.1e42	a8		tay				tay
.1e43	60		rts				rts
.1e44					DecodeFoundWord:
.1e44	5a		phy				phy 								; save current position
.1e45	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1e47	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1e49	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1e4b	29 10		and #$10			and 	#$10
.1e4d	d0 0e		bne $1e5d			bne 	_DFWSpecialDecoder
.1e4f	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1e51	30 08		bmi $1e5b			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1e53	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1e55	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1e58	20 76 1e	jsr $1e76			jsr 	DecodeCurrentWord 			; expand that.
.1e5b					_DFWExit:
.1e5b	7a		ply				ply 								; restore current position
.1e5c	60		rts				rts
.1e5d					_DFWSpecialDecoder:
.1e5d	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1e5f	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1e61	85 12		sta $12				sta 	temp2
.1e63	c8		iny				iny
.1e64	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e66	85 13		sta $13				sta 	temp2+1
.1e68	7a		ply				ply 	 							; restore current position into Y
.1e69	48		pha				pha 								; save registers
.1e6a	da		phx				phx
.1e6b	5a		phy				phy
.1e6c	20 73 1e	jsr $1e73			jsr 	_DFWCallDecoder				; call the decoder routine
.1e6f	7a		ply				ply 								; restore registers and exit
.1e70	fa		plx				plx
.1e71	68		pla				pla
.1e72	60		rts				rts
.1e73					_DFWCallDecoder:
.1e73	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1e76					DecodeCurrentWord:
.1e76	5a		phy				phy
.1e77	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1e79	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1e7b	a0 04		ldy #$04			ldy 	#4 							; original offset
.1e7d	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1e7e	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1e7f	4a		lsr a				lsr 	a 							; bit set.
.1e80	4a		lsr a				lsr 	a
.1e81	4a		lsr a				lsr 	a 							; decoder bit
.1e82	90 02		bcc $1e86			bcc 	_DWBNoDec
.1e84	c8		iny				iny
.1e85	c8		iny				iny
.1e86					_DWBNoDec:
.1e86	4a		lsr a				lsr 	a
.1e87	90 02		bcc $1e8b			bcc 	_DWBNoEnc
.1e89	c8		iny				iny
.1e8a	c8		iny				iny
.1e8b					_DWBNoEnc:
.1e8b					_DWBWordOut:
.1e8b	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1e8d	48		pha				pha
.1e8e	29 7f		and #$7f			and 	#$7F
.1e90	20 99 1e	jsr $1e99			jsr		DecodeWriteBuffer
.1e93	c8		iny				iny
.1e94	68		pla				pla
.1e95	10 f4		bpl $1e8b			bpl 	_DWBWordOut
.1e97	7a		ply				ply 								; restore Y and exit
.1e98	60		rts				rts
.1e99					DecodeWriteBuffer:
.1e99	92 0a		sta ($0a)			sta 	(bufPtr)
.1e9b	e6 0a		inc $0a				inc 	bufPtr
.1e9d	d0 02		bne $1ea1			bne 	_DWBNoCarry
.1e9f	e6 0b		inc $0b				inc 	bufPtr+1
.1ea1					_DWBNoCarry:
.1ea1	60		rts				rts
.1ea2					DecodeOutputData:
.1ea2	48		pha				pha
.1ea3	da		phx				phx
.1ea4	5a		phy				phy
.1ea5	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1ea7	aa		tax				tax
.1ea8					_DODLoop:
.1ea8	ca		dex				dex 								; done it all ?
.1ea9	f0 0c		beq $1eb7			beq		_DODExit
.1eab	c8		iny				iny 								; output next character
.1eac	b1 08		lda ($08),y			lda 	(srcPtr),y
.1eae	29 7f		and #$7f			and 	#$7F
.1eb0	f0 f6		beq $1ea8			beq 	_DODLoop 					; don't print NULL
.1eb2	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.1eb5	80 f1		bra $1ea8			bra 	_DODLoop
.1eb7					_DODExit:
.1eb7	7a		ply				ply
.1eb8	fa		plx				plx
.1eb9	68		pla				pla
.1eba	60		rts				rts
.1ebb					DecodeYAToBuffer:
.1ebb	da		phx				phx
.1ebc	5a		phy				phy
.1ebd	48		pha				pha
.1ebe	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1ec0	85 12		sta $12				sta 	temp2
.1ec2	a5 0b		lda $0b				lda 	bufPtr+1
.1ec4	85 13		sta $13				sta 	temp2+1
.1ec6	68		pla				pla
.1ec7	20 e5 22	jsr $22e5			jsr 	ConvertToStringMain 		; convert YA to string there
.1eca	aa		tax				tax 								; chars output to X
.1ecb	18		clc				clc
.1ecc	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1ece	85 0a		sta $0a				sta 	bufPtr
.1ed0	90 02		bcc $1ed4			bcc 	_DYABNoCarry
.1ed2	e6 0b		inc $0b				inc 	bufPtr+1
.1ed4					_DYABNoCarry:
.1ed4	8a		txa				txa 								; count in A
.1ed5	7a		ply				ply									; restore and exit.
.1ed6	fa		plx				plx
.1ed7	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/edit.src

.1ed8					EditProgram:
.1ed8	20 55 1f	jsr $1f55			jsr 	EDFindLine					; find line address -> temp1
.1edb	90 0f		bcc $1eec			bcc 	_EPNotFound 				; if missing don't delete it.
.1edd	a5 10		lda $10				lda 	temp1 						; save line address
.1edf	48		pha				pha
.1ee0	a5 11		lda $11				lda 	temp1+1
.1ee2	48		pha				pha
.1ee3	20 fa 1e	jsr $1efa			jsr 	EDDeleteLine 				; delete the line
.1ee6	68		pla				pla 								; restore line address
.1ee7	85 11		sta $11				sta 	temp1+1
.1ee9	68		pla				pla
.1eea	85 10		sta $10				sta 	temp1
.1eec					_EPNotFound:
.1eec	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1eef	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1ef1	f0 03		beq $1ef6			beq 	_EPNoInsert
.1ef3	20 1d 1f	jsr $1f1d			jsr 	EDInsertLine 				; insert line back in.
.1ef6					_EPNoInsert:
.1ef6	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace
.1ef9	60		rts				rts
.1efa					EDDeleteLine:
.1efa	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace
.1efd	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1eff	a2 00		ldx #$00			ldx 	#0
.1f01	b1 10		lda ($10),y			lda 	(temp1),y
.1f03	a8		tay				tay 								; put in Y
.1f04					_EDDelLoop:
.1f04	b1 10		lda ($10),y			lda 	(temp1),y 					; get it
.1f06	81 10		sta ($10,x)			sta 	(temp1,x) 					; write it.
.1f08	a5 10		lda $10				lda 	temp1 						; check if pointer has reached the end of
.1f0a	c5 0e		cmp $0e				cmp		nextFreeMem 				; low memory. We will have copied down an
.1f0c	d0 06		bne $1f14			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1f0e	a5 11		lda $11				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1f10	c5 0f		cmp $0f				cmp 	nextFreeMem+1				; doesn't really matter.
.1f12	f0 08		beq $1f1c			beq		_EDDelExit
.1f14					_EDDelNext:
.1f14	e6 10		inc $10				inc 	temp1 						; go to next byte.
.1f16	d0 ec		bne $1f04			bne 	_EDDelLoop
.1f18	e6 11		inc $11				inc 	temp1+1
.1f1a	80 e8		bra $1f04			bra 	_EDDelLoop
.1f1c					_EDDelExit:
.1f1c	60		rts				rts
.1f1d					EDInsertLine:
.1f1d	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace
.1f20	a5 0e		lda $0e				lda 	nextFreeMem 				; copy high memory to temp3
.1f22	85 14		sta $14				sta 	temp3
.1f24	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f26	85 15		sta $15				sta 	temp3+1
.1f28	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1f2b	a2 00		ldx #$00			ldx 	#0
.1f2d					_EDInsLoop:
.1f2d	a1 14		lda ($14,x)			lda 	(temp3,x)					; copy it up
.1f2f	91 14		sta ($14),y			sta 	(temp3),y
.1f31	a5 14		lda $14				lda 	temp3 						; reached the insert point (temp1)
.1f33	c5 10		cmp $10				cmp 	temp1
.1f35	d0 06		bne $1f3d			bne 	_EDINextShift
.1f37	a5 15		lda $15				lda 	temp3+1
.1f39	c5 11		cmp $11				cmp 	temp1+1
.1f3b	f0 0a		beq $1f47			beq 	_EDIShiftOver
.1f3d					_EDINextShift:
.1f3d	a5 14		lda $14				lda 	temp3 						; decrement the copy pointer.
.1f3f	d0 02		bne $1f43			bne 	_EDINoBorrow
.1f41	c6 15		dec $15				dec 	temp3+1
.1f43					_EDINoBorrow:
.1f43	c6 14		dec $14				dec 	temp3
.1f45	80 e6		bra $1f2d			bra 	_EDInsLoop
.1f47					_EDIShiftOver:
.1f47	a0 00		ldy #$00			ldy 	#0
.1f49					_EDICopyCode:
.1f49	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1f4c	91 10		sta ($10),y			sta 	(temp1),y 					; write out
.1f4e	c8		iny				iny 								; bump pointers
.1f4f	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1f52	d0 f5		bne $1f49			bne 	_EDICopyCode
.1f54	60		rts				rts
.1f55					EDFindLine:
.1f55	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1f57	85 10		sta $10				sta 	0+(temp1)
.1f59	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1f5b	85 11		sta $11				sta 	1+(temp1)
.1f5d					_EDFLLoop:
.1f5d	b2 10		lda ($10)			lda 	(temp1) 					; check offset
.1f5f	f0 24		beq $1f85			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1f61	a0 01		ldy #$01			ldy 	#1							; look at line #
.1f63	38		sec				sec
.1f64	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1f67	f1 10		sbc ($10),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1f69	aa		tax				tax	 								; this will return 10.
.1f6a	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1f6d	c8		iny				iny
.1f6e	f1 10		sbc ($10),y			sbc 	(temp1),y
.1f70	90 13		bcc $1f85			bcc 	_EDFLFail					; if target < current then failed.
.1f72	d0 04		bne $1f78			bne 	_EDFLNext 					; if non-zero then goto next
.1f74	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1f76	f0 0f		beq $1f87			beq 	_EDFLFound
.1f78					_EDFLNext:
.1f78	18		clc				clc
.1f79	a5 10		lda $10				lda 	temp1
.1f7b	72 10		adc ($10)			adc 	(temp1)
.1f7d	85 10		sta $10				sta 	temp1
.1f7f	90 02		bcc $1f83			bcc 	_NoCarryAdv
.1f81	e6 11		inc $11				inc 	temp1+1
.1f83					_NoCarryAdv:
.1f83	80 d8		bra $1f5d			bra 	_EDFLLoop
.1f85					_EDFLFail:
.1f85	18		clc				clc
.1f86	60		rts				rts
.1f87					_EDFLFound:
.1f87	38		sec				sec
.1f88	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1f89					ListCode:
.1f89	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1f8b	64 1f		stz $1f				stz 	ListLowest+1
.1f8d	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1f8f	85 1d		sta $1d				sta 	ListCount
.1f91	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1f93	85 18		sta $18				sta 	0+(listPtr)
.1f95	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1f97	85 19		sta $19				sta 	1+(listPtr)
.1f99	86 10		stx $10				stx 	temp1						; S->A
.1f9b	ba		tsx				tsx
.1f9c	8a		txa				txa
.1f9d	a6 10		ldx $10				ldx 	temp1
.1f9f	c9 80		cmp #$80			cmp 	#NumberStackBase
.1fa1	f0 0e		beq $1fb1			beq 	_LCLoop
.1fa3	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1fa5	85 1e		sta $1e				sta 	ListLowest
.1fa7	a5 07		lda $07				lda 	TOS+1
.1fa9	85 1f		sta $1f				sta 	ListLowest+1
.1fab	68		pla				pla
.1fac	85 07		sta $07				sta 	TOS+1
.1fae	68		pla				pla
.1faf	85 06		sta $06				sta 	TOS
.1fb1					_LCLoop:
.1fb1	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1fb3	f0 4c		beq $2001			beq 	_LCExit
.1fb5	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1fb7	b1 18		lda ($18),y			lda 	(listPtr),y
.1fb9	c5 1e		cmp $1e				cmp 	ListLowest
.1fbb	c8		iny				iny
.1fbc	b1 18		lda ($18),y			lda 	(listPtr),y
.1fbe	e5 1f		sbc $1f				sbc 	ListLowest+1
.1fc0	90 32		bcc $1ff4			bcc 	_LCNext
.1fc2	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1fc4	85 0a		sta $0a				sta 	0+(bufPtr)
.1fc6	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1fc8	85 0b		sta $0b				sta 	1+(bufPtr)
.1fca	a5 18		lda $18				lda 	listPtr 					; output the line.
.1fcc	a4 19		ldy $19				ldy 	listPtr+1
.1fce	38		sec				sec
.1fcf	20 a8 1d	jsr $1da8			jsr 	DecodeLineIntoBufPtr
.1fd2	a9 02		lda #$02			lda 	#CTH_LineNo
.1fd4	20 68 11	jsr $1168			jsr 	ExternColour
.1fd7	a0 ff		ldy #$ff			ldy 	#255
.1fd9					_LCLoop2:
.1fd9	c8		iny				iny
.1fda	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1fdd	f0 0e		beq $1fed			beq 	_LCEnd
.1fdf	c9 20		cmp #$20			cmp 	#32
.1fe1	b0 05		bcs $1fe8			bcs 	_LCPrint
.1fe3	20 68 11	jsr $1168			jsr 	ExternColour
.1fe6	a9 20		lda #$20			lda 	#32
.1fe8					_LCPrint:
.1fe8	20 5e 11	jsr $115e			jsr 	ExternPrint
.1feb	80 ec		bra $1fd9			bra 	_LCLoop2
.1fed	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1fef	20 5e 11	jsr $115e			jsr 	ExternPrint
.1ff2	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1ff4					_LCNext:
.1ff4	18		clc				clc
.1ff5	a5 18		lda $18				lda 	listPtr
.1ff7	72 18		adc ($18)			adc 	(listPtr)
.1ff9	85 18		sta $18				sta 	listPtr
.1ffb	90 02		bcc $1fff			bcc 	_NoCarryAdv
.1ffd	e6 19		inc $19				inc 	listPtr+1
.1fff					_NoCarryAdv:
.1fff	80 b0		bra $1fb1			bra 	_LCLoop 					; go round again.
.2001					_LCExit:
.2001	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.2004					RunProgram:
.2004	86 10		stx $10				stx 	temp1
.2006	a2 80		ldx #$80			ldx 	#NumberStackBase
.2008	9a		txs				txs
.2009	a6 10		ldx $10				ldx 	temp1
.200b	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace 			; clear variables etc.
.200e	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.2010	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.2012	20 95 10	jsr $1095			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.2015	4c 00 00	jmp $0000			jmp 	NextCode
.2018					Call6502:
.2018	a5 06		lda $06				lda 	TOS 						; copy call address
.201a	85 10		sta $10				sta 	temp1
.201c	a5 07		lda $07				lda 	TOS+1
.201e	85 11		sta $11				sta 	temp1+1
.2020	68		pla				pla
.2021	85 07		sta $07				sta 	TOS+1
.2023	68		pla				pla
.2024	85 06		sta $06				sta 	TOS
.2026	20 2c 20	jsr $202c			jsr 	_CallTemp1 					; call it
.2029	4c 00 00	jmp $0000			jmp 	NextCode
.202c					_CallTemp1:
.202c	6c 10 00	jmp ($0010)			jmp 	(temp1)
.202f					AssertCode:
.202f	a5 06		lda $06				lda 	TOS 						; TOS = 0
.2031	05 07		ora $07				ora 	TOS+1
.2033	f0 09		beq $203e			beq 	_ASFail 					; if zero fail
.2035	68		pla				pla
.2036	85 07		sta $07				sta 	TOS+1
.2038	68		pla				pla
.2039	85 06		sta $06				sta 	TOS
.203b	4c 00 00	jmp $0000			jmp 	NextCode
.203e					_ASFail:
.203e	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>2041	41 53 53 45 52 54 00				.text 	"ASSERT",0
.2048					StopCode:
.2048	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>204b	53 54 4f 50 00					.text 	"STOP",0
.2050					EndProgram:
.2050	4c 14 10	jmp $1014			jmp 	WarmStart
.2053					VlistCode:
.2053	a9 fb		lda #$fb			lda 	#(Dictionary) & $FF
.2055	85 10		sta $10				sta 	0+(temp1)
.2057	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.2059	85 11		sta $11				sta 	1+(temp1)
.205b	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.205d	b1 10		lda ($10),y			lda 	(temp1),y
.205f	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.2061	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.2062	4a		lsr a				lsr 	a
.2063	4a		lsr a				lsr		a
.2064	4a		lsr a				lsr 	a
.2065	4a		lsr a				lsr 	a 							; add those bits in
.2066	90 02		bcc $206a			bcc 	_VLNoDec
.2068	c8		iny				iny
.2069	c8		iny				iny
.206a					_VLNoDec:
.206a	4a		lsr a				lsr 	a
.206b	90 02		bcc $206f			bcc 	_VLNoEnc
.206d	c8		iny				iny
.206e	c8		iny				iny
.206f					_VLNoEnc:
.206f	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.2071	c9 24		cmp #$24			cmp 	#"$"
.2073	d0 06		bne $207b			bne 	_VLPrint
.2075	c8		iny				iny
.2076	51 10		eor ($10),y			eor 	(temp1),y
.2078	f0 13		beq $208d			beq 	_VLNext
.207a	88		dey				dey
.207b					_VLPrint:
.207b	b1 10		lda ($10),y			lda 	(temp1),y
.207d	48		pha				pha
.207e	c8		iny				iny
.207f	29 7f		and #$7f			and 	#$7F
.2081	20 5e 11	jsr $115e			jsr 	ExternPrint
.2084	68		pla				pla
.2085	0a		asl a				asl 	a
.2086	90 f3		bcc $207b			bcc 	_VLPrint
.2088	a9 20		lda #$20			lda 	#32
.208a	20 5e 11	jsr $115e			jsr 	ExternPrint
.208d					_VLNext:
.208d	18		clc				clc 								; go to next
.208e	b2 10		lda ($10)			lda 	(temp1)
.2090	65 10		adc $10				adc 	temp1
.2092	85 10		sta $10				sta 	temp1
.2094	90 02		bcc $2098			bcc 	_VLNoCarry
.2096	e6 11		inc $11				inc 	temp1+1
.2098					_VLNoCarry:
.2098	b2 10		lda ($10)			lda 	(temp1)
.209a	d0 bf		bne $205b			bne 	_VLLoop
.209c	a9 0d		lda #$0d			lda 	#13
.209e	20 5e 11	jsr $115e			jsr 	ExternPrint
.20a1	4c 00 00	jmp $0000			jmp 	NextCode
.20a4					DumpStack:
.20a4	a9 5b		lda #$5b			lda		#"["
.20a6	20 5e 11	jsr $115e			jsr 	ExternPrint
.20a9	86 10		stx $10				stx 	temp1 						; X -> A
.20ab	ba		tsx				tsx
.20ac	8a		txa				txa
.20ad	a6 10		ldx $10				ldx 	temp1
.20af	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.20b1	f0 2f		beq $20e2			beq 	_DSExit
.20b3	48		pha				pha 								; save it
.20b4	a9 07		lda #$07			lda 	#COL_WHITE
.20b6	20 68 11	jsr $1168			jsr 	ExternColour
.20b9	a5 06		lda $06				lda 	TOS 						; print TOS then stack values backwards
.20bb	a4 07		ldy $07				ldy 	TOS+1
.20bd	38		sec				sec 								; print unsigned.
.20be	20 bf 22	jsr $22bf			jsr 	PrintYA
.20c1	a9 06		lda #$06			lda 	#COL_CYAN
.20c3	20 68 11	jsr $1168			jsr 	ExternColour
.20c6	7a		ply				ply 								; restore offset
.20c7					_DSLoop:
.20c7	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.20c9	f0 17		beq $20e2			beq 	_DSExit
.20cb	a9 20		lda #$20			lda 	#" " 						; space
.20cd	20 5e 11	jsr $115e			jsr 	ExternPrint
.20d0	5a		phy				phy 								; save pos
.20d1	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.20d4	48		pha				pha
.20d5	b9 02 01	lda $0102,y			lda 	$0102,y
.20d8	7a		ply				ply
.20d9	38		sec				sec
.20da	20 bf 22	jsr $22bf			jsr 	PrintYA 					; print it
.20dd	7a		ply				ply 								; restore and advance pos
.20de	c8		iny				iny
.20df	c8		iny				iny
.20e0	80 e5		bra $20c7			bra 	_DSLoop
.20e2					_DSExit:
.20e2	a9 5d		lda #$5d			lda		#"]"
.20e4	20 5e 11	jsr $115e			jsr 	ExternPrint
.20e7	a9 0d		lda #$0d			lda 	#13
.20e9	20 5e 11	jsr $115e			jsr 	ExternPrint
.20ec	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/saveload.src

.20ef					System_Save:
.20ef	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace  		; make sure start/end are right
.20f2	20 71 21	jsr $2171			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.20f5	20 1d 21	jsr $211d			jsr 	SLGetFileName 				; get filename -> temp3
.20f8	a5 0e		lda $0e				lda 	nextFreeMem 				; end address
.20fa	85 10		sta $10				sta 	temp1
.20fc	a5 0f		lda $0f				lda 	nextFreeMem+1
.20fe	85 11		sta $11				sta 	temp1+1
.2100	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.2102	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.2104	20 b0 11	jsr $11b0			jsr 	ExternSave
.2107	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace  		; make sure start/end are right
.210a	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack
.210d					System_Load:
.210d	20 1d 21	jsr $211d			jsr 	SLGetFileName 				; get filename -> temp3
.2110	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.2112	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.2114	20 e6 11	jsr $11e6			jsr 	ExternLoad
.2117	20 66 1d	jsr $1d66			jsr 	ClearVariableSpace 			; reset everything.
.211a	4c 0d 10	jmp $100d			jmp 	WarmStartBlankStack
.211d					SLGetFileName:
.211d	ba		tsx				tsx
.211e	e0 80		cpx #$80			cpx 	#NumberStackBase
.2120	f0 3a		beq $215c			beq 	_SLFNFail
.2122	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.2124	85 14		sta $14				sta 	temp3
.2126	a9 08		lda #$08			lda 	#textBuffer >> 8
.2128	85 15		sta $15				sta 	temp3+1
.212a	a0 00		ldy #$00			ldy 	#0
.212c	b1 06		lda ($06),y	_SLCopy:lda 	(TOS),y
.212e	91 14		sta ($14),y			sta 	(temp3),y
.2130	c8		iny				iny
.2131	c9 00		cmp #$00			cmp		#0
.2133	d0 f7		bne $212c			bne 	_SLCopy
.2135	88		dey				dey
.2136	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.2138					_SLCheckEnd:
.2138	88		dey				dey
.2139	bd 6c 21	lda $216c,x			lda 	_SLFNExtension,x
.213c	d1 14		cmp ($14),y			cmp 	(temp3),y
.213e	d0 05		bne $2145			bne 	_SLNoExtension
.2140	ca		dex				dex
.2141	10 f5		bpl $2138			bpl 	_SLCheckEnd
.2143	80 16		bra $215b			bra 	_SLExit
.2145					_SLNoExtension:
.2145	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.2147					_SLFindend:
.2147	c8		iny				iny
.2148	b9 10 08	lda $0810,y			lda 	textBuffer,y
.214b	d0 fa		bne $2147			bne 	_SLFindend
.214d	a2 00		ldx #$00			ldx 	#0
.214f					_SLAppend:
.214f	bd 6c 21	lda $216c,x			lda 	_SLFNExtension,x
.2152	99 10 08	sta $0810,y			sta 	textBuffer,y
.2155	e8		inx				inx
.2156	c8		iny				iny
.2157	c9 00		cmp #$00			cmp 	#0
.2159	d0 f4		bne $214f			bne 	_SLAppend
.215b					_SLExit:
.215b	60		rts				rts
.215c					_SLFNFail:
.215c	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>215f	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>2167	4e 41 4d 45 00
.216c					_SLFNExtension:
>216c	2e 52 50 4c 00					.text 	".RPL",0
.2171					ExtendWithDictionary:
.2171	20 9a 21	jsr $219a			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.2174	a9 fb		lda #$fb			lda 	#(Dictionary) & $FF
.2176	85 10		sta $10				sta 	0+(temp1)
.2178	a9 24		lda #$24			lda 	#(Dictionary) >> 8
.217a	85 11		sta $11				sta 	1+(temp1)
.217c					_EWDLoop:
.217c	b2 10		lda ($10)			lda 	(temp1)						; end
.217e	f0 1a		beq $219a			beq 	_EWDMarker
.2180	a0 02		ldy #$02			ldy 	#2 							; output the address
.2182	b1 10		lda ($10),y			lda 	(temp1),y
.2184	20 a3 21	jsr $21a3			jsr 	_EWDWrite
.2187	c8		iny				iny
.2188	b1 10		lda ($10),y			lda 	(temp1),y
.218a	20 a3 21	jsr $21a3			jsr 	_EWDWrite
.218d	18		clc				clc 								; next entry.
.218e	a5 10		lda $10				lda 	temp1
.2190	72 10		adc ($10)			adc 	(temp1)
.2192	85 10		sta $10				sta 	temp1
.2194	90 e6		bcc $217c			bcc 	_EWDLoop
.2196	e6 11		inc $11				inc 	temp1+1
.2198	80 e2		bra $217c			bra 	_EWDLoop
.219a					_EWDMarker:
.219a	a9 ff		lda #$ff			lda 	#$FF
.219c	20 a3 21	jsr $21a3			jsr 	_EWDWrite
.219f	20 a3 21	jsr $21a3			jsr 	_EWDWrite
.21a2	60		rts				rts
.21a3					_EWDWrite:
.21a3	92 0e		sta ($0e)			sta 	(nextFreeMem)
.21a5	e6 0e		inc $0e				inc 	nextFreeMem
.21a7	d0 02		bne $21ab			bne 	_EWDExit
.21a9	e6 0f		inc $0f				inc 	nextFreeMem+1
.21ab					_EWDExit:
.21ab	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.21ac					NextLine:
.21ac	18		clc				clc
.21ad	a5 03		lda $03				lda 	IP
.21af	72 03		adc ($03)			adc 	(IP)
.21b1	85 03		sta $03				sta 	IP
.21b3	90 02		bcc $21b7			bcc 	_NoCarryAdv
.21b5	e6 04		inc $04				inc 	IP+1
.21b7					_NoCarryAdv:
.21b7	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.21b9	f0 05		beq $21c0			beq 	_NLGoEnd
.21bb	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.21bd	4c 00 00	jmp $0000			jmp 	NextCode
.21c0					_NLGoEnd:
.21c0	4c 14 10	jmp $1014			jmp 	WarmStart
.21c3					SkipComment:
.21c3	e8		inx				inx									; (IP),X points to the length.
.21c4	e8		inx				inx
.21c5	8a		txa				txa
.21c6	a8		tay				tay 								; put into Y
.21c7	18		clc				clc
.21c8	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.21ca	aa		tax				tax 								; put back in X
.21cb	ca		dex				dex
.21cc	ca		dex				dex
.21cd	4c 00 00	jmp $0000			jmp 	NextCode
.21d0					CommentDecoder:
.21d0	a9 06		lda #$06			lda 	#CTH_Keyword
.21d2	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.21d5	a9 27		lda #$27			lda 	#"'"
.21d7	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.21da	b1 08		lda ($08),y			lda 	(srcPtr),y 					; check if there is no data
.21dc	c9 01		cmp #$01			cmp 	#1
.21de	f0 0d		beq $21ed			beq 	_CDEmpty 					; if so print nothing.
.21e0	a9 0b		lda #$0b			lda 	#CTH_Comment
.21e2	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.21e5	20 a2 1e	jsr $1ea2			jsr 	DecodeOutputData
.21e8	a9 20		lda #$20			lda 	#32
.21ea	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.21ed					_CDEmpty
.21ed	60		rts				rts
.21ee					DefineCode:
.21ee	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>21f1	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>21f9	44 45 46 49 4e 49 54 49 4f 4e 00
.2204					DefineDecoder:
.2204	a9 07		lda #$07			lda 	#CTH_Definition
.2206	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.2209	a9 3a		lda #$3a			lda 	#":"
.220b	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.220e	20 a2 1e	jsr $1ea2			jsr 	DecodeOutputData
.2211	a9 20		lda #$20			lda 	#32
.2213	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.2216	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.2217					ConvertToInteger:
.2217	84 17		sty $17				sty 	temp4+1
.2219	85 16		sta $16				sta 	temp4
.221b	64 14		stz $14				stz 	temp3 						; reset value
.221d	64 15		stz $15				stz 	temp3+1
.221f	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.2221	a0 00		ldy #$00			ldy 	#0 							; look at first character
.2223	b1 16		lda ($16),y			lda 	(temp4),y
.2225	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.2227	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.2229	d0 01		bne $222c			bne 	_CTINotMinus
.222b	c8		iny				iny									; skip -
.222c					_CTINotMinus:
.222c	b1 16		lda ($16),y			lda 	(temp4),y
.222e	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.2230	d0 03		bne $2235			bne 	_CTILoop
.2232	c6 10		dec $10				dec 	temp1
.2234	c8		iny				iny
.2235					_CTILoop:
.2235	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.2237	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.2239	38		sec				sec
.223a	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.223c	90 65		bcc $22a3			bcc 	_CTIFail 					; out of range.
.223e	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.2240	90 0b		bcc $224d			bcc 	_CTILegal
.2242	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.2244	90 5d		bcc $22a3			bcc 	_CTIFail
.2246	38		sec				sec
.2247	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.2249	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.224b	b0 56		bcs $22a3			bcs 	_CTIFail
.224d					_CTILegal:
.224d	48		pha				pha 								; save digit value.
.224e	06 14		asl $14				asl 	temp3
.2250	26 15		rol $15				rol 	temp3+1
.2252	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.2254	85 12		sta $12				sta 	temp2
.2256	a5 15		lda $15				lda 	temp3+1
.2258	85 13		sta $13				sta 	temp2+1
.225a	06 14		asl $14				asl 	temp3
.225c	26 15		rol $15				rol 	temp3+1
.225e	06 14		asl $14				asl 	temp3
.2260	26 15		rol $15				rol 	temp3+1
.2262	24 10		bit $10				bit 	temp1 						; hexadecimal
.2264	10 07		bpl $226d			bpl 	_CTIDecimal
.2266	06 14		asl $14				asl 	temp3
.2268	26 15		rol $15				rol 	temp3+1
.226a	68		pla				pla 								; get digit back
.226b	80 12		bra $227f			bra 	_CTIAddLoop
.226d					_CTIDecimal:
.226d	18		clc				clc 								; x 8 + x 2 = x 10
.226e	a5 14		lda $14				lda 	temp3
.2270	65 12		adc $12				adc 	temp2
.2272	85 14		sta $14				sta 	temp3
.2274	a5 15		lda $15				lda 	temp3+1
.2276	65 13		adc $13				adc 	temp2+1
.2278	85 15		sta $15				sta 	temp3+1
.227a	68		pla				pla 								; check digit 0-9
.227b	c9 0a		cmp #$0a			cmp 	#10
.227d	b0 24		bcs $22a3			bcs 	_CTIFail
.227f					_CTIAddLoop:
.227f	18		clc				clc
.2280	65 14		adc $14				adc 	temp3
.2282	85 14		sta $14				sta 	temp3
.2284	90 02		bcc $2288			bcc 	_CTINoCarry
.2286	e6 15		inc $15				inc 	temp3+1
.2288					_CTINoCarry:
.2288	c8		iny				iny
.2289	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.228b	c9 21		cmp #$21			cmp 	#32+1
.228d	b0 a6		bcs $2235			bcs 	_CTILoop 					; no, go back.
.228f	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.2291	d0 0d		bne $22a0			bne 	_CTIOkay
.2293	38		sec				sec
.2294	a9 00		lda #$00			lda 	#0 							; negate temp3.
.2296	e5 14		sbc $14				sbc 	temp3
.2298	85 14		sta $14				sta 	temp3
.229a	a9 00		lda #$00			lda 	#0
.229c	e5 15		sbc $15				sbc 	temp3+1
.229e	85 15		sta $15				sta 	temp3+1
.22a0					_CTIOkay:
.22a0	98		tya				tya
.22a1	38		sec				sec
.22a2	60		rts				rts
.22a3					_CTIFail:
.22a3	18		clc				clc
.22a4	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.22a5					IntToString:
.22a5	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22a7	85 12		sta $12				sta 	0+(temp2)
.22a9	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22ab	85 13		sta $13				sta 	1+(temp2)
.22ad	a5 06		lda $06				lda 	TOS 						; value in YA
.22af	a4 07		ldy $07				ldy 	TOS+1
.22b1	20 e1 22	jsr $22e1			jsr 	ConvertToString
.22b4	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22b6	85 06		sta $06				sta 	0+(TOS)
.22b8	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22ba	85 07		sta $07				sta 	1+(TOS)
.22bc	4c 00 00	jmp $0000			jmp 	NextCode
.22bf					PrintYA:
.22bf	48		pha				pha
.22c0	da		phx				phx
.22c1	5a		phy				phy
.22c2	48		pha				pha
.22c3	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.22c5	85 12		sta $12				sta 	0+(temp2)
.22c7	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.22c9	85 13		sta $13				sta 	1+(temp2)
.22cb	68		pla				pla
.22cc	20 e5 22	jsr $22e5			jsr 	ConvertToStringMain
.22cf	a2 00		ldx #$00			ldx 	#0
.22d1					_PrintYALoop:
.22d1	bd 10 08	lda $0810,x			lda 	textBuffer,x
.22d4	20 5e 11	jsr $115e			jsr 	ExternPrint
.22d7	e8		inx				inx
.22d8	bd 10 08	lda $0810,x			lda 	textBuffer,x
.22db	d0 f4		bne $22d1			bne 	_PrintYALoop
.22dd	7a		ply				ply
.22de	fa		plx				plx
.22df	68		pla				pla
.22e0	60		rts				rts
.22e1					ConvertToString:
.22e1	38		sec				sec
.22e2	80 01		bra $22e5			bra 	ConvertToStringMain
.22e4					ConvertToStringUnsigned:
.22e4	18		clc				clc
.22e5					ConvertToStringMain:
.22e5	da		phx				phx									; save XY
.22e6	5a		phy				phy
.22e7	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.22e9	85 10		sta $10				sta 	temp1 						; save YA in temp1
.22eb	84 11		sty $11				sty 	temp1+1
.22ed	a0 00		ldy #$00			ldy 	#0 							; index to result.
.22ef	90 16		bcc $2307			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.22f1	a5 11		lda $11				lda 	temp1+1 					; is it negative
.22f3	10 12		bpl $2307			bpl 	_CTSUnsigned
.22f5	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.22f7	91 12		sta ($12),y			sta 	(temp2),y
.22f9	c8		iny				iny
.22fa	38		sec				sec 								; negate temp1
.22fb	a9 00		lda #$00			lda 	#0
.22fd	e5 10		sbc $10				sbc 	temp1
.22ff	85 10		sta $10				sta 	temp1
.2301	a9 00		lda #$00			lda 	#0
.2303	e5 11		sbc $11				sbc 	temp1+1
.2305	85 11		sta $11				sta 	temp1+1
.2307					_CTSUnsigned:
.2307	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.2309					_CTSLoop:
.2309	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.230b	91 12		sta ($12),y			sta 	(temp2),y
.230d					_CTSSubLoop:
.230d	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.230f	1a		inc a				inc 	a
.2310	91 12		sta ($12),y			sta 	(temp2),y
.2312	38		sec				sec 								; do subtraction saving interim result
.2313	a5 10		lda $10				lda 	temp1
.2315	fd 48 23	sbc $2348,x			sbc 	_CTSTable,x
.2318	48		pha				pha
.2319	a5 11		lda $11				lda 	temp1+1
.231b	fd 49 23	sbc $2349,x			sbc 	_CTSTable+1,x
.231e	90 07		bcc $2327			bcc 	_CTSCantSubtract 			; end of subtraction.
.2320	85 11		sta $11				sta 	temp1+1 					; save result back
.2322	68		pla				pla
.2323	85 10		sta $10				sta 	temp1
.2325	80 e6		bra $230d			bra 	_CTSSubLoop
.2327					_CTSCantSubtract:
.2327	68		pla				pla 								; throw away interim
.2328	e8		inx				inx 								; next subtractor
.2329	e8		inx				inx
.232a	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.232c	49 30		eor #$30			eor 	#"0"
.232e	05 1a		ora $1a				ora 	SignCount
.2330	85 1a		sta $1a				sta 	SignCount
.2332	f0 01		beq $2335			beq		_CTSLZ 						; if all zeros so far suppress.
.2334	c8		iny				iny 								; next character
.2335					_CTSLZ:
.2335	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.2337	d0 d0		bne $2309			bne 	_CTSLoop
.2339					_CTSComplete:
.2339	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.233b	09 30		ora #$30			ora 	#48 						; ASCII
.233d	91 12		sta ($12),y			sta 	(temp2),y					; write out
.233f	c8		iny				iny
.2340	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.2342	91 12		sta ($12),y			sta 	(temp2),y
.2344	98		tya				tya 								; size in A
.2345	7a		ply				ply									; pull and exit.
.2346	fa		plx				plx
.2347	60		rts				rts
.2348					_CTSTable:
>2348	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.2350					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.2350					VarAddressHandler:
.2350	18		clc				clc 								; find variable, error if it doesn't exist.
.2351	20 f3 23	jsr $23f3			jsr 	VariableFind
.2354	20 cd 23	jsr $23cd			jsr 	VariableCheckIndex
.2357	a5 06		lda $06				lda 	TOS
.2359	48		pha				pha
.235a	a5 07		lda $07				lda 	TOS+1
.235c	48		pha				pha
.235d	a5 10		lda $10				lda 	temp1 						; the address is the new value
.235f	85 06		sta $06				sta 	TOS
.2361	a5 11		lda $11				lda		temp1+1
.2363	85 07		sta $07				sta 	TOS+1
.2365	4c 00 00	jmp $0000			jmp 	NextCode
.2368					VarAddrHandlerDecode:
.2368	a9 26		lda #$26			lda 	#"&"
.236a	4c a8 24	jmp $24a8			jmp 	VarHandlerDecode
.236d					VarReadHandler:
.236d	18		clc				clc 								; find variable, error if it doesn't exist.
.236e	20 f3 23	jsr $23f3			jsr 	VariableFind
.2371	20 cd 23	jsr $23cd			jsr 	VariableCheckIndex
.2374	a5 06		lda $06				lda 	TOS
.2376	48		pha				pha
.2377	a5 07		lda $07				lda 	TOS+1
.2379	48		pha				pha
.237a	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.237c	85 06		sta $06				sta 	TOS
.237e	a0 01		ldy #$01			ldy 	#1
.2380	b1 10		lda ($10),y			lda 	(temp1),y
.2382	85 07		sta $07				sta 	TOS+1
.2384	4c 00 00	jmp $0000			jmp 	NextCode
.2387					VarReadHandlerDecode:
.2387	a9 40		lda #$40			lda 	#"@"
.2389	4c a8 24	jmp $24a8			jmp 	VarHandlerDecode
.238c					VarWriteHandler:
.238c	38		sec				sec 								; find variable, create it if it doesn't exist.
.238d	20 f3 23	jsr $23f3			jsr 	VariableFind
.2390	20 cd 23	jsr $23cd			jsr 	VariableCheckIndex
.2393	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.2395	92 10		sta ($10)			sta 	(temp1)
.2397	a5 07		lda $07				lda 	TOS+1
.2399	a0 01		ldy #$01			ldy 	#1
.239b	91 10		sta ($10),y			sta 	(temp1),y
.239d	68		pla				pla
.239e	85 07		sta $07				sta 	TOS+1
.23a0	68		pla				pla
.23a1	85 06		sta $06				sta 	TOS
.23a3	4c 00 00	jmp $0000			jmp 	NextCode
.23a6					VarWriteHandlerDecode:
.23a6	a9 21		lda #$21			lda 	#"!"
.23a8	4c a8 24	jmp $24a8			jmp 	VarHandlerDecode
.23ab					IndexHandler:
.23ab	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>23ae	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>23b6	42 55 47 00
.23ba					IndexHandlerDecode:
.23ba	a9 5b		lda #$5b			lda 	#"["
.23bc	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.23bf	b1 08		lda ($08),y			lda 	(srcPtr),y
.23c1	a0 00		ldy #$00			ldy 	#0
.23c3	38		sec				sec
.23c4	20 bb 1e	jsr $1ebb			jsr 	DecodeYAToBuffer
.23c7	a9 5d		lda #$5d			lda 	#"]"
.23c9	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.23cc	60		rts				rts
.23cd					VariableCheckIndex:
.23cd	8a		txa				txa 								; next is $$index ?
.23ce	a8		tay				tay
.23cf	c8		iny				iny
.23d0	c8		iny				iny
.23d1	b1 03		lda ($03),y			lda 	(IP),y
.23d3	c9 ab		cmp #$ab			cmp 	#IndexHandler & $FF
.23d5	d0 1b		bne $23f2			bne 	_VCIExit
.23d7	c8		iny				iny
.23d8	b1 03		lda ($03),y			lda 	(IP),y
.23da	c9 23		cmp #$23			cmp 	#IndexHandler >> 8
.23dc	d0 14		bne $23f2			bne 	_VCIExit
.23de	98		tya				tya 								; fix X backup 3 on from where we started
.23df	aa		tax				tax
.23e0	c8		iny				iny 								; get the index
.23e1	b1 03		lda ($03),y			lda 	(IP),y
.23e3	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.23e4	a0 01		ldy #$01			ldy 	#1
.23e6	72 10		adc ($10)			adc 	(temp1) 					; do the indirection e.g. the look up.
.23e8	48		pha				pha
.23e9	b1 10		lda ($10),y			lda 	(temp1),y
.23eb	69 00		adc #$00			adc 	#0
.23ed	85 11		sta $11				sta 	temp1+1
.23ef	68		pla				pla
.23f0	85 10		sta $10				sta 	temp1
.23f2					_VCIExit:
.23f2	60		rts				rts
.23f3					VariableFind:
.23f3	08		php				php 								; save autocreate flag.
.23f4	e8		inx				inx 								; advance to/over the variable name.
.23f5	e8		inx				inx
.23f6	8a		txa				txa 								; put in Y
.23f7	a8		tay				tay
.23f8	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.23fa	85 12		sta $12				sta 	temp2
.23fc	c8		iny				iny
.23fd	b1 03		lda ($03),y			lda 	(IP),y
.23ff	85 13		sta $13				sta 	temp2+1
.2401	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.2403	b0 0f		bcs $2414			bcs 	_VFLong
.2405	a5 13		lda $13				lda 	temp2+1
.2407	d0 0b		bne $2414			bne 	_VFLong
.2409	a5 12		lda $12				lda 	temp2						; this is the index
.240b	0a		asl a				asl 	a 							; double it
.240c	85 10		sta $10				sta 	temp1
.240e	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.2410	85 11		sta $11				sta 	temp1+1
.2412	28		plp				plp 								; throw creation flag, it always exists.
.2413	60		rts				rts
.2414					_VFLong:
.2414	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.2416	6a		ror a				ror 	a
.2417	6a		ror a				ror 	a
.2418	6a		ror a				ror 	a
.2419	6a		ror a				ror 	a
.241a	45 12		eor $12				eor 	temp2
.241c	45 13		eor $13				eor 	temp2+1
.241e	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.2420	0a		asl a				asl 	a
.2421	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.2423	85 10		sta $10				sta 	temp1
.2425	85 14		sta $14				sta 	temp3
.2427	a9 06		lda #$06			lda 	#hashTable >> 8
.2429	85 11		sta $11				sta 	temp1+1
.242b	85 15		sta $15				sta 	temp3+1
.242d					_VFSearch:
.242d	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.242f	b1 10		lda ($10),y			lda 	(temp1),y
.2431	f0 23		beq $2456			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.2433	a8		tay				tay 								; follow the link through.
.2434	b2 10		lda ($10)			lda 	(temp1)
.2436	85 10		sta $10				sta 	temp1
.2438	84 11		sty $11				sty 	temp1+1
.243a	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.243c	b1 10		lda ($10),y			lda 	(temp1),y
.243e	c5 12		cmp $12				cmp 	temp2
.2440	d0 eb		bne $242d			bne 	_VFSearch 					; if it doesn't, follow the next link.
.2442	c8		iny				iny 								; same for 2nd byte of name
.2443	b1 10		lda ($10),y			lda 	(temp1),y
.2445	c5 13		cmp $13				cmp 	temp2+1
.2447	d0 e4		bne $242d			bne 	_VFSearch
.2449	18		clc				clc
.244a	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.244c	69 02		adc #$02			adc 	#2
.244e	85 10		sta $10				sta 	temp1
.2450	90 02		bcc $2454			bcc 	_VFNoPage1
.2452	e6 11		inc $11				inc 	temp1+1
.2454					_VFNoPage1:
.2454	28		plp				plp 								; don't need to worry about creation flag
.2455	60		rts				rts
.2456					_VFNotFound:
.2456	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.2457	b0 14		bcs $246d			bcs 	_VFCreate
.2459	20 fe 10	jsr $10fe			jsr 	ErrorHandler
>245c	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>2464	56 41 52 49 41 42 4c 45 00
.246d					_VFCreate:
.246d	a0 01		ldy #$01			ldy 	#1
.246f	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.2471	92 0e		sta ($0e)			sta 	(nextFreeMem)
.2473	b1 14		lda ($14),y			lda 	(temp3),y
.2475	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2477	c8		iny				iny
.2478	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.247a	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.247c	c8		iny				iny
.247d	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.247f	c8		iny				iny
.2480	a5 12		lda $12				lda 	temp2 						; copy the name out
.2482	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2484	c8		iny				iny
.2485	a5 13		lda $13				lda 	temp2+1
.2487	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.2489	a0 01		ldy #$01			ldy 	#1
.248b	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.248d	92 14		sta ($14)			sta 	(temp3)
.248f	a5 0f		lda $0f				lda 	nextFreeMem+1
.2491	91 14		sta ($14),y			sta 	(temp3),y
.2493	18		clc				clc
.2494	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.2496	69 02		adc #$02			adc 	#2
.2498	85 10		sta $10				sta 	temp1
.249a	a5 0f		lda $0f				lda 	nextFreeMem+1
.249c	69 00		adc #$00			adc 	#0
.249e	85 11		sta $11				sta 	temp1+1
.24a0	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.24a2	a0 00		ldy #$00			ldy 	#0
.24a4	20 93 1d	jsr $1d93			jsr 	AdvanceFreeMem
.24a7	60		rts				rts
.24a8					VarHandlerDecode:
.24a8	48		pha				pha 								; save, leading space
.24a9	a9 07		lda #$07			lda 	#CTH_Variable
.24ab	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.24ae	68		pla				pla 								; restore and write type
.24af	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.24b2	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.24b4	85 10		sta $10				sta 	temp1
.24b6	c8		iny				iny
.24b7	b1 08		lda ($08),y			lda 	(srcPtr),y
.24b9	85 11		sta $11				sta 	temp1+1
.24bb	a5 10		lda $10				lda 	temp1 						; output the first character
.24bd	29 1f		and #$1f			and 	#31
.24bf	20 ea 24	jsr $24ea			jsr 	VHOutVarChar
.24c2	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.24c4					_VHDShift:
.24c4	46 11		lsr $11				lsr 	temp1+1
.24c6	66 10		ror $10				ror 	temp1
.24c8	ca		dex				dex
.24c9	d0 f9		bne $24c4			bne 	_VHDShift
.24cb	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.24cd					_VHDDiv40:
.24cd	e8		inx				inx
.24ce	38		sec				sec
.24cf	a5 10		lda $10				lda 	temp1
.24d1	e9 28		sbc #$28			sbc 	#40
.24d3	a8		tay				tay
.24d4	a5 11		lda $11				lda 	temp1+1
.24d6	e9 00		sbc #$00			sbc 	#0
.24d8	90 06		bcc $24e0			bcc 	_VHDivDone
.24da	85 11		sta $11				sta 	temp1+1
.24dc	84 10		sty $10				sty 	temp1
.24de	80 ed		bra $24cd			bra 	_VHDDiv40
.24e0					_VHDivDone:
.24e0	a5 10		lda $10				lda 	temp1 						; remainder
.24e2	20 ea 24	jsr $24ea			jsr 	VHOutVarChar
.24e5	8a		txa				txa
.24e6	20 ea 24	jsr $24ea			jsr 	VHOutVarChar 				; and result.
.24e9	60		rts				rts
.24ea					VHOutVarChar:
.24ea	c9 00		cmp #$00			cmp 	#0
.24ec	f0 0c		beq $24fa			beq 	_VHOExit
.24ee	18		clc				clc
.24ef	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.24f1	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.24f3	90 02		bcc $24f7			bcc 	_VHOOut
.24f5	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.24f7					_VHOOut:
.24f7	20 99 1e	jsr $1e99			jsr 	DecodeWriteBuffer
.24fa					_VHOExit:
.24fa	60		rts				rts

;******  Return to file: kernel.asm

.24fb					Dictionary:

;******  Processing file: generated/dictionary.inc

>24fb	05					.byte	_end0-*
>24fc	00					.byte	$00
>24fd	4d 16					.word	WordWrite
>24ff	a1					.byte	$a1
.2500					_end0:
>2500	10					.byte	_end1-*
>2501	52					.byte	$52
>2502	8c 23					.word	VarWriteHandler
>2504	a6 23					.word	VarWriteHandlerDecode
>2506	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>250e	45 d2
.2510					_end1:
>2510	10					.byte	_end2-*
>2511	52					.byte	$52
>2512	50 23					.word	VarAddressHandler
>2514	68 23					.word	VarAddrHandlerDecode
>2516	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>251e	45 d2
.2520					_end2:
>2520	10					.byte	_end3-*
>2521	52					.byte	$52
>2522	6d 23					.word	VarReadHandler
>2524	87 23					.word	VarReadHandlerDecode
>2526	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>252e	45 d2
.2530					_end3:
>2530	0c					.byte	_end4-*
>2531	52					.byte	$52
>2532	f6 1b					.word	CallHandler
>2534	cf 1c					.word	CallHandlerDecode
>2536	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.253c					_end4:
>253c	0f					.byte	_end5-*
>253d	53					.byte	$53
>253e	c3 21					.word	SkipComment
>2540	d0 21					.word	CommentDecoder
>2542	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>254a	d4
.254b					_end5:
>254b	0e					.byte	_end6-*
>254c	53					.byte	$53
>254d	ee 21					.word	DefineCode
>254f	04 22					.word	DefineDecoder
>2551	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2559					_end6:
>2559	0f					.byte	_end7-*
>255a	52					.byte	$52
>255b	a6 10					.word	Literal2Byte
>255d	bc 10					.word	Literal2ByteDecode
>255f	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2567	cc
.2568					_end7:
>2568	0e					.byte	_end8-*
>2569	80					.byte	$80
>256a	ac 21					.word	NextLine
>256c	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2574	4e c5
.2576					_end8:
>2576	0e					.byte	_end9-*
>2577	53					.byte	$53
>2578	ce 10					.word	LiteralString
>257a	ed 10					.word	LiteralStringDecoder
>257c	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2584					_end9:
>2584	05					.byte	_end10-*
>2585	00					.byte	$00
>2586	c9 13					.word	Multiply16x16
>2588	aa					.byte	$aa
.2589					_end10:
>2589	05					.byte	_end11-*
>258a	00					.byte	$00
>258b	3a 12					.word	Add
>258d	ab					.byte	$ab
.258e					_end11:
>258e	06					.byte	_end12-*
>258f	00					.byte	$00
>2590	5e 16					.word	WordAdd
>2592	2b a1					.byte	$2b,$a1
.2594					_end12:
>2594	05					.byte	_end13-*
>2595	00					.byte	$00
>2596	49 12					.word	Subtract
>2598	ad					.byte	$ad
.2599					_end13:
>2599	06					.byte	_end14-*
>259a	00					.byte	$00
>259b	05 15					.word	ConstantMinus1
>259d	2d b1					.byte	$2d,$b1
.259f					_end14:
>259f	06					.byte	_end15-*
>25a0	00					.byte	$00
>25a1	a4 20					.word	DumpStack
>25a3	2e ae					.byte	$2e,$ae
.25a5					_end15:
>25a5	05					.byte	_end16-*
>25a6	00					.byte	$00
>25a7	1a 13					.word	Divide16x16
>25a9	af					.byte	$af
.25aa					_end16:
>25aa	05					.byte	_end17-*
>25ab	00					.byte	$00
>25ac	f8 14					.word	Constant0
>25ae	b0					.byte	$b0
.25af					_end17:
>25af	06					.byte	_end18-*
>25b0	00					.byte	$00
>25b1	5e 14					.word	CheckMinus
>25b3	30 bc					.byte	$30,$bc
.25b5					_end18:
>25b5	06					.byte	_end19-*
>25b6	00					.byte	$00
>25b7	72 14					.word	CheckZero
>25b9	30 bd					.byte	$30,$bd
.25bb					_end19:
>25bb	05					.byte	_end20-*
>25bc	00					.byte	$00
>25bd	14 15					.word	C1
>25bf	b1					.byte	$b1
.25c0					_end20:
>25c0	06					.byte	_end21-*
>25c1	00					.byte	$00
>25c2	08 14					.word	Unary1Plus
>25c4	31 ab					.byte	$31,$ab
.25c6					_end21:
>25c6	06					.byte	_end22-*
>25c7	00					.byte	$00
>25c8	1f 14					.word	Unary1Minus
>25ca	31 ad					.byte	$31,$ad
.25cc					_end22:
>25cc	06					.byte	_end23-*
>25cd	00					.byte	$00
>25ce	2c 15					.word	C10
>25d0	31 b0					.byte	$31,$b0
.25d2					_end23:
>25d2	07					.byte	_end24-*
>25d3	00					.byte	$00
>25d4	55 15					.word	C100
>25d6	31 30 b0				.byte	$31,$30,$b0
.25d9					_end24:
>25d9	08					.byte	_end25-*
>25da	00					.byte	$00
>25db	84 15					.word	C1024
>25dd	31 30 32 b4				.byte	$31,$30,$32,$b4
.25e1					_end25:
>25e1	07					.byte	_end26-*
>25e2	00					.byte	$00
>25e3	59 15					.word	C127
>25e5	31 32 b7				.byte	$31,$32,$b7
.25e8					_end26:
>25e8	07					.byte	_end27-*
>25e9	00					.byte	$00
>25ea	5d 15					.word	C128
>25ec	31 32 b8				.byte	$31,$32,$b8
.25ef					_end27:
>25ef	06					.byte	_end28-*
>25f0	00					.byte	$00
>25f1	30 15					.word	C15
>25f3	31 b5					.byte	$31,$b5
.25f5					_end28:
>25f5	06					.byte	_end29-*
>25f6	00					.byte	$00
>25f7	34 15					.word	C16
>25f9	31 b6					.byte	$31,$b6
.25fb					_end29:
>25fb	07					.byte	_end30-*
>25fc	00					.byte	$00
>25fd	96 14					.word	Times16
>25ff	31 36 aa				.byte	$31,$36,$aa
.2602					_end30:
>2602	07					.byte	_end31-*
>2603	00					.byte	$00
>2604	a9 14					.word	Divide16
>2606	31 36 af				.byte	$31,$36,$af
.2609					_end31:
>2609	05					.byte	_end32-*
>260a	00					.byte	$00
>260b	18 15					.word	C2
>260d	b2					.byte	$b2
.260e					_end32:
>260e	06					.byte	_end33-*
>260f	00					.byte	$00
>2610	a2 14					.word	Times2
>2612	32 aa					.byte	$32,$aa
.2614					_end33:
>2614	06					.byte	_end34-*
>2615	00					.byte	$00
>2616	11 14					.word	Unary2Plus
>2618	32 ab					.byte	$32,$ab
.261a					_end34:
>261a	06					.byte	_end35-*
>261b	00					.byte	$00
>261c	2a 14					.word	Unary2Minus
>261e	32 ad					.byte	$32,$ad
.2620					_end35:
>2620	06					.byte	_end36-*
>2621	00					.byte	$00
>2622	b5 14					.word	Divide2
>2624	32 af					.byte	$32,$af
.2626					_end36:
>2626	06					.byte	_end37-*
>2627	00					.byte	$00
>2628	38 15					.word	C24
>262a	32 b4					.byte	$32,$b4
.262c					_end37:
>262c	07					.byte	_end38-*
>262d	00					.byte	$00
>262e	61 15					.word	C255
>2630	32 35 b5				.byte	$32,$35,$b5
.2633					_end38:
>2633	07					.byte	_end39-*
>2634	00					.byte	$00
>2635	6c 15					.word	C256
>2637	32 35 b6				.byte	$32,$35,$b6
.263a					_end39:
>263a	08					.byte	_end40-*
>263b	00					.byte	$00
>263c	bc 14					.word	Times256
>263e	32 35 36 aa				.byte	$32,$35,$36,$aa
.2642					_end40:
>2642	08					.byte	_end41-*
>2643	00					.byte	$00
>2644	c5 14					.word	Divide256
>2646	32 35 36 af				.byte	$32,$35,$36,$af
.264a					_end41:
>264a	05					.byte	_end42-*
>264b	00					.byte	$00
>264c	1c 15					.word	C3
>264e	b3					.byte	$b3
.264f					_end42:
>264f	06					.byte	_end43-*
>2650	00					.byte	$00
>2651	49 15					.word	C32
>2653	33 b2					.byte	$33,$b2
.2655					_end43:
>2655	09					.byte	_end44-*
>2656	00					.byte	$00
>2657	9c 15					.word	C32767
>2659	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.265e					_end44:
>265e	09					.byte	_end45-*
>265f	00					.byte	$00
>2660	a8 15					.word	C32768
>2662	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2667					_end45:
>2667	05					.byte	_end46-*
>2668	00					.byte	$00
>2669	20 15					.word	C4
>266b	b4					.byte	$b4
.266c					_end46:
>266c	06					.byte	_end47-*
>266d	00					.byte	$00
>266e	9e 14					.word	Times4
>2670	34 aa					.byte	$34,$aa
.2672					_end47:
>2672	06					.byte	_end48-*
>2673	00					.byte	$00
>2674	b1 14					.word	Divide4
>2676	34 af					.byte	$34,$af
.2678					_end48:
>2678	08					.byte	_end49-*
>2679	00					.byte	$00
>267a	90 15					.word	C4096
>267c	34 30 39 b6				.byte	$34,$30,$39,$b6
.2680					_end49:
>2680	05					.byte	_end50-*
>2681	00					.byte	$00
>2682	24 15					.word	C5
>2684	b5					.byte	$b5
.2685					_end50:
>2685	07					.byte	_end51-*
>2686	00					.byte	$00
>2687	78 15					.word	C512
>2689	35 31 b2				.byte	$35,$31,$b2
.268c					_end51:
>268c	06					.byte	_end52-*
>268d	00					.byte	$00
>268e	4d 15					.word	C63
>2690	36 b3					.byte	$36,$b3
.2692					_end52:
>2692	06					.byte	_end53-*
>2693	00					.byte	$00
>2694	51 15					.word	C64
>2696	36 b4					.byte	$36,$b4
.2698					_end53:
>2698	05					.byte	_end54-*
>2699	00					.byte	$00
>269a	28 15					.word	C8
>269c	b8					.byte	$b8
.269d					_end54:
>269d	06					.byte	_end55-*
>269e	00					.byte	$00
>269f	9a 14					.word	Times8
>26a1	38 aa					.byte	$38,$aa
.26a3					_end55:
>26a3	06					.byte	_end56-*
>26a4	00					.byte	$00
>26a5	ad 14					.word	Divide8
>26a7	38 af					.byte	$38,$af
.26a9					_end56:
>26a9	05					.byte	_end57-*
>26aa	40					.byte	$40
>26ab	8c 1c					.word	ReturnHandler
>26ad	bb					.byte	$bb
.26ae					_end57:
>26ae	05					.byte	_end58-*
>26af	00					.byte	$00
>26b0	b6 12					.word	CheckLess
>26b2	bc					.byte	$bc
.26b3					_end58:
>26b3	06					.byte	_end59-*
>26b4	00					.byte	$00
>26b5	cf 12					.word	CheckLessEq
>26b7	3c bd					.byte	$3c,$bd
.26b9					_end59:
>26b9	06					.byte	_end60-*
>26ba	00					.byte	$00
>26bb	7f 12					.word	CheckNotEqual
>26bd	3c be					.byte	$3c,$be
.26bf					_end60:
>26bf	05					.byte	_end61-*
>26c0	00					.byte	$00
>26c1	82 12					.word	CheckEqual
>26c3	bd					.byte	$bd
.26c4					_end61:
>26c4	05					.byte	_end62-*
>26c5	00					.byte	$00
>26c6	d2 12					.word	CheckGreater
>26c8	be					.byte	$be
.26c9					_end62:
>26c9	06					.byte	_end63-*
>26ca	00					.byte	$00
>26cb	b3 12					.word	CheckGreaterEq
>26cd	3e bd					.byte	$3e,$bd
.26cf					_end63:
>26cf	08					.byte	_end64-*
>26d0	00					.byte	$00
>26d1	bd 15					.word	TestDup
>26d3	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.26d7					_end64:
>26d7	05					.byte	_end65-*
>26d8	00					.byte	$00
>26d9	32 16					.word	WordRead
>26db	c0					.byte	$c0
.26dc					_end65:
>26dc	07					.byte	_end66-*
>26dd	00					.byte	$00
>26de	38 14					.word	Absolute
>26e0	41 42 d3				.byte	$41,$42,$d3
.26e3					_end66:
>26e3	09					.byte	_end67-*
>26e4	00					.byte	$00
>26e5	75 16					.word	AllocateMemory
>26e7	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.26ec					_end67:
>26ec	07					.byte	_end68-*
>26ed	00					.byte	$00
>26ee	58 12					.word	And
>26f0	41 4e c4				.byte	$41,$4e,$c4
.26f3					_end68:
>26f3	0a					.byte	_end69-*
>26f4	00					.byte	$00
>26f5	2f 20					.word	AssertCode
>26f7	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.26fd					_end69:
>26fd	09					.byte	_end70-*
>26fe	00					.byte	$00
>26ff	8b 14					.word	ByteSwap
>2701	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2706					_end70:
>2706	06					.byte	_end71-*
>2707	00					.byte	$00
>2708	40 16					.word	ByteWrite
>270a	43 a1					.byte	$43,$a1
.270c					_end71:
>270c	06					.byte	_end72-*
>270d	00					.byte	$00
>270e	29 16					.word	ByteRead
>2710	43 c0					.byte	$43,$c0
.2712					_end72:
>2712	07					.byte	_end73-*
>2713	00					.byte	$00
>2714	59 1d					.word	ClrHandler
>2716	43 4c d2				.byte	$43,$4c,$d2
.2719					_end73:
>2719	08					.byte	_end74-*
>271a	00					.byte	$00
>271b	b4 15					.word	Drop
>271d	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2721					_end74:
>2721	07					.byte	_end75-*
>2722	00					.byte	$00
>2723	c6 15					.word	Dup
>2725	44 55 d0				.byte	$44,$55,$d0
.2728					_end75:
>2728	0a					.byte	_end76-*
>2729	21					.byte	$21
>272a	42 1b					.word	ElseHandler
>272c	45 1b					.word	ElseEncoder
>272e	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2732					_end76:
>2732	07					.byte	_end77-*
>2733	00					.byte	$00
>2734	50 20					.word	EndProgram
>2736	45 4e c4				.byte	$45,$4e,$c4
.2739					_end77:
>2739	0b					.byte	_end78-*
>273a	20					.byte	$20
>273b	64 1b					.word	EndIfHandler
>273d	67 1b					.word	EndIfEncoder
>273f	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2744					_end78:
>2744	09					.byte	_end79-*
>2745	20					.byte	$20
>2746	62 1a					.word	ForHandler
>2748	98 1a					.word	ForEncoder
>274a	46 4f d2				.byte	$46,$4f,$d2
.274d					_end79:
>274d	08					.byte	_end80-*
>274e	21					.byte	$21
>274f	2d 1b					.word	IfHandler
>2751	30 1b					.word	IfEncoder
>2753	49 c6					.byte	$49,$c6
.2755					_end80:
>2755	09					.byte	_end81-*
>2756	00					.byte	$00
>2757	0c 1b					.word	GetIndex
>2759	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.275e					_end81:
>275e	08					.byte	_end82-*
>275f	00					.byte	$00
>2760	89 1f					.word	ListCode
>2762	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2766					_end82:
>2766	07					.byte	_end83-*
>2767	00					.byte	$00
>2768	ef 12					.word	Maximum
>276a	4d 41 d8				.byte	$4d,$41,$d8
.276d					_end83:
>276d	07					.byte	_end84-*
>276e	00					.byte	$00
>276f	eb 12					.word	Minimum
>2771	4d 49 ce				.byte	$4d,$49,$ce
.2774					_end84:
>2774	07					.byte	_end85-*
>2775	00					.byte	$00
>2776	2b 13					.word	Modulus16x16
>2778	4d 4f c4				.byte	$4d,$4f,$c4
.277b					_end85:
>277b	0a					.byte	_end86-*
>277c	00					.byte	$00
>277d	3f 14					.word	Negate
>277f	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2785					_end86:
>2785	07					.byte	_end87-*
>2786	00					.byte	$00
>2787	50 1d					.word	NewHandler
>2789	4e 45 d7				.byte	$4e,$45,$d7
.278c					_end87:
>278c	0a					.byte	_end88-*
>278d	21					.byte	$21
>278e	a5 1a					.word	NextHandler
>2790	e4 1a					.word	NextEncoder
>2792	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2796					_end88:
>2796	07					.byte	_end89-*
>2797	00					.byte	$00
>2798	fa 15					.word	Nip
>279a	4e 49 d0				.byte	$4e,$49,$d0
.279d					_end89:
>279d	07					.byte	_end90-*
>279e	00					.byte	$00
>279f	4f 14					.word	OneComplement
>27a1	4e 4f d4				.byte	$4e,$4f,$d4
.27a4					_end90:
>27a4	06					.byte	_end91-*
>27a5	00					.byte	$00
>27a6	72 12					.word	LogOr
>27a8	4f d2					.byte	$4f,$d2
.27aa					_end91:
>27aa	08					.byte	_end92-*
>27ab	00					.byte	$00
>27ac	e2 15					.word	Over
>27ae	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.27b2					_end92:
>27b2	0c					.byte	_end93-*
>27b3	20					.byte	$20
>27b4	96 1b					.word	RepeatHandler
>27b6	99 1b					.word	RepeatEncoder
>27b8	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.27be					_end93:
>27be	07					.byte	_end94-*
>27bf	00					.byte	$00
>27c0	ce 14					.word	RandomNumber
>27c2	52 4e c4				.byte	$52,$4e,$c4
.27c5					_end94:
>27c5	07					.byte	_end95-*
>27c6	00					.byte	$00
>27c7	ff 15					.word	Rot
>27c9	52 4f d4				.byte	$52,$4f,$d4
.27cc					_end95:
>27cc	07					.byte	_end96-*
>27cd	00					.byte	$00
>27ce	04 20					.word	RunProgram
>27d0	52 55 ce				.byte	$52,$55,$ce
.27d3					_end96:
>27d3	07					.byte	_end97-*
>27d4	00					.byte	$00
>27d5	7a 14					.word	SignTOS
>27d7	53 47 ce				.byte	$53,$47,$ce
.27da					_end97:
>27da	08					.byte	_end98-*
>27db	00					.byte	$00
>27dc	48 20					.word	StopCode
>27de	53 54 4f d0				.byte	$53,$54,$4f,$d0
.27e2					_end98:
>27e2	08					.byte	_end99-*
>27e3	00					.byte	$00
>27e4	cf 15					.word	Swap
>27e6	53 57 41 d0				.byte	$53,$57,$41,$d0
.27ea					_end99:
>27ea	07					.byte	_end100-*
>27eb	00					.byte	$00
>27ec	18 20					.word	Call6502
>27ee	53 59 d3				.byte	$53,$59,$d3
.27f1					_end100:
>27f1	0d					.byte	_end101-*
>27f2	00					.byte	$00
>27f3	a5 22					.word	IntToString
>27f5	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>27fd	c7
.27fe					_end101:
>27fe	0b					.byte	_end102-*
>27ff	21					.byte	$21
>2800	a6 1b					.word	UntilHandler
>2802	a9 1b					.word	UntilEncoder
>2804	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2809					_end102:
>2809	09					.byte	_end103-*
>280a	00					.byte	$00
>280b	53 20					.word	VlistCode
>280d	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2812					_end103:
>2812	0a					.byte	_end104-*
>2813	40					.byte	$40
>2814	a4 1d					.word	BreakCmd
>2816	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.281c					_end104:
>281c	09					.byte	_end105-*
>281d	00					.byte	$00
>281e	9e 1d					.word	ExitDump
>2820	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2825					_end105:
>2825	07					.byte	_end106-*
>2826	00					.byte	$00
>2827	65 12					.word	Xor
>2829	58 4f d2				.byte	$58,$4f,$d2
.282c					_end106:
>282c	08					.byte	_end107-*
>282d	00					.byte	$00
>282e	ef 20					.word	System_Save
>2830	53 41 56 c5				.byte	$53,$41,$56,$c5
.2834					_end107:
>2834	08					.byte	_end108-*
>2835	00					.byte	$00
>2836	0d 21					.word	System_Load
>2838	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.283c					_end108:
>283c	0d					.byte	_end109-*
>283d	11					.byte	$11
>283e	ab 23					.word	IndexHandler
>2840	ba 23					.word	IndexHandlerDecode
>2842	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.2849					_end109:
>2849	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
