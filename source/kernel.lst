
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D encode=1 -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 18 11:35:14 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					encode=1

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.
=$9eff					LastMemoryByte = $9EFF 						; program ends here

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	8
=5					AltCode = NextCode+5 						; Patch goes here.
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0008					rsp:
>0008							.byte 	?
.0009					tos:
>0009							.word 	?
.000b					srcPtr:
>000b							.word 	?
.000d					bufPtr:
>000d							.word 	?
.000f					matchPtr:
>000f							.word 	?
.0011					nextFreeMem:
>0011							.word 	?
.0013					temp1:
>0013							.word 	?
.0015					temp2:
>0015							.word 	?
.0017					temp3:
>0017							.word 	?
.0019					temp4:
>0019							.word 	?
.001b					listPtr:
>001b							.word 	?
.001d					SignCount:
>001d							.byte 	?
.001e					RandomSeed:
>001e							.word 	?
.0020					ListCount:
>0020							.byte 	?
.0021					ListLowest:
>0021							.word 	?
.0023					BreakTestCount:
>0023							.byte 	?
.0024					FastMode:
>0024							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	4c 14 24	jmp $2414			jmp 	ColdStart

;******  Processing file: files.asm


;******  Processing file: code/core.src

.1003					InitialiseCoreCode:
.1003	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1005	85 02		sta $02				sta 	NextCode+2
.1007	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.1009	84 04		sty $04				sty 	NextCode+4
.100b	a9 4c		lda #$4c			lda 	#$4C 					; JMP AltHandler
.100d	85 05		sta $05				sta 	AltCode
.100f	a9 31		lda #$31			lda 	#AlternateHandler & $FF
.1011	85 06		sta $06				sta 	AltCode+1
.1013	a9 10		lda #$10			lda 	#AlternateHandler >> 8
.1015	85 07		sta $07				sta 	AltCode+2
.1017	20 1d 10	jsr $101d			jsr 	SetRunMode 				; set run mode to current
.101a	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.101c	60		rts				rts								; (2 INX skip offset and line#)
.101d					SetRunMode:
.101d	a5 24		lda $24				lda 	FastMode
.101f	f0 07		beq $1028			beq 	_SRMSlow
.1021	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1023	85 00		sta $00				sta 	NextCode
.1025	85 01		sta $01				sta 	NextCode+1
.1027	60		rts				rts
.1028					_SRMSlow:
.1028	a9 80		lda #$80			lda 	#$80	 				; BRA AltCode
.102a	85 00		sta $00				sta 	NextCode
.102c	a9 03		lda #$03			lda 	#AltCode-NextCode-2
.102e	85 01		sta $01				sta 	NextCode+1
.1030	60		rts				rts
.1031					AlternateHandler:
.1031	e8		inx				inx 							; patched in - does the INX that is overwritten
.1032	e8		inx				inx
.1033	86 13		stx $13				stx 	temp1 					; save it
.1035	ba		tsx				tsx 							; check underflow
.1036	e0 81		cpx #$81			cpx 	#$81
.1038	b0 11		bcs $104b			bcs 	_AHStackError
.103a	a6 13		ldx $13				ldx 	temp1
.103c	a5 23		lda $23				lda 	BreakTestCount 			; do a break test say 1 in 32
.103e	18		clc				clc
.103f	69 08		adc #$08			adc 	#8
.1041	85 23		sta $23				sta 	BreakTestCount
.1043	90 03		bcc $1048			bcc 	_AHNoTest
.1045	20 f9 24	jsr $24f9			jsr 	ExternCheckBreak
.1048					_AHNoTest:
.1048	4c 02 00	jmp $0002			jmp 	NextCode+2				; then the indirect jump.
.104b					_AHStackError:
.104b	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>104e	53 54 41 43 4b 20 55 4e				.text 	"STACK UNDERFLOW",0
>1056	44 45 52 46 4c 4f 57 00
.105e					SetSlowMode:
.105e	a9 00		lda #$00			lda 	#0
.1060	80 02		bra $1064			bra 	SetMode
.1062					SetFastMode:
.1062	a9 01		lda #$01			lda 	#1
.1064					SetMode:
.1064	85 24		sta $24				sta 	FastMode
.1066	20 1d 10	jsr $101d			jsr 	SetRunMode
.1069	4c 00 00	jmp $0000			jmp 	NextCode
.106c					HexLiteral2Byte:
.106c	ea		nop				nop 							; must have different address for decoding.
.106d					Literal2Byte:
.106d	a5 09		lda $09				lda 	TOS
.106f	48		pha				pha
.1070	a5 0a		lda $0a				lda 	TOS+1
.1072	48		pha				pha
.1073	e8		inx				inx  							; point X to the word
.1074	e8		inx				inx
.1075	8a		txa				txa 							; copy into Y
.1076	a8		tay				tay
.1077	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1079	85 09		sta $09				sta 	TOS
.107b	c8		iny				iny 							; read and push the MSB
.107c	b1 03		lda ($03),y			lda 	(IP),y
.107e	85 0a		sta $0a				sta 	TOS+1
.1080	4c 00 00	jmp $0000			jmp 	NextCode
.1083					HexLiteral2ByteDecode:
.1083	a9 06		lda #$06			lda 	#CTH_Keyword
.1085	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1088	a9 24		lda #$24			lda 	#"$"
.108a	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.108d	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.108f	48		pha				pha
.1090	c8		iny				iny
.1091	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1093	c8		iny				iny
.1094	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.1097	68		pla				pla
.1098	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.109b	60		rts				rts
.109c					HL2BDWrite:
.109c	48		pha				pha
.109d	4a		lsr a				lsr 	a
.109e	4a		lsr a				lsr 	a
.109f	4a		lsr a				lsr 	a
.10a0	4a		lsr a				lsr 	a
.10a1	20 a5 10	jsr $10a5			jsr 	_HLNibble
.10a4	68		pla				pla
.10a5					_HLNibble:
.10a5	29 0f		and #$0f			and 	#$0F
.10a7	c9 0a		cmp #$0a			cmp 	#$0A
.10a9	90 03		bcc $10ae			bcc 	_HLNoAdjust
.10ab	18		clc				clc
.10ac	69 07		adc #$07			adc 	#7
.10ae					_HLNoAdjust:
.10ae	18		clc				clc
.10af	69 30		adc #$30			adc 	#48
.10b1	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.10b4	60		rts				rts
.10b5					Literal2ByteDecode:
.10b5	a9 06		lda #$06			lda 	#CTH_Keyword
.10b7	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.10ba	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10bc	aa		tax				tax
.10bd	c8		iny				iny
.10be	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10c0	a8		tay				tay
.10c1	8a		txa				txa
.10c2	38		sec				sec 							; output signed
.10c3	20 bd 19	jsr $19bd			jsr 	DecodeYAToBuffer
.10c6	60		rts				rts
.10c7					LiteralString:
.10c7	a5 09		lda $09				lda 	TOS
.10c9	48		pha				pha
.10ca	a5 0a		lda $0a				lda 	TOS+1
.10cc	48		pha				pha
.10cd	e8		inx				inx
.10ce	e8		inx				inx 							; skip over current word
.10cf	8a		txa				txa 							; add to IP + 1 to give string address
.10d0	a8		tay				tay 							; put in Y
.10d1	38		sec				sec 							; make that TOS
.10d2	65 03		adc $03				adc 	IP
.10d4	85 09		sta $09				sta 	TOS
.10d6	a5 04		lda $04				lda 	IP+1
.10d8	69 00		adc #$00			adc 	#0
.10da	85 0a		sta $0a				sta 	TOS+1
.10dc	8a		txa				txa 							; add data length to X
.10dd	18		clc				clc
.10de	71 03		adc ($03),y			adc 	(IP),y
.10e0	aa		tax				tax
.10e1	ca		dex				dex
.10e2	ca		dex				dex
.10e3	4c 00 00	jmp $0000			jmp 	NextCode
.10e6					LiteralStringDecoder:
.10e6	a9 05		lda #$05			lda 	#CTH_String
.10e8	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.10eb	a9 22		lda #$22			lda 	#'"'
.10ed	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.10f0	20 a4 19	jsr $19a4			jsr 	DecodeOutputData
.10f3	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.10f6	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/binary.src

.10f7					Add:
.10f7	7a		ply				ply
.10f8	68		pla				pla
.10f9	18		clc				clc
.10fa	65 09		adc $09				adc 	TOS
.10fc	85 09		sta $09				sta 	TOS
.10fe	98		tya				tya
.10ff	65 0a		adc $0a				adc 	TOS+1
.1101	85 0a		sta $0a				sta 	TOS+1
.1103	4c 00 00	jmp $0000			jmp 	NextCode
.1106					Subtract:
.1106	7a		ply				ply
.1107	68		pla				pla
.1108	38		sec				sec
.1109	e5 09		sbc $09				sbc 	TOS
.110b	85 09		sta $09				sta 	TOS
.110d	98		tya				tya
.110e	e5 0a		sbc $0a				sbc 	TOS+1
.1110	85 0a		sta $0a				sta 	TOS+1
.1112	4c 00 00	jmp $0000			jmp 	NextCode
.1115					And:
.1115	68		pla				pla
.1116	25 0a		and $0a				and 	TOS+1
.1118	85 0a		sta $0a				sta 	TOS+1
.111a	68		pla				pla
.111b	25 09		and $09				and 	TOS
.111d	85 09		sta $09				sta 	TOS
.111f	4c 00 00	jmp $0000			jmp 	NextCode
.1122					Xor:
.1122	68		pla				pla
.1123	45 0a		eor $0a				eor 	TOS+1
.1125	85 0a		sta $0a				sta 	TOS+1
.1127	68		pla				pla
.1128	45 09		eor $09				eor 	TOS
.112a	85 09		sta $09				sta 	TOS
.112c	4c 00 00	jmp $0000			jmp 	NextCode
.112f					LogOr:
.112f	68		pla				pla
.1130	05 0a		ora $0a				ora 	TOS+1
.1132	85 0a		sta $0a				sta 	TOS+1
.1134	68		pla				pla
.1135	05 09		ora $09				ora 	TOS
.1137	85 09		sta $09				sta 	TOS
.1139	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/compare.src

.113c					CheckNotEqual:
.113c	38		sec				sec
.113d	80 01		bra $1140			bra 	CECode
.113f					CheckEqual:
.113f	18		clc				clc
.1140					CECode:
.1140	86 13		stx $13				stx 	temp1
.1142	ba		tsx				tsx
.1143	08		php				php
.1144	a5 09		lda $09				lda 	TOS
.1146	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1149	d0 17		bne $1162			bne	 	CompareFalse
.114b	a5 0a		lda $0a				lda 	TOS+1
.114d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1150	d0 10		bne $1162			bne 	CompareFalse
.1152					CompareTrue:
.1152	a6 13		ldx $13				ldx 	temp1
.1154	28		plp				plp
.1155	b0 10		bcs $1167			bcs		CompareFalse2
.1157					CompareTrue2:
.1157	68		pla				pla
.1158	68		pla				pla
.1159	a9 ff		lda #$ff			lda 	#$FF
.115b	85 09		sta $09				sta 	TOS
.115d	85 0a		sta $0a				sta 	TOS+1
.115f	4c 00 00	jmp $0000			jmp 	NextCode
.1162					CompareFalse:
.1162	a6 13		ldx $13				ldx 	temp1
.1164	28		plp				plp
.1165	b0 f0		bcs $1157			bcs		CompareTrue2
.1167					CompareFalse2:
.1167	68		pla				pla
.1168	68		pla				pla
.1169	64 09		stz $09				stz 	TOS
.116b	64 0a		stz $0a				stz 	TOS+1
.116d	4c 00 00	jmp $0000			jmp 	NextCode
.1170					CheckGreaterEq:
.1170	38		sec				sec
.1171	80 01		bra $1174			bra		CLCode
.1173					CheckLess:
.1173	18		clc				clc
.1174	86 13		stx $13		CLCode:	stx 	temp1
.1176	ba		tsx				tsx
.1177	08		php				php
.1178	18		clc				clc
.1179	a5 09		lda $09				lda 	TOS
.117b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.117e	a5 0a		lda $0a				lda 	TOS+1
.1180	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1183	50 02		bvc $1187			bvc 	_CLNoFlip
.1185	49 80		eor #$80			eor 	#$80
.1187					_CLNoFlip:
.1187	0a		asl a				asl 	a
.1188	b0 d8		bcs $1162			bcs 	CompareFalse
.118a	80 c6		bra $1152			bra 	CompareTrue
.118c					CheckLessEq:
.118c	38		sec				sec
.118d	80 01		bra $1190			bra		CGCode
.118f					CheckGreater:
.118f	18		clc				clc
.1190					CGCode:
.1190	86 13		stx $13				stx 	temp1
.1192	ba		tsx				tsx
.1193	08		php				php
.1194	18		clc				clc
.1195	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1198	e5 09		sbc $09				sbc 	TOS
.119a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.119d	e5 0a		sbc $0a				sbc 	TOS+1
.119f	50 02		bvc $11a3			bvc 	_CGNoFlip
.11a1	49 80		eor #$80			eor 	#$80
.11a3					_CGNoFlip:
.11a3	0a		asl a				asl 	a
.11a4	b0 bc		bcs $1162			bcs 	CompareFalse
.11a6	80 aa		bra $1152			bra 	CompareTrue
.11a8					Minimum:
.11a8	a9 00		lda #$00			lda 	#0
.11aa	80 02		bra $11ae			bra 	MinMaxCode
.11ac					Maximum:
.11ac	a9 80		lda #$80			lda 	#$80
.11ae					MinMaxCode:
.11ae	85 14		sta $14				sta 	temp1+1
.11b0	86 13		stx $13				stx 	temp1
.11b2	ba		tsx				tsx
.11b3	38		sec				sec
.11b4	a5 09		lda $09				lda 	TOS
.11b6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11b9	a5 0a		lda $0a				lda 	TOS+1
.11bb	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11be	50 02		bvc $11c2			bvc 	_MMNoFlip
.11c0	49 80		eor #$80			eor 	#$80
.11c2					_MMNoFlip:
.11c2	45 14		eor $14				eor 	temp1+1
.11c4	30 0a		bmi $11d0			bmi 	_MMNoCopy
.11c6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.11c9	85 09		sta $09				sta 	TOS
.11cb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.11ce	85 0a		sta $0a				sta 	TOS+1
.11d0					_MMNoCopy:
.11d0	a6 13		ldx $13				ldx 	temp1
.11d2	68		pla				pla
.11d3	68		pla				pla
.11d4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/divide.src

.11d7					Divide16x16:
.11d7	86 15		stx $15				stx 	temp2
.11d9	ba		tsx				tsx
.11da	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11dd	68		pla				pla
.11de	85 0a		sta $0a				sta 	TOS+1
.11e0	68		pla				pla
.11e1	85 09		sta $09				sta 	TOS
.11e3	a6 15		ldx $15				ldx 	temp2
.11e5	4c 00 00	jmp $0000			jmp 	NextCode
.11e8					Modulus16x16:
.11e8	86 15		stx $15				stx 	temp2
.11ea	ba		tsx				tsx
.11eb	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11ee	a6 15		ldx $15				ldx 	temp2
.11f0	68		pla				pla
.11f1	68		pla				pla
.11f2	a5 13		lda $13				lda 	temp1
.11f4	85 09		sta $09				sta 	TOS
.11f6	a5 14		lda $14				lda 	temp1+1
.11f8	85 0a		sta $0a				sta 	TOS+1
.11fa	4c 00 00	jmp $0000			jmp 	NextCode
.11fd					IntegerDivide:
.11fd	a5 09		lda $09				lda 	TOS 				; check for division by zero.
.11ff	05 0a		ora $0a				ora 	TOS+1
.1201	d0 14		bne $1217			bne 	_BFDOkay
.1203	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1206	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>120e	20 42 59 20 5a 45 52 4f 00
.1217					_BFDOkay:
.1217	64 13		stz $13				stz 	temp1 						; Q/Dividend/Left in +0
.1219	64 14		stz $14				stz 	temp1+1 					; M/Divisor/Right in +2
.121b	64 1d		stz $1d				stz 	SignCount 					; Count of signs.
.121d	20 58 12	jsr $1258			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1220	20 72 12	jsr $1272			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1223	5a		phy				phy 								; Y is the counter
.1224	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1226					_BFDLoop:
.1226	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1229	3e 01 01	rol $0101,x			rol 	Stack2High,x
.122c	26 13		rol $13				rol 	temp1
.122e	26 14		rol $14				rol 	temp1+1
.1230	38		sec				sec
.1231	a5 13		lda $13				lda 	temp1+0 					; Calculate A-M on stack.
.1233	e5 09		sbc $09				sbc 	TOS
.1235	48		pha				pha
.1236	a5 14		lda $14				lda 	temp1+1
.1238	e5 0a		sbc $0a				sbc 	TOS+1
.123a	90 0f		bcc $124b			bcc 	_BFDNoAdd
.123c	85 14		sta $14				sta 	temp1+1
.123e	68		pla				pla
.123f	85 13		sta $13				sta 	temp1+0
.1241	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1244	09 01		ora #$01			ora 	#1
.1246	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1249	80 01		bra $124c			bra 	_BFDNext
.124b					_BFDNoAdd:
.124b	68		pla				pla 								; Throw away the intermediate calculations
.124c					_BFDNext:
.124c	88		dey				dey
.124d	d0 d7		bne $1226			bne 	_BFDLoop
.124f	7a		ply				ply 								; restore Y
.1250	46 1d		lsr $1d				lsr 	SignCount 					; if sign count odd,
.1252	90 03		bcc $1257			bcc 	_BFDUnsigned 				; then the result is signed
.1254	20 5e 12	jsr $125e			jsr		IntegerNegateAlways 		; negate the result
.1257					_BFDUnsigned:
.1257	60		rts				rts
.1258					CheckIntegerNegate:
.1258	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.125b	30 01		bmi $125e			bmi 	IntegerNegateAlways 		; if so negate it
.125d	60		rts				rts
.125e					IntegerNegateAlways:
.125e	e6 1d		inc $1d				inc 	SignCount 					; bump the count of signs
.1260	38		sec				sec 								; negate
.1261	a9 00		lda #$00			lda 	#0
.1263	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1266	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1269	a9 00		lda #$00			lda 	#0
.126b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.126e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1271	60		rts				rts
.1272					CheckTOSNegate:
.1272	a5 0a		lda $0a				lda 	TOS+1
.1274	10 0f		bpl $1285			bpl		CTNNoChange
.1276	e6 1d		inc $1d				inc 	SignCount
.1278					TOSNegateAlways:
.1278	38		sec				sec
.1279	a9 00		lda #$00			lda 	#0
.127b	e5 09		sbc $09				sbc 	TOS
.127d	85 09		sta $09				sta 	TOS
.127f	a9 00		lda #$00			lda 	#0
.1281	e5 0a		sbc $0a				sbc 	TOS+1
.1283	85 0a		sta $0a				sta 	TOS+1
.1285					CTNNoChange:
.1285	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/multiply.src

.1286					Multiply16x16:
.1286	86 13		stx $13				stx 	temp1
.1288	ba		tsx				tsx
.1289	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.128c	85 15		sta $15				sta 	temp2
.128e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1291	85 16		sta $16				sta 	temp2+1
.1293	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1296	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1299					_MultLoop:
.1299	46 16		lsr $16				lsr 	temp2+1 					; ror temp2 into C
.129b	66 15		ror $15				ror 	temp2
.129d	90 11		bcc $12b0			bcc 	_MultNoAdd
.129f	18		clc				clc 								; add 1st to 2nd
.12a0	a5 09		lda $09				lda 	TOS
.12a2	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.12a5	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.12a8	a5 0a		lda $0a				lda 	TOS+1
.12aa	7d 01 01	adc $0101,x			adc 	Stack2High,x
.12ad	9d 01 01	sta $0101,x			sta 	Stack2High,x
.12b0					_MultNoAdd:
.12b0	06 09		asl $09				asl 	TOS 						; shift 1st left
.12b2	26 0a		rol $0a				rol 	TOS+1
.12b4	a5 15		lda $15				lda 	temp2	 					; until zero
.12b6	05 16		ora $16				ora 	temp2+1
.12b8	d0 df		bne $1299			bne 	_MultLoop
.12ba	a6 13		ldx $13				ldx 	temp1 						; restore X load result
.12bc	68		pla				pla
.12bd	85 0a		sta $0a				sta 	TOS+1
.12bf	68		pla				pla
.12c0	85 09		sta $09				sta 	TOS
.12c2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/unary.src

.12c5					Unary1Plus:
.12c5	e6 09		inc $09				inc 	TOS
.12c7	d0 02		bne $12cb			bne 	_U1PSkip
.12c9	e6 0a		inc $0a				inc 	TOS+1
.12cb					_U1PSkip:
.12cb	4c 00 00	jmp $0000			jmp 	NextCode
.12ce					Unary2Plus:
.12ce	18		clc				clc
.12cf	a5 09		lda $09				lda 	TOS
.12d1	69 02		adc #$02			adc 	#2
.12d3	85 09		sta $09				sta 	TOS
.12d5	90 02		bcc $12d9			bcc 	_U1PSkip
.12d7	e6 0a		inc $0a				inc 	TOS+1
.12d9					_U1PSkip:
.12d9	4c 00 00	jmp $0000			jmp 	NextCode
.12dc					Unary1Minus:
.12dc	a5 09		lda $09				lda 	TOS
.12de	d0 02		bne $12e2			bne 	_U1MSkip
.12e0	c6 0a		dec $0a				dec 	TOS+1
.12e2					_U1MSkip:
.12e2	c6 09		dec $09				dec 	TOS
.12e4	4c 00 00	jmp $0000			jmp 	NextCode
.12e7					Unary2Minus:
.12e7	38		sec				sec
.12e8	a5 09		lda $09				lda 	TOS
.12ea	e9 02		sbc #$02			sbc 	#2
.12ec	85 09		sta $09				sta 	TOS
.12ee	b0 02		bcs $12f2			bcs 	_U1PSkip
.12f0	c6 0a		dec $0a				dec 	TOS+1
.12f2					_U1PSkip:
.12f2	4c 00 00	jmp $0000			jmp 	NextCode
.12f5					Absolute:
.12f5	a5 0a		lda $0a				lda 	TOS+1
.12f7	30 03		bmi $12fc			bmi 	Negate
.12f9	4c 00 00	jmp $0000			jmp 	NextCode
.12fc					Negate:
.12fc	38		sec				sec
.12fd	a9 00		lda #$00			lda 	#0
.12ff	e5 09		sbc $09				sbc 	TOS
.1301	85 09		sta $09				sta 	TOS
.1303	a9 00		lda #$00			lda 	#0
.1305	e5 0a		sbc $0a				sbc 	TOS+1
.1307	85 0a		sta $0a				sta 	TOS+1
.1309	4c 00 00	jmp $0000			jmp 	NextCode
.130c					OneComplement:
.130c	a5 09		lda $09				lda 	TOS
.130e	49 ff		eor #$ff			eor 	#$FF
.1310	85 09		sta $09				sta 	TOS
.1312	a5 0a		lda $0a				lda 	TOS+1
.1314	49 ff		eor #$ff			eor 	#$FF
.1316	85 0a		sta $0a				sta 	TOS+1
.1318	4c 00 00	jmp $0000			jmp 	NextCode
.131b					CheckMinus:
.131b	a5 0a		lda $0a				lda 	TOS+1
.131d	30 07		bmi $1326			bmi 	UnaryTrue
.131f					UnaryFalse:
.131f	64 09		stz $09				stz 	TOS
.1321	64 0a		stz $0a				stz 	TOS+1
.1323	4c 00 00	jmp $0000			jmp 	NextCode
.1326					UnaryTrue:
.1326	a9 ff		lda #$ff			lda 	#$FF
.1328	85 09		sta $09				sta 	TOS
.132a	85 0a		sta $0a				sta 	TOS+1
.132c	4c 00 00	jmp $0000			jmp 	NextCode
.132f					CheckZero:
.132f	a5 09		lda $09				lda 	TOS
.1331	05 0a		ora $0a				ora 	TOS+1
.1333	d0 ea		bne $131f			bne 	UnaryFalse
.1335	80 ef		bra $1326			bra 	UnaryTrue
.1337					SignTOS:
.1337	a5 0a		lda $0a				lda 	TOS+1
.1339	30 eb		bmi $1326			bmi		UnaryTrue
.133b	05 09		ora $09				ora 	TOS
.133d	f0 e0		beq $131f			beq 	UnaryFalse
.133f	a9 01		lda #$01			lda 	#1
.1341	85 09		sta $09				sta 	TOS
.1343	64 0a		stz $0a				stz		TOS+1
.1345	4c 00 00	jmp $0000			jmp 	NextCode
.1348					ByteSwap:
.1348	a5 09		lda $09				lda 	TOS
.134a	a4 0a		ldy $0a				ldy 	TOS+1
.134c	85 0a		sta $0a				sta 	TOS+1
.134e	84 09		sty $09				sty 	TOS
.1350	4c 00 00	jmp $0000			jmp 	NextCode
.1353					Times16:
.1353	06 09		asl $09				asl 	TOS
.1355	26 0a		rol $0a				rol 	TOS+1
.1357					Times8:
.1357	06 09		asl $09				asl 	TOS
.1359	26 0a		rol $0a				rol 	TOS+1
.135b					Times4:
.135b	06 09		asl $09				asl 	TOS
.135d	26 0a		rol $0a				rol 	TOS+1
.135f					Times2:
.135f	06 09		asl $09				asl 	TOS
.1361	26 0a		rol $0a				rol 	TOS+1
.1363	4c 00 00	jmp $0000			jmp 	NextCode
.1366					Divide16:
.1366	46 0a		lsr $0a				lsr 	TOS+1
.1368	66 09		ror $09				ror 	TOS
.136a					Divide8:
.136a	46 0a		lsr $0a				lsr 	TOS+1
.136c	66 09		ror $09				ror 	TOS
.136e					Divide4:
.136e	46 0a		lsr $0a				lsr 	TOS+1
.1370	66 09		ror $09				ror 	TOS
.1372					Divide2:
.1372	46 0a		lsr $0a				lsr 	TOS+1
.1374	66 09		ror $09				ror 	TOS
.1376	4c 00 00	jmp $0000			jmp 	NextCode
.1379					Times256:
.1379	a5 09		lda $09				lda 	TOS
.137b	85 0a		sta $0a				sta 	TOS+1
.137d	64 09		stz $09				stz 	TOS
.137f	4c 00 00	jmp $0000			jmp 	NextCode
.1382					Divide256:
.1382	a5 0a		lda $0a				lda 	TOS+1
.1384	85 09		sta $09				sta 	TOS
.1386	64 0a		stz $0a				stz 	TOS+1
.1388	4c 00 00	jmp $0000			jmp 	NextCode
.138b					RandomNumber:
.138b	a5 09		lda $09				lda 	TOS
.138d	48		pha				pha
.138e	a5 0a		lda $0a				lda 	TOS+1
.1390	48		pha				pha
.1391	a5 1e		lda $1e				lda 	randomSeed
.1393	05 1f		ora $1f				ora 	randomSeed+1
.1395	d0 08		bne $139f			bne 	_RH_NoInit
.1397	a9 7c		lda #$7c			lda 	#$7C
.1399	85 1e		sta $1e				sta 	randomSeed
.139b	a9 a1		lda #$a1			lda 	#$A1
.139d	85 1f		sta $1f				sta 	randomSeed+1
.139f					_RH_NoInit:
.139f	a5 1e		lda $1e				lda 	randomSeed
.13a1	4a		lsr a		        lsr		a
.13a2	26 1f		rol $1f		        rol 	randomSeed+1
.13a4	90 02		bcc $13a8	        bcc 	_RH_NoEor
.13a6	49 b4		eor #$b4	        eor 	#$B4
.13a8					_RH_NoEor:
.13a8	85 1e		sta $1e		        sta 	randomSeed
.13aa	45 1f		eor $1f		        eor 	randomSeed+1
.13ac	85 0a		sta $0a		        sta 	TOS+1
.13ae	a5 1e		lda $1e		        lda 	randomSeed
.13b0	85 09		sta $09		        sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/literals.src

.13b5					Constant0:
.13b5	a5 09		lda $09				lda 	TOS
.13b7	48		pha				pha
.13b8	a5 0a		lda $0a				lda 	TOS+1
.13ba	48		pha				pha
.13bb	64 09		stz $09				stz 	TOS
.13bd	64 0a		stz $0a				stz 	TOS+1
.13bf	4c 00 00	jmp $0000			jmp 	NextCode
.13c2					ConstantMinus1:
.13c2	a5 09		lda $09				lda 	TOS
.13c4	48		pha				pha
.13c5	a5 0a		lda $0a				lda 	TOS+1
.13c7	48		pha				pha
.13c8	a9 ff		lda #$ff			lda 	#$FF
.13ca	85 09		sta $09				sta 	TOS
.13cc	85 0a		sta $0a				sta 	TOS+1
.13ce	4c 00 00	jmp $0000			jmp 	NextCode
.13d1					C1:
.13d1	a0 01		ldy #$01			ldy 	#1
.13d3	80 24		bra $13f9			bra 	Const1Byte
.13d5					C2:
.13d5	a0 02		ldy #$02			ldy 	#2
.13d7	80 20		bra $13f9			bra 	Const1Byte
.13d9					C3:
.13d9	a0 03		ldy #$03			ldy 	#3
.13db	80 1c		bra $13f9			bra 	Const1Byte
.13dd					C4:
.13dd	a0 04		ldy #$04			ldy 	#4
.13df	80 18		bra $13f9			bra 	Const1Byte
.13e1					C5:
.13e1	a0 05		ldy #$05			ldy 	#5
.13e3	80 14		bra $13f9			bra 	Const1Byte
.13e5					C8:
.13e5	a0 08		ldy #$08			ldy 	#8
.13e7	80 10		bra $13f9			bra 	Const1Byte
.13e9					C10:
.13e9	a0 0a		ldy #$0a			ldy 	#10
.13eb	80 0c		bra $13f9			bra 	Const1Byte
.13ed					C15:
.13ed	a0 0f		ldy #$0f			ldy 	#15
.13ef	80 08		bra $13f9			bra 	Const1Byte
.13f1					C16:
.13f1	a0 10		ldy #$10			ldy 	#16
.13f3	80 04		bra $13f9			bra 	Const1Byte
.13f5					C24:
.13f5	a0 18		ldy #$18			ldy 	#24
.13f7	80 00		bra $13f9			bra 	Const1Byte
.13f9					Const1Byte:
.13f9	a5 09		lda $09				lda 	TOS
.13fb	48		pha				pha
.13fc	a5 0a		lda $0a				lda 	TOS+1
.13fe	48		pha				pha
.13ff	84 09		sty $09				sty 	TOS
.1401	64 0a		stz $0a				stz 	TOS+1
.1403	4c 00 00	jmp $0000			jmp 	NextCode
.1406					C32:
.1406	a0 20		ldy #$20			ldy 	#32
.1408	80 ef		bra $13f9			bra 	Const1Byte
.140a					C63:
.140a	a0 3f		ldy #$3f			ldy 	#63
.140c	80 eb		bra $13f9			bra 	Const1Byte
.140e					C64:
.140e	a0 40		ldy #$40			ldy 	#64
.1410	80 e7		bra $13f9			bra 	Const1Byte
.1412					C100:
.1412	a0 64		ldy #$64			ldy 	#100
.1414	80 e3		bra $13f9			bra 	Const1Byte
.1416					C127:
.1416	a0 7f		ldy #$7f			ldy 	#127
.1418	80 df		bra $13f9			bra 	Const1Byte
.141a					C128:
.141a	a0 80		ldy #$80			ldy 	#128
.141c	80 db		bra $13f9			bra 	Const1Byte
.141e					C255:
.141e	a0 ff		ldy #$ff			ldy 	#255
.1420	80 d7		bra $13f9			bra 	Const1Byte
.1422					Const2Byte:
.1422	85 09		sta $09				sta 	TOS
.1424	84 0a		sty $0a				sty 	TOS+1
.1426	4c 00 00	jmp $0000			jmp 	NextCode
.1429					C256:
.1429	a5 09		lda $09				lda 	TOS
.142b	48		pha				pha
.142c	a5 0a		lda $0a				lda 	TOS+1
.142e	48		pha				pha
.142f	a9 00		lda #$00			lda 	#(256) & $FF
.1431	a0 01		ldy #$01			ldy 	#(256) >> 8
.1433	80 ed		bra $1422			bra 	Const2Byte
.1435					C512:
.1435	a5 09		lda $09				lda 	TOS
.1437	48		pha				pha
.1438	a5 0a		lda $0a				lda 	TOS+1
.143a	48		pha				pha
.143b	a9 00		lda #$00			lda 	#(512) & $FF
.143d	a0 02		ldy #$02			ldy 	#(512) >> 8
.143f	80 e1		bra $1422			bra 	Const2Byte
.1441					C1024:
.1441	a5 09		lda $09				lda 	TOS
.1443	48		pha				pha
.1444	a5 0a		lda $0a				lda 	TOS+1
.1446	48		pha				pha
.1447	a9 00		lda #$00			lda 	#(1024) & $FF
.1449	a0 04		ldy #$04			ldy 	#(1024) >> 8
.144b	80 d5		bra $1422			bra 	Const2Byte
.144d					C4096:
.144d	a5 09		lda $09				lda 	TOS
.144f	48		pha				pha
.1450	a5 0a		lda $0a				lda 	TOS+1
.1452	48		pha				pha
.1453	a9 00		lda #$00			lda 	#(4096) & $FF
.1455	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1457	80 c9		bra $1422			bra 	Const2Byte
.1459					C32767:
.1459	a5 09		lda $09				lda 	TOS
.145b	48		pha				pha
.145c	a5 0a		lda $0a				lda 	TOS+1
.145e	48		pha				pha
.145f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1461	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1463	80 bd		bra $1422			bra 	Const2Byte
.1465					C32768:
.1465	a5 09		lda $09				lda 	TOS
.1467	48		pha				pha
.1468	a5 0a		lda $0a				lda 	TOS+1
.146a	48		pha				pha
.146b	a9 00		lda #$00			lda 	#(32768) & $FF
.146d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.146f	80 b1		bra $1422			bra 	Const2Byte

;******  Return to file: files.asm


;******  Processing file: words/data/stack.src

.1471					Drop:
.1471	68		pla				pla
.1472	85 0a		sta $0a				sta 	TOS+1
.1474	68		pla				pla
.1475	85 09		sta $09				sta 	TOS
.1477	4c 00 00	jmp $0000			jmp 	NextCode
.147a					TestDup:
.147a	a5 09		lda $09				lda 	TOS
.147c	05 0a		ora $0a				ora 	TOS+1
.147e	d0 03		bne $1483			bne 	Dup
.1480	4c 00 00	jmp $0000			jmp 	NextCode
.1483					Dup:
.1483	a5 09		lda $09				lda 	TOS
.1485	48		pha				pha
.1486	a5 0a		lda $0a				lda 	TOS+1
.1488	48		pha				pha
.1489	4c 00 00	jmp $0000			jmp 	NextCode
.148c					Swap:
.148c	86 13		stx $13				stx 	temp1
.148e	7a		ply				ply
.148f	fa		plx				plx
.1490	a5 09		lda $09				lda 	TOS
.1492	48		pha				pha
.1493	a5 0a		lda $0a				lda 	TOS+1
.1495	48		pha				pha
.1496	86 09		stx $09				stx 	TOS
.1498	84 0a		sty $0a				sty 	TOS+1
.149a	a6 13		ldx $13				ldx 	temp1
.149c	4c 00 00	jmp $0000			jmp 	NextCode
.149f					Over:
.149f	a5 09		lda $09				lda 	TOS
.14a1	48		pha				pha
.14a2	a5 0a		lda $0a				lda 	TOS+1
.14a4	48		pha				pha
.14a5	86 13		stx $13				stx 	temp1
.14a7	ba		tsx				tsx
.14a8	bd 04 01	lda $0104,x			lda 	stack3low,x
.14ab	85 09		sta $09				sta 	TOS
.14ad	bd 03 01	lda $0103,x			lda 	stack3High,x
.14b0	85 0a		sta $0a				sta 	TOS+1
.14b2	a6 13		ldx $13				ldx 	temp1
.14b4	4c 00 00	jmp $0000			jmp 	NextCode
.14b7					Nip:
.14b7	68		pla				pla
.14b8	68		pla				pla
.14b9	4c 00 00	jmp $0000			jmp 	NextCode
.14bc					Rot:
.14bc	86 13		stx $13				stx 	temp1
.14be	ba		tsx				tsx
.14bf	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.14c2	a8		tay				tay
.14c3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.14c6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.14c9	a5 09		lda $09				lda 	TOS
.14cb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.14ce	84 09		sty $09				sty 	TOS
.14d0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.14d3	a8		tay				tay
.14d4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.14d7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.14da	a5 0a		lda $0a				lda 	TOS+1
.14dc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.14df	84 0a		sty $0a				sty 	TOS+1
.14e1	a6 13		ldx $13				ldx 	temp1
.14e3	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/memory.src

.14e6					ByteRead:
.14e6	b2 09		lda ($09)			lda 	(TOS)
.14e8	85 09		sta $09				sta 	TOS
.14ea	64 0a		stz $0a				stz 	TOS+1
.14ec	4c 00 00	jmp $0000			jmp 	NextCode
.14ef					WordRead:
.14ef	a0 01		ldy #$01			ldy 	#1
.14f1	b1 09		lda ($09),y			lda 	(TOS),y
.14f3	a8		tay				tay
.14f4	b2 09		lda ($09)			lda 	(TOS)
.14f6	85 09		sta $09				sta 	TOS
.14f8	84 0a		sty $0a				sty 	TOS+1
.14fa	4c 00 00	jmp $0000			jmp 	NextCode
.14fd					ByteWrite:
.14fd	68		pla				pla
.14fe	68		pla				pla
.14ff	92 09		sta ($09)			sta 	(TOS)
.1501	68		pla				pla
.1502	85 0a		sta $0a				sta 	TOS+1
.1504	68		pla				pla
.1505	85 09		sta $09				sta 	TOS
.1507	4c 00 00	jmp $0000			jmp 	NextCode
.150a					WordWrite:
.150a	68		pla				pla
.150b	a0 01		ldy #$01			ldy 	#1
.150d	91 09		sta ($09),y			sta 	(TOS),y
.150f	68		pla				pla
.1510	92 09		sta ($09)			sta 	(TOS)
.1512	68		pla				pla
.1513	85 0a		sta $0a				sta 	TOS+1
.1515	68		pla				pla
.1516	85 09		sta $09				sta 	TOS
.1518	4c 00 00	jmp $0000			jmp 	NextCode
.151b					WordAdd:
.151b	7a		ply				ply
.151c	68		pla				pla
.151d	18		clc				clc
.151e	72 09		adc ($09)			adc 	(TOS)
.1520	92 09		sta ($09)			sta 	(TOS)
.1522	98		tya				tya
.1523	a0 01		ldy #$01			ldy 	#1
.1525	71 09		adc ($09),y			adc 	(TOS),y
.1527	91 09		sta ($09),y			sta 	(TOS),y
.1529	68		pla				pla
.152a	85 0a		sta $0a				sta 	TOS+1
.152c	68		pla				pla
.152d	85 09		sta $09				sta 	TOS
.152f	4c 00 00	jmp $0000			jmp 	NextCode
.1532					AllocateMemory:
.1532	a5 09		lda $09				lda 	TOS 						; save memory required on stack.
.1534	48		pha				pha
.1535	a5 0a		lda $0a				lda 	TOS+1
.1537	48		pha				pha
.1538	a5 11		lda $11				lda 	nextFreeMem 				; copy free mem address to TOS
.153a	85 09		sta $09				sta 	TOS
.153c	a5 12		lda $12				lda 	nextFreeMem+1
.153e	85 0a		sta $0a				sta 	TOS+1
.1540	7a		ply				ply 								; advance the free ram pointer
.1541	68		pla				pla
.1542	20 7a 18	jsr $187a			jsr 	AdvanceFreeMem
.1545	20 87 18	jsr $1887			jsr 	CheckMemory 				; low on memory ?
.1548	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/fornext.src

.154b					ForHandler:
.154b	e6 08		inc $08				inc 	rsp 						; bump the RSP
.154d	a4 08		ldy $08				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.154f	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1551	f0 18		beq $156b			beq 	_FHOverflow
.1553	a5 0a		lda $0a				lda 	TOS+1
.1555	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1558	a5 09		lda $09				lda 	TOS
.155a	99 00 07	sta $0700,y			sta 	returnStackLow,y
.155d	a9 ff		lda #$ff			lda 	#$FF
.155f	99 80 07	sta $0780,y			sta 	returnStackX,y
.1562	68		pla				pla
.1563	85 0a		sta $0a				sta 	TOS+1
.1565	68		pla				pla
.1566	85 09		sta $09				sta 	TOS
.1568	4c 00 00	jmp $0000			jmp 	NextCode
.156b					_FHOverflow:
.156b	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>156e	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1576	45 20 4f 56 45 52 46 4c 4f 57 00
.1581					ForEncoder:
.1581	a9 4b		lda #$4b			lda 	#ForHandler & $FF 			; for handler
.1583	a0 15		ldy #$15			ldy 	#ForHandler >> 8
.1585	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1588	a9 46		lda #$46			lda 	#"F" 						; for marker
.158a	20 da 22	jsr $22da			jsr 	EncodePushPosMarkerOnStack
.158d	60		rts				rts
.158e					NextHandler:
.158e	da		phx				phx
.158f	a6 08		ldx $08				ldx 	rsp 						; get current stack ptr
.1591	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1594	c9 ff		cmp #$ff			cmp 	#$FF
.1596	d0 21		bne $15b9			bne 	NHNoFor
.1598	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.159b	d0 03		bne $15a0			bne 	_NHNoBorrow
.159d	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.15a0					_NHNoBorrow:
.15a0	de 00 07	dec $0700,x			dec 	returnStackLow,x
.15a3	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.15a6	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.15a9	fa		plx				plx 								; restore X and re-test
.15aa	09 00		ora #$00			ora 	#0
.15ac	f0 05		beq $15b3			beq 	_NHComplete 				; if so then complete, else loop.
.15ae	e8		inx				inx 								; advance to branch
.15af	e8		inx				inx
.15b0	4c d5 16	jmp $16d5			jmp 	BranchAlways
.15b3					_NHComplete:
.15b3	e8		inx				inx 								; skip over the branch quantity
.15b4	c6 08		dec $08				dec 	rsp 						; drop the indx
.15b6	4c 00 00	jmp $0000			jmp 	NextCode
.15b9					NHNoFor:
.15b9	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>15bc	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>15c4	4f 52 20 53 43 4f 50 45 00
.15cd					NextEncoder:
.15cd	a9 8e		lda #$8e			lda 	#NextHandler & $FF 			; next code
.15cf	a0 15		ldy #$15			ldy 	#NextHandler >> 8
.15d1	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.15d4	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.15d6	c6 08		dec $08				dec 	rsp
.15d8	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.15db	c9 46		cmp #$46			cmp 	#"F"
.15dd	d0 07		bne $15e6			bne 	_NENoFor
.15df	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.15e2	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.15e5	60		rts				rts
.15e6					_NENoFor:
.15e6	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>15e9	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>15f1	46 4f 52 00
.15f5					GetIndex:
.15f5	a4 08		ldy $08				ldy 	rsp 						; get current stack ptr
.15f7	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.15fa	c9 ff		cmp #$ff			cmp 	#$FF
.15fc	d0 bb		bne $15b9			bne 	NHNoFor
.15fe	a5 09		lda $09				lda 	TOS
.1600	48		pha				pha
.1601	a5 0a		lda $0a				lda 	TOS+1
.1603	48		pha				pha
.1604	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1607	38		sec				sec
.1608	e9 01		sbc #$01			sbc 	#1
.160a	85 09		sta $09				sta 	TOS
.160c	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.160f	e9 00		sbc #$00			sbc 	#0
.1611	85 0a		sta $0a				sta 	TOS+1
.1613	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/ifelseendif.src

.1616					IfHandler:
.1616	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1619					IfEncoder:
.1619	a9 16		lda #$16			lda 	#IfHandler & $FF 			; if handler
.161b	a0 16		ldy #$16			ldy 	#IfHandler >> 8
.161d	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1620	a9 49		lda #$49			lda 	#"I" 						; if marker
.1622	20 da 22	jsr $22da			jsr 	EncodePushPosMarkerOnStack
.1625	a9 00		lda #$00			lda 	#0
.1627	20 4e 22	jsr $224e			jsr 	EncodeWriteByte 			; dummy write.
.162a	60		rts				rts
.162b					ElseHandler:
.162b	4c d3 16	jmp $16d3			jmp 	BranchTestSucceedsNoPop
.162e					ElseEncoder:
.162e	a9 2b		lda #$2b			lda 	#ElseHandler & $FF 			; else handler
.1630	a0 16		ldy #$16			ldy 	#ElseHandler >> 8
.1632	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1635	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.1638	48		pha				pha
.1639	a9 00		lda #$00			lda 	#0 							; zero branch
.163b	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.163e	20 5b 16	jsr $165b			jsr 	IfPatch 					; fix up the branch.
.1641	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.1643	20 da 22	jsr $22da			jsr 	EncodePushPosMarkerOnStack
.1646	68		pla				pla 								; address to patch
.1647	a6 08		ldx $08				ldx 	rsp
.1649	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.164c	60		rts				rts
.164d					EndIfHandler:
.164d	4c 00 00	jmp $0000			jmp 	NextCode
.1650					EndIfEncoder:
.1650	a9 4d		lda #$4d			lda 	#EndIfHandler & $FF 		; endif handler
.1652	a0 16		ldy #$16			ldy 	#EndIfHandler >> 8
.1654	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1657	20 5b 16	jsr $165b			jsr 	IfPatch
.165a	60		rts				rts
.165b					IfPatch:
.165b	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.165d	c6 08		dec $08				dec 	rsp
.165f	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1662	c9 49		cmp #$49			cmp 	#"I"
.1664	d0 0b		bne $1671			bne 	_NENoIf
.1666	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.1669	aa		tax				tax
.166a	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.166d	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1670	60		rts				rts
.1671					_NENoIf:
.1671	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1674	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>167c	49 46 00

;******  Return to file: files.asm


;******  Processing file: words/structures/repeatuntil.src

.167f					RepeatHandler:
.167f	4c 00 00	jmp $0000			jmp 	NextCode
.1682					RepeatEncoder:
.1682	a9 7f		lda #$7f			lda 	#RepeatHandler & $FF 		; repeat marker
.1684	a0 16		ldy #$16			ldy 	#RepeatHandler >> 8
.1686	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1689	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.168b	20 da 22	jsr $22da			jsr 	EncodePushPosMarkerOnStack
.168e	60		rts				rts
.168f					UntilHandler:
.168f	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1692					UntilEncoder:
.1692	a9 8f		lda #$8f			lda 	#UntilHandler & $FF 		; until code
.1694	a0 16		ldy #$16			ldy 	#UntilHandler >> 8
.1696	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.1699	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.169b	c6 08		dec $08				dec 	rsp
.169d	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.16a0	c9 52		cmp #$52			cmp 	#"R"
.16a2	d0 07		bne $16ab			bne 	_UENoRepeat
.16a4	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.16a7	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.16aa	60		rts				rts
.16ab					_UENoRepeat:
.16ab	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>16ae	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>16b6	52 45 50 45 41 54 00

;******  Return to file: files.asm


;******  Processing file: words/system/branch.src

.16bd					BranchIfZero:
.16bd	a5 09		lda $09				lda 	TOS 						; check TOS = 0
.16bf	05 0a		ora $0a				ora 	TOS+1
.16c1	f0 0a		beq $16cd			beq 	BranchTestSucceeds
.16c3					BranchTestFails:
.16c3	68		pla				pla
.16c4	85 0a		sta $0a				sta 	TOS+1
.16c6	68		pla				pla
.16c7	85 09		sta $09				sta 	TOS
.16c9	e8		inx				inx 								; skip over the relative branch.
.16ca	4c 00 00	jmp $0000			jmp 	NextCode
.16cd					BranchTestSucceeds:
.16cd	68		pla				pla
.16ce	85 0a		sta $0a				sta 	TOS+1
.16d0	68		pla				pla
.16d1	85 09		sta $09				sta 	TOS
.16d3					BranchTestSucceedsNoPop:
.16d3	e8		inx				inx 								; advance by two, to the offset
.16d4	e8		inx				inx
.16d5					BranchAlways:
.16d5	8a		txa				txa 								; A = Y = position
.16d6	a8		tay				tay 								; (IP),Y now points to the branch target
.16d7	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.16d9	aa		tax				tax 								; position back in this line.
.16da	ca		dex				dex
.16db	ca		dex				dex
.16dc	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/callhandler.src

.16df					CallHandler:
.16df	e8		inx				inx									; bump X to the call address.
.16e0	e8		inx				inx
.16e1	e6 08		inc $08				inc 	rsp 						; bump the RSP (first time to zero)
.16e3	a4 08		ldy $08				ldy 	rsp 						; get return stack and push IP/X on it.
.16e5	c0 40		cpy #$40			cpy 	#$40 						; overflow
.16e7	f0 54		beq $173d			beq 	_CHOverflow
.16e9	a5 04		lda $04				lda 	IP+1
.16eb	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.16ee	a5 03		lda $03				lda 	IP
.16f0	99 00 07	sta $0700,y			sta 	returnStackLow,y
.16f3	8a		txa				txa
.16f4	99 80 07	sta $0780,y			sta 	returnStackX,y
.16f7	8a		txa				txa 								; get the line number into temp1.
.16f8	a8		tay				tay
.16f9	b1 03		lda ($03),y			lda 	(IP),y
.16fb	85 13		sta $13				sta 	temp1
.16fd	c8		iny				iny
.16fe	b1 03		lda ($03),y			lda 	(IP),y
.1700	85 14		sta $14				sta 	temp1+1
.1702	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1704	85 03		sta $03				sta 	0+(IP)
.1706	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1708	85 04		sta $04				sta 	1+(IP)
.170a	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.170c	f0 17		beq $1725			beq 	_CHFail
.170e	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1710					_CHSearch:
.1710	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1712	c5 13		cmp $13				cmp 	temp1
.1714	f0 3e		beq $1754			beq 	_CHFoundLSB
.1716					_CHSearchNext:
.1716	18		clc				clc
.1717	a5 03		lda $03				lda 	IP
.1719	72 03		adc ($03)			adc 	(IP)
.171b	85 03		sta $03				sta 	IP
.171d	90 02		bcc $1721			bcc 	_NoCarryAdv
.171f	e6 04		inc $04				inc 	IP+1
.1721					_NoCarryAdv:
.1721	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1723	d0 eb		bne $1710			bne 	_CHSearch
.1725					_CHFail:
.1725	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1728	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1730	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.173d					_CHOverflow:
.173d	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1740	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1748	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1754					_CHFoundLSB:
.1754	c8		iny				iny 								; get MSB
.1755	b1 03		lda ($03),y			lda 	(IP),y
.1757	88		dey				dey
.1758	c5 14		cmp $14				cmp 	temp1+1 					; matches, if not contineu
.175a	d0 ba		bne $1716			bne 	_CHSearchNext
.175c	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.175e	b1 03		lda ($03),y			lda 	(IP),y
.1760	c9 24		cmp #$24			cmp 	#DefineCode & $FF
.1762	d0 c1		bne $1725			bne 	_CHFail
.1764	c8		iny				iny
.1765	b1 03		lda ($03),y			lda 	(IP),y
.1767	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1769	d0 ba		bne $1725			bne 	_CHFail
.176b	c8		iny				iny
.176c	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.176e	18		clc				clc
.176f	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1771	aa		tax				tax
.1772	4c 00 00	jmp $0000			jmp 	NextCode
.1775					ReturnHandler:
.1775	a4 08		ldy $08				ldy 	rsp 						; get rsp
.1777	f0 15		beq $178e			beq 	_RHUnderflow 				; if -ve underflowed
.1779	c6 08		dec $08				dec 	rsp 						; decrement rsp
.177b	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.177e	85 04		sta $04				sta 	IP+1
.1780	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1783	85 03		sta $03				sta 	IP
.1785	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1788	aa		tax				tax
.1789	f0 15		beq $17a0			beq 	_RHInLoop 					; this means you have done :something for ; next
.178b	4c 00 00	jmp $0000			jmp 	NextCode
.178e					_RHUnderflow:
.178e	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1791	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>1799	52 45 54 55 52 4e 00
.17a0					_RHInLoop:
.17a0	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>17a3	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>17ab	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.17b8					CallHandlerDecode:
.17b8	a9 03		lda #$03			lda 	#CTH_Call					; space
.17ba	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.17bd	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get line number into YA
.17bf	aa		tax				tax
.17c0	c8		iny				iny
.17c1	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.17c3	a8		tay				tay
.17c4	8a		txa				txa
.17c5	20 02 18	jsr $1802			jsr 	FindLine 					; try to locate that line.
.17c8	b0 11		bcs $17db			bcs 	_CHDFound 					; if found .....
.17ca					_CHDLineOnly:
.17ca	48		pha				pha
.17cb	a9 3c		lda #$3c			lda 	#"<"
.17cd	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.17d0	68		pla				pla
.17d1	18		clc				clc 								; output unsigned
.17d2	20 bd 19	jsr $19bd			jsr 	DecodeYAToBuffer
.17d5	a9 3e		lda #$3e			lda 	#">"
.17d7	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.17da	60		rts				rts
.17db					_CHDFound:
.17db	48		pha				pha 								; save YA
.17dc	5a		phy				phy
.17dd	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.17df	b1 13		lda ($13),y			lda 	(temp1),y
.17e1	c9 24		cmp #$24			cmp 	#DefineCode & 255
.17e3	d0 07		bne $17ec			bne 	_CHDNoDefine
.17e5	c8		iny				iny
.17e6	b1 13		lda ($13),y			lda 	(temp1),y
.17e8	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.17ea	f0 04		beq $17f0			beq 	_CHDFoundDefine
.17ec					_CHDNoDefine:
.17ec	7a		ply				ply									; restore the line number and print it in <>
.17ed	68		pla				pla
.17ee	80 da		bra $17ca			bra 	_CHDLineOnly
.17f0					_CHDFoundDefine:
.17f0	68		pla				pla 								; throw saved line number.
.17f1	68		pla				pla
.17f2	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.17f4					_CHDOutName:
.17f4	c8		iny				iny 								; next
.17f5	b1 13		lda ($13),y			lda 	(temp1),y 					; print char no bit 7
.17f7	48		pha				pha
.17f8	29 7f		and #$7f			and 	#$7F
.17fa	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.17fd	68		pla				pla
.17fe	0a		asl a				asl 	a 							; bit 7 to carry
.17ff	90 f3		bcc $17f4			bcc 	_CHDOutName
.1801	60		rts				rts
.1802					FindLine:
.1802	48		pha				pha 								; save registers
.1803	da		phx				phx
.1804	5a		phy				phy
.1805	85 15		sta $15				sta 	temp2 						; temp2 = target line#
.1807	84 16		sty $16				sty 	temp2+1
.1809	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.180b	85 13		sta $13				sta 	0+(temp1)
.180d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.180f	85 14		sta $14				sta 	1+(temp1)
.1811					_FLLoop:
.1811	b2 13		lda ($13)			lda 	(temp1) 					; found end ?
.1813	18		clc				clc									; if so exit with CC.
.1814	f0 1d		beq $1833			beq 	_FLExit
.1816	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1818	b1 13		lda ($13),y			lda 	(temp1),y
.181a	c5 15		cmp $15				cmp 	temp2
.181c	d0 08		bne $1826			bne 	_FLNext
.181e	c8		iny				iny
.181f	b1 13		lda ($13),y			lda 	(temp1),y
.1821	c5 16		cmp $16				cmp 	temp2+1
.1823	38		sec				sec 								; if so exit with CS
.1824	f0 0d		beq $1833			beq 	_FLExit
.1826					_FLNext:
.1826	18		clc				clc
.1827	a5 13		lda $13				lda 	temp1
.1829	72 13		adc ($13)			adc 	(temp1)
.182b	85 13		sta $13				sta 	temp1
.182d	90 02		bcc $1831			bcc 	_NoCarryAdv
.182f	e6 14		inc $14				inc 	temp1+1
.1831					_NoCarryAdv:
.1831	80 de		bra $1811			bra 	_FLLoop 					; keep looking.
.1833					_FLExit:
.1833	7a		ply				ply
.1834	fa		plx				plx
.1835	68		pla				pla
.1836	60		rts				rts
.1837	18		clc				clc
.1838	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/clrnew.src

.1839					NewHandler:
.1839	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.183c	20 4f 18	jsr $184f			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.183f	4c 23 24	jmp $2423			jmp 	WarmStartBlankStack
.1842					ClrHandler:
.1842	86 13		stx $13				stx 	temp1
.1844	a2 80		ldx #$80			ldx 	#NumberStackBase
.1846	9a		txs				txs
.1847	a6 13		ldx $13				ldx 	temp1
.1849	20 4f 18	jsr $184f			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.184c	4c 00 00	jmp $0000			jmp 	NextCode
.184f					ClearVariableSpace:
.184f	64 08		stz $08				stz 	rsp
.1851	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1853	85 11		sta $11				sta 	0+(nextFreeMem)
.1855	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1857	85 12		sta $12				sta 	1+(nextFreeMem)
.1859	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.185b					_CVSHashClear:
.185b	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.185d	99 40 06	sta $0640,y			sta 	hashTable,y
.1860	88		dey				dey
.1861	10 f8		bpl $185b			bpl 	_CVSHashClear
.1863					_CVSFindEnd:
.1863	18		clc				clc
.1864	a5 11		lda $11				lda 	nextFreeMem
.1866	72 11		adc ($11)			adc 	(nextFreeMem)
.1868	85 11		sta $11				sta 	nextFreeMem
.186a	90 02		bcc $186e			bcc 	_NoCarryAdv
.186c	e6 12		inc $12				inc 	nextFreeMem+1
.186e					_NoCarryAdv:
.186e	b2 11		lda ($11)			lda 	(nextFreeMem)
.1870	d0 f1		bne $1863			bne 	_CVSFindEnd
.1872	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1874	a0 00		ldy #$00			ldy 	#0
.1876	20 7a 18	jsr $187a			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1879	60		rts				rts 								; free mem pointer pointing to the last zero offset
.187a					AdvanceFreeMem:
.187a	18		clc				clc
.187b	65 11		adc $11				adc 	nextFreeMem
.187d	85 11		sta $11				sta 	nextFreeMem
.187f	98		tya				tya
.1880	65 12		adc $12				adc 	nextFreeMem+1
.1882	85 12		sta $12				sta 	nextFreeMem+1
.1884	b0 08		bcs $188e			bcs 	MemoryOverflow
.1886	60		rts				rts
.1887					CheckMemory:
.1887	a5 12		lda $12				lda 	nextFreeMem+1
.1889	c9 9d		cmp #$9d			cmp 	#(lastMemoryByte >> 8)-1
.188b	b0 01		bcs $188e			bcs 	MemoryOverflow
.188d	60		rts				rts
.188e					MemoryOverflow:
.188e	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1891	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>1899	45 4d 4f 52 59 00

;******  Return to file: files.asm


;******  Processing file: words/system/debug.src

.189f					ExitDump:
.189f	ba		tsx				tsx 								; save Data Stack in temp1
.18a0	86 13		stx $13				stx 	temp1
.18a2	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.18a5					BreakCmd:
>18a5	ff						.byte 	$FF
.18a6	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/decode.src

.18a9					DecodeLineIntoBufPtr:
.18a9	48		pha				pha
.18aa	da		phx				phx
.18ab	5a		phy				phy
.18ac	85 0b		sta $0b				sta 	srcPtr 						; save the source line.
.18ae	84 0c		sty $0c				sty 	srcPtr+1
.18b0	90 1b		bcc $18cd			bcc 	_DecodeNoLineNumber
.18b2	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.18b4	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18b6	aa		tax				tax
.18b7	c8		iny				iny
.18b8	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18ba	a8		tay				tay
.18bb	8a		txa				txa
.18bc	18		clc				clc
.18bd	20 bd 19	jsr $19bd			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.18c0	aa		tax				tax 								; count in X
.18c1					_DecodeLineSpace:
.18c1	e0 05		cpx #$05			cpx 	#5
.18c3	f0 08		beq $18cd			beq 	_DecodeNoLineNumber
.18c5	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.18c7	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.18ca	e8		inx				inx
.18cb	80 f4		bra $18c1			bra 	_DecodeLineSpace
.18cd					_DecodeNoLineNumber:
.18cd	a0 03		ldy #$03			ldy 	#3 							; initial position.
.18cf					_DecodeLoop:
.18cf	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.18d1	85 13		sta $13				sta 	temp1 						; must be an execution address.
.18d3	c8		iny				iny
.18d4	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18d6	85 14		sta $14				sta 	temp1+1
.18d8	c8		iny				iny 								; y points to the byte after it.
.18d9	a5 13		lda $13				lda 	temp1
.18db	c9 e2		cmp #$e2			cmp 	#NextLine & $FF
.18dd	d0 06		bne $18e5			bne 	_DecodeNotEOL
.18df	a5 14		lda $14				lda 	temp1+1
.18e1	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.18e3	f0 0b		beq $18f0			beq 	_DecodeEOL
.18e5					_DecodeNotEOL:
.18e5	20 f8 18	jsr $18f8			jsr 	IdentifyCodeWord
.18e8	20 46 19	jsr $1946			jsr 	DecodeFoundWord
.18eb	20 30 19	jsr $1930			jsr 	AdvanceToNext 				; advance to next entry in the line.
.18ee	80 df		bra $18cf			bra 	_DecodeLoop 				; and go round again
.18f0					_DecodeEOL:
.18f0	a9 00		lda #$00			lda 	#0
.18f2	92 0d		sta ($0d)			sta 	(bufPtr)
.18f4	7a		ply				ply 								; restore registers and exit
.18f5	fa		plx				plx
.18f6	68		pla				pla
.18f7	60		rts				rts
.18f8					IdentifyCodeWord:
.18f8	5a		phy				phy 								; save current position on the stack.
.18f9	a9 eb		lda #$eb			lda 	#(Dictionary) & $FF
.18fb	85 0f		sta $0f				sta 	0+(matchPtr)
.18fd	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.18ff	85 10		sta $10				sta 	1+(matchPtr)
.1901					_DecodeIdentify:
.1901	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1903	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1905	c5 13		cmp $13				cmp 	temp1
.1907	d0 07		bne $1910			bne 	_DecodeIdNext
.1909	c8		iny				iny
.190a	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.190c	c5 14		cmp $14				cmp 	temp1+1
.190e	f0 1e		beq $192e			beq 	_DecodeIdFound
.1910					_DecodeIdNext:
.1910	18		clc				clc
.1911	b2 0f		lda ($0f)			lda 	(matchPtr)
.1913	f0 0a		beq $191f			beq 	_DecodeIdIssue
.1915	65 0f		adc $0f				adc 	matchPtr
.1917	85 0f		sta $0f				sta 	matchPtr
.1919	90 e6		bcc $1901			bcc 	_DecodeIdentify
.191b	e6 10		inc $10				inc 	matchPtr+1
.191d	80 e2		bra $1901			bra 	_DecodeIdentify
.191f					_DecodeIdIssue:
.191f	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1922	42 41 44 20 50 52 4f 47				.text 	"BAD PROGRAM",0
>192a	52 41 4d 00
.192e					_DecodeIdFound:
.192e	7a		ply				ply 								; restore position.
.192f	60		rts				rts
.1930					AdvanceToNext:
.1930	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1931	a0 01		ldy #$01			ldy 	#1
.1933	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1935	29 03		and #$03			and 	#3 							; bits 0-1.
.1937	7a		ply				ply
.1938	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.193a	d0 02		bne $193e			bne 	_ATN012
.193c	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.193e					_ATN012:
.193e	85 15		sta $15				sta 	temp2 						; now add that to Y
.1940	98		tya				tya
.1941	18		clc				clc
.1942	65 15		adc $15				adc 	temp2
.1944	a8		tay				tay
.1945	60		rts				rts
.1946					DecodeFoundWord:
.1946	5a		phy				phy 								; save current position
.1947	84 15		sty $15				sty		temp2 						; put it in temp2 as well.
.1949	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.194b	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.194d	29 10		and #$10			and 	#$10
.194f	d0 0e		bne $195f			bne 	_DFWSpecialDecoder
.1951	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; reget it.
.1953	30 08		bmi $195d			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1955	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1957	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.195a	20 78 19	jsr $1978			jsr 	DecodeCurrentWord 			; expand that.
.195d					_DFWExit:
.195d	7a		ply				ply 								; restore current position
.195e	60		rts				rts
.195f					_DFWSpecialDecoder:
.195f	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1961	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; copy this into temp2
.1963	85 15		sta $15				sta 	temp2
.1965	c8		iny				iny
.1966	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1968	85 16		sta $16				sta 	temp2+1
.196a	7a		ply				ply 	 							; restore current position into Y
.196b	48		pha				pha 								; save registers
.196c	da		phx				phx
.196d	5a		phy				phy
.196e	20 75 19	jsr $1975			jsr 	_DFWCallDecoder				; call the decoder routine
.1971	7a		ply				ply 								; restore registers and exit
.1972	fa		plx				plx
.1973	68		pla				pla
.1974	60		rts				rts
.1975					_DFWCallDecoder:
.1975	6c 15 00	jmp ($0015)			jmp 	(temp2)
.1978					DecodeCurrentWord:
.1978	5a		phy				phy
.1979	a0 01		ldy #$01			ldy 	#1 							; read type byte
.197b	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.197d	a0 04		ldy #$04			ldy 	#4 							; original offset
.197f	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1980	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1981	4a		lsr a				lsr 	a 							; bit set.
.1982	4a		lsr a				lsr 	a
.1983	4a		lsr a				lsr 	a 							; decoder bit
.1984	90 02		bcc $1988			bcc 	_DWBNoDec
.1986	c8		iny				iny
.1987	c8		iny				iny
.1988					_DWBNoDec:
.1988	4a		lsr a				lsr 	a
.1989	90 02		bcc $198d			bcc 	_DWBNoEnc
.198b	c8		iny				iny
.198c	c8		iny				iny
.198d					_DWBNoEnc:
.198d					_DWBWordOut:
.198d	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; output until bit 7 set.
.198f	48		pha				pha
.1990	29 7f		and #$7f			and 	#$7F
.1992	20 9b 19	jsr $199b			jsr		DecodeWriteBuffer
.1995	c8		iny				iny
.1996	68		pla				pla
.1997	10 f4		bpl $198d			bpl 	_DWBWordOut
.1999	7a		ply				ply 								; restore Y and exit
.199a	60		rts				rts
.199b					DecodeWriteBuffer:
.199b	92 0d		sta ($0d)			sta 	(bufPtr)
.199d	e6 0d		inc $0d				inc 	bufPtr
.199f	d0 02		bne $19a3			bne 	_DWBNoCarry
.19a1	e6 0e		inc $0e				inc 	bufPtr+1
.19a3					_DWBNoCarry:
.19a3	60		rts				rts
.19a4					DecodeOutputData:
.19a4	48		pha				pha
.19a5	da		phx				phx
.19a6	5a		phy				phy
.19a7	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; length + 1
.19a9	aa		tax				tax
.19aa					_DODLoop:
.19aa	ca		dex				dex 								; done it all ?
.19ab	f0 0c		beq $19b9			beq		_DODExit
.19ad	c8		iny				iny 								; output next character
.19ae	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.19b0	29 7f		and #$7f			and 	#$7F
.19b2	f0 f6		beq $19aa			beq 	_DODLoop 					; don't print NULL
.19b4	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.19b7	80 f1		bra $19aa			bra 	_DODLoop
.19b9					_DODExit:
.19b9	7a		ply				ply
.19ba	fa		plx				plx
.19bb	68		pla				pla
.19bc	60		rts				rts
.19bd					DecodeYAToBuffer:
.19bd	da		phx				phx
.19be	5a		phy				phy
.19bf	48		pha				pha
.19c0	a5 0d		lda $0d				lda 	bufPtr 						; copy bufPtr to temp2
.19c2	85 15		sta $15				sta 	temp2
.19c4	a5 0e		lda $0e				lda 	bufPtr+1
.19c6	85 16		sta $16				sta 	temp2+1
.19c8	68		pla				pla
.19c9	20 1b 1e	jsr $1e1b			jsr 	ConvertToStringMain 		; convert YA to string there
.19cc	aa		tax				tax 								; chars output to X
.19cd	18		clc				clc
.19ce	65 0d		adc $0d				adc 	bufPtr 						; add to buffer pointer
.19d0	85 0d		sta $0d				sta 	bufPtr
.19d2	90 02		bcc $19d6			bcc 	_DYABNoCarry
.19d4	e6 0e		inc $0e				inc 	bufPtr+1
.19d6					_DYABNoCarry:
.19d6	8a		txa				txa 								; count in A
.19d7	7a		ply				ply									; restore and exit.
.19d8	fa		plx				plx
.19d9	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/edit.src

.19da					EditProgram:
.19da	20 5a 1a	jsr $1a5a			jsr 	EDFindLine					; find line address -> temp1
.19dd	90 0f		bcc $19ee			bcc 	_EPNotFound 				; if missing don't delete it.
.19df	a5 13		lda $13				lda 	temp1 						; save line address
.19e1	48		pha				pha
.19e2	a5 14		lda $14				lda 	temp1+1
.19e4	48		pha				pha
.19e5	20 ff 19	jsr $19ff			jsr 	EDDeleteLine 				; delete the line
.19e8	68		pla				pla 								; restore line address
.19e9	85 14		sta $14				sta 	temp1+1
.19eb	68		pla				pla
.19ec	85 13		sta $13				sta 	temp1
.19ee					_EPNotFound:
.19ee	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.19f1	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.19f3	f0 06		beq $19fb			beq 	_EPNoInsert
.19f5	20 22 1a	jsr $1a22			jsr 	EDInsertLine 				; insert line back in.
.19f8	20 87 18	jsr $1887			jsr 	CheckMemory 				; low on memory ?
.19fb					_EPNoInsert:
.19fb	20 4f 18	jsr $184f			jsr 	ClearVariableSpace
.19fe	60		rts				rts
.19ff					EDDeleteLine:
.19ff	20 4f 18	jsr $184f			jsr 	ClearVariableSpace
.1a02	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1a04	a2 00		ldx #$00			ldx 	#0
.1a06	b1 13		lda ($13),y			lda 	(temp1),y
.1a08	a8		tay				tay 								; put in Y
.1a09					_EDDelLoop:
.1a09	b1 13		lda ($13),y			lda 	(temp1),y 					; get it
.1a0b	81 13		sta ($13,x)			sta 	(temp1,x) 					; write it.
.1a0d	a5 13		lda $13				lda 	temp1 						; check if pointer has reached the end of
.1a0f	c5 11		cmp $11				cmp		nextFreeMem 				; low memory. We will have copied down an
.1a11	d0 06		bne $1a19			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1a13	a5 14		lda $14				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1a15	c5 12		cmp $12				cmp 	nextFreeMem+1				; doesn't really matter.
.1a17	f0 08		beq $1a21			beq		_EDDelExit
.1a19					_EDDelNext:
.1a19	e6 13		inc $13				inc 	temp1 						; go to next byte.
.1a1b	d0 ec		bne $1a09			bne 	_EDDelLoop
.1a1d	e6 14		inc $14				inc 	temp1+1
.1a1f	80 e8		bra $1a09			bra 	_EDDelLoop
.1a21					_EDDelExit:
.1a21	60		rts				rts
.1a22					EDInsertLine:
.1a22	20 4f 18	jsr $184f			jsr 	ClearVariableSpace
.1a25	a5 11		lda $11				lda 	nextFreeMem 				; copy high memory to temp3
.1a27	85 17		sta $17				sta 	temp3
.1a29	a5 12		lda $12				lda 	nextFreeMem+1
.1a2b	85 18		sta $18				sta 	temp3+1
.1a2d	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1a30	a2 00		ldx #$00			ldx 	#0
.1a32					_EDInsLoop:
.1a32	a1 17		lda ($17,x)			lda 	(temp3,x)					; copy it up
.1a34	91 17		sta ($17),y			sta 	(temp3),y
.1a36	a5 17		lda $17				lda 	temp3 						; reached the insert point (temp1)
.1a38	c5 13		cmp $13				cmp 	temp1
.1a3a	d0 06		bne $1a42			bne 	_EDINextShift
.1a3c	a5 18		lda $18				lda 	temp3+1
.1a3e	c5 14		cmp $14				cmp 	temp1+1
.1a40	f0 0a		beq $1a4c			beq 	_EDIShiftOver
.1a42					_EDINextShift:
.1a42	a5 17		lda $17				lda 	temp3 						; decrement the copy pointer.
.1a44	d0 02		bne $1a48			bne 	_EDINoBorrow
.1a46	c6 18		dec $18				dec 	temp3+1
.1a48					_EDINoBorrow:
.1a48	c6 17		dec $17				dec 	temp3
.1a4a	80 e6		bra $1a32			bra 	_EDInsLoop
.1a4c					_EDIShiftOver:
.1a4c	a0 00		ldy #$00			ldy 	#0
.1a4e					_EDICopyCode:
.1a4e	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1a51	91 13		sta ($13),y			sta 	(temp1),y 					; write out
.1a53	c8		iny				iny 								; bump pointers
.1a54	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1a57	d0 f5		bne $1a4e			bne 	_EDICopyCode
.1a59	60		rts				rts
.1a5a					EDFindLine:
.1a5a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1a5c	85 13		sta $13				sta 	0+(temp1)
.1a5e	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1a60	85 14		sta $14				sta 	1+(temp1)
.1a62					_EDFLLoop:
.1a62	b2 13		lda ($13)			lda 	(temp1) 					; check offset
.1a64	f0 24		beq $1a8a			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1a66	a0 01		ldy #$01			ldy 	#1							; look at line #
.1a68	38		sec				sec
.1a69	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1a6c	f1 13		sbc ($13),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1a6e	aa		tax				tax	 								; this will return 10.
.1a6f	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1a72	c8		iny				iny
.1a73	f1 13		sbc ($13),y			sbc 	(temp1),y
.1a75	90 13		bcc $1a8a			bcc 	_EDFLFail					; if target < current then failed.
.1a77	d0 04		bne $1a7d			bne 	_EDFLNext 					; if non-zero then goto next
.1a79	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1a7b	f0 0f		beq $1a8c			beq 	_EDFLFound
.1a7d					_EDFLNext:
.1a7d	18		clc				clc
.1a7e	a5 13		lda $13				lda 	temp1
.1a80	72 13		adc ($13)			adc 	(temp1)
.1a82	85 13		sta $13				sta 	temp1
.1a84	90 02		bcc $1a88			bcc 	_NoCarryAdv
.1a86	e6 14		inc $14				inc 	temp1+1
.1a88					_NoCarryAdv:
.1a88	80 d8		bra $1a62			bra 	_EDFLLoop
.1a8a					_EDFLFail:
.1a8a	18		clc				clc
.1a8b	60		rts				rts
.1a8c					_EDFLFound:
.1a8c	38		sec				sec
.1a8d	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/list.src

.1a8e					ListCode:
.1a8e	64 21		stz $21				stz 	ListLowest 					; zero lowest line#
.1a90	64 22		stz $22				stz 	ListLowest+1
.1a92	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1a94	85 20		sta $20				sta 	ListCount
.1a96	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a98	85 1b		sta $1b				sta 	0+(listPtr)
.1a9a	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a9c	85 1c		sta $1c				sta 	1+(listPtr)
.1a9e	86 13		stx $13				stx 	temp1						; S->A
.1aa0	ba		tsx				tsx
.1aa1	8a		txa				txa
.1aa2	a6 13		ldx $13				ldx 	temp1
.1aa4	c9 80		cmp #$80			cmp 	#NumberStackBase
.1aa6	f0 0e		beq $1ab6			beq 	_LCLoop
.1aa8	a5 09		lda $09				lda 	TOS 						; copy TOS to lowest
.1aaa	85 21		sta $21				sta 	ListLowest
.1aac	a5 0a		lda $0a				lda 	TOS+1
.1aae	85 22		sta $22				sta 	ListLowest+1
.1ab0	68		pla				pla
.1ab1	85 0a		sta $0a				sta 	TOS+1
.1ab3	68		pla				pla
.1ab4	85 09		sta $09				sta 	TOS
.1ab6					_LCLoop:
.1ab6	b2 1b		lda ($1b)			lda 	(listPtr)					; reached end ?
.1ab8	f0 4c		beq $1b06			beq 	_LCExit
.1aba	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1abc	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1abe	c5 21		cmp $21				cmp 	ListLowest
.1ac0	c8		iny				iny
.1ac1	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1ac3	e5 22		sbc $22				sbc 	ListLowest+1
.1ac5	90 32		bcc $1af9			bcc 	_LCNext
.1ac7	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1ac9	85 0d		sta $0d				sta 	0+(bufPtr)
.1acb	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1acd	85 0e		sta $0e				sta 	1+(bufPtr)
.1acf	a5 1b		lda $1b				lda 	listPtr 					; output the line.
.1ad1	a4 1c		ldy $1c				ldy 	listPtr+1
.1ad3	38		sec				sec
.1ad4	20 a9 18	jsr $18a9			jsr 	DecodeLineIntoBufPtr
.1ad7	a9 02		lda #$02			lda 	#CTH_LineNo
.1ad9	20 19 25	jsr $2519			jsr 	ExternColour
.1adc	a0 ff		ldy #$ff			ldy 	#255
.1ade					_LCLoop2:
.1ade	c8		iny				iny
.1adf	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1ae2	f0 0e		beq $1af2			beq 	_LCEnd
.1ae4	c9 20		cmp #$20			cmp 	#32
.1ae6	b0 05		bcs $1aed			bcs 	_LCPrint
.1ae8	20 19 25	jsr $2519			jsr 	ExternColour
.1aeb	a9 20		lda #$20			lda 	#32
.1aed					_LCPrint:
.1aed	20 0d 25	jsr $250d			jsr 	ExternPrint
.1af0	80 ec		bra $1ade			bra 	_LCLoop2
.1af2	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1af4	20 0d 25	jsr $250d			jsr 	ExternPrint
.1af7	c6 20		dec $20				dec 	ListCount					; done all the lines allowed
.1af9					_LCNext:
.1af9	18		clc				clc
.1afa	a5 1b		lda $1b				lda 	listPtr
.1afc	72 1b		adc ($1b)			adc 	(listPtr)
.1afe	85 1b		sta $1b				sta 	listPtr
.1b00	90 02		bcc $1b04			bcc 	_NoCarryAdv
.1b02	e6 1c		inc $1c				inc 	listPtr+1
.1b04					_NoCarryAdv:
.1b04	80 b0		bra $1ab6			bra 	_LCLoop 					; go round again.
.1b06					_LCExit:
.1b06	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/miscellany.src

.1b09					RunProgram:
.1b09	86 13		stx $13				stx 	temp1
.1b0b	a2 80		ldx #$80			ldx 	#NumberStackBase
.1b0d	9a		txs				txs
.1b0e	a6 13		ldx $13				ldx 	temp1
.1b10	20 4f 18	jsr $184f			jsr 	ClearVariableSpace 			; clear variables etc.
.1b13	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1b15	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1b17	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1b1a	4c 00 00	jmp $0000			jmp 	NextCode
.1b1d					Call6502:
.1b1d	a5 09		lda $09				lda 	TOS 						; copy call address
.1b1f	85 13		sta $13				sta 	temp1
.1b21	a5 0a		lda $0a				lda 	TOS+1
.1b23	85 14		sta $14				sta 	temp1+1
.1b25	68		pla				pla
.1b26	85 0a		sta $0a				sta 	TOS+1
.1b28	68		pla				pla
.1b29	85 09		sta $09				sta 	TOS
.1b2b	20 31 1b	jsr $1b31			jsr 	_CallTemp1 					; call it
.1b2e	4c 00 00	jmp $0000			jmp 	NextCode
.1b31					_CallTemp1:
.1b31	6c 13 00	jmp ($0013)			jmp 	(temp1)
.1b34					AssertCode:
.1b34	a5 09		lda $09				lda 	TOS 						; TOS = 0
.1b36	05 0a		ora $0a				ora 	TOS+1
.1b38	f0 09		beq $1b43			beq 	_ASFail 					; if zero fail
.1b3a	68		pla				pla
.1b3b	85 0a		sta $0a				sta 	TOS+1
.1b3d	68		pla				pla
.1b3e	85 09		sta $09				sta 	TOS
.1b40	4c 00 00	jmp $0000			jmp 	NextCode
.1b43					_ASFail:
.1b43	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1b46	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1b4d					StopCode:
.1b4d	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1b50	53 54 4f 50 00					.text 	"STOP",0
.1b55					EndProgram:
.1b55	4c 2d 24	jmp $242d			jmp 	WarmStart
.1b58					VlistCode:
.1b58	a9 eb		lda #$eb			lda 	#(Dictionary) & $FF
.1b5a	85 13		sta $13				sta 	0+(temp1)
.1b5c	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1b5e	85 14		sta $14				sta 	1+(temp1)
.1b60	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1b62	b1 13		lda ($13),y			lda 	(temp1),y
.1b64	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1b66	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1b67	4a		lsr a				lsr 	a
.1b68	4a		lsr a				lsr		a
.1b69	4a		lsr a				lsr 	a
.1b6a	4a		lsr a				lsr 	a 							; add those bits in
.1b6b	90 02		bcc $1b6f			bcc 	_VLNoDec
.1b6d	c8		iny				iny
.1b6e	c8		iny				iny
.1b6f					_VLNoDec:
.1b6f	4a		lsr a				lsr 	a
.1b70	90 02		bcc $1b74			bcc 	_VLNoEnc
.1b72	c8		iny				iny
.1b73	c8		iny				iny
.1b74					_VLNoEnc:
.1b74	b1 13		lda ($13),y			lda 	(temp1),y 					; remove $$ words
.1b76	c9 24		cmp #$24			cmp 	#"$"
.1b78	d0 06		bne $1b80			bne 	_VLPrint
.1b7a	c8		iny				iny
.1b7b	51 13		eor ($13),y			eor 	(temp1),y
.1b7d	f0 13		beq $1b92			beq 	_VLNext
.1b7f	88		dey				dey
.1b80					_VLPrint:
.1b80	b1 13		lda ($13),y			lda 	(temp1),y
.1b82	48		pha				pha
.1b83	c8		iny				iny
.1b84	29 7f		and #$7f			and 	#$7F
.1b86	20 0d 25	jsr $250d			jsr 	ExternPrint
.1b89	68		pla				pla
.1b8a	0a		asl a				asl 	a
.1b8b	90 f3		bcc $1b80			bcc 	_VLPrint
.1b8d	a9 20		lda #$20			lda 	#32
.1b8f	20 0d 25	jsr $250d			jsr 	ExternPrint
.1b92					_VLNext:
.1b92	18		clc				clc 								; go to next
.1b93	b2 13		lda ($13)			lda 	(temp1)
.1b95	65 13		adc $13				adc 	temp1
.1b97	85 13		sta $13				sta 	temp1
.1b99	90 02		bcc $1b9d			bcc 	_VLNoCarry
.1b9b	e6 14		inc $14				inc 	temp1+1
.1b9d					_VLNoCarry:
.1b9d	b2 13		lda ($13)			lda 	(temp1)
.1b9f	d0 bf		bne $1b60			bne 	_VLLoop
.1ba1	a9 0d		lda #$0d			lda 	#13
.1ba3	20 0d 25	jsr $250d			jsr 	ExternPrint
.1ba6	4c 00 00	jmp $0000			jmp 	NextCode
.1ba9					DumpStack:
.1ba9	a9 5b		lda #$5b			lda		#"["
.1bab	20 0d 25	jsr $250d			jsr 	ExternPrint
.1bae	86 13		stx $13				stx 	temp1 						; X -> A
.1bb0	ba		tsx				tsx
.1bb1	8a		txa				txa
.1bb2	a6 13		ldx $13				ldx 	temp1
.1bb4	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.1bb6	f0 2f		beq $1be7			beq 	_DSExit
.1bb8	48		pha				pha 								; save it
.1bb9	a9 07		lda #$07			lda 	#COL_WHITE
.1bbb	20 19 25	jsr $2519			jsr 	ExternColour
.1bbe	a5 09		lda $09				lda 	TOS 						; print TOS then stack values backwards
.1bc0	a4 0a		ldy $0a				ldy 	TOS+1
.1bc2	38		sec				sec 								; print unsigned.
.1bc3	20 f5 1d	jsr $1df5			jsr 	PrintYA
.1bc6	a9 06		lda #$06			lda 	#COL_CYAN
.1bc8	20 19 25	jsr $2519			jsr 	ExternColour
.1bcb	7a		ply				ply 								; restore offset
.1bcc					_DSLoop:
.1bcc	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.1bce	f0 17		beq $1be7			beq 	_DSExit
.1bd0	a9 20		lda #$20			lda 	#" " 						; space
.1bd2	20 0d 25	jsr $250d			jsr 	ExternPrint
.1bd5	5a		phy				phy 								; save pos
.1bd6	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.1bd9	48		pha				pha
.1bda	b9 02 01	lda $0102,y			lda 	$0102,y
.1bdd	7a		ply				ply
.1bde	38		sec				sec
.1bdf	20 f5 1d	jsr $1df5			jsr 	PrintYA 					; print it
.1be2	7a		ply				ply 								; restore and advance pos
.1be3	c8		iny				iny
.1be4	c8		iny				iny
.1be5	80 e5		bra $1bcc			bra 	_DSLoop
.1be7					_DSExit:
.1be7	a9 5d		lda #$5d			lda		#"]"
.1be9	20 0d 25	jsr $250d			jsr 	ExternPrint
.1bec	a9 0d		lda #$0d			lda 	#13
.1bee	20 0d 25	jsr $250d			jsr 	ExternPrint
.1bf1	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/old.src

.1bf4					OldCode:
.1bf4	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1bf6	85 0b		sta $0b				sta 	0+(srcPtr)
.1bf8	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1bfa	85 0c		sta $0c				sta 	1+(srcPtr)
.1bfc	a0 03		ldy #$03			ldy 	#3 							; start after line# / offset
.1bfe					_OldLoop:
.1bfe	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1c00	85 13		sta $13				sta 	temp1 						; must be an execution address.
.1c02	c8		iny				iny
.1c03	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1c05	85 14		sta $14				sta 	temp1+1
.1c07	c8		iny				iny
.1c08	a5 13		lda $13				lda 	temp1 						; have we reached the end ?
.1c0a	c9 e2		cmp #$e2			cmp 	#NextLine & $FF
.1c0c	d0 06		bne $1c14			bne 	_OldNotEOL
.1c0e	a5 14		lda $14				lda 	temp1+1
.1c10	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.1c12	f0 08		beq $1c1c			beq 	_OldEOL
.1c14					_OldNotEOL:
.1c14	20 f8 18	jsr $18f8			jsr 	IdentifyCodeWord			; what is it ?
.1c17	20 30 19	jsr $1930			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1c1a	80 e2		bra $1bfe			bra	 	_OldLoop
.1c1c					_OldEOL:
.1c1c	8c 00 40	sty $4000			sty 	ProgramMemory 				; Y is the offset.
.1c1f	20 4f 18	jsr $184f			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1c22	4c 23 24	jmp $2423			jmp 	WarmStartBlankStack

;******  Return to file: files.asm


;******  Processing file: words/system/saveload.src

.1c25					System_Save:
.1c25	20 4f 18	jsr $184f			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c28	20 a7 1c	jsr $1ca7			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.1c2b	20 53 1c	jsr $1c53			jsr 	SLGetFileName 				; get filename -> temp3
.1c2e	a5 11		lda $11				lda 	nextFreeMem 				; end address
.1c30	85 13		sta $13				sta 	temp1
.1c32	a5 12		lda $12				lda 	nextFreeMem+1
.1c34	85 14		sta $14				sta 	temp1+1
.1c36	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c38	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c3a	20 61 25	jsr $2561			jsr 	ExternSave
.1c3d	20 4f 18	jsr $184f			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c40	4c 23 24	jmp $2423			jmp 	WarmStartBlankStack
.1c43					System_Load:
.1c43	20 53 1c	jsr $1c53			jsr 	SLGetFileName 				; get filename -> temp3
.1c46	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c48	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c4a	20 97 25	jsr $2597			jsr 	ExternLoad
.1c4d	20 4f 18	jsr $184f			jsr 	ClearVariableSpace 			; reset everything.
.1c50	4c 23 24	jmp $2423			jmp 	WarmStartBlankStack
.1c53					SLGetFileName:
.1c53	ba		tsx				tsx
.1c54	e0 80		cpx #$80			cpx 	#NumberStackBase
.1c56	f0 3a		beq $1c92			beq 	_SLFNFail
.1c58	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.1c5a	85 17		sta $17				sta 	temp3
.1c5c	a9 08		lda #$08			lda 	#textBuffer >> 8
.1c5e	85 18		sta $18				sta 	temp3+1
.1c60	a0 00		ldy #$00			ldy 	#0
.1c62	b1 09		lda ($09),y	_SLCopy:lda 	(TOS),y
.1c64	91 17		sta ($17),y			sta 	(temp3),y
.1c66	c8		iny				iny
.1c67	c9 00		cmp #$00			cmp		#0
.1c69	d0 f7		bne $1c62			bne 	_SLCopy
.1c6b	88		dey				dey
.1c6c	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.1c6e					_SLCheckEnd:
.1c6e	88		dey				dey
.1c6f	bd a2 1c	lda $1ca2,x			lda 	_SLFNExtension,x
.1c72	d1 17		cmp ($17),y			cmp 	(temp3),y
.1c74	d0 05		bne $1c7b			bne 	_SLNoExtension
.1c76	ca		dex				dex
.1c77	10 f5		bpl $1c6e			bpl 	_SLCheckEnd
.1c79	80 16		bra $1c91			bra 	_SLExit
.1c7b					_SLNoExtension:
.1c7b	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.1c7d					_SLFindend:
.1c7d	c8		iny				iny
.1c7e	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c81	d0 fa		bne $1c7d			bne 	_SLFindend
.1c83	a2 00		ldx #$00			ldx 	#0
.1c85					_SLAppend:
.1c85	bd a2 1c	lda $1ca2,x			lda 	_SLFNExtension,x
.1c88	99 10 08	sta $0810,y			sta 	textBuffer,y
.1c8b	e8		inx				inx
.1c8c	c8		iny				iny
.1c8d	c9 00		cmp #$00			cmp 	#0
.1c8f	d0 f4		bne $1c85			bne 	_SLAppend
.1c91					_SLExit:
.1c91	60		rts				rts
.1c92					_SLFNFail:
.1c92	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1c95	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>1c9d	4e 41 4d 45 00
.1ca2					_SLFNExtension:
>1ca2	2e 52 50 4c 00					.text 	".RPL",0
.1ca7					ExtendWithDictionary:
.1ca7	20 d0 1c	jsr $1cd0			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.1caa	a9 eb		lda #$eb			lda 	#(Dictionary) & $FF
.1cac	85 13		sta $13				sta 	0+(temp1)
.1cae	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1cb0	85 14		sta $14				sta 	1+(temp1)
.1cb2					_EWDLoop:
.1cb2	b2 13		lda ($13)			lda 	(temp1)						; end
.1cb4	f0 1a		beq $1cd0			beq 	_EWDMarker
.1cb6	a0 02		ldy #$02			ldy 	#2 							; output the address
.1cb8	b1 13		lda ($13),y			lda 	(temp1),y
.1cba	20 d9 1c	jsr $1cd9			jsr 	_EWDWrite
.1cbd	c8		iny				iny
.1cbe	b1 13		lda ($13),y			lda 	(temp1),y
.1cc0	20 d9 1c	jsr $1cd9			jsr 	_EWDWrite
.1cc3	18		clc				clc 								; next entry.
.1cc4	a5 13		lda $13				lda 	temp1
.1cc6	72 13		adc ($13)			adc 	(temp1)
.1cc8	85 13		sta $13				sta 	temp1
.1cca	90 e6		bcc $1cb2			bcc 	_EWDLoop
.1ccc	e6 14		inc $14				inc 	temp1+1
.1cce	80 e2		bra $1cb2			bra 	_EWDLoop
.1cd0					_EWDMarker:
.1cd0	a9 ff		lda #$ff			lda 	#$FF
.1cd2	20 d9 1c	jsr $1cd9			jsr 	_EWDWrite
.1cd5	20 d9 1c	jsr $1cd9			jsr 	_EWDWrite
.1cd8	60		rts				rts
.1cd9					_EWDWrite:
.1cd9	92 11		sta ($11)			sta 	(nextFreeMem)
.1cdb	e6 11		inc $11				inc 	nextFreeMem
.1cdd	d0 02		bne $1ce1			bne 	_EWDExit
.1cdf	e6 12		inc $12				inc 	nextFreeMem+1
.1ce1					_EWDExit:
.1ce1	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/skipper.src

.1ce2					NextLine:
.1ce2	18		clc				clc
.1ce3	a5 03		lda $03				lda 	IP
.1ce5	72 03		adc ($03)			adc 	(IP)
.1ce7	85 03		sta $03				sta 	IP
.1ce9	90 02		bcc $1ced			bcc 	_NoCarryAdv
.1ceb	e6 04		inc $04				inc 	IP+1
.1ced					_NoCarryAdv:
.1ced	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1cef	f0 05		beq $1cf6			beq 	_NLGoEnd
.1cf1	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1cf3	4c 00 00	jmp $0000			jmp 	NextCode
.1cf6					_NLGoEnd:
.1cf6	4c 2d 24	jmp $242d			jmp 	WarmStart
.1cf9					SkipComment:
.1cf9	e8		inx				inx									; (IP),X points to the length.
.1cfa	e8		inx				inx
.1cfb	8a		txa				txa
.1cfc	a8		tay				tay 								; put into Y
.1cfd	18		clc				clc
.1cfe	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1d00	aa		tax				tax 								; put back in X
.1d01	ca		dex				dex
.1d02	ca		dex				dex
.1d03	4c 00 00	jmp $0000			jmp 	NextCode
.1d06					CommentDecoder:
.1d06	a9 06		lda #$06			lda 	#CTH_Keyword
.1d08	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d0b	a9 27		lda #$27			lda 	#"'"
.1d0d	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d10	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; check if there is no data
.1d12	c9 01		cmp #$01			cmp 	#1
.1d14	f0 0d		beq $1d23			beq 	_CDEmpty 					; if so print nothing.
.1d16	a9 0b		lda #$0b			lda 	#CTH_Comment
.1d18	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d1b	20 a4 19	jsr $19a4			jsr 	DecodeOutputData
.1d1e	a9 20		lda #$20			lda 	#32
.1d20	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d23					_CDEmpty
.1d23	60		rts				rts
.1d24					DefineCode:
.1d24	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1d27	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>1d2f	44 45 46 49 4e 49 54 49 4f 4e 00
.1d3a					DefineDecoder:
.1d3a	a9 07		lda #$07			lda 	#CTH_Definition
.1d3c	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d3f	a9 3a		lda #$3a			lda 	#":"
.1d41	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d44	20 a4 19	jsr $19a4			jsr 	DecodeOutputData
.1d47	a9 20		lda #$20			lda 	#32
.1d49	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1d4c	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/toint.src

.1d4d					ConvertToInteger:
.1d4d	84 1a		sty $1a				sty 	temp4+1
.1d4f	85 19		sta $19				sta 	temp4
.1d51	64 17		stz $17				stz 	temp3 						; reset value
.1d53	64 18		stz $18				stz 	temp3+1
.1d55	64 13		stz $13				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1d57	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1d59	b1 19		lda ($19),y			lda 	(temp4),y
.1d5b	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1d5d	85 14		sta $14				sta 	temp1+1 					; save this in temp1+1
.1d5f	d0 01		bne $1d62			bne 	_CTINotMinus
.1d61	c8		iny				iny									; skip -
.1d62					_CTINotMinus:
.1d62	b1 19		lda ($19),y			lda 	(temp4),y
.1d64	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1d66	d0 03		bne $1d6b			bne 	_CTILoop
.1d68	c6 13		dec $13				dec 	temp1
.1d6a	c8		iny				iny
.1d6b					_CTILoop:
.1d6b	b1 19		lda ($19),y			lda 	(temp4),y 					; next digit
.1d6d	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1d6f	38		sec				sec
.1d70	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1d72	90 65		bcc $1dd9			bcc 	_CTIFail 					; out of range.
.1d74	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1d76	90 0b		bcc $1d83			bcc 	_CTILegal
.1d78	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d7a	90 5d		bcc $1dd9			bcc 	_CTIFail
.1d7c	38		sec				sec
.1d7d	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d7f	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d81	b0 56		bcs $1dd9			bcs 	_CTIFail
.1d83					_CTILegal:
.1d83	48		pha				pha 								; save digit value.
.1d84	06 17		asl $17				asl 	temp3
.1d86	26 18		rol $18				rol 	temp3+1
.1d88	a5 17		lda $17				lda 	temp3 						; copy x2 into temp2
.1d8a	85 15		sta $15				sta 	temp2
.1d8c	a5 18		lda $18				lda 	temp3+1
.1d8e	85 16		sta $16				sta 	temp2+1
.1d90	06 17		asl $17				asl 	temp3
.1d92	26 18		rol $18				rol 	temp3+1
.1d94	06 17		asl $17				asl 	temp3
.1d96	26 18		rol $18				rol 	temp3+1
.1d98	24 13		bit $13				bit 	temp1 						; hexadecimal
.1d9a	10 07		bpl $1da3			bpl 	_CTIDecimal
.1d9c	06 17		asl $17				asl 	temp3
.1d9e	26 18		rol $18				rol 	temp3+1
.1da0	68		pla				pla 								; get digit back
.1da1	80 12		bra $1db5			bra 	_CTIAddLoop
.1da3					_CTIDecimal:
.1da3	18		clc				clc 								; x 8 + x 2 = x 10
.1da4	a5 17		lda $17				lda 	temp3
.1da6	65 15		adc $15				adc 	temp2
.1da8	85 17		sta $17				sta 	temp3
.1daa	a5 18		lda $18				lda 	temp3+1
.1dac	65 16		adc $16				adc 	temp2+1
.1dae	85 18		sta $18				sta 	temp3+1
.1db0	68		pla				pla 								; check digit 0-9
.1db1	c9 0a		cmp #$0a			cmp 	#10
.1db3	b0 24		bcs $1dd9			bcs 	_CTIFail
.1db5					_CTIAddLoop:
.1db5	18		clc				clc
.1db6	65 17		adc $17				adc 	temp3
.1db8	85 17		sta $17				sta 	temp3
.1dba	90 02		bcc $1dbe			bcc 	_CTINoCarry
.1dbc	e6 18		inc $18				inc 	temp3+1
.1dbe					_CTINoCarry:
.1dbe	c8		iny				iny
.1dbf	b1 19		lda ($19),y			lda 	(temp4),y 					; was this the last character
.1dc1	c9 21		cmp #$21			cmp 	#32+1
.1dc3	b0 a6		bcs $1d6b			bcs 	_CTILoop 					; no, go back.
.1dc5	a5 14		lda $14				lda 	temp1+1 					; was it - ?
.1dc7	d0 0d		bne $1dd6			bne 	_CTIOkay
.1dc9	38		sec				sec
.1dca	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1dcc	e5 17		sbc $17				sbc 	temp3
.1dce	85 17		sta $17				sta 	temp3
.1dd0	a9 00		lda #$00			lda 	#0
.1dd2	e5 18		sbc $18				sbc 	temp3+1
.1dd4	85 18		sta $18				sta 	temp3+1
.1dd6					_CTIOkay:
.1dd6	98		tya				tya
.1dd7	38		sec				sec
.1dd8	60		rts				rts
.1dd9					_CTIFail:
.1dd9	18		clc				clc
.1dda	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/tostr.src

.1ddb					IntToString:
.1ddb	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1ddd	85 15		sta $15				sta 	0+(temp2)
.1ddf	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1de1	85 16		sta $16				sta 	1+(temp2)
.1de3	a5 09		lda $09				lda 	TOS 						; value in YA
.1de5	a4 0a		ldy $0a				ldy 	TOS+1
.1de7	20 17 1e	jsr $1e17			jsr 	ConvertToString
.1dea	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1dec	85 09		sta $09				sta 	0+(TOS)
.1dee	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1df0	85 0a		sta $0a				sta 	1+(TOS)
.1df2	4c 00 00	jmp $0000			jmp 	NextCode
.1df5					PrintYA:
.1df5	48		pha				pha
.1df6	da		phx				phx
.1df7	5a		phy				phy
.1df8	48		pha				pha
.1df9	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1dfb	85 15		sta $15				sta 	0+(temp2)
.1dfd	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1dff	85 16		sta $16				sta 	1+(temp2)
.1e01	68		pla				pla
.1e02	20 1b 1e	jsr $1e1b			jsr 	ConvertToStringMain
.1e05	a2 00		ldx #$00			ldx 	#0
.1e07					_PrintYALoop:
.1e07	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e0a	20 0d 25	jsr $250d			jsr 	ExternPrint
.1e0d	e8		inx				inx
.1e0e	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e11	d0 f4		bne $1e07			bne 	_PrintYALoop
.1e13	7a		ply				ply
.1e14	fa		plx				plx
.1e15	68		pla				pla
.1e16	60		rts				rts
.1e17					ConvertToString:
.1e17	38		sec				sec
.1e18	80 01		bra $1e1b			bra 	ConvertToStringMain
.1e1a					ConvertToStringUnsigned:
.1e1a	18		clc				clc
.1e1b					ConvertToStringMain:
.1e1b	da		phx				phx									; save XY
.1e1c	5a		phy				phy
.1e1d	64 1d		stz $1d				stz 	SignCount 					; this is zero suppression
.1e1f	85 13		sta $13				sta 	temp1 						; save YA in temp1
.1e21	84 14		sty $14				sty 	temp1+1
.1e23	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1e25	90 16		bcc $1e3d			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1e27	a5 14		lda $14				lda 	temp1+1 					; is it negative
.1e29	10 12		bpl $1e3d			bpl 	_CTSUnsigned
.1e2b	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1e2d	91 15		sta ($15),y			sta 	(temp2),y
.1e2f	c8		iny				iny
.1e30	38		sec				sec 								; negate temp1
.1e31	a9 00		lda #$00			lda 	#0
.1e33	e5 13		sbc $13				sbc 	temp1
.1e35	85 13		sta $13				sta 	temp1
.1e37	a9 00		lda #$00			lda 	#0
.1e39	e5 14		sbc $14				sbc 	temp1+1
.1e3b	85 14		sta $14				sta 	temp1+1
.1e3d					_CTSUnsigned:
.1e3d	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1e3f					_CTSLoop:
.1e3f	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e41	91 15		sta ($15),y			sta 	(temp2),y
.1e43					_CTSSubLoop:
.1e43	b1 15		lda ($15),y			lda 	(temp2),y 					; bump the count
.1e45	1a		inc a				inc 	a
.1e46	91 15		sta ($15),y			sta 	(temp2),y
.1e48	38		sec				sec 								; do subtraction saving interim result
.1e49	a5 13		lda $13				lda 	temp1
.1e4b	fd 7e 1e	sbc $1e7e,x			sbc 	_CTSTable,x
.1e4e	48		pha				pha
.1e4f	a5 14		lda $14				lda 	temp1+1
.1e51	fd 7f 1e	sbc $1e7f,x			sbc 	_CTSTable+1,x
.1e54	90 07		bcc $1e5d			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e56	85 14		sta $14				sta 	temp1+1 					; save result back
.1e58	68		pla				pla
.1e59	85 13		sta $13				sta 	temp1
.1e5b	80 e6		bra $1e43			bra 	_CTSSubLoop
.1e5d					_CTSCantSubtract:
.1e5d	68		pla				pla 								; throw away interim
.1e5e	e8		inx				inx 								; next subtractor
.1e5f	e8		inx				inx
.1e60	b1 15		lda ($15),y			lda 	(temp2),y 					; update leading zero
.1e62	49 30		eor #$30			eor 	#"0"
.1e64	05 1d		ora $1d				ora 	SignCount
.1e66	85 1d		sta $1d				sta 	SignCount
.1e68	f0 01		beq $1e6b			beq		_CTSLZ 						; if all zeros so far suppress.
.1e6a	c8		iny				iny 								; next character
.1e6b					_CTSLZ:
.1e6b	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1e6d	d0 d0		bne $1e3f			bne 	_CTSLoop
.1e6f					_CTSComplete:
.1e6f	a5 13		lda $13				lda		temp1 						; get remainder 0-9
.1e71	09 30		ora #$30			ora 	#48 						; ASCII
.1e73	91 15		sta ($15),y			sta 	(temp2),y					; write out
.1e75	c8		iny				iny
.1e76	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e78	91 15		sta ($15),y			sta 	(temp2),y
.1e7a	98		tya				tya 								; size in A
.1e7b	7a		ply				ply									; pull and exit.
.1e7c	fa		plx				plx
.1e7d	60		rts				rts
.1e7e					_CTSTable:
>1e7e	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e86					_CTSTableEnd:

;******  Return to file: files.asm


;******  Processing file: words/system/varhandlers.src

.1e86					VarAddressHandler:
.1e86	18		clc				clc 								; find variable, error if it doesn't exist.
.1e87	20 29 1f	jsr $1f29			jsr 	VariableFind
.1e8a	20 03 1f	jsr $1f03			jsr 	VariableCheckIndex
.1e8d	a5 09		lda $09				lda 	TOS
.1e8f	48		pha				pha
.1e90	a5 0a		lda $0a				lda 	TOS+1
.1e92	48		pha				pha
.1e93	a5 13		lda $13				lda 	temp1 						; the address is the new value
.1e95	85 09		sta $09				sta 	TOS
.1e97	a5 14		lda $14				lda		temp1+1
.1e99	85 0a		sta $0a				sta 	TOS+1
.1e9b	4c 00 00	jmp $0000			jmp 	NextCode
.1e9e					VarAddrHandlerDecode:
.1e9e	a9 26		lda #$26			lda 	#"&"
.1ea0	4c e1 1f	jmp $1fe1			jmp 	VarHandlerDecode
.1ea3					VarReadHandler:
.1ea3	18		clc				clc 								; find variable, error if it doesn't exist.
.1ea4	20 29 1f	jsr $1f29			jsr 	VariableFind
.1ea7	20 03 1f	jsr $1f03			jsr 	VariableCheckIndex
.1eaa	a5 09		lda $09				lda 	TOS
.1eac	48		pha				pha
.1ead	a5 0a		lda $0a				lda 	TOS+1
.1eaf	48		pha				pha
.1eb0	b2 13		lda ($13)			lda 	(temp1)						; read variable address to TOS
.1eb2	85 09		sta $09				sta 	TOS
.1eb4	a0 01		ldy #$01			ldy 	#1
.1eb6	b1 13		lda ($13),y			lda 	(temp1),y
.1eb8	85 0a		sta $0a				sta 	TOS+1
.1eba	4c 00 00	jmp $0000			jmp 	NextCode
.1ebd					VarReadHandlerDecode:
.1ebd	a9 40		lda #$40			lda 	#"@"
.1ebf	4c e1 1f	jmp $1fe1			jmp 	VarHandlerDecode
.1ec2					VarWriteHandler:
.1ec2	38		sec				sec 								; find variable, create it if it doesn't exist.
.1ec3	20 29 1f	jsr $1f29			jsr 	VariableFind
.1ec6	20 03 1f	jsr $1f03			jsr 	VariableCheckIndex
.1ec9	a5 09		lda $09				lda 	TOS 						; write TOS to that address.
.1ecb	92 13		sta ($13)			sta 	(temp1)
.1ecd	a5 0a		lda $0a				lda 	TOS+1
.1ecf	a0 01		ldy #$01			ldy 	#1
.1ed1	91 13		sta ($13),y			sta 	(temp1),y
.1ed3	68		pla				pla
.1ed4	85 0a		sta $0a				sta 	TOS+1
.1ed6	68		pla				pla
.1ed7	85 09		sta $09				sta 	TOS
.1ed9	4c 00 00	jmp $0000			jmp 	NextCode
.1edc					VarWriteHandlerDecode:
.1edc	a9 21		lda #$21			lda 	#"!"
.1ede	4c e1 1f	jmp $1fe1			jmp 	VarHandlerDecode
.1ee1					IndexHandler:
.1ee1	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1ee4	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>1eec	42 55 47 00
.1ef0					IndexHandlerDecode:
.1ef0	a9 5b		lda #$5b			lda 	#"["
.1ef2	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1ef5	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1ef7	a0 00		ldy #$00			ldy 	#0
.1ef9	38		sec				sec
.1efa	20 bd 19	jsr $19bd			jsr 	DecodeYAToBuffer
.1efd	a9 5d		lda #$5d			lda 	#"]"
.1eff	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1f02	60		rts				rts
.1f03					VariableCheckIndex:
.1f03	8a		txa				txa 								; next is $$index ?
.1f04	a8		tay				tay
.1f05	c8		iny				iny
.1f06	c8		iny				iny
.1f07	b1 03		lda ($03),y			lda 	(IP),y
.1f09	c9 e1		cmp #$e1			cmp 	#IndexHandler & $FF
.1f0b	d0 1b		bne $1f28			bne 	_VCIExit
.1f0d	c8		iny				iny
.1f0e	b1 03		lda ($03),y			lda 	(IP),y
.1f10	c9 1e		cmp #$1e			cmp 	#IndexHandler >> 8
.1f12	d0 14		bne $1f28			bne 	_VCIExit
.1f14	98		tya				tya 								; fix X backup 3 on from where we started
.1f15	aa		tax				tax
.1f16	c8		iny				iny 								; get the index
.1f17	b1 03		lda ($03),y			lda 	(IP),y
.1f19	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.1f1a	a0 01		ldy #$01			ldy 	#1
.1f1c	72 13		adc ($13)			adc 	(temp1) 					; do the indirection e.g. the look up.
.1f1e	48		pha				pha
.1f1f	b1 13		lda ($13),y			lda 	(temp1),y
.1f21	69 00		adc #$00			adc 	#0
.1f23	85 14		sta $14				sta 	temp1+1
.1f25	68		pla				pla
.1f26	85 13		sta $13				sta 	temp1
.1f28					_VCIExit:
.1f28	60		rts				rts
.1f29					VariableFind:
.1f29	08		php				php 								; save autocreate flag.
.1f2a	e8		inx				inx 								; advance to/over the variable name.
.1f2b	e8		inx				inx
.1f2c	8a		txa				txa 								; put in Y
.1f2d	a8		tay				tay
.1f2e	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1f30	85 15		sta $15				sta 	temp2
.1f32	c8		iny				iny
.1f33	b1 03		lda ($03),y			lda 	(IP),y
.1f35	85 16		sta $16				sta 	temp2+1
.1f37	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1f39	b0 0f		bcs $1f4a			bcs 	_VFLong
.1f3b	a5 16		lda $16				lda 	temp2+1
.1f3d	d0 0b		bne $1f4a			bne 	_VFLong
.1f3f	a5 15		lda $15				lda 	temp2						; this is the index
.1f41	0a		asl a				asl 	a 							; double it
.1f42	85 13		sta $13				sta 	temp1
.1f44	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1f46	85 14		sta $14				sta 	temp1+1
.1f48	28		plp				plp 								; throw creation flag, it always exists.
.1f49	60		rts				rts
.1f4a					_VFLong:
.1f4a	a5 15		lda $15				lda 	temp2 						; built a hash table index into temp3/temp4
.1f4c	6a		ror a				ror 	a
.1f4d	6a		ror a				ror 	a
.1f4e	6a		ror a				ror 	a
.1f4f	6a		ror a				ror 	a
.1f50	45 15		eor $15				eor 	temp2
.1f52	45 16		eor $16				eor 	temp2+1
.1f54	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1f56	0a		asl a				asl 	a
.1f57	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1f59	85 13		sta $13				sta 	temp1
.1f5b	85 17		sta $17				sta 	temp3
.1f5d	a9 06		lda #$06			lda 	#hashTable >> 8
.1f5f	85 14		sta $14				sta 	temp1+1
.1f61	85 18		sta $18				sta 	temp3+1
.1f63					_VFSearch:
.1f63	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1f65	b1 13		lda ($13),y			lda 	(temp1),y
.1f67	f0 23		beq $1f8c			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1f69	a8		tay				tay 								; follow the link through.
.1f6a	b2 13		lda ($13)			lda 	(temp1)
.1f6c	85 13		sta $13				sta 	temp1
.1f6e	84 14		sty $14				sty 	temp1+1
.1f70	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1f72	b1 13		lda ($13),y			lda 	(temp1),y
.1f74	c5 15		cmp $15				cmp 	temp2
.1f76	d0 eb		bne $1f63			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f78	c8		iny				iny 								; same for 2nd byte of name
.1f79	b1 13		lda ($13),y			lda 	(temp1),y
.1f7b	c5 16		cmp $16				cmp 	temp2+1
.1f7d	d0 e4		bne $1f63			bne 	_VFSearch
.1f7f	18		clc				clc
.1f80	a5 13		lda $13				lda 	temp1 						; make temp1 point to the data at offset 2
.1f82	69 02		adc #$02			adc 	#2
.1f84	85 13		sta $13				sta 	temp1
.1f86	90 02		bcc $1f8a			bcc 	_VFNoPage1
.1f88	e6 14		inc $14				inc 	temp1+1
.1f8a					_VFNoPage1:
.1f8a	28		plp				plp 								; don't need to worry about creation flag
.1f8b	60		rts				rts
.1f8c					_VFNotFound:
.1f8c	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1f8d	b0 14		bcs $1fa3			bcs 	_VFCreate
.1f8f	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>1f92	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>1f9a	56 41 52 49 41 42 4c 45 00
.1fa3					_VFCreate:
.1fa3	a0 01		ldy #$01			ldy 	#1
.1fa5	b2 17		lda ($17)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1fa7	92 11		sta ($11)			sta 	(nextFreeMem)
.1fa9	b1 17		lda ($17),y			lda 	(temp3),y
.1fab	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fad	c8		iny				iny
.1fae	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1fb0	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fb2	c8		iny				iny
.1fb3	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fb5	c8		iny				iny
.1fb6	a5 15		lda $15				lda 	temp2 						; copy the name out
.1fb8	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fba	c8		iny				iny
.1fbb	a5 16		lda $16				lda 	temp2+1
.1fbd	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fbf	a0 01		ldy #$01			ldy 	#1
.1fc1	a5 11		lda $11				lda 	nextFreeMem 				; update the head link
.1fc3	92 17		sta ($17)			sta 	(temp3)
.1fc5	a5 12		lda $12				lda 	nextFreeMem+1
.1fc7	91 17		sta ($17),y			sta 	(temp3),y
.1fc9	18		clc				clc
.1fca	a5 11		lda $11				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1fcc	69 02		adc #$02			adc 	#2
.1fce	85 13		sta $13				sta 	temp1
.1fd0	a5 12		lda $12				lda 	nextFreeMem+1
.1fd2	69 00		adc #$00			adc 	#0
.1fd4	85 14		sta $14				sta 	temp1+1
.1fd6	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1fd8	a0 00		ldy #$00			ldy 	#0
.1fda	20 7a 18	jsr $187a			jsr 	AdvanceFreeMem
.1fdd	20 87 18	jsr $1887			jsr 	CheckMemory 				; low on memory ?
.1fe0	60		rts				rts
.1fe1					VarHandlerDecode:
.1fe1	48		pha				pha 								; save, leading space
.1fe2	a9 07		lda #$07			lda 	#CTH_Variable
.1fe4	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1fe7	68		pla				pla 								; restore and write type
.1fe8	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.1feb	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy to temp1
.1fed	85 13		sta $13				sta 	temp1
.1fef	c8		iny				iny
.1ff0	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1ff2	85 14		sta $14				sta 	temp1+1
.1ff4	a5 13		lda $13				lda 	temp1 						; output the first character
.1ff6	29 1f		and #$1f			and 	#31
.1ff8	20 23 20	jsr $2023			jsr 	VHOutVarChar
.1ffb	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1ffd					_VHDShift:
.1ffd	46 14		lsr $14				lsr 	temp1+1
.1fff	66 13		ror $13				ror 	temp1
.2001	ca		dex				dex
.2002	d0 f9		bne $1ffd			bne 	_VHDShift
.2004	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.2006					_VHDDiv40:
.2006	e8		inx				inx
.2007	38		sec				sec
.2008	a5 13		lda $13				lda 	temp1
.200a	e9 28		sbc #$28			sbc 	#40
.200c	a8		tay				tay
.200d	a5 14		lda $14				lda 	temp1+1
.200f	e9 00		sbc #$00			sbc 	#0
.2011	90 06		bcc $2019			bcc 	_VHDivDone
.2013	85 14		sta $14				sta 	temp1+1
.2015	84 13		sty $13				sty 	temp1
.2017	80 ed		bra $2006			bra 	_VHDDiv40
.2019					_VHDivDone:
.2019	a5 13		lda $13				lda 	temp1 						; remainder
.201b	20 23 20	jsr $2023			jsr 	VHOutVarChar
.201e	8a		txa				txa
.201f	20 23 20	jsr $2023			jsr 	VHOutVarChar 				; and result.
.2022	60		rts				rts
.2023					VHOutVarChar:
.2023	c9 00		cmp #$00			cmp 	#0
.2025	f0 0c		beq $2033			beq 	_VHOExit
.2027	18		clc				clc
.2028	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.202a	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.202c	90 02		bcc $2030			bcc 	_VHOOut
.202e	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.2030					_VHOOut:
.2030	20 9b 19	jsr $199b			jsr 	DecodeWriteBuffer
.2033					_VHOExit:
.2033	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encode.src

.2034					EncodeProgram:
.2034	48		pha				pha 								; save registers.
.2035	da		phx				phx
.2036	5a		phy				phy
.2037	84 0c		sty $0c				sty 	srcPtr+1					; save source pointer.
.2039	85 0b		sta $0b				sta		srcPtr
.203b	64 08		stz $08				stz 	rsp
.203d	a6 08		ldx $08				ldx 	rsp 						; this is the current stack entry type, so $00 means
.203f	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.2042	20 c1 22	jsr $22c1			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.2045	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.2047	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.204a	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.204d	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.2050	b2 0b		lda ($0b)			lda 	(srcPtr) 					; check if first character is digit
.2052	20 6c 22	jsr $226c			jsr 	CheckIsDigit
.2055	90 09		bcc $2060			bcc 	_EPNoLineNumber 			; if so there is a line number
.2057	20 8e 22	jsr $228e			jsr 	EncodeGetConstant 			; extract that constant from the source
.205a	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.205d	8c 12 09	sty $0912			sty 	encodeBuffer+2
.2060					_EPNoLineNumber:
.2060					EncodeLoop:
.2060	20 b3 22	jsr $22b3			jsr 	EncSkipSpaces 				; skip over spaces
.2063	b2 0b		lda ($0b)			lda 	(srcPtr) 					; reached end ?
.2065	d0 21		bne $2088			bne 	_EPNotEnd
.2067					_EPEndEncode:
.2067	a9 e2		lda #$e2			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.2069	a0 1c		ldy #$1c			ldy 	#NextLine >> 8
.206b	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.206e	a5 08		lda $08				lda 	rsp 						; is the return stack empty ?
.2070	d0 04		bne $2076			bne 	_EPIncomplete
.2072	7a		ply				ply									; restore and exit.
.2073	fa		plx				plx
.2074	68		pla				pla
.2075	60		rts				rts
.2076					_EPIncomplete:
.2076	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>2079	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>2081	45 20 4f 50 45 4e 00
.2088					_EPNotEnd:
.2088	b2 0b		lda ($0b)			lda 	(srcPtr)
.208a	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.208c	f0 04		beq $2092			beq 	_EPIsComStr
.208e	c9 27		cmp #$27			cmp 	#"'"
.2090	d0 05		bne $2097			bne 	_EPNotComStr
.2092					_EPIsComStr:
.2092	20 91 21	jsr $2191			jsr 	EncodeCommentString
.2095	80 c9		bra $2060			bra 	EncodeLoop
.2097					_EPNotComStr:
.2097	38		sec				sec
.2098	20 a0 22	jsr $22a0			jsr 	EncSetBit7Word
.209b	20 e8 22	jsr $22e8			jsr 	EncodeSearchDictionary		; look it up
.209e	90 45		bcc $20e5			bcc 	_EPNotInDictionary
.20a0	85 13		sta $13				sta 	temp1 						; save dictionary record address
.20a2	84 14		sty $14				sty 	temp1+1
.20a4	a0 01		ldy #$01			ldy 	#1
.20a6	b1 13		lda ($13),y			lda 	(temp1),y 					; check if has an encode bit
.20a8	29 20		and #$20			and 	#$20
.20aa	d0 12		bne $20be			bne 	_EPEncodeRoutine 			; if so, do special routine.
.20ac	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.20ae	b1 13		lda ($13),y			lda 	(temp1),y
.20b0	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20b3	c8		iny				iny
.20b4	b1 13		lda ($13),y			lda 	(temp1),y
.20b6	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20b9	20 78 22	jsr $2278			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20bc	80 a2		bra $2060			bra 	EncodeLoop
.20be					_EPEncodeRoutine:
.20be	a0 01		ldy #$01			ldy 	#1							; get type bit
.20c0	b1 13		lda ($13),y			lda 	(temp1),y
.20c2	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.20c4	29 10		and #$10			and 	#$10 						; but decoder comes first
.20c6	f0 02		beq $20ca			beq 	_EPENoDecoder
.20c8	c8		iny				iny 								; so if it exists, adjust for it.
.20c9	c8		iny				iny
.20ca					_EPENoDecoder:
.20ca	b1 13		lda ($13),y			lda 	(temp1),y 					; copy exec addr to temp2
.20cc	85 15		sta $15				sta 	temp2
.20ce	c8		iny				iny
.20cf	b1 13		lda ($13),y			lda 	(temp1),y
.20d1	85 16		sta $16				sta 	temp2+1
.20d3	48		pha				pha 								; call routine preserving state
.20d4	da		phx				phx
.20d5	5a		phy				phy
.20d6	20 e2 20	jsr $20e2			jsr 	_EPECallTemp2
.20d9	7a		ply				ply
.20da	fa		plx				plx
.20db	68		pla				pla
.20dc	20 78 22	jsr $2278			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20df	4c 60 20	jmp $2060			jmp 	EncodeLoop
.20e2					_EPECallTemp2:
.20e2	6c 15 00	jmp ($0015)			jmp 	(temp2)
.20e5					_EPNotInDictionary:
.20e5	20 f6 21	jsr $21f6			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.20e8	90 19		bcc $2103			bcc 	_EPNotDefined
.20ea	48		pha				pha
.20eb	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.20ed	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20f0	a9 16		lda #$16			lda	 	#CallHandler >> 8
.20f2	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20f5	68		pla				pla 								; write line number
.20f6	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20f9	98		tya				tya
.20fa	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.20fd	20 78 22	jsr $2278			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2100	4c 60 20	jmp $2060			jmp 	EncodeLoop
.2103					_EPNotDefined:
.2103	b2 0b		lda ($0b)			lda 	(srcPtr) 					; first character
.2105	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.2107	f0 65		beq $216e			beq 	_EPDefinition
.2109	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.210b	f0 3b		beq $2148			beq 	_EPCallDirect
.210d	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.210f	f0 54		beq $2165			beq 	_EPVariable
.2111	c9 40		cmp #$40			cmp 	#"@"
.2113	f0 50		beq $2165			beq 	_EPVariable
.2115	c9 26		cmp #$26			cmp 	#"&"
.2117	f0 4c		beq $2165			beq 	_EPVariable
.2119	c9 24		cmp #$24			cmp 	#"$" 						; is it a hex constant
.211b	d0 09		bne $2126			bne 	_EPDecLiteral
.211d	a9 6c		lda #$6c			lda 	#HexLiteral2Byte & $FF 		; write out 2 byte literal (hex)
.211f	a0 10		ldy #$10			ldy 	#HexLiteral2Byte >> 8
.2121	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.2124	80 07		bra $212d			bra 	_EPOutputConstant
.2126					_EPDecLiteral:
.2126	a9 6d		lda #$6d			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.2128	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.212a	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.212d					_EPOutputConstant:
.212d	20 8e 22	jsr $228e			jsr 	EncodeGetConstant 			; extract that constant from the source
.2130	90 06		bcc $2138			bcc 	_EPFail 					; if can't find one, that's us done.
.2132	20 44 22	jsr $2244			jsr 	EncodeWriteWord 			; write out the encoded value.
.2135	4c 60 20	jmp $2060			jmp 	EncodeLoop 					; and go round again.
.2138					_EPFail:
.2138	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>213b	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>2143	52 52 4f 52 00
.2148					_EPCallDirect:
.2148	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.214a	a0 16		ldy #$16			ldy	 	#CallHandler >> 8
.214c	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.214f	a9 01		lda #$01			lda 	#1
.2151	20 84 22	jsr $2284			jsr 	EncodeAddSrcPtr 			; skip over the <
.2154	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.2156					_EPToLast:
.2156	c8		iny				iny
.2157	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2159	10 fb		bpl $2156			bpl	 	_EPToLast
.215b	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.215d	d0 d9		bne $2138			bne 	_EPFail
.215f	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.2161	91 0b		sta ($0b),y			sta 	(srcPtr),y
.2163	80 c8		bra $212d			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.2165					_EPVariable:
.2165	20 3c 23	jsr $233c			jsr 	EncodeVariableReference
.2168	20 78 22	jsr $2278			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.216b	4c 60 20	jmp $2060			jmp 	EncodeLoop
.216e					_EPDefinition:
.216e	a9 24		lda #$24			lda	 	#DefineCode & $FF 			; write code call handler
.2170	a0 1d		ldy #$1d			ldy	 	#DefineCode >> 8
.2172	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.2175	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.2178	a9 01		lda #$01			lda 	#1 							; write default size
.217a	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.217d	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.217f	c8		iny		_EPCopy:iny
.2180	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2182	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.2185	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.2188	0a		asl a				asl 	a
.2189	90 f4		bcc $217f			bcc 	_EPCopy
.218b	20 78 22	jsr $2278			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.218e	4c 60 20	jmp $2060			jmp 	EncodeLoop

;******  Return to file: files.asm


;******  Processing file: words/encode/comstr.src

.2191					EncodeCommentString:
.2191	b2 0b		lda ($0b)			lda 	(srcPtr) 					; get first character
.2193	64 13		stz $13				stz 	temp1 						; other terminator = EOL
.2195	aa		tax				tax 								; save in X
.2196	a9 f9		lda #$f9			lda 	#(SkipComment & $FF)		; get the routine to use
.2198	a0 1c		ldy #$1c			ldy 	#(SkipComment >> 8)
.219a	e0 27		cpx #$27			cpx 	#"'"
.219c	f0 06		beq $21a4			beq 	_ECSGotCmd
.219e	86 13		stx $13				stx		temp1 						; other terminator = "
.21a0	a9 c7		lda #$c7			lda 	#(LiteralString & $FF)
.21a2	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.21a4					_ECSGotCmd:
.21a4	20 44 22	jsr $2244			jsr 	EncodeWriteWord 			; write word out.
.21a7	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.21a9	20 84 22	jsr $2284			jsr 	EncodeAddSrcPtr
.21ac	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.21ae	d0 03		bne $21b3			bne 	_ECNoSkipSpaces
.21b0	20 b3 22	jsr $22b3			jsr 	EncSkipSpaces
.21b3					_ECNoSkipSpaces:
.21b3	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.21b6	a9 01		lda #$01			lda 	#1
.21b8	20 4e 22	jsr $224e			jsr 	EncodeWriteByte 			; write total length, so far 1.
.21bb	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.21bd					_ECSCopyText:
.21bd	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get next
.21bf	f0 18		beq $21d9			beq 	_ECSEndOfLine 				; end of line ?
.21c1	c5 13		cmp $13				cmp 	temp1						; is it the other terminator
.21c3	f0 09		beq $21ce			beq 	_ECSEndOfString 			; if so must be closing quote.
.21c5	20 4e 22	jsr $224e			jsr 	EncodeWriteByte 			; write the byte out
.21c8	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.21cb	c8		iny				iny 								; next character
.21cc	80 ef		bra $21bd			bra 	_ECSCopyText
.21ce					_ECSEndOfString:
.21ce	c8		iny				iny 								; skip closing quote.
.21cf	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.21d1	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.21d4	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.21d7	80 18		bra $21f1			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.21d9					_ECSEndOfLine:
.21d9	a5 13		lda $13				lda 	temp1 						; missing closing quote
.21db	f0 14		beq $21f1			beq 	_ECSComplete 				; if we were doing a string.
.21dd	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>21e0	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>21e8	4e 47 20 51 55 4f 54 45 00
.21f1					_ECSComplete:
.21f1	98		tya				tya									; skip over.
.21f2	20 84 22	jsr $2284			jsr 	EncodeAddSrcPtr
.21f5	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encdef.src

.21f6					EncodeSearchUserDefined:
.21f6	38		sec				sec 								; temp1 = srcPtr-6 because the
.21f7	a5 0b		lda $0b				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.21f9	e9 06		sbc #$06			sbc		#6
.21fb	85 13		sta $13				sta 	temp1
.21fd	a5 0c		lda $0c				lda 	srcPtr+1
.21ff	e9 00		sbc #$00			sbc 	#0
.2201	85 14		sta $14				sta 	temp1+1
.2203	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.2205	85 15		sta $15				sta 	0+(temp2)
.2207	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.2209	85 16		sta $16				sta 	1+(temp2)
.220b					_ESULoop:
.220b	b2 15		lda ($15)			lda 	(temp2) 					; reached the end (offset 0)
.220d	f0 33		beq $2242			beq 	_ESUFail
.220f	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.2211	b1 15		lda ($15),y			lda 	(temp2),y
.2213	c9 24		cmp #$24			cmp 	#DefineCode & $FF
.2215	d0 1e		bne $2235			bne 	_ESUNext
.2217	c8		iny				iny
.2218	b1 15		lda ($15),y			lda 	(temp2),y
.221a	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.221c	d0 17		bne $2235			bne 	_ESUNext
.221e	c8		iny				iny 								; skip length byte.
.221f					_ESUCompare:
.221f	c8		iny				iny
.2220	b1 15		lda ($15),y			lda 	(temp2),y
.2222	d1 13		cmp ($13),y			cmp 	(temp1),y
.2224	d0 0f		bne $2235			bne 	_ESUNext
.2226	0a		asl a				asl 	a 							; bit 7 set => found it.
.2227	90 f6		bcc $221f			bcc 	_ESUCompare
.2229	a0 01		ldy #$01			ldy 	#1
.222b	b1 15		lda ($15),y			lda 	(temp2),y 					; read in the line number to YA
.222d	aa		tax				tax
.222e	c8		iny				iny
.222f	b1 15		lda ($15),y			lda 	(temp2),y
.2231	a8		tay				tay
.2232	8a		txa				txa
.2233	38		sec				sec 								; return with carry set as found
.2234	60		rts				rts
.2235					_ESUNext:
.2235	18		clc				clc
.2236	a5 15		lda $15				lda 	temp2
.2238	72 15		adc ($15)			adc 	(temp2)
.223a	85 15		sta $15				sta 	temp2
.223c	90 02		bcc $2240			bcc 	_NoCarryAdv
.223e	e6 16		inc $16				inc 	temp2+1
.2240					_NoCarryAdv:
.2240	80 c9		bra $220b			bra 	_ESULoop 					; and loop round
.2242					_ESUFail:
.2242	18		clc				clc
.2243	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encutils.src

.2244					EncodeWriteWord:
.2244	48		pha				pha
.2245	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.2248	98		tya				tya
.2249	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.224c	68		pla				pla
.224d	60		rts				rts
.224e					EncodeWriteByte:
.224e	da		phx				phx
.224f	ae 10 09	ldx $0910			ldx 	encodeBuffer
.2252	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.2255	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.2258	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.225b	ee 10 09	inc $0910			inc 	encodeBuffer
.225e	fa		plx				plx
.225f	60		rts				rts
.2260					CheckIsLetter:
.2260	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.2262	90 06		bcc $226a			bcc 	_CILFail
.2264	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2266	b0 02		bcs $226a			bcs 	_CILFail
.2268	38		sec				sec
.2269	60		rts				rts
.226a					_CILFail:
.226a	18		clc				clc
.226b	60		rts				rts
.226c					CheckIsDigit:
.226c	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.226e	90 06		bcc $2276			bcc 	_CIDFail
.2270	c9 3a		cmp #$3a			cmp 	#"9"+1
.2272	b0 02		bcs $2276			bcs 	_CIDFail
.2274	38		sec				sec
.2275	60		rts				rts
.2276					_CIDFail:
.2276	18		clc				clc
.2277	60		rts				rts
.2278					EncodeMoveNextWord:
.2278	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.227a					_EPNWLoop:
.227a	c8		iny				iny
.227b	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.227d	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.227f	b0 f9		bcs $227a			bcs 	_EPNWLoop
.2281	98		tya				tya
.2282	80 00		bra $2284			bra 	EncodeAddSrcPtr
.2284					EncodeAddSrcPtr:
.2284	18		clc				clc 								; add offset
.2285	65 0b		adc $0b				adc 	srcPtr
.2287	85 0b		sta $0b				sta 	srcPtr
.2289	90 02		bcc $228d			bcc 	_EASPNoCarry
.228b	e6 0c		inc $0c				inc 	srcPtr+1					; carry through
.228d					_EASPNoCarry:
.228d	60		rts				rts
.228e					EncodeGetConstant:
.228e	a5 0b		lda $0b				lda 	srcPtr 						; get source
.2290	a4 0c		ldy $0c				ldy 	srcPtr+1
.2292	20 4d 1d	jsr $1d4d			jsr 	ConvertToInteger 			; call converter
.2295	90 08		bcc $229f			bcc 	_EGCExit
.2297	20 84 22	jsr $2284			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.229a	a5 17		lda $17				lda 	temp3 						; get result into YA
.229c	a4 18		ldy $18				ldy 	temp3+1
.229e	38		sec				sec 								; return CS
.229f					_EGCExit:
.229f	60		rts				rts
.22a0					EncSetBit7Word:
.22a0	08		php				php 								; save carry
.22a1	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.22a3					_ESB7Loop:
.22a3	c8		iny				iny
.22a4	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22a6	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.22a8	b0 f9		bcs $22a3			bcs 	_ESB7Loop
.22aa	88		dey				dey									; previous character
.22ab	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; read it
.22ad	0a		asl a				asl 	a 							; shift bit 7 out
.22ae	28		plp				plp 								; restore carry
.22af	6a		ror a				ror 	a 							; shift it in
.22b0	91 0b		sta ($0b),y			sta 	(srcPtr),y 					; write back and exit
.22b2	60		rts				rts
.22b3					EncSkipSpaces:
.22b3	b2 0b		lda ($0b)			lda 	(srcPtr) 					; skip over spaces/ reached end
.22b5	c9 20		cmp #$20			cmp 	#32
.22b7	d0 07		bne $22c0			bne 	_ESNotSpace
.22b9	a9 01		lda #$01			lda 	#1
.22bb	20 84 22	jsr $2284			jsr 	EncodeAddSrcPtr
.22be	80 f3		bra $22b3			bra	 	EncSkipSpaces
.22c0					_ESNotSpace:
.22c0	60		rts				rts
.22c1					EncodeTrimTrailingSpaces:
.22c1	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.22c3					_ETTFindEnd:
.22c3	c8		iny				iny
.22c4	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22c6	d0 fb		bne $22c3			bne 	_ETTFindEnd
.22c8					_ETTRemoveSpace:
.22c8	c0 00		cpy #$00			cpy 	#0 							; start of string
.22ca	f0 0d		beq $22d9			beq 	_ETTExit
.22cc	88		dey				dey 								; previous character 1..32
.22cd	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22cf	c9 21		cmp #$21			cmp 	#32+1
.22d1	b0 06		bcs $22d9			bcs 	_ETTExit
.22d3	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.22d5	91 0b		sta ($0b),y			sta 	(srcPtr),y
.22d7	80 ef		bra $22c8			bra 	_ETTRemoveSpace
.22d9					_ETTExit:
.22d9	60		rts				rts
.22da					EncodePushPosMarkerOnStack:
.22da	e6 08		inc $08				inc 	rsp 						; make space on rstack
.22dc	a6 08		ldx $08				ldx 	rsp							; access it
.22de	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.22e1	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.22e4	9d 80 07	sta $0780,x			sta 	returnStackX,x
.22e7	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encsearch.src

.22e8					EncodeSearchDictionary:
.22e8	a9 eb		lda #$eb			lda 	#(Dictionary) & $FF
.22ea	85 13		sta $13				sta 	0+(temp1)
.22ec	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.22ee	85 14		sta $14				sta 	1+(temp1)
.22f0					_ESDLoop:
.22f0	b2 13		lda ($13)			lda 	(temp1) 					; end of dictionary return with CC.
.22f2	18		clc				clc
.22f3	f0 46		beq $233b			beq 	_ESDExit
.22f5	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.22f7	b1 13		lda ($13),y			lda 	(temp1),y
.22f9	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.22fa	4a		lsr a				lsr 	a
.22fb	4a		lsr a				lsr 	a
.22fc	4a		lsr a				lsr 	a
.22fd	c8		iny				iny 								; Y = 2
.22fe	4a		lsr a				lsr 	a
.22ff	90 01		bcc $2302			bcc 	_ESDNotDec
.2301	c8		iny				iny
.2302					_ESDNotDec:
.2302	4a		lsr a				lsr 	a
.2303	90 01		bcc $2306			bcc 	_ESDNotInc
.2305	c8		iny				iny
.2306					_ESDNotInc:
.2306	98		tya				tya
.2307	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.2308	a8		tay				tay
.2309	b1 13		lda ($13),y			lda 	(temp1),y 					; quick check of first character
.230b	d2 0b		cmp ($0b)			cmp 	(srcPtr)
.230d	d0 1f		bne $232e			bne 	_ESDNext 					; do not match, go to next
.230f	98		tya				tya 								; make temp2 point to the name in
.2310	18		clc				clc 								; the dictionary.
.2311	65 13		adc $13				adc 	temp1
.2313	85 15		sta $15				sta 	temp2
.2315	a5 14		lda $14				lda 	temp1+1
.2317	69 00		adc #$00			adc 	#0
.2319	85 16		sta $16				sta 	temp2+1
.231b	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.231d					_ESDCompare:
.231d	c8		iny				iny
.231e	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2320	d1 15		cmp ($15),y			cmp 	(temp2),y
.2322	d0 0a		bne $232e			bne 	_ESDNext
.2324	0a		asl a				asl 	a
.2325	90 f6		bcc $231d			bcc 	_ESDCompare
.2327	a5 13		lda $13				lda 	temp1 						; return address in YA and carry set.
.2329	a4 14		ldy $14				ldy 	temp1+1
.232b	38		sec				sec
.232c	80 0d		bra $233b			bra 	_ESDExit
.232e					_ESDNext:
.232e	18		clc				clc
.232f	a5 13		lda $13				lda 	temp1
.2331	72 13		adc ($13)			adc 	(temp1)
.2333	85 13		sta $13				sta 	temp1
.2335	90 b9		bcc $22f0			bcc 	_ESDLoop
.2337	e6 14		inc $14				inc 	temp1+1
.2339	80 b5		bra $22f0			bra 	_ESDLoop
.233b					_ESDExit:
.233b	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encvar.src

.233c					EncodeVariableReference:
.233c	b2 0b		lda ($0b)			lda 	(srcPtr)					; get the type, use it to identify the routine
.233e	a2 86		ldx #$86			ldx 	#VarAddressHandler & $FF
.2340	a0 1e		ldy #$1e			ldy 	#VarAddressHandler >> 8
.2342	c9 26		cmp #$26			cmp 	#"&"
.2344	f0 0c		beq $2352			beq 	_EVFHaveAddress
.2346	a2 a3		ldx #$a3			ldx 	#VarReadHandler & $FF
.2348	a0 1e		ldy #$1e			ldy 	#VarReadHandler >> 8
.234a	c9 40		cmp #$40			cmp 	#"@"
.234c	f0 04		beq $2352			beq 	_EVFHaveAddress
.234e	a2 c2		ldx #$c2			ldx 	#VarWriteHandler & $FF
.2350	a0 1e		ldy #$1e			ldy 	#VarWriteHandler >> 8
.2352					_EVFHaveAddress:
.2352	8a		txa				txa
.2353	20 44 22	jsr $2244			jsr 	EncodeWriteWord 			; write it out.
.2356	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.2358	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.235a	29 7f		and #$7f			and 	#$7F 						; might be the last.
.235c	20 60 22	jsr $2260			jsr 	CheckIsLetter 				; is it A-Z
.235f	90 54		bcc $23b5			bcc 	EVFFail
.2361	29 1f		and #$1f			and 	#31 						; make 1-26
.2363	85 13		sta $13				sta 	temp1 						; start building the name in temp1
.2365	64 14		stz $14				stz 	temp1+1
.2367	38		sec				sec 								; possible char 2
.2368	20 ca 23	jsr $23ca			jsr 	EncVarAlNum
.236b	18		clc				clc 								; possible char 3
.236c	20 ca 23	jsr $23ca			jsr 	EncVarAlNum
.236f	5a		phy				phy
.2370	a5 13		lda $13				lda 	temp1 						; write out variable identifier.
.2372	a4 14		ldy $14				ldy 	temp1+1
.2374	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.2377	7a		ply				ply
.2378	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; more text after ?
.237a	10 01		bpl $237d			bpl 	_EVFCheckArray
.237c	60		rts				rts
.237d					_EVFCheckArray:
.237d	c8		iny				iny 								; get the next character
.237e	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2380	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.2382	d0 31		bne $23b5			bne 	EVFFail
.2384	64 13		stz $13				stz 	temp1 						; zero temp1.
.2386	c8		iny				iny  								; point to index
.2387					_EVFGetIndex:
.2387	06 13		asl $13				asl 	temp1 						; temp1 x 10
.2389	a5 13		lda $13				lda 	temp1
.238b	0a		asl a				asl 	a
.238c	0a		asl a				asl		a
.238d	65 13		adc $13				adc 	temp1
.238f	85 13		sta $13				sta 	temp1
.2391	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get the digit
.2393	20 6c 22	jsr $226c			jsr 	CheckIsDigit
.2396	90 1d		bcc $23b5			bcc 	EVFFail 					; failed, not digit
.2398	29 0f		and #$0f			and 	#15
.239a	18		clc				clc
.239b	65 13		adc $13				adc 	temp1
.239d	30 16		bmi $23b5			bmi 	EVFFail 					; failed, bad index.
.239f	85 13		sta $13				sta 	temp1
.23a1	c8		iny				iny
.23a2	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23a4	c9 dd		cmp #$dd			cmp 	#"]"+$80
.23a6	d0 df		bne $2387			bne 	_EVFGetIndex 				; index now in temp1.
.23a8	a9 e1		lda #$e1			lda 	#IndexHandler & $FF 		; output code
.23aa	a0 1e		ldy #$1e			ldy 	#IndexHandler >> 8
.23ac	20 44 22	jsr $2244			jsr 	EncodeWriteWord
.23af	a5 13		lda $13				lda 	temp1	 					; write index
.23b1	20 4e 22	jsr $224e			jsr 	EncodeWriteByte
.23b4	60		rts				rts
.23b5					EVFFail:
.23b5	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>23b8	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>23c0	41 42 4c 45 20 4e 41 4d 45 00
.23ca					EncVarAlNum:
.23ca	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; points to the  last char processed.
.23cc	10 01		bpl $23cf			bpl 	_EVAContinue
.23ce	60		rts				rts
.23cf					_EVAContinue:
.23cf	08		php				php 								; CS x 32 ; CC x 32 x 40
.23d0	c8		iny				iny 								; get the next character, strip bit 7
.23d1	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23d3	88		dey				dey
.23d4	29 7f		and #$7f			and 	#$7F
.23d6	20 60 22	jsr $2260			jsr 	CheckIsLetter 				; letter ?
.23d9	b0 08		bcs $23e3			bcs 	_EVACharOkay
.23db	20 6c 22	jsr $226c			jsr 	CheckIsDigit				; fail if not digit.
.23de	90 32		bcc $2412			bcc 	_EVAExit
.23e0	18		clc				clc
.23e1	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.23e3					_EVACharOkay:
.23e3	c8		iny				iny 								; char okay advance to it.
.23e4	38		sec				sec 								; range 1-36
.23e5	e9 40		sbc #$40			sbc 	#64
.23e7	28		plp				plp 								; which multiplier ?
.23e8	90 0f		bcc $23f9			bcc 	_EVATimes32x40
.23ea	85 15		sta $15				sta 	temp2 						; save in temp2 - A x 32
.23ec	64 16		stz $16				stz 	temp2+1
.23ee	a2 05		ldx #$05			ldx 	#5
.23f0	06 15		asl $15		_EVA32:	asl 	temp2
.23f2	26 16		rol $16				rol 	temp2+1
.23f4	ca		dex				dex
.23f5	d0 f9		bne $23f0			bne 	_EVA32
.23f7	80 0b		bra $2404			bra 	_EVAAddVar
.23f9					_EVATimes32x40:
.23f9	85 16		sta $16				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.23fb	64 15		stz $15				stz 	temp2
.23fd	0a		asl a				asl 	a
.23fe	0a		asl a				asl 	a
.23ff	18		clc				clc
.2400	65 16		adc $16				adc 	temp2+1
.2402	85 16		sta $16				sta 	temp2+1
.2404					_EVAAddVar:
.2404	18		clc				clc
.2405	a5 13		lda $13				lda 	temp1
.2407	65 15		adc $15				adc 	temp2
.2409	85 13		sta $13				sta 	temp1
.240b	a5 14		lda $14				lda 	temp1+1
.240d	65 16		adc $16				adc 	temp2+1
.240f	85 14		sta $14				sta 	temp1+1
.2411	08		php				php
.2412					_EVAExit:
.2412	28		plp				plp
.2413	60		rts				rts

;******  Return to file: files.asm


;******  Return to file: kernel.asm

.2414					ColdStart:
.2414	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.2416	9a		txs				txs
.2417	64 24		stz $24				stz 	FastMode 					; start in slow mode.
.2419	20 e0 24	jsr $24e0			jsr 	ExternInitialise
.241c	a9 5a		lda #$5a			lda 	#BootMsg & $FF
.241e	a0 24		ldy #$24			ldy 	#BootMsg >> 8
.2420	20 d4 25	jsr $25d4			jsr 	EXPrintString
.2423					WarmStartBlankStack:
.2423	86 13		stx $13				stx 	temp1
.2425	a2 80		ldx #$80			ldx 	#NumberStackBase
.2427	9a		txs				txs
.2428	a6 13		ldx $13				ldx 	temp1
.242a	4c 63 29	jmp $2963			jmp 	EncodeTest
.242d					WarmStart:
.242d	a9 03		lda #$03			lda 	#COL_Yellow
.242f	20 19 25	jsr $2519			jsr 	ExternColour
.2432	20 3c 25	jsr $253c			jsr 	ExternInput
.2435	a9 06		lda #$06			lda 	#COL_Cyan
.2437	20 19 25	jsr $2519			jsr 	ExternColour
.243a	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.243c	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.243e	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.2441	a9 10		lda #$10			lda 	#textBuffer & $FF
.2443	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.2445	20 34 20	jsr $2034			jsr 	EncodeProgram
.2448	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.244b	0d 12 09	ora $0912			ora 	encodeBuffer+2
.244e	d0 05		bne $2455			bne 	LineEditor 					; if so, do the line editing code.
.2450	64 08		stz $08				stz 	rsp
.2452	4c 00 00	jmp $0000			jmp 	NextCode
.2455					LineEditor:
.2455	20 da 19	jsr $19da			jsr 	EditProgram
.2458	80 c9		bra $2423			bra 	WarmStartBlankStack
.245a					BootMsg:
>245a	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>2462	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>2472	2a 0d 0d
>2475	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>247d	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>248d	30 32 30 0d 0d
>2492	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>2499	5b 32 30 2d 30 31 2d 31			.text	"[20-01-18 11:35]"
>24a1	38 20 31 31 3a 33 35 5d

;******  Return to file: kernel.asm

>24a9	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/error.asm

.24ac					ErrorHandler:
>24ac	ff						.byte 	$FF
.24ad	68		pla				pla 								; get message address
.24ae	7a		ply				ply
.24af	1a		inc a				inc 	a
.24b0	d0 01		bne $24b3			bne 	_EHNoCarry
.24b2	c8		iny				iny
.24b3					_EHNoCarry:
.24b3	20 d4 25	jsr $25d4			jsr 	EXPrintString
.24b6	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.24b8	b1 03		lda ($03),y			lda 	(IP),y
.24ba	c8		iny				iny
.24bb	11 03		ora ($03),y			ora 	(IP),y
.24bd	f0 14		beq $24d3			beq 	_EHNoLine
.24bf	a9 db		lda #$db			lda 	#_EHMsg2 & $FF 				; print " at "
.24c1	a0 24		ldy #$24			ldy 	#_EHMsg2 >> 8
.24c3	20 d4 25	jsr $25d4			jsr 	EXPrintString
.24c6	a0 02		ldy #$02			ldy 	#2 							; print line number
.24c8	b1 03		lda ($03),y			lda 	(IP),y
.24ca	48		pha				pha
.24cb	88		dey				dey
.24cc	b1 03		lda ($03),y			lda 	(IP),y
.24ce	7a		ply				ply
.24cf	18		clc				clc
.24d0	20 f5 1d	jsr $1df5			jsr 	PrintYA
.24d3					_EHNoLine:
.24d3	a9 0d		lda #$0d			lda 	#13
.24d5	20 0d 25	jsr $250d			jsr 	ExternPrint
.24d8	4c 23 24	jmp $2423			jmp 	WarmStartBlankStack			; S is indeterminate
>24db	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.24e0					ExternInitialise:
.24e0	a9 90		lda #$90			lda 	#144 						; set colour
.24e2	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24e5	a9 01		lda #$01			lda 	#$01
.24e7	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24ea	a9 0e		lda #$0e			lda 	#14							; lower case
.24ec	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24ef	a9 93		lda #$93			lda 	#147 						; clear screen
.24f1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24f4	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.24f6	4c 19 25	jmp $2519			jmp 	ExternColour
.24f9					ExternCheckBreak:
.24f9	da		phx				phx 								; make sure we keep XY
.24fa	5a		phy				phy
.24fb	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.24fe	f0 03		beq $2503			beq		_ECBExit 					; stopped
.2500	7a		ply				ply 								; restore and exit.
.2501	fa		plx				plx
.2502	60		rts				rts
.2503					_ECBExit:
.2503	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>2506	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.250d					ExternPrint:
.250d	48		pha				pha
.250e	da		phx				phx
.250f	5a		phy				phy
.2510	29 7f		and #$7f			and 	#$7F
.2512	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2515	7a		ply				ply
.2516	fa		plx				plx
.2517	68		pla				pla
.2518	60		rts				rts
.2519					ExternColour:
.2519	48		pha				pha
.251a	da		phx				phx
.251b	48		pha				pha
.251c	29 08		and #$08			and 	#8
.251e	0a		asl a				asl 	a
.251f	0a		asl a				asl 	a
.2520	0a		asl a				asl 	a
.2521	0a		asl a				asl 	a
.2522	49 92		eor #$92			eor 	#$92
.2524	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2527	68		pla				pla
.2528	29 07		and #$07			and 	#7
.252a	aa		tax				tax
.252b	bd 34 25	lda $2534,x			lda 	_ECTable,x
.252e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2531	fa		plx				plx
.2532	68		pla				pla
.2533	60		rts				rts
.2534					_ECTable:
>2534	90						.byte 	144
>2535	1c						.byte 	28
>2536	1e						.byte 	30
>2537	9e						.byte 	158
>2538	1f						.byte 	31
>2539	9c						.byte 	156
>253a	9f						.byte 	159
>253b	05						.byte 	5
.253c					ExternInput:
.253c	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.253e	85 17		sta $17				sta 	temp3
.2540	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.2542	85 18		sta $18				sta 	temp3+1
.2544	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.2547	c9 0d		cmp #$0d			cmp 	#13
.2549	f0 0c		beq $2557			beq 	_EIExit
.254b	29 7f		and #$7f			and 	#$7F
.254d	92 17		sta ($17)			sta 	(temp3)
.254f	e6 17		inc $17				inc 	temp3
.2551	d0 f1		bne $2544			bne 	_EIRead
.2553	e6 18		inc $18				inc 	temp3+1
.2555	80 ed		bra $2544			bra 	_EIRead
.2557	a9 00		lda #$00	_EIExit:lda 	#0
.2559	92 17		sta ($17)			sta 	(temp3)
.255b	a9 0d		lda #$0d			lda 	#13
.255d	20 0d 25	jsr $250d			jsr 	ExternPrint
.2560	60		rts				rts
.2561					ExternSave:
.2561	da		phx				phx
.2562	5a		phy				phy
.2563	85 15		sta $15				sta 	temp2 						; save start
.2565	84 16		sty $16				sty 	temp2+1
.2567	20 c9 25	jsr $25c9			jsr 	EXGetLength 				; get length of file into A
.256a	a6 17		ldx $17				ldx 	temp3
.256c	a4 18		ldy $18				ldy 	temp3+1
.256e	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.2571	a9 01		lda #$01			lda 	#1
.2573	a2 08		ldx #$08			ldx 	#8	 						; device #8
.2575	a0 00		ldy #$00			ldy 	#0
.2577	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.257a	a6 13		ldx $13				ldx 	temp1 						; end address
.257c	a4 14		ldy $14				ldy 	temp1+1
.257e	a9 15		lda #$15			lda 	#temp2
.2580	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.2583	b0 03		bcs $2588			bcs 	_ESSave
.2585	7a		ply				ply
.2586	fa		plx				plx
.2587	60		rts				rts
.2588					_ESSave:
.2588	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>258b	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>2593	4c 45 44 00
.2597					ExternLoad:
.2597	da		phx				phx 								; save XY
.2598	5a		phy				phy
.2599	48		pha				pha 								; save target
.259a	5a		phy				phy
.259b	20 c9 25	jsr $25c9			jsr 	EXGetLength 				; get length of file into A
.259e	a6 17		ldx $17				ldx 	temp3
.25a0	a4 18		ldy $18				ldy 	temp3+1
.25a2	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.25a5	a9 01		lda #$01			lda 	#1
.25a7	a2 08		ldx #$08			ldx 	#8	 						; device #8
.25a9	a0 00		ldy #$00			ldy 	#0
.25ab	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.25ae	7a		ply				ply 								; restore target to YX and call load
.25af	fa		plx				plx
.25b0	a9 00		lda #$00			lda 	#0 							; load command
.25b2	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.25b5	b0 03		bcs $25ba			bcs 	_ESLoad
.25b7	7a		ply				ply
.25b8	fa		plx				plx
.25b9	60		rts				rts
.25ba					_ESLoad:
.25ba	20 ac 24	jsr $24ac			jsr 	ErrorHandler
>25bd	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>25c5	4c 45 44 00
.25c9					EXGetLength:
.25c9	5a		phy				phy
.25ca	a0 ff		ldy #$ff			ldy 	#255
.25cc	c8		iny		_EXGL0:	iny
.25cd	b1 17		lda ($17),y			lda 	(temp3),y
.25cf	d0 fb		bne $25cc			bne 	_EXGL0
.25d1	98		tya				tya
.25d2	7a		ply				ply
.25d3	60		rts				rts
.25d4					EXPrintString:
.25d4	48		pha				pha
.25d5	5a		phy				phy
.25d6	84 14		sty $14				sty 	temp1+1
.25d8	85 13		sta $13				sta 	temp1
.25da	a0 00		ldy #$00			ldy 	#0
.25dc					_EXPSLoop:
.25dc	b1 13		lda ($13),y			lda 	(temp1),y
.25de	f0 08		beq $25e8			beq 	_EXPSExit
.25e0	29 7f		and #$7f			and 	#$7F
.25e2	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.25e5	c8		iny				iny
.25e6	80 f4		bra $25dc			bra 	_EXPSLoop
.25e8					_EXPSExit:
.25e8	7a		ply				ply
.25e9	68		pla				pla
.25ea	60		rts				rts

;******  Return to file: kernel.asm

.25eb					Dictionary:

;******  Processing file: generated/dictionary.inc

>25eb	05					.byte	_end0-*
>25ec	00					.byte	$00
>25ed	0a 15					.word	WordWrite
>25ef	a1					.byte	$a1
.25f0					_end0:
>25f0	10					.byte	_end1-*
>25f1	52					.byte	$52
>25f2	c2 1e					.word	VarWriteHandler
>25f4	dc 1e					.word	VarWriteHandlerDecode
>25f6	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>25fe	45 d2
.2600					_end1:
>2600	10					.byte	_end2-*
>2601	52					.byte	$52
>2602	86 1e					.word	VarAddressHandler
>2604	9e 1e					.word	VarAddrHandlerDecode
>2606	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>260e	45 d2
.2610					_end2:
>2610	10					.byte	_end3-*
>2611	52					.byte	$52
>2612	a3 1e					.word	VarReadHandler
>2614	bd 1e					.word	VarReadHandlerDecode
>2616	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>261e	45 d2
.2620					_end3:
>2620	0c					.byte	_end4-*
>2621	52					.byte	$52
>2622	df 16					.word	CallHandler
>2624	b8 17					.word	CallHandlerDecode
>2626	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.262c					_end4:
>262c	0f					.byte	_end5-*
>262d	53					.byte	$53
>262e	f9 1c					.word	SkipComment
>2630	06 1d					.word	CommentDecoder
>2632	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>263a	d4
.263b					_end5:
>263b	0e					.byte	_end6-*
>263c	53					.byte	$53
>263d	24 1d					.word	DefineCode
>263f	3a 1d					.word	DefineDecoder
>2641	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2649					_end6:
>2649	0f					.byte	_end7-*
>264a	52					.byte	$52
>264b	6d 10					.word	Literal2Byte
>264d	b5 10					.word	Literal2ByteDecode
>264f	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2657	cc
.2658					_end7:
>2658	0e					.byte	_end8-*
>2659	80					.byte	$80
>265a	e2 1c					.word	NextLine
>265c	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2664	4e c5
.2666					_end8:
>2666	0e					.byte	_end9-*
>2667	53					.byte	$53
>2668	c7 10					.word	LiteralString
>266a	e6 10					.word	LiteralStringDecoder
>266c	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2674					_end9:
>2674	05					.byte	_end10-*
>2675	00					.byte	$00
>2676	86 12					.word	Multiply16x16
>2678	aa					.byte	$aa
.2679					_end10:
>2679	05					.byte	_end11-*
>267a	00					.byte	$00
>267b	f7 10					.word	Add
>267d	ab					.byte	$ab
.267e					_end11:
>267e	06					.byte	_end12-*
>267f	00					.byte	$00
>2680	1b 15					.word	WordAdd
>2682	2b a1					.byte	$2b,$a1
.2684					_end12:
>2684	05					.byte	_end13-*
>2685	00					.byte	$00
>2686	06 11					.word	Subtract
>2688	ad					.byte	$ad
.2689					_end13:
>2689	06					.byte	_end14-*
>268a	00					.byte	$00
>268b	c2 13					.word	ConstantMinus1
>268d	2d b1					.byte	$2d,$b1
.268f					_end14:
>268f	06					.byte	_end15-*
>2690	00					.byte	$00
>2691	a9 1b					.word	DumpStack
>2693	2e ae					.byte	$2e,$ae
.2695					_end15:
>2695	05					.byte	_end16-*
>2696	00					.byte	$00
>2697	d7 11					.word	Divide16x16
>2699	af					.byte	$af
.269a					_end16:
>269a	05					.byte	_end17-*
>269b	00					.byte	$00
>269c	b5 13					.word	Constant0
>269e	b0					.byte	$b0
.269f					_end17:
>269f	06					.byte	_end18-*
>26a0	00					.byte	$00
>26a1	1b 13					.word	CheckMinus
>26a3	30 bc					.byte	$30,$bc
.26a5					_end18:
>26a5	06					.byte	_end19-*
>26a6	00					.byte	$00
>26a7	2f 13					.word	CheckZero
>26a9	30 bd					.byte	$30,$bd
.26ab					_end19:
>26ab	05					.byte	_end20-*
>26ac	00					.byte	$00
>26ad	d1 13					.word	C1
>26af	b1					.byte	$b1
.26b0					_end20:
>26b0	06					.byte	_end21-*
>26b1	00					.byte	$00
>26b2	c5 12					.word	Unary1Plus
>26b4	31 ab					.byte	$31,$ab
.26b6					_end21:
>26b6	06					.byte	_end22-*
>26b7	00					.byte	$00
>26b8	dc 12					.word	Unary1Minus
>26ba	31 ad					.byte	$31,$ad
.26bc					_end22:
>26bc	06					.byte	_end23-*
>26bd	00					.byte	$00
>26be	e9 13					.word	C10
>26c0	31 b0					.byte	$31,$b0
.26c2					_end23:
>26c2	07					.byte	_end24-*
>26c3	00					.byte	$00
>26c4	12 14					.word	C100
>26c6	31 30 b0				.byte	$31,$30,$b0
.26c9					_end24:
>26c9	08					.byte	_end25-*
>26ca	00					.byte	$00
>26cb	41 14					.word	C1024
>26cd	31 30 32 b4				.byte	$31,$30,$32,$b4
.26d1					_end25:
>26d1	07					.byte	_end26-*
>26d2	00					.byte	$00
>26d3	16 14					.word	C127
>26d5	31 32 b7				.byte	$31,$32,$b7
.26d8					_end26:
>26d8	07					.byte	_end27-*
>26d9	00					.byte	$00
>26da	1a 14					.word	C128
>26dc	31 32 b8				.byte	$31,$32,$b8
.26df					_end27:
>26df	06					.byte	_end28-*
>26e0	00					.byte	$00
>26e1	ed 13					.word	C15
>26e3	31 b5					.byte	$31,$b5
.26e5					_end28:
>26e5	06					.byte	_end29-*
>26e6	00					.byte	$00
>26e7	f1 13					.word	C16
>26e9	31 b6					.byte	$31,$b6
.26eb					_end29:
>26eb	07					.byte	_end30-*
>26ec	00					.byte	$00
>26ed	53 13					.word	Times16
>26ef	31 36 aa				.byte	$31,$36,$aa
.26f2					_end30:
>26f2	07					.byte	_end31-*
>26f3	00					.byte	$00
>26f4	66 13					.word	Divide16
>26f6	31 36 af				.byte	$31,$36,$af
.26f9					_end31:
>26f9	05					.byte	_end32-*
>26fa	00					.byte	$00
>26fb	d5 13					.word	C2
>26fd	b2					.byte	$b2
.26fe					_end32:
>26fe	06					.byte	_end33-*
>26ff	00					.byte	$00
>2700	5f 13					.word	Times2
>2702	32 aa					.byte	$32,$aa
.2704					_end33:
>2704	06					.byte	_end34-*
>2705	00					.byte	$00
>2706	ce 12					.word	Unary2Plus
>2708	32 ab					.byte	$32,$ab
.270a					_end34:
>270a	06					.byte	_end35-*
>270b	00					.byte	$00
>270c	e7 12					.word	Unary2Minus
>270e	32 ad					.byte	$32,$ad
.2710					_end35:
>2710	06					.byte	_end36-*
>2711	00					.byte	$00
>2712	72 13					.word	Divide2
>2714	32 af					.byte	$32,$af
.2716					_end36:
>2716	06					.byte	_end37-*
>2717	00					.byte	$00
>2718	f5 13					.word	C24
>271a	32 b4					.byte	$32,$b4
.271c					_end37:
>271c	07					.byte	_end38-*
>271d	00					.byte	$00
>271e	1e 14					.word	C255
>2720	32 35 b5				.byte	$32,$35,$b5
.2723					_end38:
>2723	07					.byte	_end39-*
>2724	00					.byte	$00
>2725	29 14					.word	C256
>2727	32 35 b6				.byte	$32,$35,$b6
.272a					_end39:
>272a	08					.byte	_end40-*
>272b	00					.byte	$00
>272c	79 13					.word	Times256
>272e	32 35 36 aa				.byte	$32,$35,$36,$aa
.2732					_end40:
>2732	08					.byte	_end41-*
>2733	00					.byte	$00
>2734	82 13					.word	Divide256
>2736	32 35 36 af				.byte	$32,$35,$36,$af
.273a					_end41:
>273a	05					.byte	_end42-*
>273b	00					.byte	$00
>273c	d9 13					.word	C3
>273e	b3					.byte	$b3
.273f					_end42:
>273f	06					.byte	_end43-*
>2740	00					.byte	$00
>2741	06 14					.word	C32
>2743	33 b2					.byte	$33,$b2
.2745					_end43:
>2745	09					.byte	_end44-*
>2746	00					.byte	$00
>2747	59 14					.word	C32767
>2749	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.274e					_end44:
>274e	09					.byte	_end45-*
>274f	00					.byte	$00
>2750	65 14					.word	C32768
>2752	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2757					_end45:
>2757	05					.byte	_end46-*
>2758	00					.byte	$00
>2759	dd 13					.word	C4
>275b	b4					.byte	$b4
.275c					_end46:
>275c	06					.byte	_end47-*
>275d	00					.byte	$00
>275e	5b 13					.word	Times4
>2760	34 aa					.byte	$34,$aa
.2762					_end47:
>2762	06					.byte	_end48-*
>2763	00					.byte	$00
>2764	6e 13					.word	Divide4
>2766	34 af					.byte	$34,$af
.2768					_end48:
>2768	08					.byte	_end49-*
>2769	00					.byte	$00
>276a	4d 14					.word	C4096
>276c	34 30 39 b6				.byte	$34,$30,$39,$b6
.2770					_end49:
>2770	05					.byte	_end50-*
>2771	00					.byte	$00
>2772	e1 13					.word	C5
>2774	b5					.byte	$b5
.2775					_end50:
>2775	07					.byte	_end51-*
>2776	00					.byte	$00
>2777	35 14					.word	C512
>2779	35 31 b2				.byte	$35,$31,$b2
.277c					_end51:
>277c	06					.byte	_end52-*
>277d	00					.byte	$00
>277e	0a 14					.word	C63
>2780	36 b3					.byte	$36,$b3
.2782					_end52:
>2782	06					.byte	_end53-*
>2783	00					.byte	$00
>2784	0e 14					.word	C64
>2786	36 b4					.byte	$36,$b4
.2788					_end53:
>2788	05					.byte	_end54-*
>2789	00					.byte	$00
>278a	e5 13					.word	C8
>278c	b8					.byte	$b8
.278d					_end54:
>278d	06					.byte	_end55-*
>278e	00					.byte	$00
>278f	57 13					.word	Times8
>2791	38 aa					.byte	$38,$aa
.2793					_end55:
>2793	06					.byte	_end56-*
>2794	00					.byte	$00
>2795	6a 13					.word	Divide8
>2797	38 af					.byte	$38,$af
.2799					_end56:
>2799	05					.byte	_end57-*
>279a	40					.byte	$40
>279b	75 17					.word	ReturnHandler
>279d	bb					.byte	$bb
.279e					_end57:
>279e	05					.byte	_end58-*
>279f	00					.byte	$00
>27a0	73 11					.word	CheckLess
>27a2	bc					.byte	$bc
.27a3					_end58:
>27a3	06					.byte	_end59-*
>27a4	00					.byte	$00
>27a5	8c 11					.word	CheckLessEq
>27a7	3c bd					.byte	$3c,$bd
.27a9					_end59:
>27a9	06					.byte	_end60-*
>27aa	00					.byte	$00
>27ab	3c 11					.word	CheckNotEqual
>27ad	3c be					.byte	$3c,$be
.27af					_end60:
>27af	05					.byte	_end61-*
>27b0	00					.byte	$00
>27b1	3f 11					.word	CheckEqual
>27b3	bd					.byte	$bd
.27b4					_end61:
>27b4	05					.byte	_end62-*
>27b5	00					.byte	$00
>27b6	8f 11					.word	CheckGreater
>27b8	be					.byte	$be
.27b9					_end62:
>27b9	06					.byte	_end63-*
>27ba	00					.byte	$00
>27bb	70 11					.word	CheckGreaterEq
>27bd	3e bd					.byte	$3e,$bd
.27bf					_end63:
>27bf	08					.byte	_end64-*
>27c0	00					.byte	$00
>27c1	7a 14					.word	TestDup
>27c3	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.27c7					_end64:
>27c7	05					.byte	_end65-*
>27c8	00					.byte	$00
>27c9	ef 14					.word	WordRead
>27cb	c0					.byte	$c0
.27cc					_end65:
>27cc	07					.byte	_end66-*
>27cd	00					.byte	$00
>27ce	f5 12					.word	Absolute
>27d0	41 42 d3				.byte	$41,$42,$d3
.27d3					_end66:
>27d3	09					.byte	_end67-*
>27d4	00					.byte	$00
>27d5	32 15					.word	AllocateMemory
>27d7	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.27dc					_end67:
>27dc	07					.byte	_end68-*
>27dd	00					.byte	$00
>27de	15 11					.word	And
>27e0	41 4e c4				.byte	$41,$4e,$c4
.27e3					_end68:
>27e3	0a					.byte	_end69-*
>27e4	00					.byte	$00
>27e5	34 1b					.word	AssertCode
>27e7	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.27ed					_end69:
>27ed	09					.byte	_end70-*
>27ee	00					.byte	$00
>27ef	48 13					.word	ByteSwap
>27f1	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.27f6					_end70:
>27f6	06					.byte	_end71-*
>27f7	00					.byte	$00
>27f8	fd 14					.word	ByteWrite
>27fa	43 a1					.byte	$43,$a1
.27fc					_end71:
>27fc	06					.byte	_end72-*
>27fd	00					.byte	$00
>27fe	e6 14					.word	ByteRead
>2800	43 c0					.byte	$43,$c0
.2802					_end72:
>2802	07					.byte	_end73-*
>2803	00					.byte	$00
>2804	42 18					.word	ClrHandler
>2806	43 4c d2				.byte	$43,$4c,$d2
.2809					_end73:
>2809	08					.byte	_end74-*
>280a	00					.byte	$00
>280b	71 14					.word	Drop
>280d	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2811					_end74:
>2811	07					.byte	_end75-*
>2812	00					.byte	$00
>2813	83 14					.word	Dup
>2815	44 55 d0				.byte	$44,$55,$d0
.2818					_end75:
>2818	0a					.byte	_end76-*
>2819	21					.byte	$21
>281a	2b 16					.word	ElseHandler
>281c	2e 16					.word	ElseEncoder
>281e	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2822					_end76:
>2822	07					.byte	_end77-*
>2823	00					.byte	$00
>2824	55 1b					.word	EndProgram
>2826	45 4e c4				.byte	$45,$4e,$c4
.2829					_end77:
>2829	0b					.byte	_end78-*
>282a	20					.byte	$20
>282b	4d 16					.word	EndIfHandler
>282d	50 16					.word	EndIfEncoder
>282f	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2834					_end78:
>2834	09					.byte	_end79-*
>2835	20					.byte	$20
>2836	4b 15					.word	ForHandler
>2838	81 15					.word	ForEncoder
>283a	46 4f d2				.byte	$46,$4f,$d2
.283d					_end79:
>283d	08					.byte	_end80-*
>283e	21					.byte	$21
>283f	16 16					.word	IfHandler
>2841	19 16					.word	IfEncoder
>2843	49 c6					.byte	$49,$c6
.2845					_end80:
>2845	09					.byte	_end81-*
>2846	00					.byte	$00
>2847	f5 15					.word	GetIndex
>2849	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.284e					_end81:
>284e	08					.byte	_end82-*
>284f	00					.byte	$00
>2850	8e 1a					.word	ListCode
>2852	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2856					_end82:
>2856	07					.byte	_end83-*
>2857	00					.byte	$00
>2858	ac 11					.word	Maximum
>285a	4d 41 d8				.byte	$4d,$41,$d8
.285d					_end83:
>285d	07					.byte	_end84-*
>285e	00					.byte	$00
>285f	a8 11					.word	Minimum
>2861	4d 49 ce				.byte	$4d,$49,$ce
.2864					_end84:
>2864	07					.byte	_end85-*
>2865	00					.byte	$00
>2866	e8 11					.word	Modulus16x16
>2868	4d 4f c4				.byte	$4d,$4f,$c4
.286b					_end85:
>286b	0a					.byte	_end86-*
>286c	00					.byte	$00
>286d	fc 12					.word	Negate
>286f	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2875					_end86:
>2875	07					.byte	_end87-*
>2876	00					.byte	$00
>2877	39 18					.word	NewHandler
>2879	4e 45 d7				.byte	$4e,$45,$d7
.287c					_end87:
>287c	0a					.byte	_end88-*
>287d	21					.byte	$21
>287e	8e 15					.word	NextHandler
>2880	cd 15					.word	NextEncoder
>2882	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2886					_end88:
>2886	07					.byte	_end89-*
>2887	00					.byte	$00
>2888	b7 14					.word	Nip
>288a	4e 49 d0				.byte	$4e,$49,$d0
.288d					_end89:
>288d	07					.byte	_end90-*
>288e	00					.byte	$00
>288f	0c 13					.word	OneComplement
>2891	4e 4f d4				.byte	$4e,$4f,$d4
.2894					_end90:
>2894	06					.byte	_end91-*
>2895	00					.byte	$00
>2896	2f 11					.word	LogOr
>2898	4f d2					.byte	$4f,$d2
.289a					_end91:
>289a	08					.byte	_end92-*
>289b	00					.byte	$00
>289c	9f 14					.word	Over
>289e	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.28a2					_end92:
>28a2	0c					.byte	_end93-*
>28a3	20					.byte	$20
>28a4	7f 16					.word	RepeatHandler
>28a6	82 16					.word	RepeatEncoder
>28a8	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.28ae					_end93:
>28ae	07					.byte	_end94-*
>28af	00					.byte	$00
>28b0	8b 13					.word	RandomNumber
>28b2	52 4e c4				.byte	$52,$4e,$c4
.28b5					_end94:
>28b5	07					.byte	_end95-*
>28b6	00					.byte	$00
>28b7	bc 14					.word	Rot
>28b9	52 4f d4				.byte	$52,$4f,$d4
.28bc					_end95:
>28bc	07					.byte	_end96-*
>28bd	00					.byte	$00
>28be	09 1b					.word	RunProgram
>28c0	52 55 ce				.byte	$52,$55,$ce
.28c3					_end96:
>28c3	07					.byte	_end97-*
>28c4	00					.byte	$00
>28c5	37 13					.word	SignTOS
>28c7	53 47 ce				.byte	$53,$47,$ce
.28ca					_end97:
>28ca	08					.byte	_end98-*
>28cb	00					.byte	$00
>28cc	4d 1b					.word	StopCode
>28ce	53 54 4f d0				.byte	$53,$54,$4f,$d0
.28d2					_end98:
>28d2	08					.byte	_end99-*
>28d3	00					.byte	$00
>28d4	8c 14					.word	Swap
>28d6	53 57 41 d0				.byte	$53,$57,$41,$d0
.28da					_end99:
>28da	07					.byte	_end100-*
>28db	00					.byte	$00
>28dc	1d 1b					.word	Call6502
>28de	53 59 d3				.byte	$53,$59,$d3
.28e1					_end100:
>28e1	0d					.byte	_end101-*
>28e2	00					.byte	$00
>28e3	db 1d					.word	IntToString
>28e5	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>28ed	c7
.28ee					_end101:
>28ee	0b					.byte	_end102-*
>28ef	21					.byte	$21
>28f0	8f 16					.word	UntilHandler
>28f2	92 16					.word	UntilEncoder
>28f4	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.28f9					_end102:
>28f9	09					.byte	_end103-*
>28fa	00					.byte	$00
>28fb	58 1b					.word	VlistCode
>28fd	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2902					_end103:
>2902	0a					.byte	_end104-*
>2903	40					.byte	$40
>2904	a5 18					.word	BreakCmd
>2906	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.290c					_end104:
>290c	09					.byte	_end105-*
>290d	00					.byte	$00
>290e	9f 18					.word	ExitDump
>2910	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2915					_end105:
>2915	07					.byte	_end106-*
>2916	00					.byte	$00
>2917	22 11					.word	Xor
>2919	58 4f d2				.byte	$58,$4f,$d2
.291c					_end106:
>291c	08					.byte	_end107-*
>291d	00					.byte	$00
>291e	25 1c					.word	System_Save
>2920	53 41 56 c5				.byte	$53,$41,$56,$c5
.2924					_end107:
>2924	08					.byte	_end108-*
>2925	00					.byte	$00
>2926	43 1c					.word	System_Load
>2928	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.292c					_end108:
>292c	0d					.byte	_end109-*
>292d	11					.byte	$11
>292e	e1 1e					.word	IndexHandler
>2930	f0 1e					.word	IndexHandlerDecode
>2932	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.2939					_end109:
>2939	07					.byte	_end110-*
>293a	00					.byte	$00
>293b	f4 1b					.word	OldCode
>293d	4f 4c c4				.byte	$4f,$4c,$c4
.2940					_end110:
>2940	12					.byte	_end111-*
>2941	52					.byte	$52
>2942	6c 10					.word	HexLiteral2Byte
>2944	83 10					.word	HexLiteral2ByteDecode
>2946	24 24 48 45 58 4c 49 54			.byte	$24,$24,$48,$45,$58,$4c,$49,$54,$45,$52,$41,$cc
>294e	45 52 41 cc
.2952					_end111:
>2952	08					.byte	_end112-*
>2953	00					.byte	$00
>2954	62 10					.word	SetFastMode
>2956	46 41 53 d4				.byte	$46,$41,$53,$d4
.295a					_end112:
>295a	08					.byte	_end113-*
>295b	00					.byte	$00
>295c	5e 10					.word	SetSlowMode
>295e	53 4c 4f d7				.byte	$53,$4c,$4f,$d7
.2962					_end113:
>2962	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm

.2963					EncodeTest:
.2963	a9 7d		lda #$7d			lda 	#(EncodeTestLine & $FF)
.2965	a0 29		ldy #$29			ldy 	#(EncodeTestLine >> 8)
.2967	20 34 20	jsr $2034			jsr 	EncodeProgram
.296a	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.296c	85 0d		sta $0d				sta 	0+(bufPtr)
.296e	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.2970	85 0e		sta $0e				sta 	1+(bufPtr)
.2972	a0 09		ldy #$09			ldy 	#encodeBuffer>>8
.2974	a9 10		lda #$10			lda 	#encodeBuffer & $FF
.2976	38		sec				sec
.2977	20 a9 18	jsr $18a9			jsr 	DecodeLineIntoBufPtr
.297a	4c ff ff	jmp $ffff			jmp 	$FFFF
.297d					EncodeTestLine:

;******  Processing file: code/../generated/edtext.inc

>297d	36 30 36 30 37 20 49 46			.byte $36,$30,$36,$30,$37,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$46,$4f,$52,$20,$46,$4f,$52,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$49,$46,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$49,$46,$20,$41,$4e,$44,$20,$2d,$36,$32,$32,$36,$20,$32,$31,$37,$32,$39,$20,$45,$4e,$44,$49,$46,$20,$2d,$31,$20,$3c,$33,$39,$32,$34,$35,$3e,$20,$3c,$33,$31,$36,$38,$39,$3e,$20,$2d,$31,$31,$30,$32,$31,$20,$22,$22,$20,$45,$4e,$44,$49,$46,$20,$41,$4f,$20,$45,$55,$53,$35,$20,$42,$54,$45,$38,$31,$5a,$42,$20,$22,$55,$30,$52,$53,$22,$20,$32,$35,$36,$2f,$20,$22,$4b,$59,$48,$57,$45,$22,$20,$2d,$31,$38,$34,$32,$33,$20,$45,$4c,$53,$45,$20,$45,$4e,$44,$49,$46,$20,$45,$4e,$44,$49,$46,$20,$4e,$45,$58,$54,$20,$32,$34,$20,$21,$4c,$5a,$4f,$20,$3c,$33,$30,$30,$31,$37,$3e,$20,$5a,$37,$33,$45,$58,$47,$20,$21,$4d,$35,$50,$20,$3c,$33,$33,$32,$37,$39,$3e,$20,$52,$55,$4e,$20,$3c,$33,$37,$34,$33,$34,$3e,$20,$22,$22,$20,$4e,$45,$58,$54,$20,$31,$32,$34,$31,$35,$20,$45,$4e,$44,$49,$46,$20,$00
>2985	20 45 4c 53 45 20 46 4f 52 20 46 4f 52 20 49 46
>2995	20 45 4c 53 45 20 49 46 20 49 46 20 45 4c 53 45
>29a5	20 49 46 20 41 4e 44 20 2d 36 32 32 36 20 32 31
>29b5	37 32 39 20 45 4e 44 49 46 20 2d 31 20 3c 33 39
>29c5	32 34 35 3e 20 3c 33 31 36 38 39 3e 20 2d 31 31
>29d5	30 32 31 20 22 22 20 45 4e 44 49 46 20 41 4f 20
>29e5	45 55 53 35 20 42 54 45 38 31 5a 42 20 22 55 30
>29f5	52 53 22 20 32 35 36 2f 20 22 4b 59 48 57 45 22
>2a05	20 2d 31 38 34 32 33 20 45 4c 53 45 20 45 4e 44
>2a15	49 46 20 45 4e 44 49 46 20 4e 45 58 54 20 32 34
>2a25	20 21 4c 5a 4f 20 3c 33 30 30 31 37 3e 20 5a 37
>2a35	33 45 58 47 20 21 4d 35 50 20 3c 33 33 32 37 39
>2a45	3e 20 52 55 4e 20 3c 33 37 34 33 34 3e 20 22 22
>2a55	20 4e 45 58 54 20 31 32 34 31 35 20 45 4e 44 49
>2a65	46 20 00

;******  Return to file: code/enctest.asm

.2a68					EncodeTestLineOriginal:

;******  Processing file: code/../generated/edtext.inc

>2a68	36 30 36 30 37 20 49 46			.byte $36,$30,$36,$30,$37,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$46,$4f,$52,$20,$46,$4f,$52,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$49,$46,$20,$49,$46,$20,$45,$4c,$53,$45,$20,$49,$46,$20,$41,$4e,$44,$20,$2d,$36,$32,$32,$36,$20,$32,$31,$37,$32,$39,$20,$45,$4e,$44,$49,$46,$20,$2d,$31,$20,$3c,$33,$39,$32,$34,$35,$3e,$20,$3c,$33,$31,$36,$38,$39,$3e,$20,$2d,$31,$31,$30,$32,$31,$20,$22,$22,$20,$45,$4e,$44,$49,$46,$20,$41,$4f,$20,$45,$55,$53,$35,$20,$42,$54,$45,$38,$31,$5a,$42,$20,$22,$55,$30,$52,$53,$22,$20,$32,$35,$36,$2f,$20,$22,$4b,$59,$48,$57,$45,$22,$20,$2d,$31,$38,$34,$32,$33,$20,$45,$4c,$53,$45,$20,$45,$4e,$44,$49,$46,$20,$45,$4e,$44,$49,$46,$20,$4e,$45,$58,$54,$20,$32,$34,$20,$21,$4c,$5a,$4f,$20,$3c,$33,$30,$30,$31,$37,$3e,$20,$5a,$37,$33,$45,$58,$47,$20,$21,$4d,$35,$50,$20,$3c,$33,$33,$32,$37,$39,$3e,$20,$52,$55,$4e,$20,$3c,$33,$37,$34,$33,$34,$3e,$20,$22,$22,$20,$4e,$45,$58,$54,$20,$31,$32,$34,$31,$35,$20,$45,$4e,$44,$49,$46,$20,$00
>2a70	20 45 4c 53 45 20 46 4f 52 20 46 4f 52 20 49 46
>2a80	20 45 4c 53 45 20 49 46 20 49 46 20 45 4c 53 45
>2a90	20 49 46 20 41 4e 44 20 2d 36 32 32 36 20 32 31
>2aa0	37 32 39 20 45 4e 44 49 46 20 2d 31 20 3c 33 39
>2ab0	32 34 35 3e 20 3c 33 31 36 38 39 3e 20 2d 31 31
>2ac0	30 32 31 20 22 22 20 45 4e 44 49 46 20 41 4f 20
>2ad0	45 55 53 35 20 42 54 45 38 31 5a 42 20 22 55 30
>2ae0	52 53 22 20 32 35 36 2f 20 22 4b 59 48 57 45 22
>2af0	20 2d 31 38 34 32 33 20 45 4c 53 45 20 45 4e 44
>2b00	49 46 20 45 4e 44 49 46 20 4e 45 58 54 20 32 34
>2b10	20 21 4c 5a 4f 20 3c 33 30 30 31 37 3e 20 5a 37
>2b20	33 45 58 47 20 21 4d 35 50 20 3c 33 33 32 37 39
>2b30	3e 20 52 55 4e 20 3c 33 37 34 33 34 3e 20 22 22
>2b40	20 4e 45 58 54 20 31 32 34 31 35 20 45 4e 44 49
>2b50	46 20 00

;******  Return to file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
