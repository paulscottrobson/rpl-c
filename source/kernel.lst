
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Wed Jan 08 07:34:27 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	6
=3					IP = Next+3 								; the IP which points to the current instruction
.0006					tos:
>0006							.word 	?
.0008					nextFreeMem:
>0008							.word 	?
.000a					temp1:
>000a							.word 	?
.000c					temp2:
>000c							.word 	?
.000e					temp3:
>000e							.word 	?
.0010					temp4:
>0010							.word 	?
.0012					freeMemory:
>0012							.word 	?
.0014					SignCount:
>0014							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes.
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here.

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1005	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1007	20 10 10	jsr $1010			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.100a	20 cd 12	jsr $12cd			jsr 		ClearVariableSpace 		; clear variables etc.
.100d	4c 00 00	jmp $0000			jmp 		Next

;******  Processing file: core.src

.1010					InitialiseCoreCode:
.1010	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1012	85 00		sta $00				sta 	Next
.1014	85 01		sta $01				sta 	Next+1
.1016	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1018	85 02		sta $02				sta 	Next+2
.101a	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.101c	84 04		sty $04				sty 	Next+4
.101e	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1020	60		rts				rts								; (2 INX skip offset and line#)
.1021					Literal2Byte:
.1021	a5 06		lda $06				lda 	TOS
.1023	48		pha				pha
.1024	a5 07		lda $07				lda 	TOS+1
.1026	48		pha				pha
.1027	e8		inx				inx  							; point X to the word
.1028	e8		inx				inx
.1029	8a		txa				txa 							; copy into Y
.102a	a8		tay				tay
.102b	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.102d	85 06		sta $06				sta 	TOS
.102f	c8		iny				iny 							; read and push the MSB
.1030	b1 03		lda ($03),y			lda 	(IP),y
.1032	85 07		sta $07				sta 	TOS+1
.1034	4c 00 00	jmp $0000			jmp 	Next
.1037					LiteralString:
.1037	a5 06		lda $06				lda 	TOS
.1039	48		pha				pha
.103a	a5 07		lda $07				lda 	TOS+1
.103c	48		pha				pha
.103d	e8		inx				inx
.103e	e8		inx				inx 							; skip over current word
.103f	8a		txa				txa 							; add to IP + 1 to give string address
.1040	a8		tay				tay 							; put in Y
.1041	38		sec				sec 							; make that TOS
.1042	65 03		adc $03				adc 	IP
.1044	85 06		sta $06				sta 	TOS
.1046	a5 04		lda $04				lda 	IP+1
.1048	69 00		adc #$00			adc 	#0
.104a	85 07		sta $07				sta 	TOS+1
.104c	8a		txa				txa 							; add data length to X
.104d	18		clc				clc
.104e	71 03		adc ($03),y			adc 	(IP),y
.1050	aa		tax				tax
.1051	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.1054					Add:
.1054	7a		ply				ply
.1055	68		pla				pla
.1056	18		clc				clc
.1057	65 06		adc $06				adc 	TOS
.1059	85 06		sta $06				sta 	TOS
.105b	98		tya				tya
.105c	65 07		adc $07				adc 	TOS+1
.105e	85 07		sta $07				sta 	TOS+1
.1060	4c 00 00	jmp $0000			jmp 	Next
.1063					Subtract:
.1063	7a		ply				ply
.1064	68		pla				pla
.1065	38		sec				sec
.1066	49 ff		eor #$ff			eor 	#$FF
.1068	65 06		adc $06				adc 	TOS
.106a	85 06		sta $06				sta 	TOS
.106c	98		tya				tya
.106d	49 ff		eor #$ff			eor 	#$FF
.106f	65 07		adc $07				adc 	TOS+1
.1071	85 07		sta $07				sta 	TOS+1
.1073	4c 00 00	jmp $0000			jmp 	Next
.1076					And:
.1076	68		pla				pla
.1077	25 07		and $07				and 	TOS+1
.1079	85 07		sta $07				sta 	TOS+1
.107b	68		pla				pla
.107c	25 06		and $06				and 	TOS
.107e	85 06		sta $06				sta 	TOS
.1080	4c 00 00	jmp $0000			jmp 	Next
.1083					Xor:
.1083	68		pla				pla
.1084	45 07		eor $07				eor 	TOS+1
.1086	85 07		sta $07				sta 	TOS+1
.1088	68		pla				pla
.1089	45 06		eor $06				eor 	TOS
.108b	85 06		sta $06				sta 	TOS
.108d	4c 00 00	jmp $0000			jmp 	Next
.1090					LogOr:
.1090	68		pla				pla
.1091	05 07		ora $07				ora 	TOS+1
.1093	85 07		sta $07				sta 	TOS+1
.1095	68		pla				pla
.1096	05 06		ora $06				ora 	TOS
.1098	85 06		sta $06				sta 	TOS
.109a	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.109d					CheckEqual:
.109d	86 0a		stx $0a				stx 	temp1
.109f	ba		tsx				tsx
.10a0	a5 06		lda $06				lda 	TOS
.10a2	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.10a5	d0 14		bne $10bb			bne	 	CompareFalse
.10a7	a5 07		lda $07				lda 	TOS+1
.10a9	5d 01 01	eor $0101,x			eor 	Stack2High,x
.10ac	d0 0d		bne $10bb			bne 	CompareFalse
.10ae					CompareTrue:
.10ae	a6 0a		ldx $0a				ldx 	temp1
.10b0	68		pla				pla
.10b1	68		pla				pla
.10b2	a9 01		lda #$01			lda 	#1
.10b4	85 06		sta $06				sta 	TOS
.10b6	64 07		stz $07				stz 	TOS+1
.10b8	4c 00 00	jmp $0000			jmp 	Next
.10bb					CompareFalse:
.10bb	a6 0a		ldx $0a				ldx 	temp1
.10bd	68		pla				pla
.10be	68		pla				pla
.10bf	64 06		stz $06				stz 	TOS
.10c1	64 07		stz $07				stz 	TOS+1
.10c3	4c 00 00	jmp $0000			jmp 	Next
.10c6					CheckLess:
.10c6	18		clc				clc
.10c7	86 0a		stx $0a				stx 	temp1
.10c9	ba		tsx				tsx
.10ca	a5 06		lda $06				lda 	TOS
.10cc	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.10cf	a5 07		lda $07				lda 	TOS+1
.10d1	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.10d4	50 02		bvc $10d8			bvc 	_CLNoFlip
.10d6	49 80		eor #$80			eor 	#$80
.10d8					_CLNoFlip:
.10d8	0a		asl a				asl 	a
.10d9	b0 e0		bcs $10bb			bcs 	CompareFalse
.10db	80 d1		bra $10ae			bra 	CompareTrue
.10dd					CheckGreater:
.10dd	18		clc				clc
.10de	86 0a		stx $0a				stx 	temp1
.10e0	ba		tsx				tsx
.10e1	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.10e4	e5 06		sbc $06				sbc 	TOS
.10e6	bd 01 01	lda $0101,x			lda 	Stack2High,x
.10e9	e5 07		sbc $07				sbc 	TOS+1
.10eb	50 02		bvc $10ef			bvc 	_CGNoFlip
.10ed	49 80		eor #$80			eor 	#$80
.10ef					_CGNoFlip:
.10ef	0a		asl a				asl 	a
.10f0	b0 c9		bcs $10bb			bcs 	CompareFalse
.10f2	80 ba		bra $10ae			bra 	CompareTrue
.10f4					Minimum:
.10f4	a9 00		lda #$00			lda 	#0
.10f6	80 02		bra $10fa			bra 	MinMaxCode
.10f8					Maximum:
.10f8	a9 80		lda #$80			lda 	#$80
.10fa					MinMaxCode:
.10fa	85 0b		sta $0b				sta 	temp1+1
.10fc	86 0a		stx $0a				stx 	temp1
.10fe	ba		tsx				tsx
.10ff	38		sec				sec
.1100	a5 06		lda $06				lda 	TOS
.1102	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1105	a5 07		lda $07				lda 	TOS+1
.1107	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.110a	50 02		bvc $110e			bvc 	_MMNoFlip
.110c	49 80		eor #$80			eor 	#$80
.110e					_MMNoFlip:
.110e	45 0b		eor $0b				eor 	temp1+1
.1110	30 0a		bmi $111c			bmi 	_MMNoCopy
.1112	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1115	85 06		sta $06				sta 	TOS
.1117	bd 01 01	lda $0101,x			lda 	Stack2High,x
.111a	85 07		sta $07				sta 	TOS+1
.111c					_MMNoCopy:
.111c	a6 0a		ldx $0a				ldx 	temp1
.111e	68		pla				pla
.111f	68		pla				pla
.1120	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.1123					Divide16x16:
.1123	86 0c		stx $0c				stx 	temp2
.1125	ba		tsx				tsx
.1126	20 49 11	jsr $1149			jsr 	IntegerDivide
.1129	68		pla				pla
.112a	85 07		sta $07				sta 	TOS+1
.112c	68		pla				pla
.112d	85 06		sta $06				sta 	TOS
.112f	a6 0c		ldx $0c				ldx 	temp2
.1131	4c 00 00	jmp $0000			jmp 	Next
.1134					Modulus16x16:
.1134	86 0c		stx $0c				stx 	temp2
.1136	ba		tsx				tsx
.1137	20 49 11	jsr $1149			jsr 	IntegerDivide
.113a	a6 0c		ldx $0c				ldx 	temp2
.113c	68		pla				pla
.113d	68		pla				pla
.113e	a5 0a		lda $0a				lda 	temp1
.1140	85 06		sta $06				sta 	TOS
.1142	a5 0b		lda $0b				lda 	temp1+1
.1144	85 07		sta $07				sta 	TOS+1
.1146	4c 00 00	jmp $0000			jmp 	Next
.1149					IntegerDivide:
.1149	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.114b	05 07		ora $07				ora 	TOS+1
.114d	d0 14		bne $1163			bne 	_BFDOkay
.114f	20 5a 15	jsr $155a			jsr 	ErrorHandler
>1152	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>115a	20 42 59 20 5a 45 52 4f 00
.1163					_BFDOkay:
.1163	64 0a		stz $0a				stz 	temp1 						; Q/Dividend/Left in +0
.1165	64 0b		stz $0b				stz 	temp1+1 					; M/Divisor/Right in +2
.1167	64 14		stz $14				stz 	SignCount 					; Count of signs.
.1169	20 a4 11	jsr $11a4			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.116c	20 be 11	jsr $11be			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.116f	5a		phy				phy 								; Y is the counter
.1170	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1172					_BFDLoop:
.1172	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1175	3e 01 01	rol $0101,x			rol 	Stack2High,x
.1178	26 0a		rol $0a				rol 	temp1
.117a	26 0b		rol $0b				rol 	temp1+1
.117c	38		sec				sec
.117d	a5 0a		lda $0a				lda 	temp1+0 					; Calculate A-M on stack.
.117f	e5 06		sbc $06				sbc 	TOS
.1181	48		pha				pha
.1182	a5 0b		lda $0b				lda 	temp1+1
.1184	e5 07		sbc $07				sbc 	TOS+1
.1186	90 0f		bcc $1197			bcc 	_BFDNoAdd
.1188	85 0b		sta $0b				sta 	temp1+1
.118a	68		pla				pla
.118b	85 0a		sta $0a				sta 	temp1+0
.118d	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1190	09 01		ora #$01			ora 	#1
.1192	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1195	80 01		bra $1198			bra 	_BFDNext
.1197					_BFDNoAdd:
.1197	68		pla				pla 								; Throw away the intermediate calculations
.1198					_BFDNext:
.1198	88		dey				dey
.1199	d0 d7		bne $1172			bne 	_BFDLoop
.119b	7a		ply				ply 								; restore Y
.119c	46 14		lsr $14				lsr 	SignCount 					; if sign count odd,
.119e	90 03		bcc $11a3			bcc 	_BFDUnsigned 				; then the result is signed
.11a0	20 aa 11	jsr $11aa			jsr		IntegerNegateAlways 		; negate the result
.11a3					_BFDUnsigned:
.11a3	60		rts				rts
.11a4					CheckIntegerNegate:
.11a4	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.11a7	30 01		bmi $11aa			bmi 	IntegerNegateAlways 		; if so negate it
.11a9	60		rts				rts
.11aa					IntegerNegateAlways:
.11aa	e6 14		inc $14				inc 	SignCount 					; bump the count of signs
.11ac	38		sec				sec 								; negate
.11ad	a9 00		lda #$00			lda 	#0
.11af	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11b2	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11b5	a9 00		lda #$00			lda 	#0
.11b7	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11ba	9d 01 01	sta $0101,x			sta 	Stack2High,x
.11bd	60		rts				rts
.11be					CheckTOSNegate:
.11be	a5 07		lda $07				lda 	TOS+1
.11c0	10 0f		bpl $11d1			bpl		CTNNoChange
.11c2	e6 14		inc $14				inc 	SignCount
.11c4					TOSNegateAlways:
.11c4	38		sec				sec
.11c5	a9 00		lda #$00			lda 	#0
.11c7	e5 06		sbc $06				sbc 	TOS
.11c9	85 06		sta $06				sta 	TOS
.11cb	a9 00		lda #$00			lda 	#0
.11cd	e5 07		sbc $07				sbc 	TOS+1
.11cf	85 07		sta $07				sta 	TOS+1
.11d1					CTNNoChange:
.11d1	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.11d2					Multiply16x16:
.11d2	86 0a		stx $0a				stx 	temp1
.11d4	ba		tsx				tsx
.11d5	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.11d8	85 0c		sta $0c				sta 	temp2
.11da	bd 01 01	lda $0101,x			lda		Stack2High,x
.11dd	85 0d		sta $0d				sta 	temp2+1
.11df	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.11e2	9e 01 01	stz $0101,x			stz 	Stack2High,x
.11e5					_MultLoop:
.11e5	46 0d		lsr $0d				lsr 	temp2+1 					; ror temp2 into C
.11e7	66 0c		ror $0c				ror 	temp2
.11e9	90 11		bcc $11fc			bcc 	_MultNoAdd
.11eb	18		clc				clc 								; add 1st to 2nd
.11ec	a5 06		lda $06				lda 	TOS
.11ee	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.11f1	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11f4	a5 07		lda $07				lda 	TOS+1
.11f6	7d 01 01	adc $0101,x			adc 	Stack2High,x
.11f9	9d 01 01	sta $0101,x			sta 	Stack2High,x
.11fc					_MultNoAdd:
.11fc	06 06		asl $06				asl 	TOS 						; shift 1st left
.11fe	26 07		rol $07				rol 	TOS+1
.1200	a5 0c		lda $0c				lda 	temp2	 					; until zero
.1202	05 0d		ora $0d				ora 	temp2+1
.1204	d0 df		bne $11e5			bne 	_MultLoop
.1206	a6 0a		ldx $0a				ldx 	temp1 						; restore X load result
.1208	68		pla				pla
.1209	85 07		sta $07				sta 	TOS+1
.120b	68		pla				pla
.120c	85 06		sta $06				sta 	TOS
.120e	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.1211					Unary1Plus:
.1211	e6 06		inc $06				inc 	TOS
.1213	d0 02		bne $1217			bne 	_U1PSkip
.1215	e6 07		inc $07				inc 	TOS+1
.1217					_U1PSkip:
.1217	4c 00 00	jmp $0000			jmp 	Next
.121a					Unary2Plus:
.121a	18		clc				clc
.121b	a5 06		lda $06				lda 	TOS
.121d	69 02		adc #$02			adc 	#2
.121f	85 06		sta $06				sta 	TOS
.1221	90 02		bcc $1225			bcc 	_U1PSkip
.1223	e6 07		inc $07				inc 	TOS+1
.1225					_U1PSkip:
.1225	4c 00 00	jmp $0000			jmp 	Next
.1228					Unary1Minus:
.1228	a5 06		lda $06				lda 	TOS
.122a	d0 02		bne $122e			bne 	_U1MSkip
.122c	c6 07		dec $07				dec 	TOS+1
.122e					_U1MSkip:
.122e	c6 06		dec $06				dec 	TOS
.1230	4c 00 00	jmp $0000			jmp 	Next
.1233					Unary2Minus:
.1233	38		sec				sec
.1234	a5 06		lda $06				lda 	TOS
.1236	e9 02		sbc #$02			sbc 	#2
.1238	85 06		sta $06				sta 	TOS
.123a	b0 02		bcs $123e			bcs 	_U1PSkip
.123c	c6 07		dec $07				dec 	TOS+1
.123e					_U1PSkip:
.123e	4c 00 00	jmp $0000			jmp 	Next
.1241					Absolute:
.1241	a5 07		lda $07				lda 	TOS+1
.1243	30 03		bmi $1248			bmi 	Negate
.1245	4c 00 00	jmp $0000			jmp 	Next
.1248					Negate:
.1248	38		sec				sec
.1249	a9 00		lda #$00			lda 	#0
.124b	e5 06		sbc $06				sbc 	TOS
.124d	85 06		sta $06				sta 	TOS
.124f	a9 00		lda #$00			lda 	#0
.1251	e5 07		sbc $07				sbc 	TOS+1
.1253	85 07		sta $07				sta 	TOS+1
.1255	4c 00 00	jmp $0000			jmp 	Next
.1258					OneComplement:
.1258	a5 06		lda $06				lda 	TOS
.125a	49 ff		eor #$ff			eor 	#$FF
.125c	85 06		sta $06				sta 	TOS
.125e	a5 07		lda $07				lda 	TOS+1
.1260	49 ff		eor #$ff			eor 	#$FF
.1262	85 07		sta $07				sta 	TOS+1
.1264	4c 00 00	jmp $0000			jmp 	Next
.1267					CheckMinus:
.1267	a5 07		lda $07				lda 	TOS+1
.1269	30 07		bmi $1272			bmi 	UnaryTrue
.126b					UnaryFalse:
.126b	64 06		stz $06				stz 	TOS
.126d	64 07		stz $07				stz 	TOS+1
.126f	4c 00 00	jmp $0000			jmp 	Next
.1272					UnaryTrue:
.1272	a9 01		lda #$01			lda 	#1
.1274	85 06		sta $06				sta 	TOS
.1276	64 07		stz $07				stz 	TOS+1
.1278	4c 00 00	jmp $0000			jmp 	Next
.127b					CheckZero:
.127b	a5 06		lda $06				lda 	TOS
.127d	05 07		ora $07				ora 	TOS+1
.127f	d0 ea		bne $126b			bne 	UnaryFalse
.1281	80 ef		bra $1272			bra 	UnaryTrue
.1283					ByteSwap:
.1283	a5 06		lda $06				lda 	TOS
.1285	a4 07		ldy $07				ldy 	TOS+1
.1287	85 07		sta $07				sta 	TOS+1
.1289	84 06		sty $06				sty 	TOS
.128b	4c 00 00	jmp $0000			jmp 	Next
.128e					Times2:
.128e	06 06		asl $06				asl 	TOS
.1290	26 07		rol $07				rol 	TOS+1
.1292	4c 00 00	jmp $0000			jmp 	Next
.1295					Times4:
.1295	06 06		asl $06				asl 	TOS
.1297	26 07		rol $07				rol 	TOS+1
.1299	06 06		asl $06				asl 	TOS
.129b	26 07		rol $07				rol 	TOS+1
.129d	4c 00 00	jmp $0000			jmp 	Next
.12a0					Times16:
.12a0	06 06		asl $06				asl 	TOS
.12a2	26 07		rol $07				rol 	TOS+1
.12a4	06 06		asl $06				asl 	TOS
.12a6	26 07		rol $07				rol 	TOS+1
.12a8	06 06		asl $06				asl 	TOS
.12aa	26 07		rol $07				rol 	TOS+1
.12ac	06 06		asl $06				asl 	TOS
.12ae	26 07		rol $07				rol 	TOS+1
.12b0	4c 00 00	jmp $0000			jmp 	Next
.12b3					Divide2:
.12b3	a5 07		lda $07				lda 	TOS+1
.12b5	0a		asl a				asl 	a
.12b6	66 07		ror $07				ror 	TOS+1
.12b8	66 06		ror $06				ror 	TOS
.12ba	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.12bd					CallHandler:
>12bd	ff						.byte 	$FF

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.12be					NewHandler:
.12be	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.12c1	20 cd 12	jsr $12cd			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.12c4	4c 00 00	jmp $0000			jmp 	Next
.12c7					ClrHandler:
.12c7	20 cd 12	jsr $12cd			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.12ca	4c 00 00	jmp $0000			jmp 	Next
.12cd					ClearVariableSpace:
.12cd	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.12cf	85 08		sta $08				sta 	0+(nextFreeMem)
.12d1	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.12d3	85 09		sta $09				sta 	1+(nextFreeMem)
.12d5	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.12d7					_CVSHashClear:
.12d7	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.12d9	99 40 06	sta $0640,y			sta 	hashTable,y
.12dc	88		dey				dey
.12dd	10 f8		bpl $12d7			bpl 	_CVSHashClear
.12df					_CVSFindEnd:
.12df	18		clc				clc
.12e0	a5 08		lda $08				lda 	nextFreeMem
.12e2	72 08		adc ($08)			adc 	(nextFreeMem)
.12e4	85 08		sta $08				sta 	nextFreeMem
.12e6	90 02		bcc $12ea			bcc 	_NoCarryAdv
.12e8	e6 09		inc $09				inc 	nextFreeMem+1
.12ea					_NoCarryAdv:
.12ea	b2 08		lda ($08)			lda 	(nextFreeMem)
.12ec	d0 f1		bne $12df			bne 	_CVSFindEnd
.12ee	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.12f0	a0 00		ldy #$00			ldy 	#0
.12f2	20 f7 12	jsr $12f7			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
>12f5	ff						.byte 	$FF
.12f6	60		rts				rts 								; free mem pointer pointing to the last zero offset
.12f7					AdvanceFreeMem:
.12f7	18		clc				clc
.12f8	65 08		adc $08				adc 	nextFreeMem
.12fa	85 08		sta $08				sta 	nextFreeMem
.12fc	98		tya				tya
.12fd	65 09		adc $09				adc 	nextFreeMem+1
.12ff	85 09		sta $09				sta 	nextFreeMem+1
.1301	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1302					ExitDump:
.1302	ba		tsx				tsx 								; save Data Stack in temp1
.1303	86 0a		stx $0a				stx 	temp1
.1305	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1308					BreakCmd:
>1308	ff						.byte 	$FF
.1309	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.130c					Call6502:
.130c	a5 06		lda $06				lda 	TOS 						; copy call address
.130e	85 0a		sta $0a				sta 	temp1
.1310	a5 07		lda $07				lda 	TOS+1
.1312	85 0b		sta $0b				sta 	temp1+1
.1314	68		pla				pla
.1315	85 07		sta $07				sta 	TOS+1
.1317	68		pla				pla
.1318	85 06		sta $06				sta 	TOS
.131a	20 20 13	jsr $1320			jsr 	_CallTemp1 					; call it
.131d	4c 00 00	jmp $0000			jmp 	Next
.1320					_CallTemp1:
.1320	6c 0a 00	jmp ($000a)			jmp 	(temp1)
.1323					StopCode:
.1323	20 5a 15	jsr $155a			jsr 	ErrorHandler
>1326	53 54 4f 50 00					.text 	"STOP",0
.132b					EndProgram:
.132b	4c 57 15	jmp $1557			jmp 	WarmStart

;******  Return to file: kernel.asm


;******  Processing file: words/system/number.src

.132e					ConvertToInteger:
.132e	64 0e		stz $0e				stz 	temp3 						; reset value
.1330	64 0f		stz $0f				stz 	temp3+1
.1332	64 0a		stz $0a				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1334	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1336	b1 06		lda ($06),y			lda 	(TOS),y
.1338	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.133a	d0 03		bne $133f			bne 	_CTILoop
.133c	c6 0a		dec $0a				dec 	temp1
.133e	c8		iny				iny
.133f					_CTILoop:
.133f	b1 06		lda ($06),y			lda 	(TOS),y 					; next digit
.1341	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1343	38		sec				sec
.1344	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1346	90 55		bcc $139d			bcc 	_CTIFail 					; out of range.
.1348	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.134a	90 0b		bcc $1357			bcc 	_CTILegal
.134c	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.134e	90 4d		bcc $139d			bcc 	_CTIFail
.1350	38		sec				sec
.1351	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1353	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1355	b0 46		bcs $139d			bcs 	_CTIFail
.1357					_CTILegal:
.1357	85 0b		sta $0b				sta 	temp1+1 					; save digit value.
.1359	06 0e		asl $0e				asl 	temp3
.135b	26 0f		rol $0f				rol 	temp3+1
.135d	a5 0e		lda $0e				lda 	temp3 						; copy x2 into temp2
.135f	85 0c		sta $0c				sta 	temp2
.1361	a5 0f		lda $0f				lda 	temp3+1
.1363	85 0d		sta $0d				sta 	temp2+1
.1365	06 0e		asl $0e				asl 	temp3
.1367	26 0f		rol $0f				rol 	temp3+1
.1369	06 0e		asl $0e				asl 	temp3
.136b	26 0f		rol $0f				rol 	temp3+1
.136d	24 0a		bit $0a				bit 	temp1 						; hexadecimal
.136f	10 06		bpl $1377			bpl 	_CTIDecimal
.1371	06 0e		asl $0e				asl 	temp3
.1373	26 0f		rol $0f				rol 	temp3+1
.1375	80 13		bra $138a			bra 	_CTIAddLoop
.1377					_CTIDecimal:
.1377	18		clc				clc 								; x 8 + x 2 = x 10
.1378	a5 0e		lda $0e				lda 	temp3
.137a	65 0c		adc $0c				adc 	temp2
.137c	85 0e		sta $0e				sta 	temp3
.137e	a5 0f		lda $0f				lda 	temp3+1
.1380	65 0d		adc $0d				adc 	temp2+1
.1382	85 0f		sta $0f				sta 	temp3+1
.1384	a5 0b		lda $0b				lda 	temp1+1 					; check digit 0-9
.1386	c9 0a		cmp #$0a			cmp 	#10
.1388	b0 13		bcs $139d			bcs 	_CTIFail
.138a					_CTIAddLoop:
.138a	18		clc				clc
.138b	a5 0e		lda $0e				lda 	temp3
.138d	65 0b		adc $0b				adc 	temp1+1
.138f	85 0e		sta $0e				sta 	temp3
.1391	90 02		bcc $1395			bcc 	_CTINoCarry
.1393	e6 0f		inc $0f				inc 	temp3+1
.1395					_CTINoCarry:
.1395	b1 06		lda ($06),y			lda 	(TOS),y 					; was this the last character
.1397	c8		iny				iny
.1398	0a		asl a				asl 	a
.1399	90 a4		bcc $133f			bcc 	_CTILoop 					; no, go back.
.139b					_CTIOkay:
.139b	38		sec				sec
.139c	60		rts				rts
.139d					_CTIFail:
.139d	18		clc				clc
.139e	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.139f					NextLine:
.139f	18		clc				clc
.13a0	a5 03		lda $03				lda 	IP
.13a2	72 03		adc ($03)			adc 	(IP)
.13a4	85 03		sta $03				sta 	IP
.13a6	90 02		bcc $13aa			bcc 	_NoCarryAdv
.13a8	e6 04		inc $04				inc 	IP+1
.13aa					_NoCarryAdv:
.13aa	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.13ac	f0 05		beq $13b3			beq 	_NLGoEnd
.13ae	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.13b0	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.13b3					_NLGoEnd:
.13b3	4c 57 15	jmp $1557			jmp 	WarmStart
.13b6					SkipComment:
.13b6	e8		inx				inx									; (IP),X points to the length.
.13b7	e8		inx				inx
.13b8	8a		txa				txa
.13b9	a8		tay				tay 								; put into Y
.13ba	18		clc				clc
.13bb	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.13bd	aa		tax				tax 								; put back in X
.13be	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.13c1					DefineError:
.13c1	20 5a 15	jsr $155a			jsr 	ErrorHandler
>13c4	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>13cc	4f 4e 3f 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.13d0					VarReadHandler:
>13d0	ff						.byte 	$FF
.13d1					VarWriteHandler:
>13d1	ff						.byte 	$FF

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.13d2					Constant0:
.13d2	a5 06		lda $06				lda 	TOS
.13d4	48		pha				pha
.13d5	a5 07		lda $07				lda 	TOS+1
.13d7	48		pha				pha
.13d8	64 06		stz $06				stz 	TOS
.13da	64 07		stz $07				stz 	TOS+1
.13dc	4c 00 00	jmp $0000			jmp 	Next
.13df					ConstantMinus1:
.13df	a5 06		lda $06				lda 	TOS
.13e1	48		pha				pha
.13e2	a5 07		lda $07				lda 	TOS+1
.13e4	48		pha				pha
.13e5	a9 ff		lda #$ff			lda 	#$FF
.13e7	85 06		sta $06				sta 	TOS
.13e9	85 07		sta $07				sta 	TOS+1
.13eb	4c 00 00	jmp $0000			jmp 	Next
.13ee					C1:
.13ee	a0 01		ldy #$01			ldy 	#1
.13f0	80 24		bra $1416			bra 	Const1Byte
.13f2					C2:
.13f2	a0 02		ldy #$02			ldy 	#2
.13f4	80 20		bra $1416			bra 	Const1Byte
.13f6					C3:
.13f6	a0 03		ldy #$03			ldy 	#3
.13f8	80 1c		bra $1416			bra 	Const1Byte
.13fa					C4:
.13fa	a0 04		ldy #$04			ldy 	#4
.13fc	80 18		bra $1416			bra 	Const1Byte
.13fe					C5:
.13fe	a0 05		ldy #$05			ldy 	#5
.1400	80 14		bra $1416			bra 	Const1Byte
.1402					C8:
.1402	a0 08		ldy #$08			ldy 	#8
.1404	80 10		bra $1416			bra 	Const1Byte
.1406					C10:
.1406	a0 0a		ldy #$0a			ldy 	#10
.1408	80 0c		bra $1416			bra 	Const1Byte
.140a					C15:
.140a	a0 0f		ldy #$0f			ldy 	#15
.140c	80 08		bra $1416			bra 	Const1Byte
.140e					C16:
.140e	a0 10		ldy #$10			ldy 	#16
.1410	80 04		bra $1416			bra 	Const1Byte
.1412					C24:
.1412	a0 18		ldy #$18			ldy 	#24
.1414	80 00		bra $1416			bra 	Const1Byte
.1416					Const1Byte:
.1416	a5 06		lda $06				lda 	TOS
.1418	48		pha				pha
.1419	a5 07		lda $07				lda 	TOS+1
.141b	48		pha				pha
.141c	84 06		sty $06				sty 	TOS
.141e	64 07		stz $07				stz 	TOS+1
.1420	4c 00 00	jmp $0000			jmp 	Next
.1423					C32:
.1423	a0 20		ldy #$20			ldy 	#32
.1425	80 ef		bra $1416			bra 	Const1Byte
.1427					C48:
.1427	a0 30		ldy #$30			ldy 	#48
.1429	80 eb		bra $1416			bra 	Const1Byte
.142b					C50:
.142b	a0 32		ldy #$32			ldy 	#50
.142d	80 e7		bra $1416			bra 	Const1Byte
.142f					C63:
.142f	a0 3f		ldy #$3f			ldy 	#63
.1431	80 e3		bra $1416			bra 	Const1Byte
.1433					C64:
.1433	a0 40		ldy #$40			ldy 	#64
.1435	80 df		bra $1416			bra 	Const1Byte
.1437					C100:
.1437	a0 64		ldy #$64			ldy 	#100
.1439	80 db		bra $1416			bra 	Const1Byte
.143b					C127:
.143b	a0 7f		ldy #$7f			ldy 	#127
.143d	80 d7		bra $1416			bra 	Const1Byte
.143f					C128:
.143f	a0 80		ldy #$80			ldy 	#128
.1441	80 d3		bra $1416			bra 	Const1Byte
.1443					C255:
.1443	a0 ff		ldy #$ff			ldy 	#255
.1445	80 cf		bra $1416			bra 	Const1Byte
.1447					Const2Byte:
.1447	85 06		sta $06				sta 	TOS
.1449	84 07		sty $07				sty 	TOS+1
.144b	4c 00 00	jmp $0000			jmp 	Next
.144e					C256:
.144e	a5 06		lda $06				lda 	TOS
.1450	48		pha				pha
.1451	a5 07		lda $07				lda 	TOS+1
.1453	48		pha				pha
.1454	a9 00		lda #$00			lda 	#(256) & $FF
.1456	a0 01		ldy #$01			ldy 	#(256) >> 8
.1458	80 ed		bra $1447			bra 	Const2Byte
.145a					C512:
.145a	a5 06		lda $06				lda 	TOS
.145c	48		pha				pha
.145d	a5 07		lda $07				lda 	TOS+1
.145f	48		pha				pha
.1460	a9 00		lda #$00			lda 	#(512) & $FF
.1462	a0 02		ldy #$02			ldy 	#(512) >> 8
.1464	80 e1		bra $1447			bra 	Const2Byte
.1466					C1024:
.1466	a5 06		lda $06				lda 	TOS
.1468	48		pha				pha
.1469	a5 07		lda $07				lda 	TOS+1
.146b	48		pha				pha
.146c	a9 00		lda #$00			lda 	#(1024) & $FF
.146e	a0 04		ldy #$04			ldy 	#(1024) >> 8
.1470	80 d5		bra $1447			bra 	Const2Byte
.1472					C4096:
.1472	a5 06		lda $06				lda 	TOS
.1474	48		pha				pha
.1475	a5 07		lda $07				lda 	TOS+1
.1477	48		pha				pha
.1478	a9 00		lda #$00			lda 	#(4096) & $FF
.147a	a0 10		ldy #$10			ldy 	#(4096) >> 8
.147c	80 c9		bra $1447			bra 	Const2Byte
.147e					C32767:
.147e	a5 06		lda $06				lda 	TOS
.1480	48		pha				pha
.1481	a5 07		lda $07				lda 	TOS+1
.1483	48		pha				pha
.1484	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1486	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1488	80 bd		bra $1447			bra 	Const2Byte
.148a					C32768:
.148a	a5 06		lda $06				lda 	TOS
.148c	48		pha				pha
.148d	a5 07		lda $07				lda 	TOS+1
.148f	48		pha				pha
.1490	a9 00		lda #$00			lda 	#(32768) & $FF
.1492	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1494	80 b1		bra $1447			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1496					Drop:
.1496	68		pla				pla
.1497	85 07		sta $07				sta 	TOS+1
.1499	68		pla				pla
.149a	85 06		sta $06				sta 	TOS
.149c	4c 00 00	jmp $0000			jmp 	Next
.149f					TestDup:
.149f	a5 06		lda $06				lda 	TOS
.14a1	05 07		ora $07				ora 	TOS+1
.14a3	d0 03		bne $14a8			bne 	Dup
.14a5	4c 00 00	jmp $0000			jmp 	Next
.14a8					Dup:
.14a8	a5 06		lda $06				lda 	TOS
.14aa	48		pha				pha
.14ab	a5 07		lda $07				lda 	TOS+1
.14ad	48		pha				pha
.14ae	4c 00 00	jmp $0000			jmp 	Next
.14b1					Swap:
.14b1	86 0a		stx $0a				stx 	temp1
.14b3	7a		ply				ply
.14b4	fa		plx				plx
.14b5	a5 06		lda $06				lda 	TOS
.14b7	48		pha				pha
.14b8	a5 07		lda $07				lda 	TOS+1
.14ba	48		pha				pha
.14bb	86 06		stx $06				stx 	TOS
.14bd	84 07		sty $07				sty 	TOS+1
.14bf	a6 0a		ldx $0a				ldx 	temp1
.14c1	4c 00 00	jmp $0000			jmp 	Next
.14c4					Over:
.14c4	a5 06		lda $06				lda 	TOS
.14c6	48		pha				pha
.14c7	a5 07		lda $07				lda 	TOS+1
.14c9	48		pha				pha
.14ca	86 0a		stx $0a				stx 	temp1
.14cc	ba		tsx				tsx
.14cd	bd 04 01	lda $0104,x			lda 	stack3low,x
.14d0	85 06		sta $06				sta 	TOS
.14d2	bd 03 01	lda $0103,x			lda 	stack3High,x
.14d5	85 07		sta $07				sta 	TOS+1
.14d7	a6 0a		ldx $0a				ldx 	temp1
.14d9	4c 00 00	jmp $0000			jmp 	Next
.14dc					Nip:
.14dc	68		pla				pla
.14dd	68		pla				pla
.14de	4c 00 00	jmp $0000			jmp 	Next
.14e1					Rot:
.14e1	86 0a		stx $0a				stx 	temp1
.14e3	ba		tsx				tsx
.14e4	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.14e7	a8		tay				tay
.14e8	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.14eb	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.14ee	a5 06		lda $06				lda 	TOS
.14f0	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.14f3	84 06		sty $06				sty 	TOS
.14f5	bd 03 01	lda $0103,x			lda 	Stack3High,x
.14f8	a8		tay				tay
.14f9	bd 01 01	lda $0101,x			lda 	Stack2High,x
.14fc	9d 03 01	sta $0103,x			sta 	Stack3High,x
.14ff	a5 07		lda $07				lda 	TOS+1
.1501	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1504	84 07		sty $07				sty 	TOS+1
.1506	a6 0a		ldx $0a				ldx 	temp1
.1508	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.150b					ByteRead:
.150b	b2 06		lda ($06)			lda 	(TOS)
.150d	85 06		sta $06				sta 	TOS
.150f	64 07		stz $07				stz 	TOS+1
.1511	4c 00 00	jmp $0000			jmp 	Next
.1514					WordRead:
.1514	a0 01		ldy #$01			ldy 	#1
.1516	b1 06		lda ($06),y			lda 	(TOS),y
.1518	a8		tay				tay
.1519	b2 06		lda ($06)			lda 	(TOS)
.151b	85 06		sta $06				sta 	TOS
.151d	84 07		sty $07				sty 	TOS+1
.151f	4c 00 00	jmp $0000			jmp 	Next
.1522					ByteWrite:
.1522	68		pla				pla
.1523	68		pla				pla
.1524	92 06		sta ($06)			sta 	(TOS)
.1526	68		pla				pla
.1527	85 07		sta $07				sta 	TOS+1
.1529	68		pla				pla
.152a	85 06		sta $06				sta 	TOS
.152c	4c 00 00	jmp $0000			jmp 	Next
.152f					WordWrite:
.152f	68		pla				pla
.1530	a0 01		ldy #$01			ldy 	#1
.1532	91 06		sta ($06),y			sta 	(TOS),y
.1534	68		pla				pla
.1535	92 06		sta ($06)			sta 	(TOS)
.1537	68		pla				pla
.1538	85 07		sta $07				sta 	TOS+1
.153a	68		pla				pla
.153b	85 06		sta $06				sta 	TOS
.153d	4c 00 00	jmp $0000			jmp 	Next
.1540					WordAdd:
.1540	7a		ply				ply
.1541	68		pla				pla
.1542	18		clc				clc
.1543	72 06		adc ($06)			adc 	(TOS)
.1545	92 06		sta ($06)			sta 	(TOS)
.1547	98		tya				tya
.1548	a0 01		ldy #$01			ldy 	#1
.154a	71 06		adc ($06),y			adc 	(TOS),y
.154c	91 06		sta ($06),y			sta 	(TOS),y
.154e	68		pla				pla
.154f	85 07		sta $07				sta 	TOS+1
.1551	68		pla				pla
.1552	85 06		sta $06				sta 	TOS
.1554	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm

.1557					WarmStart:
>1557	ff						.byte 	$FF
.1558	a2 00		ldx #$00			ldx 	#$00
.155a					ErrorHandler:
>155a	ff						.byte 	$FF
.155b	a2 5e		ldx #$5e			ldx 	#$5E
.155d					Dictionary:

;******  Processing file: generated/dictionary.inc

>155d	05					.byte	_end1-*
>155e	00					.byte	$00
>155f	2f 15					.word	WordWrite
>1561	a1					.byte	$a1
.1562					_end1:
>1562	0e					.byte	_end2-*
>1563	40					.byte	$40
>1564	d1 13					.word	VarWriteHandler
>1566	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>156e	45 d2
.1570					_end2:
>1570	0e					.byte	_end3-*
>1571	40					.byte	$40
>1572	d0 13					.word	VarReadHandler
>1574	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>157c	45 d2
.157e					_end3:
>157e	0a					.byte	_end4-*
>157f	40					.byte	$40
>1580	bd 12					.word	CallHandler
>1582	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1588					_end4:
>1588	0d					.byte	_end5-*
>1589	40					.byte	$40
>158a	b6 13					.word	SkipComment
>158c	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1594	d4
.1595					_end5:
>1595	0c					.byte	_end6-*
>1596	40					.byte	$40
>1597	c1 13					.word	DefineError
>1599	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.15a1					_end6:
>15a1	0d					.byte	_end7-*
>15a2	40					.byte	$40
>15a3	21 10					.word	Literal2Byte
>15a5	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>15ad	cc
.15ae					_end7:
>15ae	0e					.byte	_end8-*
>15af	00					.byte	$00
>15b0	9f 13					.word	NextLine
>15b2	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>15ba	4e c5
.15bc					_end8:
>15bc	0c					.byte	_end9-*
>15bd	40					.byte	$40
>15be	37 10					.word	LiteralString
>15c0	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.15c8					_end9:
>15c8	05					.byte	_end10-*
>15c9	00					.byte	$00
>15ca	d2 11					.word	Multiply16x16
>15cc	aa					.byte	$aa
.15cd					_end10:
>15cd	05					.byte	_end11-*
>15ce	00					.byte	$00
>15cf	54 10					.word	Add
>15d1	ab					.byte	$ab
.15d2					_end11:
>15d2	06					.byte	_end12-*
>15d3	00					.byte	$00
>15d4	40 15					.word	WordAdd
>15d6	2b a1					.byte	$2b,$a1
.15d8					_end12:
>15d8	05					.byte	_end13-*
>15d9	00					.byte	$00
>15da	63 10					.word	Subtract
>15dc	ad					.byte	$ad
.15dd					_end13:
>15dd	06					.byte	_end14-*
>15de	00					.byte	$00
>15df	df 13					.word	ConstantMinus1
>15e1	2d b1					.byte	$2d,$b1
.15e3					_end14:
>15e3	05					.byte	_end15-*
>15e4	00					.byte	$00
>15e5	23 11					.word	Divide16x16
>15e7	af					.byte	$af
.15e8					_end15:
>15e8	05					.byte	_end16-*
>15e9	00					.byte	$00
>15ea	d2 13					.word	Constant0
>15ec	b0					.byte	$b0
.15ed					_end16:
>15ed	06					.byte	_end17-*
>15ee	00					.byte	$00
>15ef	67 12					.word	CheckMinus
>15f1	30 bc					.byte	$30,$bc
.15f3					_end17:
>15f3	06					.byte	_end18-*
>15f4	00					.byte	$00
>15f5	7b 12					.word	CheckZero
>15f7	30 bd					.byte	$30,$bd
.15f9					_end18:
>15f9	05					.byte	_end19-*
>15fa	00					.byte	$00
>15fb	ee 13					.word	C1
>15fd	b1					.byte	$b1
.15fe					_end19:
>15fe	06					.byte	_end20-*
>15ff	00					.byte	$00
>1600	11 12					.word	Unary1Plus
>1602	31 ab					.byte	$31,$ab
.1604					_end20:
>1604	06					.byte	_end21-*
>1605	00					.byte	$00
>1606	28 12					.word	Unary1Minus
>1608	31 ad					.byte	$31,$ad
.160a					_end21:
>160a	06					.byte	_end22-*
>160b	00					.byte	$00
>160c	06 14					.word	C10
>160e	31 b0					.byte	$31,$b0
.1610					_end22:
>1610	07					.byte	_end23-*
>1611	00					.byte	$00
>1612	37 14					.word	C100
>1614	31 30 b0				.byte	$31,$30,$b0
.1617					_end23:
>1617	08					.byte	_end24-*
>1618	00					.byte	$00
>1619	66 14					.word	C1024
>161b	31 30 32 b4				.byte	$31,$30,$32,$b4
.161f					_end24:
>161f	07					.byte	_end25-*
>1620	00					.byte	$00
>1621	3b 14					.word	C127
>1623	31 32 b7				.byte	$31,$32,$b7
.1626					_end25:
>1626	07					.byte	_end26-*
>1627	00					.byte	$00
>1628	3f 14					.word	C128
>162a	31 32 b8				.byte	$31,$32,$b8
.162d					_end26:
>162d	06					.byte	_end27-*
>162e	00					.byte	$00
>162f	0a 14					.word	C15
>1631	31 b5					.byte	$31,$b5
.1633					_end27:
>1633	06					.byte	_end28-*
>1634	00					.byte	$00
>1635	0e 14					.word	C16
>1637	31 b6					.byte	$31,$b6
.1639					_end28:
>1639	07					.byte	_end29-*
>163a	00					.byte	$00
>163b	a0 12					.word	Times16
>163d	31 36 aa				.byte	$31,$36,$aa
.1640					_end29:
>1640	05					.byte	_end30-*
>1641	00					.byte	$00
>1642	f2 13					.word	C2
>1644	b2					.byte	$b2
.1645					_end30:
>1645	06					.byte	_end31-*
>1646	00					.byte	$00
>1647	8e 12					.word	Times2
>1649	32 aa					.byte	$32,$aa
.164b					_end31:
>164b	06					.byte	_end32-*
>164c	00					.byte	$00
>164d	1a 12					.word	Unary2Plus
>164f	32 ab					.byte	$32,$ab
.1651					_end32:
>1651	06					.byte	_end33-*
>1652	00					.byte	$00
>1653	33 12					.word	Unary2Minus
>1655	32 ad					.byte	$32,$ad
.1657					_end33:
>1657	06					.byte	_end34-*
>1658	00					.byte	$00
>1659	b3 12					.word	Divide2
>165b	32 af					.byte	$32,$af
.165d					_end34:
>165d	06					.byte	_end35-*
>165e	00					.byte	$00
>165f	12 14					.word	C24
>1661	32 b4					.byte	$32,$b4
.1663					_end35:
>1663	07					.byte	_end36-*
>1664	00					.byte	$00
>1665	43 14					.word	C255
>1667	32 35 b5				.byte	$32,$35,$b5
.166a					_end36:
>166a	07					.byte	_end37-*
>166b	00					.byte	$00
>166c	4e 14					.word	C256
>166e	32 35 b6				.byte	$32,$35,$b6
.1671					_end37:
>1671	05					.byte	_end38-*
>1672	00					.byte	$00
>1673	f6 13					.word	C3
>1675	b3					.byte	$b3
.1676					_end38:
>1676	06					.byte	_end39-*
>1677	00					.byte	$00
>1678	23 14					.word	C32
>167a	33 b2					.byte	$33,$b2
.167c					_end39:
>167c	09					.byte	_end40-*
>167d	00					.byte	$00
>167e	7e 14					.word	C32767
>1680	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.1685					_end40:
>1685	09					.byte	_end41-*
>1686	00					.byte	$00
>1687	8a 14					.word	C32768
>1689	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.168e					_end41:
>168e	05					.byte	_end42-*
>168f	00					.byte	$00
>1690	fa 13					.word	C4
>1692	b4					.byte	$b4
.1693					_end42:
>1693	06					.byte	_end43-*
>1694	00					.byte	$00
>1695	95 12					.word	Times4
>1697	34 aa					.byte	$34,$aa
.1699					_end43:
>1699	06					.byte	_end44-*
>169a	00					.byte	$00
>169b	2b 14					.word	C50
>169d	34 b0					.byte	$34,$b0
.169f					_end44:
>169f	08					.byte	_end45-*
>16a0	00					.byte	$00
>16a1	72 14					.word	C4096
>16a3	34 30 39 b6				.byte	$34,$30,$39,$b6
.16a7					_end45:
>16a7	06					.byte	_end46-*
>16a8	00					.byte	$00
>16a9	27 14					.word	C48
>16ab	34 b8					.byte	$34,$b8
.16ad					_end46:
>16ad	05					.byte	_end47-*
>16ae	00					.byte	$00
>16af	fe 13					.word	C5
>16b1	b5					.byte	$b5
.16b2					_end47:
>16b2	07					.byte	_end48-*
>16b3	00					.byte	$00
>16b4	5a 14					.word	C512
>16b6	35 31 b2				.byte	$35,$31,$b2
.16b9					_end48:
>16b9	06					.byte	_end49-*
>16ba	00					.byte	$00
>16bb	2f 14					.word	C63
>16bd	36 b3					.byte	$36,$b3
.16bf					_end49:
>16bf	06					.byte	_end50-*
>16c0	00					.byte	$00
>16c1	33 14					.word	C64
>16c3	36 b4					.byte	$36,$b4
.16c5					_end50:
>16c5	05					.byte	_end51-*
>16c6	00					.byte	$00
>16c7	02 14					.word	C8
>16c9	b8					.byte	$b8
.16ca					_end51:
>16ca	05					.byte	_end52-*
>16cb	00					.byte	$00
>16cc	c6 10					.word	CheckLess
>16ce	bc					.byte	$bc
.16cf					_end52:
>16cf	05					.byte	_end53-*
>16d0	00					.byte	$00
>16d1	9d 10					.word	CheckEqual
>16d3	bd					.byte	$bd
.16d4					_end53:
>16d4	05					.byte	_end54-*
>16d5	00					.byte	$00
>16d6	dd 10					.word	CheckGreater
>16d8	be					.byte	$be
.16d9					_end54:
>16d9	08					.byte	_end55-*
>16da	00					.byte	$00
>16db	9f 14					.word	TestDup
>16dd	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.16e1					_end55:
>16e1	05					.byte	_end56-*
>16e2	00					.byte	$00
>16e3	14 15					.word	WordRead
>16e5	c0					.byte	$c0
.16e6					_end56:
>16e6	07					.byte	_end57-*
>16e7	00					.byte	$00
>16e8	41 12					.word	Absolute
>16ea	41 42 d3				.byte	$41,$42,$d3
.16ed					_end57:
>16ed	07					.byte	_end58-*
>16ee	00					.byte	$00
>16ef	76 10					.word	And
>16f1	41 4e c4				.byte	$41,$4e,$c4
.16f4					_end58:
>16f4	09					.byte	_end59-*
>16f5	00					.byte	$00
>16f6	83 12					.word	ByteSwap
>16f8	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.16fd					_end59:
>16fd	06					.byte	_end60-*
>16fe	00					.byte	$00
>16ff	22 15					.word	ByteWrite
>1701	43 a1					.byte	$43,$a1
.1703					_end60:
>1703	06					.byte	_end61-*
>1704	00					.byte	$00
>1705	0b 15					.word	ByteRead
>1707	43 c0					.byte	$43,$c0
.1709					_end61:
>1709	07					.byte	_end62-*
>170a	00					.byte	$00
>170b	c7 12					.word	ClrHandler
>170d	43 4c d2				.byte	$43,$4c,$d2
.1710					_end62:
>1710	08					.byte	_end63-*
>1711	00					.byte	$00
>1712	96 14					.word	Drop
>1714	44 52 4f d0				.byte	$44,$52,$4f,$d0
.1718					_end63:
>1718	07					.byte	_end64-*
>1719	00					.byte	$00
>171a	a8 14					.word	Dup
>171c	44 55 d0				.byte	$44,$55,$d0
.171f					_end64:
>171f	07					.byte	_end65-*
>1720	00					.byte	$00
>1721	2b 13					.word	EndProgram
>1723	45 4e c4				.byte	$45,$4e,$c4
.1726					_end65:
>1726	07					.byte	_end66-*
>1727	00					.byte	$00
>1728	f8 10					.word	Maximum
>172a	4d 41 d8				.byte	$4d,$41,$d8
.172d					_end66:
>172d	07					.byte	_end67-*
>172e	00					.byte	$00
>172f	f4 10					.word	Minimum
>1731	4d 49 ce				.byte	$4d,$49,$ce
.1734					_end67:
>1734	07					.byte	_end68-*
>1735	00					.byte	$00
>1736	34 11					.word	Modulus16x16
>1738	4d 4f c4				.byte	$4d,$4f,$c4
.173b					_end68:
>173b	0a					.byte	_end69-*
>173c	00					.byte	$00
>173d	48 12					.word	Negate
>173f	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.1745					_end69:
>1745	07					.byte	_end70-*
>1746	00					.byte	$00
>1747	be 12					.word	NewHandler
>1749	4e 45 d7				.byte	$4e,$45,$d7
.174c					_end70:
>174c	07					.byte	_end71-*
>174d	00					.byte	$00
>174e	dc 14					.word	Nip
>1750	4e 49 d0				.byte	$4e,$49,$d0
.1753					_end71:
>1753	07					.byte	_end72-*
>1754	00					.byte	$00
>1755	58 12					.word	OneComplement
>1757	4e 4f d4				.byte	$4e,$4f,$d4
.175a					_end72:
>175a	06					.byte	_end73-*
>175b	00					.byte	$00
>175c	90 10					.word	LogOr
>175e	4f d2					.byte	$4f,$d2
.1760					_end73:
>1760	08					.byte	_end74-*
>1761	00					.byte	$00
>1762	c4 14					.word	Over
>1764	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.1768					_end74:
>1768	07					.byte	_end75-*
>1769	00					.byte	$00
>176a	e1 14					.word	Rot
>176c	52 4f d4				.byte	$52,$4f,$d4
.176f					_end75:
>176f	08					.byte	_end76-*
>1770	00					.byte	$00
>1771	23 13					.word	StopCode
>1773	53 54 4f d0				.byte	$53,$54,$4f,$d0
.1777					_end76:
>1777	08					.byte	_end77-*
>1778	00					.byte	$00
>1779	b1 14					.word	Swap
>177b	53 57 41 d0				.byte	$53,$57,$41,$d0
.177f					_end77:
>177f	07					.byte	_end78-*
>1780	00					.byte	$00
>1781	0c 13					.word	Call6502
>1783	53 59 d3				.byte	$53,$59,$d3
.1786					_end78:
>1786	0a					.byte	_end79-*
>1787	40					.byte	$40
>1788	08 13					.word	BreakCmd
>178a	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.1790					_end79:
>1790	09					.byte	_end80-*
>1791	00					.byte	$00
>1792	02 13					.word	ExitDump
>1794	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.1799					_end80:
>1799	07					.byte	_end81-*
>179a	00					.byte	$00
>179b	83 10					.word	Xor
>179d	58 4f d2				.byte	$58,$4f,$d2
.17a0					_end81:
>17a0	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
