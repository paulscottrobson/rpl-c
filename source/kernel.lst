
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 18 13:49:08 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.
=$9eff					LastMemoryByte = $9EFF 						; program ends here

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	8
=5					AltCode = NextCode+5 						; Patch goes here.
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0008					rsp:
>0008							.byte 	?
.0009					tos:
>0009							.word 	?
.000b					srcPtr:
>000b							.word 	?
.000d					bufPtr:
>000d							.word 	?
.000f					matchPtr:
>000f							.word 	?
.0011					nextFreeMem:
>0011							.word 	?
.0013					temp1:
>0013							.word 	?
.0015					temp2:
>0015							.word 	?
.0017					temp3:
>0017							.word 	?
.0019					temp4:
>0019							.word 	?
.001b					listPtr:
>001b							.word 	?
.001d					SignCount:
>001d							.byte 	?
.001e					RandomSeed:
>001e							.word 	?
.0020					ListCount:
>0020							.byte 	?
.0021					ListLowest:
>0021							.word 	?
.0023					BreakTestCount:
>0023							.byte 	?
.0024					FastMode:
>0024							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	4c 37 24	jmp $2437			jmp 	ColdStart

;******  Processing file: files.asm


;******  Processing file: code/core.src

.1003					InitialiseCoreCode:
.1003	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1005	85 02		sta $02				sta 	NextCode+2
.1007	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.1009	84 04		sty $04				sty 	NextCode+4
.100b	a9 4c		lda #$4c			lda 	#$4C 					; JMP AltHandler
.100d	85 05		sta $05				sta 	AltCode
.100f	a9 31		lda #$31			lda 	#AlternateHandler & $FF
.1011	85 06		sta $06				sta 	AltCode+1
.1013	a9 10		lda #$10			lda 	#AlternateHandler >> 8
.1015	85 07		sta $07				sta 	AltCode+2
.1017	20 1d 10	jsr $101d			jsr 	SetRunMode 				; set run mode to current
.101a	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.101c	60		rts				rts								; (2 INX skip offset and line#)
.101d					SetRunMode:
.101d	a5 24		lda $24				lda 	FastMode
.101f	f0 07		beq $1028			beq 	_SRMSlow
.1021	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1023	85 00		sta $00				sta 	NextCode
.1025	85 01		sta $01				sta 	NextCode+1
.1027	60		rts				rts
.1028					_SRMSlow:
.1028	a9 80		lda #$80			lda 	#$80	 				; BRA AltCode
.102a	85 00		sta $00				sta 	NextCode
.102c	a9 03		lda #$03			lda 	#AltCode-NextCode-2
.102e	85 01		sta $01				sta 	NextCode+1
.1030	60		rts				rts
.1031					AlternateHandler:
.1031	e8		inx				inx 							; patched in - does the INX that is overwritten
.1032	e8		inx				inx
.1033	86 13		stx $13				stx 	temp1 					; save it
.1035	ba		tsx				tsx 							; check underflow
.1036	e0 81		cpx #$81			cpx 	#$81
.1038	b0 11		bcs $104b			bcs 	_AHStackError
.103a	a6 13		ldx $13				ldx 	temp1
.103c	a5 23		lda $23				lda 	BreakTestCount 			; do a break test say 1 in 32
.103e	18		clc				clc
.103f	69 08		adc #$08			adc 	#8
.1041	85 23		sta $23				sta 	BreakTestCount
.1043	90 03		bcc $1048			bcc 	_AHNoTest
.1045	20 18 25	jsr $2518			jsr 	ExternCheckBreak
.1048					_AHNoTest:
.1048	4c 02 00	jmp $0002			jmp 	NextCode+2				; then the indirect jump.
.104b					_AHStackError:
.104b	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>104e	53 54 41 43 4b 20 55 4e				.text 	"STACK UNDERFLOW",0
>1056	44 45 52 46 4c 4f 57 00
.105e					SetSlowMode:
.105e	a9 00		lda #$00			lda 	#0
.1060	80 02		bra $1064			bra 	SetMode
.1062					SetFastMode:
.1062	a9 01		lda #$01			lda 	#1
.1064					SetMode:
.1064	85 24		sta $24				sta 	FastMode
.1066	20 1d 10	jsr $101d			jsr 	SetRunMode
.1069	4c 00 00	jmp $0000			jmp 	NextCode
.106c					HexLiteral2Byte:
.106c	ea		nop				nop 							; must have different address for decoding.
.106d					Literal2Byte:
.106d	a5 09		lda $09				lda 	TOS
.106f	48		pha				pha
.1070	a5 0a		lda $0a				lda 	TOS+1
.1072	48		pha				pha
.1073	e8		inx				inx  							; point X to the word
.1074	e8		inx				inx
.1075	8a		txa				txa 							; copy into Y
.1076	a8		tay				tay
.1077	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1079	85 09		sta $09				sta 	TOS
.107b	c8		iny				iny 							; read and push the MSB
.107c	b1 03		lda ($03),y			lda 	(IP),y
.107e	85 0a		sta $0a				sta 	TOS+1
.1080	4c 00 00	jmp $0000			jmp 	NextCode
.1083					HexLiteral2ByteDecode:
.1083	a9 06		lda #$06			lda 	#CTH_Keyword
.1085	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1088	a9 24		lda #$24			lda 	#"$"
.108a	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.108d	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.108f	48		pha				pha
.1090	c8		iny				iny
.1091	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1093	c8		iny				iny
.1094	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.1097	68		pla				pla
.1098	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.109b	60		rts				rts
.109c					HL2BDWrite:
.109c	48		pha				pha
.109d	4a		lsr a				lsr 	a
.109e	4a		lsr a				lsr 	a
.109f	4a		lsr a				lsr 	a
.10a0	4a		lsr a				lsr 	a
.10a1	20 a5 10	jsr $10a5			jsr 	_HLNibble
.10a4	68		pla				pla
.10a5					_HLNibble:
.10a5	29 0f		and #$0f			and 	#$0F
.10a7	c9 0a		cmp #$0a			cmp 	#$0A
.10a9	90 03		bcc $10ae			bcc 	_HLNoAdjust
.10ab	18		clc				clc
.10ac	69 07		adc #$07			adc 	#7
.10ae					_HLNoAdjust:
.10ae	18		clc				clc
.10af	69 30		adc #$30			adc 	#48
.10b1	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10b4	60		rts				rts
.10b5					Literal2ByteDecode:
.10b5	a9 06		lda #$06			lda 	#CTH_Keyword
.10b7	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10ba	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10bc	aa		tax				tax
.10bd	c8		iny				iny
.10be	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10c0	a8		tay				tay
.10c1	8a		txa				txa
.10c2	38		sec				sec 							; output signed
.10c3	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.10c6	60		rts				rts
.10c7					LiteralString:
.10c7	a5 09		lda $09				lda 	TOS
.10c9	48		pha				pha
.10ca	a5 0a		lda $0a				lda 	TOS+1
.10cc	48		pha				pha
.10cd	e8		inx				inx
.10ce	e8		inx				inx 							; skip over current word
.10cf	8a		txa				txa 							; add to IP + 1 to give string address
.10d0	a8		tay				tay 							; put in Y
.10d1	38		sec				sec 							; make that TOS
.10d2	65 03		adc $03				adc 	IP
.10d4	85 09		sta $09				sta 	TOS
.10d6	a5 04		lda $04				lda 	IP+1
.10d8	69 00		adc #$00			adc 	#0
.10da	85 0a		sta $0a				sta 	TOS+1
.10dc	8a		txa				txa 							; add data length to X
.10dd	18		clc				clc
.10de	71 03		adc ($03),y			adc 	(IP),y
.10e0	aa		tax				tax
.10e1	ca		dex				dex
.10e2	ca		dex				dex
.10e3	4c 00 00	jmp $0000			jmp 	NextCode
.10e6					LiteralStringDecoder:
.10e6	a9 05		lda #$05			lda 	#CTH_String
.10e8	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10eb	a9 22		lda #$22			lda 	#'"'
.10ed	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10f0	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.10f3	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10f6	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/binary.src

.10f7					Add:
.10f7	7a		ply				ply
.10f8	68		pla				pla
.10f9	18		clc				clc
.10fa	65 09		adc $09				adc 	TOS
.10fc	85 09		sta $09				sta 	TOS
.10fe	98		tya				tya
.10ff	65 0a		adc $0a				adc 	TOS+1
.1101	85 0a		sta $0a				sta 	TOS+1
.1103	4c 00 00	jmp $0000			jmp 	NextCode
.1106					Subtract:
.1106	7a		ply				ply
.1107	68		pla				pla
.1108	38		sec				sec
.1109	e5 09		sbc $09				sbc 	TOS
.110b	85 09		sta $09				sta 	TOS
.110d	98		tya				tya
.110e	e5 0a		sbc $0a				sbc 	TOS+1
.1110	85 0a		sta $0a				sta 	TOS+1
.1112	4c 00 00	jmp $0000			jmp 	NextCode
.1115					And:
.1115	68		pla				pla
.1116	25 0a		and $0a				and 	TOS+1
.1118	85 0a		sta $0a				sta 	TOS+1
.111a	68		pla				pla
.111b	25 09		and $09				and 	TOS
.111d	85 09		sta $09				sta 	TOS
.111f	4c 00 00	jmp $0000			jmp 	NextCode
.1122					Xor:
.1122	68		pla				pla
.1123	45 0a		eor $0a				eor 	TOS+1
.1125	85 0a		sta $0a				sta 	TOS+1
.1127	68		pla				pla
.1128	45 09		eor $09				eor 	TOS
.112a	85 09		sta $09				sta 	TOS
.112c	4c 00 00	jmp $0000			jmp 	NextCode
.112f					LogOr:
.112f	68		pla				pla
.1130	05 0a		ora $0a				ora 	TOS+1
.1132	85 0a		sta $0a				sta 	TOS+1
.1134	68		pla				pla
.1135	05 09		ora $09				ora 	TOS
.1137	85 09		sta $09				sta 	TOS
.1139	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/compare.src

.113c					CheckNotEqual:
.113c	38		sec				sec
.113d	80 01		bra $1140			bra 	CECode
.113f					CheckEqual:
.113f	18		clc				clc
.1140					CECode:
.1140	86 13		stx $13				stx 	temp1
.1142	ba		tsx				tsx
.1143	08		php				php
.1144	a5 09		lda $09				lda 	TOS
.1146	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1149	d0 17		bne $1162			bne	 	CompareFalse
.114b	a5 0a		lda $0a				lda 	TOS+1
.114d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1150	d0 10		bne $1162			bne 	CompareFalse
.1152					CompareTrue:
.1152	a6 13		ldx $13				ldx 	temp1
.1154	28		plp				plp
.1155	b0 10		bcs $1167			bcs		CompareFalse2
.1157					CompareTrue2:
.1157	68		pla				pla
.1158	68		pla				pla
.1159	a9 ff		lda #$ff			lda 	#$FF
.115b	85 09		sta $09				sta 	TOS
.115d	85 0a		sta $0a				sta 	TOS+1
.115f	4c 00 00	jmp $0000			jmp 	NextCode
.1162					CompareFalse:
.1162	a6 13		ldx $13				ldx 	temp1
.1164	28		plp				plp
.1165	b0 f0		bcs $1157			bcs		CompareTrue2
.1167					CompareFalse2:
.1167	68		pla				pla
.1168	68		pla				pla
.1169	64 09		stz $09				stz 	TOS
.116b	64 0a		stz $0a				stz 	TOS+1
.116d	4c 00 00	jmp $0000			jmp 	NextCode
.1170					CheckGreaterEq:
.1170	38		sec				sec
.1171	80 01		bra $1174			bra		CLCode
.1173					CheckLess:
.1173	18		clc				clc
.1174	86 13		stx $13		CLCode:	stx 	temp1
.1176	ba		tsx				tsx
.1177	08		php				php
.1178	18		clc				clc
.1179	a5 09		lda $09				lda 	TOS
.117b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.117e	a5 0a		lda $0a				lda 	TOS+1
.1180	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1183	50 02		bvc $1187			bvc 	_CLNoFlip
.1185	49 80		eor #$80			eor 	#$80
.1187					_CLNoFlip:
.1187	0a		asl a				asl 	a
.1188	b0 d8		bcs $1162			bcs 	CompareFalse
.118a	80 c6		bra $1152			bra 	CompareTrue
.118c					CheckLessEq:
.118c	38		sec				sec
.118d	80 01		bra $1190			bra		CGCode
.118f					CheckGreater:
.118f	18		clc				clc
.1190					CGCode:
.1190	86 13		stx $13				stx 	temp1
.1192	ba		tsx				tsx
.1193	08		php				php
.1194	18		clc				clc
.1195	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1198	e5 09		sbc $09				sbc 	TOS
.119a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.119d	e5 0a		sbc $0a				sbc 	TOS+1
.119f	50 02		bvc $11a3			bvc 	_CGNoFlip
.11a1	49 80		eor #$80			eor 	#$80
.11a3					_CGNoFlip:
.11a3	0a		asl a				asl 	a
.11a4	b0 bc		bcs $1162			bcs 	CompareFalse
.11a6	80 aa		bra $1152			bra 	CompareTrue
.11a8					Minimum:
.11a8	a9 00		lda #$00			lda 	#0
.11aa	80 02		bra $11ae			bra 	MinMaxCode
.11ac					Maximum:
.11ac	a9 80		lda #$80			lda 	#$80
.11ae					MinMaxCode:
.11ae	85 14		sta $14				sta 	temp1+1
.11b0	86 13		stx $13				stx 	temp1
.11b2	ba		tsx				tsx
.11b3	38		sec				sec
.11b4	a5 09		lda $09				lda 	TOS
.11b6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11b9	a5 0a		lda $0a				lda 	TOS+1
.11bb	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11be	50 02		bvc $11c2			bvc 	_MMNoFlip
.11c0	49 80		eor #$80			eor 	#$80
.11c2					_MMNoFlip:
.11c2	45 14		eor $14				eor 	temp1+1
.11c4	30 0a		bmi $11d0			bmi 	_MMNoCopy
.11c6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.11c9	85 09		sta $09				sta 	TOS
.11cb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.11ce	85 0a		sta $0a				sta 	TOS+1
.11d0					_MMNoCopy:
.11d0	a6 13		ldx $13				ldx 	temp1
.11d2	68		pla				pla
.11d3	68		pla				pla
.11d4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/divide.src

.11d7					Divide16x16:
.11d7	86 15		stx $15				stx 	temp2
.11d9	ba		tsx				tsx
.11da	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11dd	68		pla				pla
.11de	85 0a		sta $0a				sta 	TOS+1
.11e0	68		pla				pla
.11e1	85 09		sta $09				sta 	TOS
.11e3	a6 15		ldx $15				ldx 	temp2
.11e5	4c 00 00	jmp $0000			jmp 	NextCode
.11e8					Modulus16x16:
.11e8	86 15		stx $15				stx 	temp2
.11ea	ba		tsx				tsx
.11eb	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11ee	a6 15		ldx $15				ldx 	temp2
.11f0	68		pla				pla
.11f1	68		pla				pla
.11f2	a5 13		lda $13				lda 	temp1
.11f4	85 09		sta $09				sta 	TOS
.11f6	a5 14		lda $14				lda 	temp1+1
.11f8	85 0a		sta $0a				sta 	TOS+1
.11fa	4c 00 00	jmp $0000			jmp 	NextCode
.11fd					IntegerDivide:
.11fd	a5 09		lda $09				lda 	TOS 				; check for division by zero.
.11ff	05 0a		ora $0a				ora 	TOS+1
.1201	d0 14		bne $1217			bne 	_BFDOkay
.1203	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1206	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>120e	20 42 59 20 5a 45 52 4f 00
.1217					_BFDOkay:
.1217	64 13		stz $13				stz 	temp1 						; Q/Dividend/Left in +0
.1219	64 14		stz $14				stz 	temp1+1 					; M/Divisor/Right in +2
.121b	64 1d		stz $1d				stz 	SignCount 					; Count of signs.
.121d	20 58 12	jsr $1258			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1220	20 72 12	jsr $1272			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1223	5a		phy				phy 								; Y is the counter
.1224	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1226					_BFDLoop:
.1226	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1229	3e 01 01	rol $0101,x			rol 	Stack2High,x
.122c	26 13		rol $13				rol 	temp1
.122e	26 14		rol $14				rol 	temp1+1
.1230	38		sec				sec
.1231	a5 13		lda $13				lda 	temp1+0 					; Calculate A-M on stack.
.1233	e5 09		sbc $09				sbc 	TOS
.1235	48		pha				pha
.1236	a5 14		lda $14				lda 	temp1+1
.1238	e5 0a		sbc $0a				sbc 	TOS+1
.123a	90 0f		bcc $124b			bcc 	_BFDNoAdd
.123c	85 14		sta $14				sta 	temp1+1
.123e	68		pla				pla
.123f	85 13		sta $13				sta 	temp1+0
.1241	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1244	09 01		ora #$01			ora 	#1
.1246	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1249	80 01		bra $124c			bra 	_BFDNext
.124b					_BFDNoAdd:
.124b	68		pla				pla 								; Throw away the intermediate calculations
.124c					_BFDNext:
.124c	88		dey				dey
.124d	d0 d7		bne $1226			bne 	_BFDLoop
.124f	7a		ply				ply 								; restore Y
.1250	46 1d		lsr $1d				lsr 	SignCount 					; if sign count odd,
.1252	90 03		bcc $1257			bcc 	_BFDUnsigned 				; then the result is signed
.1254	20 5e 12	jsr $125e			jsr		IntegerNegateAlways 		; negate the result
.1257					_BFDUnsigned:
.1257	60		rts				rts
.1258					CheckIntegerNegate:
.1258	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.125b	30 01		bmi $125e			bmi 	IntegerNegateAlways 		; if so negate it
.125d	60		rts				rts
.125e					IntegerNegateAlways:
.125e	e6 1d		inc $1d				inc 	SignCount 					; bump the count of signs
.1260	38		sec				sec 								; negate
.1261	a9 00		lda #$00			lda 	#0
.1263	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1266	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1269	a9 00		lda #$00			lda 	#0
.126b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.126e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1271	60		rts				rts
.1272					CheckTOSNegate:
.1272	a5 0a		lda $0a				lda 	TOS+1
.1274	10 0f		bpl $1285			bpl		CTNNoChange
.1276	e6 1d		inc $1d				inc 	SignCount
.1278					TOSNegateAlways:
.1278	38		sec				sec
.1279	a9 00		lda #$00			lda 	#0
.127b	e5 09		sbc $09				sbc 	TOS
.127d	85 09		sta $09				sta 	TOS
.127f	a9 00		lda #$00			lda 	#0
.1281	e5 0a		sbc $0a				sbc 	TOS+1
.1283	85 0a		sta $0a				sta 	TOS+1
.1285					CTNNoChange:
.1285	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/multiply.src

.1286					Multiply16x16:
.1286	86 13		stx $13				stx 	temp1
.1288	ba		tsx				tsx
.1289	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.128c	85 15		sta $15				sta 	temp2
.128e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1291	85 16		sta $16				sta 	temp2+1
.1293	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1296	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1299					_MultLoop:
.1299	46 16		lsr $16				lsr 	temp2+1 					; ror temp2 into C
.129b	66 15		ror $15				ror 	temp2
.129d	90 11		bcc $12b0			bcc 	_MultNoAdd
.129f	18		clc				clc 								; add 1st to 2nd
.12a0	a5 09		lda $09				lda 	TOS
.12a2	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.12a5	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.12a8	a5 0a		lda $0a				lda 	TOS+1
.12aa	7d 01 01	adc $0101,x			adc 	Stack2High,x
.12ad	9d 01 01	sta $0101,x			sta 	Stack2High,x
.12b0					_MultNoAdd:
.12b0	06 09		asl $09				asl 	TOS 						; shift 1st left
.12b2	26 0a		rol $0a				rol 	TOS+1
.12b4	a5 15		lda $15				lda 	temp2	 					; until zero
.12b6	05 16		ora $16				ora 	temp2+1
.12b8	d0 df		bne $1299			bne 	_MultLoop
.12ba	a6 13		ldx $13				ldx 	temp1 						; restore X load result
.12bc	68		pla				pla
.12bd	85 0a		sta $0a				sta 	TOS+1
.12bf	68		pla				pla
.12c0	85 09		sta $09				sta 	TOS
.12c2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/unary.src

.12c5					Unary1Plus:
.12c5	e6 09		inc $09				inc 	TOS
.12c7	d0 02		bne $12cb			bne 	_U1PSkip
.12c9	e6 0a		inc $0a				inc 	TOS+1
.12cb					_U1PSkip:
.12cb	4c 00 00	jmp $0000			jmp 	NextCode
.12ce					Unary2Plus:
.12ce	18		clc				clc
.12cf	a5 09		lda $09				lda 	TOS
.12d1	69 02		adc #$02			adc 	#2
.12d3	85 09		sta $09				sta 	TOS
.12d5	90 02		bcc $12d9			bcc 	_U1PSkip
.12d7	e6 0a		inc $0a				inc 	TOS+1
.12d9					_U1PSkip:
.12d9	4c 00 00	jmp $0000			jmp 	NextCode
.12dc					Unary1Minus:
.12dc	a5 09		lda $09				lda 	TOS
.12de	d0 02		bne $12e2			bne 	_U1MSkip
.12e0	c6 0a		dec $0a				dec 	TOS+1
.12e2					_U1MSkip:
.12e2	c6 09		dec $09				dec 	TOS
.12e4	4c 00 00	jmp $0000			jmp 	NextCode
.12e7					Unary2Minus:
.12e7	38		sec				sec
.12e8	a5 09		lda $09				lda 	TOS
.12ea	e9 02		sbc #$02			sbc 	#2
.12ec	85 09		sta $09				sta 	TOS
.12ee	b0 02		bcs $12f2			bcs 	_U1PSkip
.12f0	c6 0a		dec $0a				dec 	TOS+1
.12f2					_U1PSkip:
.12f2	4c 00 00	jmp $0000			jmp 	NextCode
.12f5					Absolute:
.12f5	a5 0a		lda $0a				lda 	TOS+1
.12f7	30 03		bmi $12fc			bmi 	Negate
.12f9	4c 00 00	jmp $0000			jmp 	NextCode
.12fc					Negate:
.12fc	38		sec				sec
.12fd	a9 00		lda #$00			lda 	#0
.12ff	e5 09		sbc $09				sbc 	TOS
.1301	85 09		sta $09				sta 	TOS
.1303	a9 00		lda #$00			lda 	#0
.1305	e5 0a		sbc $0a				sbc 	TOS+1
.1307	85 0a		sta $0a				sta 	TOS+1
.1309	4c 00 00	jmp $0000			jmp 	NextCode
.130c					OneComplement:
.130c	a5 09		lda $09				lda 	TOS
.130e	49 ff		eor #$ff			eor 	#$FF
.1310	85 09		sta $09				sta 	TOS
.1312	a5 0a		lda $0a				lda 	TOS+1
.1314	49 ff		eor #$ff			eor 	#$FF
.1316	85 0a		sta $0a				sta 	TOS+1
.1318	4c 00 00	jmp $0000			jmp 	NextCode
.131b					CheckMinus:
.131b	a5 0a		lda $0a				lda 	TOS+1
.131d	30 07		bmi $1326			bmi 	UnaryTrue
.131f					UnaryFalse:
.131f	64 09		stz $09				stz 	TOS
.1321	64 0a		stz $0a				stz 	TOS+1
.1323	4c 00 00	jmp $0000			jmp 	NextCode
.1326					UnaryTrue:
.1326	a9 ff		lda #$ff			lda 	#$FF
.1328	85 09		sta $09				sta 	TOS
.132a	85 0a		sta $0a				sta 	TOS+1
.132c	4c 00 00	jmp $0000			jmp 	NextCode
.132f					CheckZero:
.132f	a5 09		lda $09				lda 	TOS
.1331	05 0a		ora $0a				ora 	TOS+1
.1333	d0 ea		bne $131f			bne 	UnaryFalse
.1335	80 ef		bra $1326			bra 	UnaryTrue
.1337					SignTOS:
.1337	a5 0a		lda $0a				lda 	TOS+1
.1339	30 eb		bmi $1326			bmi		UnaryTrue
.133b	05 09		ora $09				ora 	TOS
.133d	f0 e0		beq $131f			beq 	UnaryFalse
.133f	a9 01		lda #$01			lda 	#1
.1341	85 09		sta $09				sta 	TOS
.1343	64 0a		stz $0a				stz		TOS+1
.1345	4c 00 00	jmp $0000			jmp 	NextCode
.1348					ByteSwap:
.1348	a5 09		lda $09				lda 	TOS
.134a	a4 0a		ldy $0a				ldy 	TOS+1
.134c	85 0a		sta $0a				sta 	TOS+1
.134e	84 09		sty $09				sty 	TOS
.1350	4c 00 00	jmp $0000			jmp 	NextCode
.1353					Times16:
.1353	06 09		asl $09				asl 	TOS
.1355	26 0a		rol $0a				rol 	TOS+1
.1357					Times8:
.1357	06 09		asl $09				asl 	TOS
.1359	26 0a		rol $0a				rol 	TOS+1
.135b					Times4:
.135b	06 09		asl $09				asl 	TOS
.135d	26 0a		rol $0a				rol 	TOS+1
.135f					Times2:
.135f	06 09		asl $09				asl 	TOS
.1361	26 0a		rol $0a				rol 	TOS+1
.1363	4c 00 00	jmp $0000			jmp 	NextCode
.1366					Divide16:
.1366	46 0a		lsr $0a				lsr 	TOS+1
.1368	66 09		ror $09				ror 	TOS
.136a					Divide8:
.136a	46 0a		lsr $0a				lsr 	TOS+1
.136c	66 09		ror $09				ror 	TOS
.136e					Divide4:
.136e	46 0a		lsr $0a				lsr 	TOS+1
.1370	66 09		ror $09				ror 	TOS
.1372					Divide2:
.1372	46 0a		lsr $0a				lsr 	TOS+1
.1374	66 09		ror $09				ror 	TOS
.1376	4c 00 00	jmp $0000			jmp 	NextCode
.1379					Times256:
.1379	a5 09		lda $09				lda 	TOS
.137b	85 0a		sta $0a				sta 	TOS+1
.137d	64 09		stz $09				stz 	TOS
.137f	4c 00 00	jmp $0000			jmp 	NextCode
.1382					Divide256:
.1382	a5 0a		lda $0a				lda 	TOS+1
.1384	85 09		sta $09				sta 	TOS
.1386	64 0a		stz $0a				stz 	TOS+1
.1388	4c 00 00	jmp $0000			jmp 	NextCode
.138b					RandomNumber:
.138b	a5 09		lda $09				lda 	TOS
.138d	48		pha				pha
.138e	a5 0a		lda $0a				lda 	TOS+1
.1390	48		pha				pha
.1391	a5 1e		lda $1e				lda 	randomSeed
.1393	05 1f		ora $1f				ora 	randomSeed+1
.1395	d0 08		bne $139f			bne 	_RH_NoInit
.1397	a9 7c		lda #$7c			lda 	#$7C
.1399	85 1e		sta $1e				sta 	randomSeed
.139b	a9 a1		lda #$a1			lda 	#$A1
.139d	85 1f		sta $1f				sta 	randomSeed+1
.139f					_RH_NoInit:
.139f	a5 1e		lda $1e				lda 	randomSeed
.13a1	4a		lsr a		        lsr		a
.13a2	26 1f		rol $1f		        rol 	randomSeed+1
.13a4	90 02		bcc $13a8	        bcc 	_RH_NoEor
.13a6	49 b4		eor #$b4	        eor 	#$B4
.13a8					_RH_NoEor:
.13a8	85 1e		sta $1e		        sta 	randomSeed
.13aa	45 1f		eor $1f		        eor 	randomSeed+1
.13ac	85 0a		sta $0a		        sta 	TOS+1
.13ae	a5 1e		lda $1e		        lda 	randomSeed
.13b0	85 09		sta $09		        sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/literals.src

.13b5					Constant0:
.13b5	a5 09		lda $09				lda 	TOS
.13b7	48		pha				pha
.13b8	a5 0a		lda $0a				lda 	TOS+1
.13ba	48		pha				pha
.13bb	64 09		stz $09				stz 	TOS
.13bd	64 0a		stz $0a				stz 	TOS+1
.13bf	4c 00 00	jmp $0000			jmp 	NextCode
.13c2					ConstantMinus1:
.13c2	a5 09		lda $09				lda 	TOS
.13c4	48		pha				pha
.13c5	a5 0a		lda $0a				lda 	TOS+1
.13c7	48		pha				pha
.13c8	a9 ff		lda #$ff			lda 	#$FF
.13ca	85 09		sta $09				sta 	TOS
.13cc	85 0a		sta $0a				sta 	TOS+1
.13ce	4c 00 00	jmp $0000			jmp 	NextCode
.13d1					C1:
.13d1	a0 01		ldy #$01			ldy 	#1
.13d3	80 24		bra $13f9			bra 	Const1Byte
.13d5					C2:
.13d5	a0 02		ldy #$02			ldy 	#2
.13d7	80 20		bra $13f9			bra 	Const1Byte
.13d9					C3:
.13d9	a0 03		ldy #$03			ldy 	#3
.13db	80 1c		bra $13f9			bra 	Const1Byte
.13dd					C4:
.13dd	a0 04		ldy #$04			ldy 	#4
.13df	80 18		bra $13f9			bra 	Const1Byte
.13e1					C5:
.13e1	a0 05		ldy #$05			ldy 	#5
.13e3	80 14		bra $13f9			bra 	Const1Byte
.13e5					C8:
.13e5	a0 08		ldy #$08			ldy 	#8
.13e7	80 10		bra $13f9			bra 	Const1Byte
.13e9					C10:
.13e9	a0 0a		ldy #$0a			ldy 	#10
.13eb	80 0c		bra $13f9			bra 	Const1Byte
.13ed					C15:
.13ed	a0 0f		ldy #$0f			ldy 	#15
.13ef	80 08		bra $13f9			bra 	Const1Byte
.13f1					C16:
.13f1	a0 10		ldy #$10			ldy 	#16
.13f3	80 04		bra $13f9			bra 	Const1Byte
.13f5					C24:
.13f5	a0 18		ldy #$18			ldy 	#24
.13f7	80 00		bra $13f9			bra 	Const1Byte
.13f9					Const1Byte:
.13f9	a5 09		lda $09				lda 	TOS
.13fb	48		pha				pha
.13fc	a5 0a		lda $0a				lda 	TOS+1
.13fe	48		pha				pha
.13ff	84 09		sty $09				sty 	TOS
.1401	64 0a		stz $0a				stz 	TOS+1
.1403	4c 00 00	jmp $0000			jmp 	NextCode
.1406					C32:
.1406	a0 20		ldy #$20			ldy 	#32
.1408	80 ef		bra $13f9			bra 	Const1Byte
.140a					C63:
.140a	a0 3f		ldy #$3f			ldy 	#63
.140c	80 eb		bra $13f9			bra 	Const1Byte
.140e					C64:
.140e	a0 40		ldy #$40			ldy 	#64
.1410	80 e7		bra $13f9			bra 	Const1Byte
.1412					C100:
.1412	a0 64		ldy #$64			ldy 	#100
.1414	80 e3		bra $13f9			bra 	Const1Byte
.1416					C127:
.1416	a0 7f		ldy #$7f			ldy 	#127
.1418	80 df		bra $13f9			bra 	Const1Byte
.141a					C128:
.141a	a0 80		ldy #$80			ldy 	#128
.141c	80 db		bra $13f9			bra 	Const1Byte
.141e					C255:
.141e	a0 ff		ldy #$ff			ldy 	#255
.1420	80 d7		bra $13f9			bra 	Const1Byte
.1422					Const2Byte:
.1422	85 09		sta $09				sta 	TOS
.1424	84 0a		sty $0a				sty 	TOS+1
.1426	4c 00 00	jmp $0000			jmp 	NextCode
.1429					C256:
.1429	a5 09		lda $09				lda 	TOS
.142b	48		pha				pha
.142c	a5 0a		lda $0a				lda 	TOS+1
.142e	48		pha				pha
.142f	a9 00		lda #$00			lda 	#(256) & $FF
.1431	a0 01		ldy #$01			ldy 	#(256) >> 8
.1433	80 ed		bra $1422			bra 	Const2Byte
.1435					C512:
.1435	a5 09		lda $09				lda 	TOS
.1437	48		pha				pha
.1438	a5 0a		lda $0a				lda 	TOS+1
.143a	48		pha				pha
.143b	a9 00		lda #$00			lda 	#(512) & $FF
.143d	a0 02		ldy #$02			ldy 	#(512) >> 8
.143f	80 e1		bra $1422			bra 	Const2Byte
.1441					C1024:
.1441	a5 09		lda $09				lda 	TOS
.1443	48		pha				pha
.1444	a5 0a		lda $0a				lda 	TOS+1
.1446	48		pha				pha
.1447	a9 00		lda #$00			lda 	#(1024) & $FF
.1449	a0 04		ldy #$04			ldy 	#(1024) >> 8
.144b	80 d5		bra $1422			bra 	Const2Byte
.144d					C4096:
.144d	a5 09		lda $09				lda 	TOS
.144f	48		pha				pha
.1450	a5 0a		lda $0a				lda 	TOS+1
.1452	48		pha				pha
.1453	a9 00		lda #$00			lda 	#(4096) & $FF
.1455	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1457	80 c9		bra $1422			bra 	Const2Byte
.1459					C32767:
.1459	a5 09		lda $09				lda 	TOS
.145b	48		pha				pha
.145c	a5 0a		lda $0a				lda 	TOS+1
.145e	48		pha				pha
.145f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1461	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1463	80 bd		bra $1422			bra 	Const2Byte
.1465					C32768:
.1465	a5 09		lda $09				lda 	TOS
.1467	48		pha				pha
.1468	a5 0a		lda $0a				lda 	TOS+1
.146a	48		pha				pha
.146b	a9 00		lda #$00			lda 	#(32768) & $FF
.146d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.146f	80 b1		bra $1422			bra 	Const2Byte

;******  Return to file: files.asm


;******  Processing file: words/data/stack.src

.1471					Drop:
.1471	68		pla				pla
.1472	85 0a		sta $0a				sta 	TOS+1
.1474	68		pla				pla
.1475	85 09		sta $09				sta 	TOS
.1477	4c 00 00	jmp $0000			jmp 	NextCode
.147a					TestDup:
.147a	a5 09		lda $09				lda 	TOS
.147c	05 0a		ora $0a				ora 	TOS+1
.147e	d0 03		bne $1483			bne 	Dup
.1480	4c 00 00	jmp $0000			jmp 	NextCode
.1483					Dup:
.1483	a5 09		lda $09				lda 	TOS
.1485	48		pha				pha
.1486	a5 0a		lda $0a				lda 	TOS+1
.1488	48		pha				pha
.1489	4c 00 00	jmp $0000			jmp 	NextCode
.148c					Swap:
.148c	86 13		stx $13				stx 	temp1
.148e	7a		ply				ply
.148f	fa		plx				plx
.1490	a5 09		lda $09				lda 	TOS
.1492	48		pha				pha
.1493	a5 0a		lda $0a				lda 	TOS+1
.1495	48		pha				pha
.1496	86 09		stx $09				stx 	TOS
.1498	84 0a		sty $0a				sty 	TOS+1
.149a	a6 13		ldx $13				ldx 	temp1
.149c	4c 00 00	jmp $0000			jmp 	NextCode
.149f					Over:
.149f	a5 09		lda $09				lda 	TOS
.14a1	48		pha				pha
.14a2	a5 0a		lda $0a				lda 	TOS+1
.14a4	48		pha				pha
.14a5	86 13		stx $13				stx 	temp1
.14a7	ba		tsx				tsx
.14a8	bd 04 01	lda $0104,x			lda 	stack3low,x
.14ab	85 09		sta $09				sta 	TOS
.14ad	bd 03 01	lda $0103,x			lda 	stack3High,x
.14b0	85 0a		sta $0a				sta 	TOS+1
.14b2	a6 13		ldx $13				ldx 	temp1
.14b4	4c 00 00	jmp $0000			jmp 	NextCode
.14b7					Nip:
.14b7	68		pla				pla
.14b8	68		pla				pla
.14b9	4c 00 00	jmp $0000			jmp 	NextCode
.14bc					Rot:
.14bc	86 13		stx $13				stx 	temp1
.14be	ba		tsx				tsx
.14bf	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.14c2	a8		tay				tay
.14c3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.14c6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.14c9	a5 09		lda $09				lda 	TOS
.14cb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.14ce	84 09		sty $09				sty 	TOS
.14d0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.14d3	a8		tay				tay
.14d4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.14d7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.14da	a5 0a		lda $0a				lda 	TOS+1
.14dc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.14df	84 0a		sty $0a				sty 	TOS+1
.14e1	a6 13		ldx $13				ldx 	temp1
.14e3	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/memory.src

.14e6					ByteRead:
.14e6	b2 09		lda ($09)			lda 	(TOS)
.14e8	85 09		sta $09				sta 	TOS
.14ea	64 0a		stz $0a				stz 	TOS+1
.14ec	4c 00 00	jmp $0000			jmp 	NextCode
.14ef					WordRead:
.14ef	a0 01		ldy #$01			ldy 	#1
.14f1	b1 09		lda ($09),y			lda 	(TOS),y
.14f3	a8		tay				tay
.14f4	b2 09		lda ($09)			lda 	(TOS)
.14f6	85 09		sta $09				sta 	TOS
.14f8	84 0a		sty $0a				sty 	TOS+1
.14fa	4c 00 00	jmp $0000			jmp 	NextCode
.14fd					ByteWrite:
.14fd	68		pla				pla
.14fe	68		pla				pla
.14ff	92 09		sta ($09)			sta 	(TOS)
.1501	68		pla				pla
.1502	85 0a		sta $0a				sta 	TOS+1
.1504	68		pla				pla
.1505	85 09		sta $09				sta 	TOS
.1507	4c 00 00	jmp $0000			jmp 	NextCode
.150a					WordWrite:
.150a	68		pla				pla
.150b	a0 01		ldy #$01			ldy 	#1
.150d	91 09		sta ($09),y			sta 	(TOS),y
.150f	68		pla				pla
.1510	92 09		sta ($09)			sta 	(TOS)
.1512	68		pla				pla
.1513	85 0a		sta $0a				sta 	TOS+1
.1515	68		pla				pla
.1516	85 09		sta $09				sta 	TOS
.1518	4c 00 00	jmp $0000			jmp 	NextCode
.151b					WordAdd:
.151b	7a		ply				ply
.151c	68		pla				pla
.151d	18		clc				clc
.151e	72 09		adc ($09)			adc 	(TOS)
.1520	92 09		sta ($09)			sta 	(TOS)
.1522	98		tya				tya
.1523	a0 01		ldy #$01			ldy 	#1
.1525	71 09		adc ($09),y			adc 	(TOS),y
.1527	91 09		sta ($09),y			sta 	(TOS),y
.1529	68		pla				pla
.152a	85 0a		sta $0a				sta 	TOS+1
.152c	68		pla				pla
.152d	85 09		sta $09				sta 	TOS
.152f	4c 00 00	jmp $0000			jmp 	NextCode
.1532					AllocateMemory:
.1532	a5 09		lda $09				lda 	TOS 						; save memory required on stack.
.1534	48		pha				pha
.1535	a5 0a		lda $0a				lda 	TOS+1
.1537	48		pha				pha
.1538	a5 11		lda $11				lda 	nextFreeMem 				; copy free mem address to TOS
.153a	85 09		sta $09				sta 	TOS
.153c	a5 12		lda $12				lda 	nextFreeMem+1
.153e	85 0a		sta $0a				sta 	TOS+1
.1540	7a		ply				ply 								; advance the free ram pointer
.1541	68		pla				pla
.1542	20 92 18	jsr $1892			jsr 	AdvanceFreeMem
.1545	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.1548	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/fornext.src

.154b					ForHandler:
.154b	e6 08		inc $08				inc 	rsp 						; bump the RSP
.154d	a4 08		ldy $08				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.154f	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1551	f0 18		beq $156b			beq 	_FHOverflow
.1553	a5 0a		lda $0a				lda 	TOS+1
.1555	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1558	a5 09		lda $09				lda 	TOS
.155a	99 00 07	sta $0700,y			sta 	returnStackLow,y
.155d	a9 ff		lda #$ff			lda 	#$FF
.155f	99 80 07	sta $0780,y			sta 	returnStackX,y
.1562	68		pla				pla
.1563	85 0a		sta $0a				sta 	TOS+1
.1565	68		pla				pla
.1566	85 09		sta $09				sta 	TOS
.1568	4c 00 00	jmp $0000			jmp 	NextCode
.156b					_FHOverflow:
.156b	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>156e	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1576	45 20 4f 56 45 52 46 4c 4f 57 00
.1581					ForEncoder:
.1581	a9 4b		lda #$4b			lda 	#ForHandler & $FF 			; for handler
.1583	a0 15		ldy #$15			ldy 	#ForHandler >> 8
.1585	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1588	a9 46		lda #$46			lda 	#"F" 						; for marker
.158a	20 fd 22	jsr $22fd			jsr 	EncodePushPosMarkerOnStack
.158d	60		rts				rts
.158e					NextHandler:
.158e	da		phx				phx
.158f	a6 08		ldx $08				ldx 	rsp 						; get current stack ptr
.1591	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1594	c9 ff		cmp #$ff			cmp 	#$FF
.1596	d0 21		bne $15b9			bne 	NHNoFor
.1598	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.159b	d0 03		bne $15a0			bne 	_NHNoBorrow
.159d	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.15a0					_NHNoBorrow:
.15a0	de 00 07	dec $0700,x			dec 	returnStackLow,x
.15a3	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.15a6	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.15a9	fa		plx				plx 								; restore X and re-test
.15aa	09 00		ora #$00			ora 	#0
.15ac	f0 05		beq $15b3			beq 	_NHComplete 				; if so then complete, else loop.
.15ae	e8		inx				inx 								; advance to branch
.15af	e8		inx				inx
.15b0	4c d5 16	jmp $16d5			jmp 	BranchAlways
.15b3					_NHComplete:
.15b3	e8		inx				inx 								; skip over the branch quantity
.15b4	c6 08		dec $08				dec 	rsp 						; drop the indx
.15b6	4c 00 00	jmp $0000			jmp 	NextCode
.15b9					NHNoFor:
.15b9	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>15bc	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>15c4	4f 52 20 53 43 4f 50 45 00
.15cd					NextEncoder:
.15cd	a9 8e		lda #$8e			lda 	#NextHandler & $FF 			; next code
.15cf	a0 15		ldy #$15			ldy 	#NextHandler >> 8
.15d1	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.15d4	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.15d6	c6 08		dec $08				dec 	rsp
.15d8	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.15db	c9 46		cmp #$46			cmp 	#"F"
.15dd	d0 07		bne $15e6			bne 	_NENoFor
.15df	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.15e2	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.15e5	60		rts				rts
.15e6					_NENoFor:
.15e6	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>15e9	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>15f1	46 4f 52 00
.15f5					GetIndex:
.15f5	a4 08		ldy $08				ldy 	rsp 						; get current stack ptr
.15f7	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.15fa	c9 ff		cmp #$ff			cmp 	#$FF
.15fc	d0 bb		bne $15b9			bne 	NHNoFor
.15fe	a5 09		lda $09				lda 	TOS
.1600	48		pha				pha
.1601	a5 0a		lda $0a				lda 	TOS+1
.1603	48		pha				pha
.1604	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1607	38		sec				sec
.1608	e9 01		sbc #$01			sbc 	#1
.160a	85 09		sta $09				sta 	TOS
.160c	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.160f	e9 00		sbc #$00			sbc 	#0
.1611	85 0a		sta $0a				sta 	TOS+1
.1613	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/ifelseendif.src

.1616					IfHandler:
.1616	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1619					IfEncoder:
.1619	a9 16		lda #$16			lda 	#IfHandler & $FF 			; if handler
.161b	a0 16		ldy #$16			ldy 	#IfHandler >> 8
.161d	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1620	a9 49		lda #$49			lda 	#"I" 						; if marker
.1622	20 fd 22	jsr $22fd			jsr 	EncodePushPosMarkerOnStack
.1625	a9 00		lda #$00			lda 	#0
.1627	20 71 22	jsr $2271			jsr 	EncodeWriteByte 			; dummy write.
.162a	60		rts				rts
.162b					ElseHandler:
.162b	4c d3 16	jmp $16d3			jmp 	BranchTestSucceedsNoPop
.162e					ElseEncoder:
.162e	a9 2b		lda #$2b			lda 	#ElseHandler & $FF 			; else handler
.1630	a0 16		ldy #$16			ldy 	#ElseHandler >> 8
.1632	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1635	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.1638	48		pha				pha
.1639	a9 00		lda #$00			lda 	#0 							; zero branch
.163b	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.163e	20 5b 16	jsr $165b			jsr 	IfPatch 					; fix up the branch.
.1641	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.1643	20 fd 22	jsr $22fd			jsr 	EncodePushPosMarkerOnStack
.1646	68		pla				pla 								; address to patch
.1647	a6 08		ldx $08				ldx 	rsp
.1649	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.164c	60		rts				rts
.164d					EndIfHandler:
.164d	4c 00 00	jmp $0000			jmp 	NextCode
.1650					EndIfEncoder:
.1650	a9 4d		lda #$4d			lda 	#EndIfHandler & $FF 		; endif handler
.1652	a0 16		ldy #$16			ldy 	#EndIfHandler >> 8
.1654	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1657	20 5b 16	jsr $165b			jsr 	IfPatch
.165a	60		rts				rts
.165b					IfPatch:
.165b	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.165d	c6 08		dec $08				dec 	rsp
.165f	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1662	c9 49		cmp #$49			cmp 	#"I"
.1664	d0 0b		bne $1671			bne 	_NENoIf
.1666	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.1669	aa		tax				tax
.166a	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.166d	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1670	60		rts				rts
.1671					_NENoIf:
.1671	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1674	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>167c	49 46 00

;******  Return to file: files.asm


;******  Processing file: words/structures/repeatuntil.src

.167f					RepeatHandler:
.167f	4c 00 00	jmp $0000			jmp 	NextCode
.1682					RepeatEncoder:
.1682	a9 7f		lda #$7f			lda 	#RepeatHandler & $FF 		; repeat marker
.1684	a0 16		ldy #$16			ldy 	#RepeatHandler >> 8
.1686	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1689	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.168b	20 fd 22	jsr $22fd			jsr 	EncodePushPosMarkerOnStack
.168e	60		rts				rts
.168f					UntilHandler:
.168f	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1692					UntilEncoder:
.1692	a9 8f		lda #$8f			lda 	#UntilHandler & $FF 		; until code
.1694	a0 16		ldy #$16			ldy 	#UntilHandler >> 8
.1696	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.1699	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.169b	c6 08		dec $08				dec 	rsp
.169d	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.16a0	c9 52		cmp #$52			cmp 	#"R"
.16a2	d0 07		bne $16ab			bne 	_UENoRepeat
.16a4	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.16a7	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.16aa	60		rts				rts
.16ab					_UENoRepeat:
.16ab	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>16ae	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>16b6	52 45 50 45 41 54 00

;******  Return to file: files.asm


;******  Processing file: words/system/branch.src

.16bd					BranchIfZero:
.16bd	a5 09		lda $09				lda 	TOS 						; check TOS = 0
.16bf	05 0a		ora $0a				ora 	TOS+1
.16c1	f0 0a		beq $16cd			beq 	BranchTestSucceeds
.16c3					BranchTestFails:
.16c3	68		pla				pla
.16c4	85 0a		sta $0a				sta 	TOS+1
.16c6	68		pla				pla
.16c7	85 09		sta $09				sta 	TOS
.16c9	e8		inx				inx 								; skip over the relative branch.
.16ca	4c 00 00	jmp $0000			jmp 	NextCode
.16cd					BranchTestSucceeds:
.16cd	68		pla				pla
.16ce	85 0a		sta $0a				sta 	TOS+1
.16d0	68		pla				pla
.16d1	85 09		sta $09				sta 	TOS
.16d3					BranchTestSucceedsNoPop:
.16d3	e8		inx				inx 								; advance by two, to the offset
.16d4	e8		inx				inx
.16d5					BranchAlways:
.16d5	8a		txa				txa 								; A = Y = position
.16d6	a8		tay				tay 								; (IP),Y now points to the branch target
.16d7	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.16d9	aa		tax				tax 								; position back in this line.
.16da	ca		dex				dex
.16db	ca		dex				dex
.16dc	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/callhandler.src

.16df					CallHandler:
.16df	e8		inx				inx									; bump X to the call address.
.16e0	e8		inx				inx
.16e1	e6 08		inc $08				inc 	rsp 						; bump the RSP (first time to zero)
.16e3	a4 08		ldy $08				ldy 	rsp 						; get return stack and push IP/X on it.
.16e5	c0 40		cpy #$40			cpy 	#$40 						; overflow
.16e7	f0 35		beq $171e			beq 	_CHOverflow
.16e9	a5 04		lda $04				lda 	IP+1
.16eb	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.16ee	a5 03		lda $03				lda 	IP
.16f0	99 00 07	sta $0700,y			sta 	returnStackLow,y
.16f3	8a		txa				txa
.16f4	99 80 07	sta $0780,y			sta 	returnStackX,y
.16f7	8a		txa				txa 								; get the line number into temp1.
.16f8	a8		tay				tay
.16f9	b1 03		lda ($03),y			lda 	(IP),y
.16fb	85 13		sta $13				sta 	temp1
.16fd	c8		iny				iny
.16fe	b1 03		lda ($03),y			lda 	(IP),y
.1700	85 14		sta $14				sta 	temp1+1
.1702	20 0b 18	jsr $180b			jsr 	CallSearch
.1705	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1707	b1 03		lda ($03),y			lda 	(IP),y
.1709	c9 47		cmp #$47			cmp 	#DefineCode & $FF
.170b	d0 28		bne $1735			bne 	_CHNoDefine
.170d	c8		iny				iny
.170e	b1 03		lda ($03),y			lda 	(IP),y
.1710	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1712	d0 21		bne $1735			bne 	_CHNoDefine
.1714	c8		iny				iny
.1715	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1717	18		clc				clc
.1718	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.171a	aa		tax				tax
.171b	4c 00 00	jmp $0000			jmp 	NextCode
.171e					_CHOverflow:
.171e	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1721	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1729	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1735					_CHNoDefine:
.1735	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1738	44 45 46 49 4e 45 20 4d				.text 	"DEFINE MISSING",0
>1740	49 53 53 49 4e 47 00
.1747					ReturnHandler:
.1747	a4 08		ldy $08				ldy 	rsp 						; get rsp
.1749	f0 15		beq $1760			beq 	_RHUnderflow 				; if -ve underflowed
.174b	c6 08		dec $08				dec 	rsp 						; decrement rsp
.174d	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1750	85 04		sta $04				sta 	IP+1
.1752	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1755	85 03		sta $03				sta 	IP
.1757	b9 80 07	lda $0780,y			lda 	returnStackX,y
.175a	aa		tax				tax
.175b	f0 15		beq $1772			beq 	_RHInLoop 					; this means you have done :something for ; next
.175d	4c 00 00	jmp $0000			jmp 	NextCode
.1760					_RHUnderflow:
.1760	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1763	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>176b	52 45 54 55 52 4e 00
.1772					_RHInLoop:
.1772	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1775	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>177d	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.178a					CallHandlerDecode:
.178a	a9 03		lda #$03			lda 	#CTH_Call					; space
.178c	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.178f	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get line number into YA
.1791	aa		tax				tax
.1792	c8		iny				iny
.1793	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1795	a8		tay				tay
.1796	8a		txa				txa
.1797	20 d4 17	jsr $17d4			jsr 	FindLine 					; try to locate that line.
.179a	b0 11		bcs $17ad			bcs 	_CHDFound 					; if found .....
.179c					_CHDLineOnly:
.179c	48		pha				pha
.179d	a9 3c		lda #$3c			lda 	#"<"
.179f	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17a2	68		pla				pla
.17a3	18		clc				clc 								; output unsigned
.17a4	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.17a7	a9 3e		lda #$3e			lda 	#">"
.17a9	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17ac	60		rts				rts
.17ad					_CHDFound:
.17ad	48		pha				pha 								; save YA
.17ae	5a		phy				phy
.17af	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.17b1	b1 13		lda ($13),y			lda 	(temp1),y
.17b3	c9 47		cmp #$47			cmp 	#DefineCode & 255
.17b5	d0 07		bne $17be			bne 	_CHDNoDefine
.17b7	c8		iny				iny
.17b8	b1 13		lda ($13),y			lda 	(temp1),y
.17ba	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.17bc	f0 04		beq $17c2			beq 	_CHDFoundDefine
.17be					_CHDNoDefine:
.17be	7a		ply				ply									; restore the line number and print it in <>
.17bf	68		pla				pla
.17c0	80 da		bra $179c			bra 	_CHDLineOnly
.17c2					_CHDFoundDefine:
.17c2	68		pla				pla 								; throw saved line number.
.17c3	68		pla				pla
.17c4	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.17c6					_CHDOutName:
.17c6	c8		iny				iny 								; next
.17c7	b1 13		lda ($13),y			lda 	(temp1),y 					; print char no bit 7
.17c9	48		pha				pha
.17ca	29 7f		and #$7f			and 	#$7F
.17cc	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17cf	68		pla				pla
.17d0	0a		asl a				asl 	a 							; bit 7 to carry
.17d1	90 f3		bcc $17c6			bcc 	_CHDOutName
.17d3	60		rts				rts
.17d4					FindLine:
.17d4	48		pha				pha 								; save registers
.17d5	da		phx				phx
.17d6	5a		phy				phy
.17d7	85 15		sta $15				sta 	temp2 						; temp2 = target line#
.17d9	84 16		sty $16				sty 	temp2+1
.17db	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17dd	85 13		sta $13				sta 	0+(temp1)
.17df	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17e1	85 14		sta $14				sta 	1+(temp1)
.17e3					_FLLoop:
.17e3	b2 13		lda ($13)			lda 	(temp1) 					; found end ?
.17e5	18		clc				clc									; if so exit with CC.
.17e6	f0 1d		beq $1805			beq 	_FLExit
.17e8	a0 01		ldy #$01			ldy 	#1 							; check line # match
.17ea	b1 13		lda ($13),y			lda 	(temp1),y
.17ec	c5 15		cmp $15				cmp 	temp2
.17ee	d0 08		bne $17f8			bne 	_FLNext
.17f0	c8		iny				iny
.17f1	b1 13		lda ($13),y			lda 	(temp1),y
.17f3	c5 16		cmp $16				cmp 	temp2+1
.17f5	38		sec				sec 								; if so exit with CS
.17f6	f0 0d		beq $1805			beq 	_FLExit
.17f8					_FLNext:
.17f8	18		clc				clc
.17f9	a5 13		lda $13				lda 	temp1
.17fb	72 13		adc ($13)			adc 	(temp1)
.17fd	85 13		sta $13				sta 	temp1
.17ff	90 02		bcc $1803			bcc 	_NoCarryAdv
.1801	e6 14		inc $14				inc 	temp1+1
.1803					_NoCarryAdv:
.1803	80 de		bra $17e3			bra 	_FLLoop 					; keep looking.
.1805					_FLExit:
.1805	7a		ply				ply
.1806	fa		plx				plx
.1807	68		pla				pla
.1808	60		rts				rts
.1809	18		clc				clc
.180a	60		rts				rts
.180b					CallSearch:
.180b	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.180d	85 03		sta $03				sta 	0+(IP)
.180f	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1811	85 04		sta $04				sta 	1+(IP)
.1813	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1815	f0 22		beq $1839			beq 	SearchFail
.1817	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1819					_CHSearch:
.1819	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.181b	c5 13		cmp $13				cmp 	temp1
.181d	f0 11		beq $1830			beq 	_CHFoundLSB
.181f					_CHSearchNext:
.181f	18		clc				clc
.1820	a5 03		lda $03				lda 	IP
.1822	72 03		adc ($03)			adc 	(IP)
.1824	85 03		sta $03				sta 	IP
.1826	90 02		bcc $182a			bcc 	_NoCarryAdv
.1828	e6 04		inc $04				inc 	IP+1
.182a					_NoCarryAdv:
.182a	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.182c	d0 eb		bne $1819			bne 	_CHSearch
.182e	80 09		bra $1839			bra 	SearchFail
.1830					_CHFoundLSB:
.1830	c8		iny				iny 								; get MSB
.1831	b1 03		lda ($03),y			lda 	(IP),y
.1833	88		dey				dey
.1834	c5 14		cmp $14				cmp 	temp1+1 					; matches, if not contineu
.1836	d0 e7		bne $181f			bne 	_CHSearchNext
.1838	60		rts				rts
.1839					SearchFail:
.1839	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>183c	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1844	44 20 44 45 46 49 4e 49 54 49 4f 4e 00

;******  Return to file: files.asm


;******  Processing file: words/system/clrnew.src

.1851					NewHandler:
.1851	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1854	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1857	4c 46 24	jmp $2446			jmp 	WarmStartBlankStack
.185a					ClrHandler:
.185a	86 13		stx $13				stx 	temp1
.185c	a2 80		ldx #$80			ldx 	#NumberStackBase
.185e	9a		txs				txs
.185f	a6 13		ldx $13				ldx 	temp1
.1861	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1864	4c 00 00	jmp $0000			jmp 	NextCode
.1867					ClearVariableSpace:
.1867	64 08		stz $08				stz 	rsp
.1869	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.186b	85 11		sta $11				sta 	0+(nextFreeMem)
.186d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.186f	85 12		sta $12				sta 	1+(nextFreeMem)
.1871	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1873					_CVSHashClear:
.1873	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1875	99 40 06	sta $0640,y			sta 	hashTable,y
.1878	88		dey				dey
.1879	10 f8		bpl $1873			bpl 	_CVSHashClear
.187b					_CVSFindEnd:
.187b	18		clc				clc
.187c	a5 11		lda $11				lda 	nextFreeMem
.187e	72 11		adc ($11)			adc 	(nextFreeMem)
.1880	85 11		sta $11				sta 	nextFreeMem
.1882	90 02		bcc $1886			bcc 	_NoCarryAdv
.1884	e6 12		inc $12				inc 	nextFreeMem+1
.1886					_NoCarryAdv:
.1886	b2 11		lda ($11)			lda 	(nextFreeMem)
.1888	d0 f1		bne $187b			bne 	_CVSFindEnd
.188a	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.188c	a0 00		ldy #$00			ldy 	#0
.188e	20 92 18	jsr $1892			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1891	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1892					AdvanceFreeMem:
.1892	18		clc				clc
.1893	65 11		adc $11				adc 	nextFreeMem
.1895	85 11		sta $11				sta 	nextFreeMem
.1897	98		tya				tya
.1898	65 12		adc $12				adc 	nextFreeMem+1
.189a	85 12		sta $12				sta 	nextFreeMem+1
.189c	b0 08		bcs $18a6			bcs 	MemoryOverflow
.189e	60		rts				rts
.189f					CheckMemory:
.189f	a5 12		lda $12				lda 	nextFreeMem+1
.18a1	c9 9d		cmp #$9d			cmp 	#(lastMemoryByte >> 8)-1
.18a3	b0 01		bcs $18a6			bcs 	MemoryOverflow
.18a5	60		rts				rts
.18a6					MemoryOverflow:
.18a6	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>18a9	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>18b1	45 4d 4f 52 59 00

;******  Return to file: files.asm


;******  Processing file: words/system/debug.src

.18b7					ExitDump:
.18b7	ba		tsx				tsx 								; save Data Stack in temp1
.18b8	86 13		stx $13				stx 	temp1
.18ba	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.18bd					BreakCmd:
>18bd	ff						.byte 	$FF
.18be	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/decode.src

.18c1					DecodeLineIntoBufPtr:
.18c1	48		pha				pha
.18c2	da		phx				phx
.18c3	5a		phy				phy
.18c4	85 0b		sta $0b				sta 	srcPtr 						; save the source line.
.18c6	84 0c		sty $0c				sty 	srcPtr+1
.18c8	90 1b		bcc $18e5			bcc 	_DecodeNoLineNumber
.18ca	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.18cc	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18ce	aa		tax				tax
.18cf	c8		iny				iny
.18d0	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18d2	a8		tay				tay
.18d3	8a		txa				txa
.18d4	18		clc				clc
.18d5	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.18d8	aa		tax				tax 								; count in X
.18d9					_DecodeLineSpace:
.18d9	e0 05		cpx #$05			cpx 	#5
.18db	f0 08		beq $18e5			beq 	_DecodeNoLineNumber
.18dd	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.18df	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.18e2	e8		inx				inx
.18e3	80 f4		bra $18d9			bra 	_DecodeLineSpace
.18e5					_DecodeNoLineNumber:
.18e5	a0 03		ldy #$03			ldy 	#3 							; initial position.
.18e7					_DecodeLoop:
.18e7	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.18e9	85 13		sta $13				sta 	temp1 						; must be an execution address.
.18eb	c8		iny				iny
.18ec	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18ee	85 14		sta $14				sta 	temp1+1
.18f0	c8		iny				iny 								; y points to the byte after it.
.18f1	a5 13		lda $13				lda 	temp1
.18f3	c9 05		cmp #$05			cmp 	#NextLine & $FF
.18f5	d0 06		bne $18fd			bne 	_DecodeNotEOL
.18f7	a5 14		lda $14				lda 	temp1+1
.18f9	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.18fb	f0 0b		beq $1908			beq 	_DecodeEOL
.18fd					_DecodeNotEOL:
.18fd	20 10 19	jsr $1910			jsr 	IdentifyCodeWord
.1900	20 5e 19	jsr $195e			jsr 	DecodeFoundWord
.1903	20 48 19	jsr $1948			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1906	80 df		bra $18e7			bra 	_DecodeLoop 				; and go round again
.1908					_DecodeEOL:
.1908	a9 00		lda #$00			lda 	#0
.190a	92 0d		sta ($0d)			sta 	(bufPtr)
.190c	7a		ply				ply 								; restore registers and exit
.190d	fa		plx				plx
.190e	68		pla				pla
.190f	60		rts				rts
.1910					IdentifyCodeWord:
.1910	5a		phy				phy 								; save current position on the stack.
.1911	a9 0a		lda #$0a			lda 	#(Dictionary) & $FF
.1913	85 0f		sta $0f				sta 	0+(matchPtr)
.1915	a9 26		lda #$26			lda 	#(Dictionary) >> 8
.1917	85 10		sta $10				sta 	1+(matchPtr)
.1919					_DecodeIdentify:
.1919	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.191b	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.191d	c5 13		cmp $13				cmp 	temp1
.191f	d0 07		bne $1928			bne 	_DecodeIdNext
.1921	c8		iny				iny
.1922	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1924	c5 14		cmp $14				cmp 	temp1+1
.1926	f0 1e		beq $1946			beq 	_DecodeIdFound
.1928					_DecodeIdNext:
.1928	18		clc				clc
.1929	b2 0f		lda ($0f)			lda 	(matchPtr)
.192b	f0 0a		beq $1937			beq 	_DecodeIdIssue
.192d	65 0f		adc $0f				adc 	matchPtr
.192f	85 0f		sta $0f				sta 	matchPtr
.1931	90 e6		bcc $1919			bcc 	_DecodeIdentify
.1933	e6 10		inc $10				inc 	matchPtr+1
.1935	80 e2		bra $1919			bra 	_DecodeIdentify
.1937					_DecodeIdIssue:
.1937	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>193a	42 41 44 20 50 52 4f 47				.text 	"BAD PROGRAM",0
>1942	52 41 4d 00
.1946					_DecodeIdFound:
.1946	7a		ply				ply 								; restore position.
.1947	60		rts				rts
.1948					AdvanceToNext:
.1948	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1949	a0 01		ldy #$01			ldy 	#1
.194b	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.194d	29 03		and #$03			and 	#3 							; bits 0-1.
.194f	7a		ply				ply
.1950	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1952	d0 02		bne $1956			bne 	_ATN012
.1954	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1956					_ATN012:
.1956	85 15		sta $15				sta 	temp2 						; now add that to Y
.1958	98		tya				tya
.1959	18		clc				clc
.195a	65 15		adc $15				adc 	temp2
.195c	a8		tay				tay
.195d	60		rts				rts
.195e					DecodeFoundWord:
.195e	5a		phy				phy 								; save current position
.195f	84 15		sty $15				sty		temp2 						; put it in temp2 as well.
.1961	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1963	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1965	29 10		and #$10			and 	#$10
.1967	d0 0e		bne $1977			bne 	_DFWSpecialDecoder
.1969	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; reget it.
.196b	30 08		bmi $1975			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.196d	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.196f	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1972	20 90 19	jsr $1990			jsr 	DecodeCurrentWord 			; expand that.
.1975					_DFWExit:
.1975	7a		ply				ply 								; restore current position
.1976	60		rts				rts
.1977					_DFWSpecialDecoder:
.1977	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1979	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; copy this into temp2
.197b	85 15		sta $15				sta 	temp2
.197d	c8		iny				iny
.197e	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1980	85 16		sta $16				sta 	temp2+1
.1982	7a		ply				ply 	 							; restore current position into Y
.1983	48		pha				pha 								; save registers
.1984	da		phx				phx
.1985	5a		phy				phy
.1986	20 8d 19	jsr $198d			jsr 	_DFWCallDecoder				; call the decoder routine
.1989	7a		ply				ply 								; restore registers and exit
.198a	fa		plx				plx
.198b	68		pla				pla
.198c	60		rts				rts
.198d					_DFWCallDecoder:
.198d	6c 15 00	jmp ($0015)			jmp 	(temp2)
.1990					DecodeCurrentWord:
.1990	5a		phy				phy
.1991	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1993	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1995	a0 04		ldy #$04			ldy 	#4 							; original offset
.1997	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1998	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1999	4a		lsr a				lsr 	a 							; bit set.
.199a	4a		lsr a				lsr 	a
.199b	4a		lsr a				lsr 	a 							; decoder bit
.199c	90 02		bcc $19a0			bcc 	_DWBNoDec
.199e	c8		iny				iny
.199f	c8		iny				iny
.19a0					_DWBNoDec:
.19a0	4a		lsr a				lsr 	a
.19a1	90 02		bcc $19a5			bcc 	_DWBNoEnc
.19a3	c8		iny				iny
.19a4	c8		iny				iny
.19a5					_DWBNoEnc:
.19a5					_DWBWordOut:
.19a5	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; output until bit 7 set.
.19a7	48		pha				pha
.19a8	29 7f		and #$7f			and 	#$7F
.19aa	20 b3 19	jsr $19b3			jsr		DecodeWriteBuffer
.19ad	c8		iny				iny
.19ae	68		pla				pla
.19af	10 f4		bpl $19a5			bpl 	_DWBWordOut
.19b1	7a		ply				ply 								; restore Y and exit
.19b2	60		rts				rts
.19b3					DecodeWriteBuffer:
.19b3	92 0d		sta ($0d)			sta 	(bufPtr)
.19b5	e6 0d		inc $0d				inc 	bufPtr
.19b7	d0 02		bne $19bb			bne 	_DWBNoCarry
.19b9	e6 0e		inc $0e				inc 	bufPtr+1
.19bb					_DWBNoCarry:
.19bb	60		rts				rts
.19bc					DecodeOutputData:
.19bc	48		pha				pha
.19bd	da		phx				phx
.19be	5a		phy				phy
.19bf	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; length + 1
.19c1	aa		tax				tax
.19c2					_DODLoop:
.19c2	ca		dex				dex 								; done it all ?
.19c3	f0 0c		beq $19d1			beq		_DODExit
.19c5	c8		iny				iny 								; output next character
.19c6	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.19c8	29 7f		and #$7f			and 	#$7F
.19ca	f0 f6		beq $19c2			beq 	_DODLoop 					; don't print NULL
.19cc	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.19cf	80 f1		bra $19c2			bra 	_DODLoop
.19d1					_DODExit:
.19d1	7a		ply				ply
.19d2	fa		plx				plx
.19d3	68		pla				pla
.19d4	60		rts				rts
.19d5					DecodeYAToBuffer:
.19d5	da		phx				phx
.19d6	5a		phy				phy
.19d7	48		pha				pha
.19d8	a5 0d		lda $0d				lda 	bufPtr 						; copy bufPtr to temp2
.19da	85 15		sta $15				sta 	temp2
.19dc	a5 0e		lda $0e				lda 	bufPtr+1
.19de	85 16		sta $16				sta 	temp2+1
.19e0	68		pla				pla
.19e1	20 3e 1e	jsr $1e3e			jsr 	ConvertToStringMain 		; convert YA to string there
.19e4	aa		tax				tax 								; chars output to X
.19e5	18		clc				clc
.19e6	65 0d		adc $0d				adc 	bufPtr 						; add to buffer pointer
.19e8	85 0d		sta $0d				sta 	bufPtr
.19ea	90 02		bcc $19ee			bcc 	_DYABNoCarry
.19ec	e6 0e		inc $0e				inc 	bufPtr+1
.19ee					_DYABNoCarry:
.19ee	8a		txa				txa 								; count in A
.19ef	7a		ply				ply									; restore and exit.
.19f0	fa		plx				plx
.19f1	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/edit.src

.19f2					EditProgram:
.19f2	20 72 1a	jsr $1a72			jsr 	EDFindLine					; find line address -> temp1
.19f5	90 0f		bcc $1a06			bcc 	_EPNotFound 				; if missing don't delete it.
.19f7	a5 13		lda $13				lda 	temp1 						; save line address
.19f9	48		pha				pha
.19fa	a5 14		lda $14				lda 	temp1+1
.19fc	48		pha				pha
.19fd	20 17 1a	jsr $1a17			jsr 	EDDeleteLine 				; delete the line
.1a00	68		pla				pla 								; restore line address
.1a01	85 14		sta $14				sta 	temp1+1
.1a03	68		pla				pla
.1a04	85 13		sta $13				sta 	temp1
.1a06					_EPNotFound:
.1a06	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1a09	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1a0b	f0 06		beq $1a13			beq 	_EPNoInsert
.1a0d	20 3a 1a	jsr $1a3a			jsr 	EDInsertLine 				; insert line back in.
.1a10	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.1a13					_EPNoInsert:
.1a13	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a16	60		rts				rts
.1a17					EDDeleteLine:
.1a17	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a1a	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1a1c	a2 00		ldx #$00			ldx 	#0
.1a1e	b1 13		lda ($13),y			lda 	(temp1),y
.1a20	a8		tay				tay 								; put in Y
.1a21					_EDDelLoop:
.1a21	b1 13		lda ($13),y			lda 	(temp1),y 					; get it
.1a23	81 13		sta ($13,x)			sta 	(temp1,x) 					; write it.
.1a25	a5 13		lda $13				lda 	temp1 						; check if pointer has reached the end of
.1a27	c5 11		cmp $11				cmp		nextFreeMem 				; low memory. We will have copied down an
.1a29	d0 06		bne $1a31			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1a2b	a5 14		lda $14				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1a2d	c5 12		cmp $12				cmp 	nextFreeMem+1				; doesn't really matter.
.1a2f	f0 08		beq $1a39			beq		_EDDelExit
.1a31					_EDDelNext:
.1a31	e6 13		inc $13				inc 	temp1 						; go to next byte.
.1a33	d0 ec		bne $1a21			bne 	_EDDelLoop
.1a35	e6 14		inc $14				inc 	temp1+1
.1a37	80 e8		bra $1a21			bra 	_EDDelLoop
.1a39					_EDDelExit:
.1a39	60		rts				rts
.1a3a					EDInsertLine:
.1a3a	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a3d	a5 11		lda $11				lda 	nextFreeMem 				; copy high memory to temp3
.1a3f	85 17		sta $17				sta 	temp3
.1a41	a5 12		lda $12				lda 	nextFreeMem+1
.1a43	85 18		sta $18				sta 	temp3+1
.1a45	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1a48	a2 00		ldx #$00			ldx 	#0
.1a4a					_EDInsLoop:
.1a4a	a1 17		lda ($17,x)			lda 	(temp3,x)					; copy it up
.1a4c	91 17		sta ($17),y			sta 	(temp3),y
.1a4e	a5 17		lda $17				lda 	temp3 						; reached the insert point (temp1)
.1a50	c5 13		cmp $13				cmp 	temp1
.1a52	d0 06		bne $1a5a			bne 	_EDINextShift
.1a54	a5 18		lda $18				lda 	temp3+1
.1a56	c5 14		cmp $14				cmp 	temp1+1
.1a58	f0 0a		beq $1a64			beq 	_EDIShiftOver
.1a5a					_EDINextShift:
.1a5a	a5 17		lda $17				lda 	temp3 						; decrement the copy pointer.
.1a5c	d0 02		bne $1a60			bne 	_EDINoBorrow
.1a5e	c6 18		dec $18				dec 	temp3+1
.1a60					_EDINoBorrow:
.1a60	c6 17		dec $17				dec 	temp3
.1a62	80 e6		bra $1a4a			bra 	_EDInsLoop
.1a64					_EDIShiftOver:
.1a64	a0 00		ldy #$00			ldy 	#0
.1a66					_EDICopyCode:
.1a66	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1a69	91 13		sta ($13),y			sta 	(temp1),y 					; write out
.1a6b	c8		iny				iny 								; bump pointers
.1a6c	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1a6f	d0 f5		bne $1a66			bne 	_EDICopyCode
.1a71	60		rts				rts
.1a72					EDFindLine:
.1a72	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1a74	85 13		sta $13				sta 	0+(temp1)
.1a76	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1a78	85 14		sta $14				sta 	1+(temp1)
.1a7a					_EDFLLoop:
.1a7a	b2 13		lda ($13)			lda 	(temp1) 					; check offset
.1a7c	f0 24		beq $1aa2			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1a7e	a0 01		ldy #$01			ldy 	#1							; look at line #
.1a80	38		sec				sec
.1a81	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1a84	f1 13		sbc ($13),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1a86	aa		tax				tax	 								; this will return 10.
.1a87	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1a8a	c8		iny				iny
.1a8b	f1 13		sbc ($13),y			sbc 	(temp1),y
.1a8d	90 13		bcc $1aa2			bcc 	_EDFLFail					; if target < current then failed.
.1a8f	d0 04		bne $1a95			bne 	_EDFLNext 					; if non-zero then goto next
.1a91	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1a93	f0 0f		beq $1aa4			beq 	_EDFLFound
.1a95					_EDFLNext:
.1a95	18		clc				clc
.1a96	a5 13		lda $13				lda 	temp1
.1a98	72 13		adc ($13)			adc 	(temp1)
.1a9a	85 13		sta $13				sta 	temp1
.1a9c	90 02		bcc $1aa0			bcc 	_NoCarryAdv
.1a9e	e6 14		inc $14				inc 	temp1+1
.1aa0					_NoCarryAdv:
.1aa0	80 d8		bra $1a7a			bra 	_EDFLLoop
.1aa2					_EDFLFail:
.1aa2	18		clc				clc
.1aa3	60		rts				rts
.1aa4					_EDFLFound:
.1aa4	38		sec				sec
.1aa5	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/list.src

.1aa6					ListCode:
.1aa6	64 21		stz $21				stz 	ListLowest 					; zero lowest line#
.1aa8	64 22		stz $22				stz 	ListLowest+1
.1aaa	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1aac	85 20		sta $20				sta 	ListCount
.1aae	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1ab0	85 1b		sta $1b				sta 	0+(listPtr)
.1ab2	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1ab4	85 1c		sta $1c				sta 	1+(listPtr)
.1ab6	86 13		stx $13				stx 	temp1						; S->A
.1ab8	ba		tsx				tsx
.1ab9	8a		txa				txa
.1aba	a6 13		ldx $13				ldx 	temp1
.1abc	c9 80		cmp #$80			cmp 	#NumberStackBase
.1abe	f0 0e		beq $1ace			beq 	_LCLoop
.1ac0	a5 09		lda $09				lda 	TOS 						; copy TOS to lowest
.1ac2	85 21		sta $21				sta 	ListLowest
.1ac4	a5 0a		lda $0a				lda 	TOS+1
.1ac6	85 22		sta $22				sta 	ListLowest+1
.1ac8	68		pla				pla
.1ac9	85 0a		sta $0a				sta 	TOS+1
.1acb	68		pla				pla
.1acc	85 09		sta $09				sta 	TOS
.1ace					_LCLoop:
.1ace	b2 1b		lda ($1b)			lda 	(listPtr)					; reached end ?
.1ad0	f0 4c		beq $1b1e			beq 	_LCExit
.1ad2	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1ad4	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1ad6	c5 21		cmp $21				cmp 	ListLowest
.1ad8	c8		iny				iny
.1ad9	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1adb	e5 22		sbc $22				sbc 	ListLowest+1
.1add	90 32		bcc $1b11			bcc 	_LCNext
.1adf	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1ae1	85 0d		sta $0d				sta 	0+(bufPtr)
.1ae3	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1ae5	85 0e		sta $0e				sta 	1+(bufPtr)
.1ae7	a5 1b		lda $1b				lda 	listPtr 					; output the line.
.1ae9	a4 1c		ldy $1c				ldy 	listPtr+1
.1aeb	38		sec				sec
.1aec	20 c1 18	jsr $18c1			jsr 	DecodeLineIntoBufPtr
.1aef	a9 02		lda #$02			lda 	#CTH_LineNo
.1af1	20 38 25	jsr $2538			jsr 	ExternColour
.1af4	a0 ff		ldy #$ff			ldy 	#255
.1af6					_LCLoop2:
.1af6	c8		iny				iny
.1af7	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1afa	f0 0e		beq $1b0a			beq 	_LCEnd
.1afc	c9 20		cmp #$20			cmp 	#32
.1afe	b0 05		bcs $1b05			bcs 	_LCPrint
.1b00	20 38 25	jsr $2538			jsr 	ExternColour
.1b03	a9 20		lda #$20			lda 	#32
.1b05					_LCPrint:
.1b05	20 2c 25	jsr $252c			jsr 	ExternPrint
.1b08	80 ec		bra $1af6			bra 	_LCLoop2
.1b0a	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1b0c	20 2c 25	jsr $252c			jsr 	ExternPrint
.1b0f	c6 20		dec $20				dec 	ListCount					; done all the lines allowed
.1b11					_LCNext:
.1b11	18		clc				clc
.1b12	a5 1b		lda $1b				lda 	listPtr
.1b14	72 1b		adc ($1b)			adc 	(listPtr)
.1b16	85 1b		sta $1b				sta 	listPtr
.1b18	90 02		bcc $1b1c			bcc 	_NoCarryAdv
.1b1a	e6 1c		inc $1c				inc 	listPtr+1
.1b1c					_NoCarryAdv:
.1b1c	80 b0		bra $1ace			bra 	_LCLoop 					; go round again.
.1b1e					_LCExit:
.1b1e	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/miscellany.src

.1b21					RunProgram:
.1b21	86 13		stx $13				stx 	temp1
.1b23	a2 80		ldx #$80			ldx 	#NumberStackBase
.1b25	9a		txs				txs
.1b26	a6 13		ldx $13				ldx 	temp1
.1b28	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables etc.
.1b2b	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1b2d	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1b2f	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1b32	4c 00 00	jmp $0000			jmp 	NextCode
.1b35					Call6502:
.1b35	a5 09		lda $09				lda 	TOS 						; copy call address
.1b37	85 13		sta $13				sta 	temp1
.1b39	a5 0a		lda $0a				lda 	TOS+1
.1b3b	85 14		sta $14				sta 	temp1+1
.1b3d	68		pla				pla
.1b3e	85 0a		sta $0a				sta 	TOS+1
.1b40	68		pla				pla
.1b41	85 09		sta $09				sta 	TOS
.1b43	da		phx				phx
.1b44	ad 02 06	lda $0602			lda		('A'-'@')*2+azVariables
.1b47	ae 30 06	ldx $0630			ldx		('X'-'@')*2+azVariables
.1b4a	ac 32 06	ldy $0632			ldy		('Y'-'@')*2+azVariables
.1b4d	20 54 1b	jsr $1b54			jsr 	_CallTemp1 					; call it
.1b50	fa		plx				plx
.1b51	4c 00 00	jmp $0000			jmp 	NextCode
.1b54					_CallTemp1:
.1b54	6c 13 00	jmp ($0013)			jmp 	(temp1)
.1b57					AssertCode:
.1b57	a5 09		lda $09				lda 	TOS 						; TOS = 0
.1b59	05 0a		ora $0a				ora 	TOS+1
.1b5b	f0 09		beq $1b66			beq 	_ASFail 					; if zero fail
.1b5d	68		pla				pla
.1b5e	85 0a		sta $0a				sta 	TOS+1
.1b60	68		pla				pla
.1b61	85 09		sta $09				sta 	TOS
.1b63	4c 00 00	jmp $0000			jmp 	NextCode
.1b66					_ASFail:
.1b66	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1b69	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1b70					StopCode:
.1b70	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1b73	53 54 4f 50 00					.text 	"STOP",0
.1b78					EndProgram:
.1b78	4c 4d 24	jmp $244d			jmp 	WarmStart
.1b7b					VlistCode:
.1b7b	a9 0a		lda #$0a			lda 	#(Dictionary) & $FF
.1b7d	85 13		sta $13				sta 	0+(temp1)
.1b7f	a9 26		lda #$26			lda 	#(Dictionary) >> 8
.1b81	85 14		sta $14				sta 	1+(temp1)
.1b83	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1b85	b1 13		lda ($13),y			lda 	(temp1),y
.1b87	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1b89	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1b8a	4a		lsr a				lsr 	a
.1b8b	4a		lsr a				lsr		a
.1b8c	4a		lsr a				lsr 	a
.1b8d	4a		lsr a				lsr 	a 							; add those bits in
.1b8e	90 02		bcc $1b92			bcc 	_VLNoDec
.1b90	c8		iny				iny
.1b91	c8		iny				iny
.1b92					_VLNoDec:
.1b92	4a		lsr a				lsr 	a
.1b93	90 02		bcc $1b97			bcc 	_VLNoEnc
.1b95	c8		iny				iny
.1b96	c8		iny				iny
.1b97					_VLNoEnc:
.1b97	b1 13		lda ($13),y			lda 	(temp1),y 					; remove $$ words
.1b99	c9 24		cmp #$24			cmp 	#"$"
.1b9b	d0 06		bne $1ba3			bne 	_VLPrint
.1b9d	c8		iny				iny
.1b9e	51 13		eor ($13),y			eor 	(temp1),y
.1ba0	f0 13		beq $1bb5			beq 	_VLNext
.1ba2	88		dey				dey
.1ba3					_VLPrint:
.1ba3	b1 13		lda ($13),y			lda 	(temp1),y
.1ba5	48		pha				pha
.1ba6	c8		iny				iny
.1ba7	29 7f		and #$7f			and 	#$7F
.1ba9	20 2c 25	jsr $252c			jsr 	ExternPrint
.1bac	68		pla				pla
.1bad	0a		asl a				asl 	a
.1bae	90 f3		bcc $1ba3			bcc 	_VLPrint
.1bb0	a9 20		lda #$20			lda 	#32
.1bb2	20 2c 25	jsr $252c			jsr 	ExternPrint
.1bb5					_VLNext:
.1bb5	18		clc				clc 								; go to next
.1bb6	b2 13		lda ($13)			lda 	(temp1)
.1bb8	65 13		adc $13				adc 	temp1
.1bba	85 13		sta $13				sta 	temp1
.1bbc	90 02		bcc $1bc0			bcc 	_VLNoCarry
.1bbe	e6 14		inc $14				inc 	temp1+1
.1bc0					_VLNoCarry:
.1bc0	b2 13		lda ($13)			lda 	(temp1)
.1bc2	d0 bf		bne $1b83			bne 	_VLLoop
.1bc4	a9 0d		lda #$0d			lda 	#13
.1bc6	20 2c 25	jsr $252c			jsr 	ExternPrint
.1bc9	4c 00 00	jmp $0000			jmp 	NextCode
.1bcc					DumpStack:
.1bcc	a9 5b		lda #$5b			lda		#"["
.1bce	20 2c 25	jsr $252c			jsr 	ExternPrint
.1bd1	86 13		stx $13				stx 	temp1 						; X -> A
.1bd3	ba		tsx				tsx
.1bd4	8a		txa				txa
.1bd5	a6 13		ldx $13				ldx 	temp1
.1bd7	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.1bd9	f0 2f		beq $1c0a			beq 	_DSExit
.1bdb	48		pha				pha 								; save it
.1bdc	a9 07		lda #$07			lda 	#COL_WHITE
.1bde	20 38 25	jsr $2538			jsr 	ExternColour
.1be1	a5 09		lda $09				lda 	TOS 						; print TOS then stack values backwards
.1be3	a4 0a		ldy $0a				ldy 	TOS+1
.1be5	38		sec				sec 								; print unsigned.
.1be6	20 18 1e	jsr $1e18			jsr 	PrintYA
.1be9	a9 06		lda #$06			lda 	#COL_CYAN
.1beb	20 38 25	jsr $2538			jsr 	ExternColour
.1bee	7a		ply				ply 								; restore offset
.1bef					_DSLoop:
.1bef	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.1bf1	f0 17		beq $1c0a			beq 	_DSExit
.1bf3	a9 20		lda #$20			lda 	#" " 						; space
.1bf5	20 2c 25	jsr $252c			jsr 	ExternPrint
.1bf8	5a		phy				phy 								; save pos
.1bf9	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.1bfc	48		pha				pha
.1bfd	b9 02 01	lda $0102,y			lda 	$0102,y
.1c00	7a		ply				ply
.1c01	38		sec				sec
.1c02	20 18 1e	jsr $1e18			jsr 	PrintYA 					; print it
.1c05	7a		ply				ply 								; restore and advance pos
.1c06	c8		iny				iny
.1c07	c8		iny				iny
.1c08	80 e5		bra $1bef			bra 	_DSLoop
.1c0a					_DSExit:
.1c0a	a9 5d		lda #$5d			lda		#"]"
.1c0c	20 2c 25	jsr $252c			jsr 	ExternPrint
.1c0f	a9 0d		lda #$0d			lda 	#13
.1c11	20 2c 25	jsr $252c			jsr 	ExternPrint
.1c14	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/old.src

.1c17					OldCode:
.1c17	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c19	85 0b		sta $0b				sta 	0+(srcPtr)
.1c1b	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c1d	85 0c		sta $0c				sta 	1+(srcPtr)
.1c1f	a0 03		ldy #$03			ldy 	#3 							; start after line# / offset
.1c21					_OldLoop:
.1c21	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1c23	85 13		sta $13				sta 	temp1 						; must be an execution address.
.1c25	c8		iny				iny
.1c26	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1c28	85 14		sta $14				sta 	temp1+1
.1c2a	c8		iny				iny
.1c2b	a5 13		lda $13				lda 	temp1 						; have we reached the end ?
.1c2d	c9 05		cmp #$05			cmp 	#NextLine & $FF
.1c2f	d0 06		bne $1c37			bne 	_OldNotEOL
.1c31	a5 14		lda $14				lda 	temp1+1
.1c33	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.1c35	f0 08		beq $1c3f			beq 	_OldEOL
.1c37					_OldNotEOL:
.1c37	20 10 19	jsr $1910			jsr 	IdentifyCodeWord			; what is it ?
.1c3a	20 48 19	jsr $1948			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1c3d	80 e2		bra $1c21			bra	 	_OldLoop
.1c3f					_OldEOL:
.1c3f	8c 00 40	sty $4000			sty 	ProgramMemory 				; Y is the offset.
.1c42	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1c45	4c 46 24	jmp $2446			jmp 	WarmStartBlankStack

;******  Return to file: files.asm


;******  Processing file: words/system/saveload.src

.1c48					System_Save:
.1c48	20 67 18	jsr $1867			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c4b	20 ca 1c	jsr $1cca			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.1c4e	20 76 1c	jsr $1c76			jsr 	SLGetFileName 				; get filename -> temp3
.1c51	a5 11		lda $11				lda 	nextFreeMem 				; end address
.1c53	85 13		sta $13				sta 	temp1
.1c55	a5 12		lda $12				lda 	nextFreeMem+1
.1c57	85 14		sta $14				sta 	temp1+1
.1c59	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c5b	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c5d	20 80 25	jsr $2580			jsr 	ExternSave
.1c60	20 67 18	jsr $1867			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c63	4c 46 24	jmp $2446			jmp 	WarmStartBlankStack
.1c66					System_Load:
.1c66	20 76 1c	jsr $1c76			jsr 	SLGetFileName 				; get filename -> temp3
.1c69	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c6b	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c6d	20 b6 25	jsr $25b6			jsr 	ExternLoad
.1c70	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; reset everything.
.1c73	4c 46 24	jmp $2446			jmp 	WarmStartBlankStack
.1c76					SLGetFileName:
.1c76	ba		tsx				tsx
.1c77	e0 80		cpx #$80			cpx 	#NumberStackBase
.1c79	f0 3a		beq $1cb5			beq 	_SLFNFail
.1c7b	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.1c7d	85 17		sta $17				sta 	temp3
.1c7f	a9 08		lda #$08			lda 	#textBuffer >> 8
.1c81	85 18		sta $18				sta 	temp3+1
.1c83	a0 00		ldy #$00			ldy 	#0
.1c85	b1 09		lda ($09),y	_SLCopy:lda 	(TOS),y
.1c87	91 17		sta ($17),y			sta 	(temp3),y
.1c89	c8		iny				iny
.1c8a	c9 00		cmp #$00			cmp		#0
.1c8c	d0 f7		bne $1c85			bne 	_SLCopy
.1c8e	88		dey				dey
.1c8f	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.1c91					_SLCheckEnd:
.1c91	88		dey				dey
.1c92	bd c5 1c	lda $1cc5,x			lda 	_SLFNExtension,x
.1c95	d1 17		cmp ($17),y			cmp 	(temp3),y
.1c97	d0 05		bne $1c9e			bne 	_SLNoExtension
.1c99	ca		dex				dex
.1c9a	10 f5		bpl $1c91			bpl 	_SLCheckEnd
.1c9c	80 16		bra $1cb4			bra 	_SLExit
.1c9e					_SLNoExtension:
.1c9e	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.1ca0					_SLFindend:
.1ca0	c8		iny				iny
.1ca1	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1ca4	d0 fa		bne $1ca0			bne 	_SLFindend
.1ca6	a2 00		ldx #$00			ldx 	#0
.1ca8					_SLAppend:
.1ca8	bd c5 1c	lda $1cc5,x			lda 	_SLFNExtension,x
.1cab	99 10 08	sta $0810,y			sta 	textBuffer,y
.1cae	e8		inx				inx
.1caf	c8		iny				iny
.1cb0	c9 00		cmp #$00			cmp 	#0
.1cb2	d0 f4		bne $1ca8			bne 	_SLAppend
.1cb4					_SLExit:
.1cb4	60		rts				rts
.1cb5					_SLFNFail:
.1cb5	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1cb8	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>1cc0	4e 41 4d 45 00
.1cc5					_SLFNExtension:
>1cc5	2e 52 50 4c 00					.text 	".RPL",0
.1cca					ExtendWithDictionary:
.1cca	20 f3 1c	jsr $1cf3			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.1ccd	a9 0a		lda #$0a			lda 	#(Dictionary) & $FF
.1ccf	85 13		sta $13				sta 	0+(temp1)
.1cd1	a9 26		lda #$26			lda 	#(Dictionary) >> 8
.1cd3	85 14		sta $14				sta 	1+(temp1)
.1cd5					_EWDLoop:
.1cd5	b2 13		lda ($13)			lda 	(temp1)						; end
.1cd7	f0 1a		beq $1cf3			beq 	_EWDMarker
.1cd9	a0 02		ldy #$02			ldy 	#2 							; output the address
.1cdb	b1 13		lda ($13),y			lda 	(temp1),y
.1cdd	20 fc 1c	jsr $1cfc			jsr 	_EWDWrite
.1ce0	c8		iny				iny
.1ce1	b1 13		lda ($13),y			lda 	(temp1),y
.1ce3	20 fc 1c	jsr $1cfc			jsr 	_EWDWrite
.1ce6	18		clc				clc 								; next entry.
.1ce7	a5 13		lda $13				lda 	temp1
.1ce9	72 13		adc ($13)			adc 	(temp1)
.1ceb	85 13		sta $13				sta 	temp1
.1ced	90 e6		bcc $1cd5			bcc 	_EWDLoop
.1cef	e6 14		inc $14				inc 	temp1+1
.1cf1	80 e2		bra $1cd5			bra 	_EWDLoop
.1cf3					_EWDMarker:
.1cf3	a9 ff		lda #$ff			lda 	#$FF
.1cf5	20 fc 1c	jsr $1cfc			jsr 	_EWDWrite
.1cf8	20 fc 1c	jsr $1cfc			jsr 	_EWDWrite
.1cfb	60		rts				rts
.1cfc					_EWDWrite:
.1cfc	92 11		sta ($11)			sta 	(nextFreeMem)
.1cfe	e6 11		inc $11				inc 	nextFreeMem
.1d00	d0 02		bne $1d04			bne 	_EWDExit
.1d02	e6 12		inc $12				inc 	nextFreeMem+1
.1d04					_EWDExit:
.1d04	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/skipper.src

.1d05					NextLine:
.1d05	18		clc				clc
.1d06	a5 03		lda $03				lda 	IP
.1d08	72 03		adc ($03)			adc 	(IP)
.1d0a	85 03		sta $03				sta 	IP
.1d0c	90 02		bcc $1d10			bcc 	_NoCarryAdv
.1d0e	e6 04		inc $04				inc 	IP+1
.1d10					_NoCarryAdv:
.1d10	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1d12	f0 05		beq $1d19			beq 	_NLGoEnd
.1d14	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1d16	4c 00 00	jmp $0000			jmp 	NextCode
.1d19					_NLGoEnd:
.1d19	4c 4d 24	jmp $244d			jmp 	WarmStart
.1d1c					SkipComment:
.1d1c	e8		inx				inx									; (IP),X points to the length.
.1d1d	e8		inx				inx
.1d1e	8a		txa				txa
.1d1f	a8		tay				tay 								; put into Y
.1d20	18		clc				clc
.1d21	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1d23	aa		tax				tax 								; put back in X
.1d24	ca		dex				dex
.1d25	ca		dex				dex
.1d26	4c 00 00	jmp $0000			jmp 	NextCode
.1d29					CommentDecoder:
.1d29	a9 06		lda #$06			lda 	#CTH_Keyword
.1d2b	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d2e	a9 27		lda #$27			lda 	#"'"
.1d30	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d33	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; check if there is no data
.1d35	c9 01		cmp #$01			cmp 	#1
.1d37	f0 0d		beq $1d46			beq 	_CDEmpty 					; if so print nothing.
.1d39	a9 0b		lda #$0b			lda 	#CTH_Comment
.1d3b	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d3e	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.1d41	a9 20		lda #$20			lda 	#32
.1d43	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d46					_CDEmpty
.1d46	60		rts				rts
.1d47					DefineCode:
.1d47	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1d4a	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>1d52	44 45 46 49 4e 49 54 49 4f 4e 00
.1d5d					DefineDecoder:
.1d5d	a9 07		lda #$07			lda 	#CTH_Definition
.1d5f	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d62	a9 3a		lda #$3a			lda 	#":"
.1d64	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d67	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.1d6a	a9 20		lda #$20			lda 	#32
.1d6c	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d6f	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/toint.src

.1d70					ConvertToInteger:
.1d70	84 1a		sty $1a				sty 	temp4+1
.1d72	85 19		sta $19				sta 	temp4
.1d74	64 17		stz $17				stz 	temp3 						; reset value
.1d76	64 18		stz $18				stz 	temp3+1
.1d78	64 13		stz $13				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1d7a	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1d7c	b1 19		lda ($19),y			lda 	(temp4),y
.1d7e	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1d80	85 14		sta $14				sta 	temp1+1 					; save this in temp1+1
.1d82	d0 01		bne $1d85			bne 	_CTINotMinus
.1d84	c8		iny				iny									; skip -
.1d85					_CTINotMinus:
.1d85	b1 19		lda ($19),y			lda 	(temp4),y
.1d87	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1d89	d0 03		bne $1d8e			bne 	_CTILoop
.1d8b	c6 13		dec $13				dec 	temp1
.1d8d	c8		iny				iny
.1d8e					_CTILoop:
.1d8e	b1 19		lda ($19),y			lda 	(temp4),y 					; next digit
.1d90	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1d92	38		sec				sec
.1d93	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1d95	90 65		bcc $1dfc			bcc 	_CTIFail 					; out of range.
.1d97	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1d99	90 0b		bcc $1da6			bcc 	_CTILegal
.1d9b	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d9d	90 5d		bcc $1dfc			bcc 	_CTIFail
.1d9f	38		sec				sec
.1da0	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1da2	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1da4	b0 56		bcs $1dfc			bcs 	_CTIFail
.1da6					_CTILegal:
.1da6	48		pha				pha 								; save digit value.
.1da7	06 17		asl $17				asl 	temp3
.1da9	26 18		rol $18				rol 	temp3+1
.1dab	a5 17		lda $17				lda 	temp3 						; copy x2 into temp2
.1dad	85 15		sta $15				sta 	temp2
.1daf	a5 18		lda $18				lda 	temp3+1
.1db1	85 16		sta $16				sta 	temp2+1
.1db3	06 17		asl $17				asl 	temp3
.1db5	26 18		rol $18				rol 	temp3+1
.1db7	06 17		asl $17				asl 	temp3
.1db9	26 18		rol $18				rol 	temp3+1
.1dbb	24 13		bit $13				bit 	temp1 						; hexadecimal
.1dbd	10 07		bpl $1dc6			bpl 	_CTIDecimal
.1dbf	06 17		asl $17				asl 	temp3
.1dc1	26 18		rol $18				rol 	temp3+1
.1dc3	68		pla				pla 								; get digit back
.1dc4	80 12		bra $1dd8			bra 	_CTIAddLoop
.1dc6					_CTIDecimal:
.1dc6	18		clc				clc 								; x 8 + x 2 = x 10
.1dc7	a5 17		lda $17				lda 	temp3
.1dc9	65 15		adc $15				adc 	temp2
.1dcb	85 17		sta $17				sta 	temp3
.1dcd	a5 18		lda $18				lda 	temp3+1
.1dcf	65 16		adc $16				adc 	temp2+1
.1dd1	85 18		sta $18				sta 	temp3+1
.1dd3	68		pla				pla 								; check digit 0-9
.1dd4	c9 0a		cmp #$0a			cmp 	#10
.1dd6	b0 24		bcs $1dfc			bcs 	_CTIFail
.1dd8					_CTIAddLoop:
.1dd8	18		clc				clc
.1dd9	65 17		adc $17				adc 	temp3
.1ddb	85 17		sta $17				sta 	temp3
.1ddd	90 02		bcc $1de1			bcc 	_CTINoCarry
.1ddf	e6 18		inc $18				inc 	temp3+1
.1de1					_CTINoCarry:
.1de1	c8		iny				iny
.1de2	b1 19		lda ($19),y			lda 	(temp4),y 					; was this the last character
.1de4	c9 21		cmp #$21			cmp 	#32+1
.1de6	b0 a6		bcs $1d8e			bcs 	_CTILoop 					; no, go back.
.1de8	a5 14		lda $14				lda 	temp1+1 					; was it - ?
.1dea	d0 0d		bne $1df9			bne 	_CTIOkay
.1dec	38		sec				sec
.1ded	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1def	e5 17		sbc $17				sbc 	temp3
.1df1	85 17		sta $17				sta 	temp3
.1df3	a9 00		lda #$00			lda 	#0
.1df5	e5 18		sbc $18				sbc 	temp3+1
.1df7	85 18		sta $18				sta 	temp3+1
.1df9					_CTIOkay:
.1df9	98		tya				tya
.1dfa	38		sec				sec
.1dfb	60		rts				rts
.1dfc					_CTIFail:
.1dfc	18		clc				clc
.1dfd	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/tostr.src

.1dfe					IntToString:
.1dfe	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e00	85 15		sta $15				sta 	0+(temp2)
.1e02	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e04	85 16		sta $16				sta 	1+(temp2)
.1e06	a5 09		lda $09				lda 	TOS 						; value in YA
.1e08	a4 0a		ldy $0a				ldy 	TOS+1
.1e0a	20 3a 1e	jsr $1e3a			jsr 	ConvertToString
.1e0d	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e0f	85 09		sta $09				sta 	0+(TOS)
.1e11	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e13	85 0a		sta $0a				sta 	1+(TOS)
.1e15	4c 00 00	jmp $0000			jmp 	NextCode
.1e18					PrintYA:
.1e18	48		pha				pha
.1e19	da		phx				phx
.1e1a	5a		phy				phy
.1e1b	48		pha				pha
.1e1c	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e1e	85 15		sta $15				sta 	0+(temp2)
.1e20	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e22	85 16		sta $16				sta 	1+(temp2)
.1e24	68		pla				pla
.1e25	20 3e 1e	jsr $1e3e			jsr 	ConvertToStringMain
.1e28	a2 00		ldx #$00			ldx 	#0
.1e2a					_PrintYALoop:
.1e2a	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e2d	20 2c 25	jsr $252c			jsr 	ExternPrint
.1e30	e8		inx				inx
.1e31	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e34	d0 f4		bne $1e2a			bne 	_PrintYALoop
.1e36	7a		ply				ply
.1e37	fa		plx				plx
.1e38	68		pla				pla
.1e39	60		rts				rts
.1e3a					ConvertToString:
.1e3a	38		sec				sec
.1e3b	80 01		bra $1e3e			bra 	ConvertToStringMain
.1e3d					ConvertToStringUnsigned:
.1e3d	18		clc				clc
.1e3e					ConvertToStringMain:
.1e3e	da		phx				phx									; save XY
.1e3f	5a		phy				phy
.1e40	64 1d		stz $1d				stz 	SignCount 					; this is zero suppression
.1e42	85 13		sta $13				sta 	temp1 						; save YA in temp1
.1e44	84 14		sty $14				sty 	temp1+1
.1e46	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1e48	90 16		bcc $1e60			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1e4a	a5 14		lda $14				lda 	temp1+1 					; is it negative
.1e4c	10 12		bpl $1e60			bpl 	_CTSUnsigned
.1e4e	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1e50	91 15		sta ($15),y			sta 	(temp2),y
.1e52	c8		iny				iny
.1e53	38		sec				sec 								; negate temp1
.1e54	a9 00		lda #$00			lda 	#0
.1e56	e5 13		sbc $13				sbc 	temp1
.1e58	85 13		sta $13				sta 	temp1
.1e5a	a9 00		lda #$00			lda 	#0
.1e5c	e5 14		sbc $14				sbc 	temp1+1
.1e5e	85 14		sta $14				sta 	temp1+1
.1e60					_CTSUnsigned:
.1e60	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1e62					_CTSLoop:
.1e62	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e64	91 15		sta ($15),y			sta 	(temp2),y
.1e66					_CTSSubLoop:
.1e66	b1 15		lda ($15),y			lda 	(temp2),y 					; bump the count
.1e68	1a		inc a				inc 	a
.1e69	91 15		sta ($15),y			sta 	(temp2),y
.1e6b	38		sec				sec 								; do subtraction saving interim result
.1e6c	a5 13		lda $13				lda 	temp1
.1e6e	fd a1 1e	sbc $1ea1,x			sbc 	_CTSTable,x
.1e71	48		pha				pha
.1e72	a5 14		lda $14				lda 	temp1+1
.1e74	fd a2 1e	sbc $1ea2,x			sbc 	_CTSTable+1,x
.1e77	90 07		bcc $1e80			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e79	85 14		sta $14				sta 	temp1+1 					; save result back
.1e7b	68		pla				pla
.1e7c	85 13		sta $13				sta 	temp1
.1e7e	80 e6		bra $1e66			bra 	_CTSSubLoop
.1e80					_CTSCantSubtract:
.1e80	68		pla				pla 								; throw away interim
.1e81	e8		inx				inx 								; next subtractor
.1e82	e8		inx				inx
.1e83	b1 15		lda ($15),y			lda 	(temp2),y 					; update leading zero
.1e85	49 30		eor #$30			eor 	#"0"
.1e87	05 1d		ora $1d				ora 	SignCount
.1e89	85 1d		sta $1d				sta 	SignCount
.1e8b	f0 01		beq $1e8e			beq		_CTSLZ 						; if all zeros so far suppress.
.1e8d	c8		iny				iny 								; next character
.1e8e					_CTSLZ:
.1e8e	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1e90	d0 d0		bne $1e62			bne 	_CTSLoop
.1e92					_CTSComplete:
.1e92	a5 13		lda $13				lda		temp1 						; get remainder 0-9
.1e94	09 30		ora #$30			ora 	#48 						; ASCII
.1e96	91 15		sta ($15),y			sta 	(temp2),y					; write out
.1e98	c8		iny				iny
.1e99	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e9b	91 15		sta ($15),y			sta 	(temp2),y
.1e9d	98		tya				tya 								; size in A
.1e9e	7a		ply				ply									; pull and exit.
.1e9f	fa		plx				plx
.1ea0	60		rts				rts
.1ea1					_CTSTable:
>1ea1	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1ea9					_CTSTableEnd:

;******  Return to file: files.asm


;******  Processing file: words/system/varhandlers.src

.1ea9					VarAddressHandler:
.1ea9	18		clc				clc 								; find variable, error if it doesn't exist.
.1eaa	20 4c 1f	jsr $1f4c			jsr 	VariableFind
.1ead	20 26 1f	jsr $1f26			jsr 	VariableCheckIndex
.1eb0	a5 09		lda $09				lda 	TOS
.1eb2	48		pha				pha
.1eb3	a5 0a		lda $0a				lda 	TOS+1
.1eb5	48		pha				pha
.1eb6	a5 13		lda $13				lda 	temp1 						; the address is the new value
.1eb8	85 09		sta $09				sta 	TOS
.1eba	a5 14		lda $14				lda		temp1+1
.1ebc	85 0a		sta $0a				sta 	TOS+1
.1ebe	4c 00 00	jmp $0000			jmp 	NextCode
.1ec1					VarAddrHandlerDecode:
.1ec1	a9 26		lda #$26			lda 	#"&"
.1ec3	4c 04 20	jmp $2004			jmp 	VarHandlerDecode
.1ec6					VarReadHandler:
.1ec6	18		clc				clc 								; find variable, error if it doesn't exist.
.1ec7	20 4c 1f	jsr $1f4c			jsr 	VariableFind
.1eca	20 26 1f	jsr $1f26			jsr 	VariableCheckIndex
.1ecd	a5 09		lda $09				lda 	TOS
.1ecf	48		pha				pha
.1ed0	a5 0a		lda $0a				lda 	TOS+1
.1ed2	48		pha				pha
.1ed3	b2 13		lda ($13)			lda 	(temp1)						; read variable address to TOS
.1ed5	85 09		sta $09				sta 	TOS
.1ed7	a0 01		ldy #$01			ldy 	#1
.1ed9	b1 13		lda ($13),y			lda 	(temp1),y
.1edb	85 0a		sta $0a				sta 	TOS+1
.1edd	4c 00 00	jmp $0000			jmp 	NextCode
.1ee0					VarReadHandlerDecode:
.1ee0	a9 40		lda #$40			lda 	#"@"
.1ee2	4c 04 20	jmp $2004			jmp 	VarHandlerDecode
.1ee5					VarWriteHandler:
.1ee5	38		sec				sec 								; find variable, create it if it doesn't exist.
.1ee6	20 4c 1f	jsr $1f4c			jsr 	VariableFind
.1ee9	20 26 1f	jsr $1f26			jsr 	VariableCheckIndex
.1eec	a5 09		lda $09				lda 	TOS 						; write TOS to that address.
.1eee	92 13		sta ($13)			sta 	(temp1)
.1ef0	a5 0a		lda $0a				lda 	TOS+1
.1ef2	a0 01		ldy #$01			ldy 	#1
.1ef4	91 13		sta ($13),y			sta 	(temp1),y
.1ef6	68		pla				pla
.1ef7	85 0a		sta $0a				sta 	TOS+1
.1ef9	68		pla				pla
.1efa	85 09		sta $09				sta 	TOS
.1efc	4c 00 00	jmp $0000			jmp 	NextCode
.1eff					VarWriteHandlerDecode:
.1eff	a9 21		lda #$21			lda 	#"!"
.1f01	4c 04 20	jmp $2004			jmp 	VarHandlerDecode
.1f04					IndexHandler:
.1f04	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1f07	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>1f0f	42 55 47 00
.1f13					IndexHandlerDecode:
.1f13	a9 5b		lda #$5b			lda 	#"["
.1f15	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1f18	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1f1a	a0 00		ldy #$00			ldy 	#0
.1f1c	38		sec				sec
.1f1d	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.1f20	a9 5d		lda #$5d			lda 	#"]"
.1f22	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1f25	60		rts				rts
.1f26					VariableCheckIndex:
.1f26	8a		txa				txa 								; next is $$index ?
.1f27	a8		tay				tay
.1f28	c8		iny				iny
.1f29	c8		iny				iny
.1f2a	b1 03		lda ($03),y			lda 	(IP),y
.1f2c	c9 04		cmp #$04			cmp 	#IndexHandler & $FF
.1f2e	d0 1b		bne $1f4b			bne 	_VCIExit
.1f30	c8		iny				iny
.1f31	b1 03		lda ($03),y			lda 	(IP),y
.1f33	c9 1f		cmp #$1f			cmp 	#IndexHandler >> 8
.1f35	d0 14		bne $1f4b			bne 	_VCIExit
.1f37	98		tya				tya 								; fix X backup 3 on from where we started
.1f38	aa		tax				tax
.1f39	c8		iny				iny 								; get the index
.1f3a	b1 03		lda ($03),y			lda 	(IP),y
.1f3c	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.1f3d	a0 01		ldy #$01			ldy 	#1
.1f3f	72 13		adc ($13)			adc 	(temp1) 					; do the indirection e.g. the look up.
.1f41	48		pha				pha
.1f42	b1 13		lda ($13),y			lda 	(temp1),y
.1f44	69 00		adc #$00			adc 	#0
.1f46	85 14		sta $14				sta 	temp1+1
.1f48	68		pla				pla
.1f49	85 13		sta $13				sta 	temp1
.1f4b					_VCIExit:
.1f4b	60		rts				rts
.1f4c					VariableFind:
.1f4c	08		php				php 								; save autocreate flag.
.1f4d	e8		inx				inx 								; advance to/over the variable name.
.1f4e	e8		inx				inx
.1f4f	8a		txa				txa 								; put in Y
.1f50	a8		tay				tay
.1f51	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1f53	85 15		sta $15				sta 	temp2
.1f55	c8		iny				iny
.1f56	b1 03		lda ($03),y			lda 	(IP),y
.1f58	85 16		sta $16				sta 	temp2+1
.1f5a	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1f5c	b0 0f		bcs $1f6d			bcs 	_VFLong
.1f5e	a5 16		lda $16				lda 	temp2+1
.1f60	d0 0b		bne $1f6d			bne 	_VFLong
.1f62	a5 15		lda $15				lda 	temp2						; this is the index
.1f64	0a		asl a				asl 	a 							; double it
.1f65	85 13		sta $13				sta 	temp1
.1f67	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1f69	85 14		sta $14				sta 	temp1+1
.1f6b	28		plp				plp 								; throw creation flag, it always exists.
.1f6c	60		rts				rts
.1f6d					_VFLong:
.1f6d	a5 15		lda $15				lda 	temp2 						; built a hash table index into temp3/temp4
.1f6f	6a		ror a				ror 	a
.1f70	6a		ror a				ror 	a
.1f71	6a		ror a				ror 	a
.1f72	6a		ror a				ror 	a
.1f73	45 15		eor $15				eor 	temp2
.1f75	45 16		eor $16				eor 	temp2+1
.1f77	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1f79	0a		asl a				asl 	a
.1f7a	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1f7c	85 13		sta $13				sta 	temp1
.1f7e	85 17		sta $17				sta 	temp3
.1f80	a9 06		lda #$06			lda 	#hashTable >> 8
.1f82	85 14		sta $14				sta 	temp1+1
.1f84	85 18		sta $18				sta 	temp3+1
.1f86					_VFSearch:
.1f86	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1f88	b1 13		lda ($13),y			lda 	(temp1),y
.1f8a	f0 23		beq $1faf			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1f8c	a8		tay				tay 								; follow the link through.
.1f8d	b2 13		lda ($13)			lda 	(temp1)
.1f8f	85 13		sta $13				sta 	temp1
.1f91	84 14		sty $14				sty 	temp1+1
.1f93	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1f95	b1 13		lda ($13),y			lda 	(temp1),y
.1f97	c5 15		cmp $15				cmp 	temp2
.1f99	d0 eb		bne $1f86			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f9b	c8		iny				iny 								; same for 2nd byte of name
.1f9c	b1 13		lda ($13),y			lda 	(temp1),y
.1f9e	c5 16		cmp $16				cmp 	temp2+1
.1fa0	d0 e4		bne $1f86			bne 	_VFSearch
.1fa2	18		clc				clc
.1fa3	a5 13		lda $13				lda 	temp1 						; make temp1 point to the data at offset 2
.1fa5	69 02		adc #$02			adc 	#2
.1fa7	85 13		sta $13				sta 	temp1
.1fa9	90 02		bcc $1fad			bcc 	_VFNoPage1
.1fab	e6 14		inc $14				inc 	temp1+1
.1fad					_VFNoPage1:
.1fad	28		plp				plp 								; don't need to worry about creation flag
.1fae	60		rts				rts
.1faf					_VFNotFound:
.1faf	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1fb0	b0 14		bcs $1fc6			bcs 	_VFCreate
.1fb2	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>1fb5	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>1fbd	56 41 52 49 41 42 4c 45 00
.1fc6					_VFCreate:
.1fc6	a0 01		ldy #$01			ldy 	#1
.1fc8	b2 17		lda ($17)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1fca	92 11		sta ($11)			sta 	(nextFreeMem)
.1fcc	b1 17		lda ($17),y			lda 	(temp3),y
.1fce	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fd0	c8		iny				iny
.1fd1	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1fd3	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fd5	c8		iny				iny
.1fd6	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fd8	c8		iny				iny
.1fd9	a5 15		lda $15				lda 	temp2 						; copy the name out
.1fdb	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fdd	c8		iny				iny
.1fde	a5 16		lda $16				lda 	temp2+1
.1fe0	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fe2	a0 01		ldy #$01			ldy 	#1
.1fe4	a5 11		lda $11				lda 	nextFreeMem 				; update the head link
.1fe6	92 17		sta ($17)			sta 	(temp3)
.1fe8	a5 12		lda $12				lda 	nextFreeMem+1
.1fea	91 17		sta ($17),y			sta 	(temp3),y
.1fec	18		clc				clc
.1fed	a5 11		lda $11				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1fef	69 02		adc #$02			adc 	#2
.1ff1	85 13		sta $13				sta 	temp1
.1ff3	a5 12		lda $12				lda 	nextFreeMem+1
.1ff5	69 00		adc #$00			adc 	#0
.1ff7	85 14		sta $14				sta 	temp1+1
.1ff9	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1ffb	a0 00		ldy #$00			ldy 	#0
.1ffd	20 92 18	jsr $1892			jsr 	AdvanceFreeMem
.2000	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.2003	60		rts				rts
.2004					VarHandlerDecode:
.2004	48		pha				pha 								; save, leading space
.2005	a9 07		lda #$07			lda 	#CTH_Variable
.2007	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.200a	68		pla				pla 								; restore and write type
.200b	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.200e	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy to temp1
.2010	85 13		sta $13				sta 	temp1
.2012	c8		iny				iny
.2013	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2015	85 14		sta $14				sta 	temp1+1
.2017	a5 13		lda $13				lda 	temp1 						; output the first character
.2019	29 1f		and #$1f			and 	#31
.201b	20 46 20	jsr $2046			jsr 	VHOutVarChar
.201e	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.2020					_VHDShift:
.2020	46 14		lsr $14				lsr 	temp1+1
.2022	66 13		ror $13				ror 	temp1
.2024	ca		dex				dex
.2025	d0 f9		bne $2020			bne 	_VHDShift
.2027	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.2029					_VHDDiv40:
.2029	e8		inx				inx
.202a	38		sec				sec
.202b	a5 13		lda $13				lda 	temp1
.202d	e9 28		sbc #$28			sbc 	#40
.202f	a8		tay				tay
.2030	a5 14		lda $14				lda 	temp1+1
.2032	e9 00		sbc #$00			sbc 	#0
.2034	90 06		bcc $203c			bcc 	_VHDivDone
.2036	85 14		sta $14				sta 	temp1+1
.2038	84 13		sty $13				sty 	temp1
.203a	80 ed		bra $2029			bra 	_VHDDiv40
.203c					_VHDivDone:
.203c	a5 13		lda $13				lda 	temp1 						; remainder
.203e	20 46 20	jsr $2046			jsr 	VHOutVarChar
.2041	8a		txa				txa
.2042	20 46 20	jsr $2046			jsr 	VHOutVarChar 				; and result.
.2045	60		rts				rts
.2046					VHOutVarChar:
.2046	c9 00		cmp #$00			cmp 	#0
.2048	f0 0c		beq $2056			beq 	_VHOExit
.204a	18		clc				clc
.204b	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.204d	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.204f	90 02		bcc $2053			bcc 	_VHOOut
.2051	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.2053					_VHOOut:
.2053	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.2056					_VHOExit:
.2056	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encode.src

.2057					EncodeProgram:
.2057	48		pha				pha 								; save registers.
.2058	da		phx				phx
.2059	5a		phy				phy
.205a	84 0c		sty $0c				sty 	srcPtr+1					; save source pointer.
.205c	85 0b		sta $0b				sta		srcPtr
.205e	64 08		stz $08				stz 	rsp
.2060	a6 08		ldx $08				ldx 	rsp 						; this is the current stack entry type, so $00 means
.2062	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.2065	20 e4 22	jsr $22e4			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.2068	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.206a	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.206d	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.2070	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.2073	b2 0b		lda ($0b)			lda 	(srcPtr) 					; check if first character is digit
.2075	20 8f 22	jsr $228f			jsr 	CheckIsDigit
.2078	90 09		bcc $2083			bcc 	_EPNoLineNumber 			; if so there is a line number
.207a	20 b1 22	jsr $22b1			jsr 	EncodeGetConstant 			; extract that constant from the source
.207d	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.2080	8c 12 09	sty $0912			sty 	encodeBuffer+2
.2083					_EPNoLineNumber:
.2083					EncodeLoop:
.2083	20 d6 22	jsr $22d6			jsr 	EncSkipSpaces 				; skip over spaces
.2086	b2 0b		lda ($0b)			lda 	(srcPtr) 					; reached end ?
.2088	d0 21		bne $20ab			bne 	_EPNotEnd
.208a					_EPEndEncode:
.208a	a9 05		lda #$05			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.208c	a0 1d		ldy #$1d			ldy 	#NextLine >> 8
.208e	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.2091	a5 08		lda $08				lda 	rsp 						; is the return stack empty ?
.2093	d0 04		bne $2099			bne 	_EPIncomplete
.2095	7a		ply				ply									; restore and exit.
.2096	fa		plx				plx
.2097	68		pla				pla
.2098	60		rts				rts
.2099					_EPIncomplete:
.2099	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>209c	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>20a4	45 20 4f 50 45 4e 00
.20ab					_EPNotEnd:
.20ab	b2 0b		lda ($0b)			lda 	(srcPtr)
.20ad	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.20af	f0 04		beq $20b5			beq 	_EPIsComStr
.20b1	c9 27		cmp #$27			cmp 	#"'"
.20b3	d0 05		bne $20ba			bne 	_EPNotComStr
.20b5					_EPIsComStr:
.20b5	20 b4 21	jsr $21b4			jsr 	EncodeCommentString
.20b8	80 c9		bra $2083			bra 	EncodeLoop
.20ba					_EPNotComStr:
.20ba	38		sec				sec
.20bb	20 c3 22	jsr $22c3			jsr 	EncSetBit7Word
.20be	20 0b 23	jsr $230b			jsr 	EncodeSearchDictionary		; look it up
.20c1	90 45		bcc $2108			bcc 	_EPNotInDictionary
.20c3	85 13		sta $13				sta 	temp1 						; save dictionary record address
.20c5	84 14		sty $14				sty 	temp1+1
.20c7	a0 01		ldy #$01			ldy 	#1
.20c9	b1 13		lda ($13),y			lda 	(temp1),y 					; check if has an encode bit
.20cb	29 20		and #$20			and 	#$20
.20cd	d0 12		bne $20e1			bne 	_EPEncodeRoutine 			; if so, do special routine.
.20cf	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.20d1	b1 13		lda ($13),y			lda 	(temp1),y
.20d3	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.20d6	c8		iny				iny
.20d7	b1 13		lda ($13),y			lda 	(temp1),y
.20d9	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.20dc	20 9b 22	jsr $229b			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20df	80 a2		bra $2083			bra 	EncodeLoop
.20e1					_EPEncodeRoutine:
.20e1	a0 01		ldy #$01			ldy 	#1							; get type bit
.20e3	b1 13		lda ($13),y			lda 	(temp1),y
.20e5	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.20e7	29 10		and #$10			and 	#$10 						; but decoder comes first
.20e9	f0 02		beq $20ed			beq 	_EPENoDecoder
.20eb	c8		iny				iny 								; so if it exists, adjust for it.
.20ec	c8		iny				iny
.20ed					_EPENoDecoder:
.20ed	b1 13		lda ($13),y			lda 	(temp1),y 					; copy exec addr to temp2
.20ef	85 15		sta $15				sta 	temp2
.20f1	c8		iny				iny
.20f2	b1 13		lda ($13),y			lda 	(temp1),y
.20f4	85 16		sta $16				sta 	temp2+1
.20f6	48		pha				pha 								; call routine preserving state
.20f7	da		phx				phx
.20f8	5a		phy				phy
.20f9	20 05 21	jsr $2105			jsr 	_EPECallTemp2
.20fc	7a		ply				ply
.20fd	fa		plx				plx
.20fe	68		pla				pla
.20ff	20 9b 22	jsr $229b			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2102	4c 83 20	jmp $2083			jmp 	EncodeLoop
.2105					_EPECallTemp2:
.2105	6c 15 00	jmp ($0015)			jmp 	(temp2)
.2108					_EPNotInDictionary:
.2108	20 19 22	jsr $2219			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.210b	90 19		bcc $2126			bcc 	_EPNotDefined
.210d	48		pha				pha
.210e	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.2110	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.2113	a9 16		lda #$16			lda	 	#CallHandler >> 8
.2115	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.2118	68		pla				pla 								; write line number
.2119	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.211c	98		tya				tya
.211d	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.2120	20 9b 22	jsr $229b			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2123	4c 83 20	jmp $2083			jmp 	EncodeLoop
.2126					_EPNotDefined:
.2126	b2 0b		lda ($0b)			lda 	(srcPtr) 					; first character
.2128	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.212a	f0 65		beq $2191			beq 	_EPDefinition
.212c	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.212e	f0 3b		beq $216b			beq 	_EPCallDirect
.2130	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.2132	f0 54		beq $2188			beq 	_EPVariable
.2134	c9 40		cmp #$40			cmp 	#"@"
.2136	f0 50		beq $2188			beq 	_EPVariable
.2138	c9 26		cmp #$26			cmp 	#"&"
.213a	f0 4c		beq $2188			beq 	_EPVariable
.213c	c9 24		cmp #$24			cmp 	#"$" 						; is it a hex constant
.213e	d0 09		bne $2149			bne 	_EPDecLiteral
.2140	a9 6c		lda #$6c			lda 	#HexLiteral2Byte & $FF 		; write out 2 byte literal (hex)
.2142	a0 10		ldy #$10			ldy 	#HexLiteral2Byte >> 8
.2144	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.2147	80 07		bra $2150			bra 	_EPOutputConstant
.2149					_EPDecLiteral:
.2149	a9 6d		lda #$6d			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.214b	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.214d	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.2150					_EPOutputConstant:
.2150	20 b1 22	jsr $22b1			jsr 	EncodeGetConstant 			; extract that constant from the source
.2153	90 06		bcc $215b			bcc 	_EPFail 					; if can't find one, that's us done.
.2155	20 67 22	jsr $2267			jsr 	EncodeWriteWord 			; write out the encoded value.
.2158	4c 83 20	jmp $2083			jmp 	EncodeLoop 					; and go round again.
.215b					_EPFail:
.215b	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>215e	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>2166	52 52 4f 52 00
.216b					_EPCallDirect:
.216b	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.216d	a0 16		ldy #$16			ldy	 	#CallHandler >> 8
.216f	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.2172	a9 01		lda #$01			lda 	#1
.2174	20 a7 22	jsr $22a7			jsr 	EncodeAddSrcPtr 			; skip over the <
.2177	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.2179					_EPToLast:
.2179	c8		iny				iny
.217a	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.217c	10 fb		bpl $2179			bpl	 	_EPToLast
.217e	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.2180	d0 d9		bne $215b			bne 	_EPFail
.2182	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.2184	91 0b		sta ($0b),y			sta 	(srcPtr),y
.2186	80 c8		bra $2150			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.2188					_EPVariable:
.2188	20 5f 23	jsr $235f			jsr 	EncodeVariableReference
.218b	20 9b 22	jsr $229b			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.218e	4c 83 20	jmp $2083			jmp 	EncodeLoop
.2191					_EPDefinition:
.2191	a9 47		lda #$47			lda	 	#DefineCode & $FF 			; write code call handler
.2193	a0 1d		ldy #$1d			ldy	 	#DefineCode >> 8
.2195	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.2198	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.219b	a9 01		lda #$01			lda 	#1 							; write default size
.219d	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.21a0	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.21a2	c8		iny		_EPCopy:iny
.21a3	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.21a5	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.21a8	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.21ab	0a		asl a				asl 	a
.21ac	90 f4		bcc $21a2			bcc 	_EPCopy
.21ae	20 9b 22	jsr $229b			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.21b1	4c 83 20	jmp $2083			jmp 	EncodeLoop

;******  Return to file: files.asm


;******  Processing file: words/encode/comstr.src

.21b4					EncodeCommentString:
.21b4	b2 0b		lda ($0b)			lda 	(srcPtr) 					; get first character
.21b6	64 13		stz $13				stz 	temp1 						; other terminator = EOL
.21b8	aa		tax				tax 								; save in X
.21b9	a9 1c		lda #$1c			lda 	#(SkipComment & $FF)		; get the routine to use
.21bb	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.21bd	e0 27		cpx #$27			cpx 	#"'"
.21bf	f0 06		beq $21c7			beq 	_ECSGotCmd
.21c1	86 13		stx $13				stx		temp1 						; other terminator = "
.21c3	a9 c7		lda #$c7			lda 	#(LiteralString & $FF)
.21c5	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.21c7					_ECSGotCmd:
.21c7	20 67 22	jsr $2267			jsr 	EncodeWriteWord 			; write word out.
.21ca	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.21cc	20 a7 22	jsr $22a7			jsr 	EncodeAddSrcPtr
.21cf	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.21d1	d0 03		bne $21d6			bne 	_ECNoSkipSpaces
.21d3	20 d6 22	jsr $22d6			jsr 	EncSkipSpaces
.21d6					_ECNoSkipSpaces:
.21d6	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.21d9	a9 01		lda #$01			lda 	#1
.21db	20 71 22	jsr $2271			jsr 	EncodeWriteByte 			; write total length, so far 1.
.21de	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.21e0					_ECSCopyText:
.21e0	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get next
.21e2	f0 18		beq $21fc			beq 	_ECSEndOfLine 				; end of line ?
.21e4	c5 13		cmp $13				cmp 	temp1						; is it the other terminator
.21e6	f0 09		beq $21f1			beq 	_ECSEndOfString 			; if so must be closing quote.
.21e8	20 71 22	jsr $2271			jsr 	EncodeWriteByte 			; write the byte out
.21eb	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.21ee	c8		iny				iny 								; next character
.21ef	80 ef		bra $21e0			bra 	_ECSCopyText
.21f1					_ECSEndOfString:
.21f1	c8		iny				iny 								; skip closing quote.
.21f2	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.21f4	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.21f7	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.21fa	80 18		bra $2214			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.21fc					_ECSEndOfLine:
.21fc	a5 13		lda $13				lda 	temp1 						; missing closing quote
.21fe	f0 14		beq $2214			beq 	_ECSComplete 				; if we were doing a string.
.2200	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>2203	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>220b	4e 47 20 51 55 4f 54 45 00
.2214					_ECSComplete:
.2214	98		tya				tya									; skip over.
.2215	20 a7 22	jsr $22a7			jsr 	EncodeAddSrcPtr
.2218	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encdef.src

.2219					EncodeSearchUserDefined:
.2219	38		sec				sec 								; temp1 = srcPtr-6 because the
.221a	a5 0b		lda $0b				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.221c	e9 06		sbc #$06			sbc		#6
.221e	85 13		sta $13				sta 	temp1
.2220	a5 0c		lda $0c				lda 	srcPtr+1
.2222	e9 00		sbc #$00			sbc 	#0
.2224	85 14		sta $14				sta 	temp1+1
.2226	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.2228	85 15		sta $15				sta 	0+(temp2)
.222a	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.222c	85 16		sta $16				sta 	1+(temp2)
.222e					_ESULoop:
.222e	b2 15		lda ($15)			lda 	(temp2) 					; reached the end (offset 0)
.2230	f0 33		beq $2265			beq 	_ESUFail
.2232	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.2234	b1 15		lda ($15),y			lda 	(temp2),y
.2236	c9 47		cmp #$47			cmp 	#DefineCode & $FF
.2238	d0 1e		bne $2258			bne 	_ESUNext
.223a	c8		iny				iny
.223b	b1 15		lda ($15),y			lda 	(temp2),y
.223d	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.223f	d0 17		bne $2258			bne 	_ESUNext
.2241	c8		iny				iny 								; skip length byte.
.2242					_ESUCompare:
.2242	c8		iny				iny
.2243	b1 15		lda ($15),y			lda 	(temp2),y
.2245	d1 13		cmp ($13),y			cmp 	(temp1),y
.2247	d0 0f		bne $2258			bne 	_ESUNext
.2249	0a		asl a				asl 	a 							; bit 7 set => found it.
.224a	90 f6		bcc $2242			bcc 	_ESUCompare
.224c	a0 01		ldy #$01			ldy 	#1
.224e	b1 15		lda ($15),y			lda 	(temp2),y 					; read in the line number to YA
.2250	aa		tax				tax
.2251	c8		iny				iny
.2252	b1 15		lda ($15),y			lda 	(temp2),y
.2254	a8		tay				tay
.2255	8a		txa				txa
.2256	38		sec				sec 								; return with carry set as found
.2257	60		rts				rts
.2258					_ESUNext:
.2258	18		clc				clc
.2259	a5 15		lda $15				lda 	temp2
.225b	72 15		adc ($15)			adc 	(temp2)
.225d	85 15		sta $15				sta 	temp2
.225f	90 02		bcc $2263			bcc 	_NoCarryAdv
.2261	e6 16		inc $16				inc 	temp2+1
.2263					_NoCarryAdv:
.2263	80 c9		bra $222e			bra 	_ESULoop 					; and loop round
.2265					_ESUFail:
.2265	18		clc				clc
.2266	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encutils.src

.2267					EncodeWriteWord:
.2267	48		pha				pha
.2268	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.226b	98		tya				tya
.226c	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.226f	68		pla				pla
.2270	60		rts				rts
.2271					EncodeWriteByte:
.2271	da		phx				phx
.2272	ae 10 09	ldx $0910			ldx 	encodeBuffer
.2275	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.2278	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.227b	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.227e	ee 10 09	inc $0910			inc 	encodeBuffer
.2281	fa		plx				plx
.2282	60		rts				rts
.2283					CheckIsLetter:
.2283	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.2285	90 06		bcc $228d			bcc 	_CILFail
.2287	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2289	b0 02		bcs $228d			bcs 	_CILFail
.228b	38		sec				sec
.228c	60		rts				rts
.228d					_CILFail:
.228d	18		clc				clc
.228e	60		rts				rts
.228f					CheckIsDigit:
.228f	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.2291	90 06		bcc $2299			bcc 	_CIDFail
.2293	c9 3a		cmp #$3a			cmp 	#"9"+1
.2295	b0 02		bcs $2299			bcs 	_CIDFail
.2297	38		sec				sec
.2298	60		rts				rts
.2299					_CIDFail:
.2299	18		clc				clc
.229a	60		rts				rts
.229b					EncodeMoveNextWord:
.229b	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.229d					_EPNWLoop:
.229d	c8		iny				iny
.229e	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22a0	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.22a2	b0 f9		bcs $229d			bcs 	_EPNWLoop
.22a4	98		tya				tya
.22a5	80 00		bra $22a7			bra 	EncodeAddSrcPtr
.22a7					EncodeAddSrcPtr:
.22a7	18		clc				clc 								; add offset
.22a8	65 0b		adc $0b				adc 	srcPtr
.22aa	85 0b		sta $0b				sta 	srcPtr
.22ac	90 02		bcc $22b0			bcc 	_EASPNoCarry
.22ae	e6 0c		inc $0c				inc 	srcPtr+1					; carry through
.22b0					_EASPNoCarry:
.22b0	60		rts				rts
.22b1					EncodeGetConstant:
.22b1	a5 0b		lda $0b				lda 	srcPtr 						; get source
.22b3	a4 0c		ldy $0c				ldy 	srcPtr+1
.22b5	20 70 1d	jsr $1d70			jsr 	ConvertToInteger 			; call converter
.22b8	90 08		bcc $22c2			bcc 	_EGCExit
.22ba	20 a7 22	jsr $22a7			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.22bd	a5 17		lda $17				lda 	temp3 						; get result into YA
.22bf	a4 18		ldy $18				ldy 	temp3+1
.22c1	38		sec				sec 								; return CS
.22c2					_EGCExit:
.22c2	60		rts				rts
.22c3					EncSetBit7Word:
.22c3	08		php				php 								; save carry
.22c4	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.22c6					_ESB7Loop:
.22c6	c8		iny				iny
.22c7	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22c9	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.22cb	b0 f9		bcs $22c6			bcs 	_ESB7Loop
.22cd	88		dey				dey									; previous character
.22ce	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; read it
.22d0	0a		asl a				asl 	a 							; shift bit 7 out
.22d1	28		plp				plp 								; restore carry
.22d2	6a		ror a				ror 	a 							; shift it in
.22d3	91 0b		sta ($0b),y			sta 	(srcPtr),y 					; write back and exit
.22d5	60		rts				rts
.22d6					EncSkipSpaces:
.22d6	b2 0b		lda ($0b)			lda 	(srcPtr) 					; skip over spaces/ reached end
.22d8	c9 20		cmp #$20			cmp 	#32
.22da	d0 07		bne $22e3			bne 	_ESNotSpace
.22dc	a9 01		lda #$01			lda 	#1
.22de	20 a7 22	jsr $22a7			jsr 	EncodeAddSrcPtr
.22e1	80 f3		bra $22d6			bra	 	EncSkipSpaces
.22e3					_ESNotSpace:
.22e3	60		rts				rts
.22e4					EncodeTrimTrailingSpaces:
.22e4	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.22e6					_ETTFindEnd:
.22e6	c8		iny				iny
.22e7	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22e9	d0 fb		bne $22e6			bne 	_ETTFindEnd
.22eb					_ETTRemoveSpace:
.22eb	c0 00		cpy #$00			cpy 	#0 							; start of string
.22ed	f0 0d		beq $22fc			beq 	_ETTExit
.22ef	88		dey				dey 								; previous character 1..32
.22f0	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22f2	c9 21		cmp #$21			cmp 	#32+1
.22f4	b0 06		bcs $22fc			bcs 	_ETTExit
.22f6	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.22f8	91 0b		sta ($0b),y			sta 	(srcPtr),y
.22fa	80 ef		bra $22eb			bra 	_ETTRemoveSpace
.22fc					_ETTExit:
.22fc	60		rts				rts
.22fd					EncodePushPosMarkerOnStack:
.22fd	e6 08		inc $08				inc 	rsp 						; make space on rstack
.22ff	a6 08		ldx $08				ldx 	rsp							; access it
.2301	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.2304	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.2307	9d 80 07	sta $0780,x			sta 	returnStackX,x
.230a	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encsearch.src

.230b					EncodeSearchDictionary:
.230b	a9 0a		lda #$0a			lda 	#(Dictionary) & $FF
.230d	85 13		sta $13				sta 	0+(temp1)
.230f	a9 26		lda #$26			lda 	#(Dictionary) >> 8
.2311	85 14		sta $14				sta 	1+(temp1)
.2313					_ESDLoop:
.2313	b2 13		lda ($13)			lda 	(temp1) 					; end of dictionary return with CC.
.2315	18		clc				clc
.2316	f0 46		beq $235e			beq 	_ESDExit
.2318	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.231a	b1 13		lda ($13),y			lda 	(temp1),y
.231c	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.231d	4a		lsr a				lsr 	a
.231e	4a		lsr a				lsr 	a
.231f	4a		lsr a				lsr 	a
.2320	c8		iny				iny 								; Y = 2
.2321	4a		lsr a				lsr 	a
.2322	90 01		bcc $2325			bcc 	_ESDNotDec
.2324	c8		iny				iny
.2325					_ESDNotDec:
.2325	4a		lsr a				lsr 	a
.2326	90 01		bcc $2329			bcc 	_ESDNotInc
.2328	c8		iny				iny
.2329					_ESDNotInc:
.2329	98		tya				tya
.232a	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.232b	a8		tay				tay
.232c	b1 13		lda ($13),y			lda 	(temp1),y 					; quick check of first character
.232e	d2 0b		cmp ($0b)			cmp 	(srcPtr)
.2330	d0 1f		bne $2351			bne 	_ESDNext 					; do not match, go to next
.2332	98		tya				tya 								; make temp2 point to the name in
.2333	18		clc				clc 								; the dictionary.
.2334	65 13		adc $13				adc 	temp1
.2336	85 15		sta $15				sta 	temp2
.2338	a5 14		lda $14				lda 	temp1+1
.233a	69 00		adc #$00			adc 	#0
.233c	85 16		sta $16				sta 	temp2+1
.233e	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.2340					_ESDCompare:
.2340	c8		iny				iny
.2341	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2343	d1 15		cmp ($15),y			cmp 	(temp2),y
.2345	d0 0a		bne $2351			bne 	_ESDNext
.2347	0a		asl a				asl 	a
.2348	90 f6		bcc $2340			bcc 	_ESDCompare
.234a	a5 13		lda $13				lda 	temp1 						; return address in YA and carry set.
.234c	a4 14		ldy $14				ldy 	temp1+1
.234e	38		sec				sec
.234f	80 0d		bra $235e			bra 	_ESDExit
.2351					_ESDNext:
.2351	18		clc				clc
.2352	a5 13		lda $13				lda 	temp1
.2354	72 13		adc ($13)			adc 	(temp1)
.2356	85 13		sta $13				sta 	temp1
.2358	90 b9		bcc $2313			bcc 	_ESDLoop
.235a	e6 14		inc $14				inc 	temp1+1
.235c	80 b5		bra $2313			bra 	_ESDLoop
.235e					_ESDExit:
.235e	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encvar.src

.235f					EncodeVariableReference:
.235f	b2 0b		lda ($0b)			lda 	(srcPtr)					; get the type, use it to identify the routine
.2361	a2 a9		ldx #$a9			ldx 	#VarAddressHandler & $FF
.2363	a0 1e		ldy #$1e			ldy 	#VarAddressHandler >> 8
.2365	c9 26		cmp #$26			cmp 	#"&"
.2367	f0 0c		beq $2375			beq 	_EVFHaveAddress
.2369	a2 c6		ldx #$c6			ldx 	#VarReadHandler & $FF
.236b	a0 1e		ldy #$1e			ldy 	#VarReadHandler >> 8
.236d	c9 40		cmp #$40			cmp 	#"@"
.236f	f0 04		beq $2375			beq 	_EVFHaveAddress
.2371	a2 e5		ldx #$e5			ldx 	#VarWriteHandler & $FF
.2373	a0 1e		ldy #$1e			ldy 	#VarWriteHandler >> 8
.2375					_EVFHaveAddress:
.2375	8a		txa				txa
.2376	20 67 22	jsr $2267			jsr 	EncodeWriteWord 			; write it out.
.2379	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.237b	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.237d	29 7f		and #$7f			and 	#$7F 						; might be the last.
.237f	20 83 22	jsr $2283			jsr 	CheckIsLetter 				; is it A-Z
.2382	90 54		bcc $23d8			bcc 	EVFFail
.2384	29 1f		and #$1f			and 	#31 						; make 1-26
.2386	85 13		sta $13				sta 	temp1 						; start building the name in temp1
.2388	64 14		stz $14				stz 	temp1+1
.238a	38		sec				sec 								; possible char 2
.238b	20 ed 23	jsr $23ed			jsr 	EncVarAlNum
.238e	18		clc				clc 								; possible char 3
.238f	20 ed 23	jsr $23ed			jsr 	EncVarAlNum
.2392	5a		phy				phy
.2393	a5 13		lda $13				lda 	temp1 						; write out variable identifier.
.2395	a4 14		ldy $14				ldy 	temp1+1
.2397	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.239a	7a		ply				ply
.239b	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; more text after ?
.239d	10 01		bpl $23a0			bpl 	_EVFCheckArray
.239f	60		rts				rts
.23a0					_EVFCheckArray:
.23a0	c8		iny				iny 								; get the next character
.23a1	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23a3	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.23a5	d0 31		bne $23d8			bne 	EVFFail
.23a7	64 13		stz $13				stz 	temp1 						; zero temp1.
.23a9	c8		iny				iny  								; point to index
.23aa					_EVFGetIndex:
.23aa	06 13		asl $13				asl 	temp1 						; temp1 x 10
.23ac	a5 13		lda $13				lda 	temp1
.23ae	0a		asl a				asl 	a
.23af	0a		asl a				asl		a
.23b0	65 13		adc $13				adc 	temp1
.23b2	85 13		sta $13				sta 	temp1
.23b4	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get the digit
.23b6	20 8f 22	jsr $228f			jsr 	CheckIsDigit
.23b9	90 1d		bcc $23d8			bcc 	EVFFail 					; failed, not digit
.23bb	29 0f		and #$0f			and 	#15
.23bd	18		clc				clc
.23be	65 13		adc $13				adc 	temp1
.23c0	30 16		bmi $23d8			bmi 	EVFFail 					; failed, bad index.
.23c2	85 13		sta $13				sta 	temp1
.23c4	c8		iny				iny
.23c5	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23c7	c9 dd		cmp #$dd			cmp 	#"]"+$80
.23c9	d0 df		bne $23aa			bne 	_EVFGetIndex 				; index now in temp1.
.23cb	a9 04		lda #$04			lda 	#IndexHandler & $FF 		; output code
.23cd	a0 1f		ldy #$1f			ldy 	#IndexHandler >> 8
.23cf	20 67 22	jsr $2267			jsr 	EncodeWriteWord
.23d2	a5 13		lda $13				lda 	temp1	 					; write index
.23d4	20 71 22	jsr $2271			jsr 	EncodeWriteByte
.23d7	60		rts				rts
.23d8					EVFFail:
.23d8	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>23db	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>23e3	41 42 4c 45 20 4e 41 4d 45 00
.23ed					EncVarAlNum:
.23ed	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; points to the  last char processed.
.23ef	10 01		bpl $23f2			bpl 	_EVAContinue
.23f1	60		rts				rts
.23f2					_EVAContinue:
.23f2	08		php				php 								; CS x 32 ; CC x 32 x 40
.23f3	c8		iny				iny 								; get the next character, strip bit 7
.23f4	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23f6	88		dey				dey
.23f7	29 7f		and #$7f			and 	#$7F
.23f9	20 83 22	jsr $2283			jsr 	CheckIsLetter 				; letter ?
.23fc	b0 08		bcs $2406			bcs 	_EVACharOkay
.23fe	20 8f 22	jsr $228f			jsr 	CheckIsDigit				; fail if not digit.
.2401	90 32		bcc $2435			bcc 	_EVAExit
.2403	18		clc				clc
.2404	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.2406					_EVACharOkay:
.2406	c8		iny				iny 								; char okay advance to it.
.2407	38		sec				sec 								; range 1-36
.2408	e9 40		sbc #$40			sbc 	#64
.240a	28		plp				plp 								; which multiplier ?
.240b	90 0f		bcc $241c			bcc 	_EVATimes32x40
.240d	85 15		sta $15				sta 	temp2 						; save in temp2 - A x 32
.240f	64 16		stz $16				stz 	temp2+1
.2411	a2 05		ldx #$05			ldx 	#5
.2413	06 15		asl $15		_EVA32:	asl 	temp2
.2415	26 16		rol $16				rol 	temp2+1
.2417	ca		dex				dex
.2418	d0 f9		bne $2413			bne 	_EVA32
.241a	80 0b		bra $2427			bra 	_EVAAddVar
.241c					_EVATimes32x40:
.241c	85 16		sta $16				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.241e	64 15		stz $15				stz 	temp2
.2420	0a		asl a				asl 	a
.2421	0a		asl a				asl 	a
.2422	18		clc				clc
.2423	65 16		adc $16				adc 	temp2+1
.2425	85 16		sta $16				sta 	temp2+1
.2427					_EVAAddVar:
.2427	18		clc				clc
.2428	a5 13		lda $13				lda 	temp1
.242a	65 15		adc $15				adc 	temp2
.242c	85 13		sta $13				sta 	temp1
.242e	a5 14		lda $14				lda 	temp1+1
.2430	65 16		adc $16				adc 	temp2+1
.2432	85 14		sta $14				sta 	temp1+1
.2434	08		php				php
.2435					_EVAExit:
.2435	28		plp				plp
.2436	60		rts				rts

;******  Return to file: files.asm


;******  Return to file: kernel.asm

.2437					ColdStart:
.2437	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.2439	9a		txs				txs
.243a	64 24		stz $24				stz 	FastMode 					; start in slow mode.
.243c	20 ff 24	jsr $24ff			jsr 	ExternInitialise
.243f	a9 7a		lda #$7a			lda 	#BootMsg & $FF
.2441	a0 24		ldy #$24			ldy 	#BootMsg >> 8
.2443	20 f3 25	jsr $25f3			jsr 	EXPrintString
.2446					WarmStartBlankStack:
.2446	86 13		stx $13				stx 	temp1
.2448	a2 80		ldx #$80			ldx 	#NumberStackBase
.244a	9a		txs				txs
.244b	a6 13		ldx $13				ldx 	temp1
.244d					WarmStart:
.244d	a9 03		lda #$03			lda 	#COL_Yellow
.244f	20 38 25	jsr $2538			jsr 	ExternColour
.2452	20 5b 25	jsr $255b			jsr 	ExternInput
.2455	a9 06		lda #$06			lda 	#COL_Cyan
.2457	20 38 25	jsr $2538			jsr 	ExternColour
.245a	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.245c	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.245e	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.2461	a9 10		lda #$10			lda 	#textBuffer & $FF
.2463	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.2465	20 57 20	jsr $2057			jsr 	EncodeProgram
.2468	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.246b	0d 12 09	ora $0912			ora 	encodeBuffer+2
.246e	d0 05		bne $2475			bne 	LineEditor 					; if so, do the line editing code.
.2470	64 08		stz $08				stz 	rsp
.2472	4c 00 00	jmp $0000			jmp 	NextCode
.2475					LineEditor:
.2475	20 f2 19	jsr $19f2			jsr 	EditProgram
.2478	80 cc		bra $2446			bra 	WarmStartBlankStack
.247a					BootMsg:
>247a	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>2482	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>2492	2a 0d 0d
>2495	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>249d	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>24ad	30 32 30 0d 0d
>24b2	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>24b9	5b 32 30 2d 30 31 2d 31			.text	"[20-01-18 13:49]"
>24c1	38 20 31 33 3a 34 39 5d

;******  Return to file: kernel.asm

>24c9	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/error.asm

.24cc					ErrorHandler:
.24cc	68		pla				pla 								; get message address
.24cd	7a		ply				ply
.24ce	1a		inc a				inc 	a
.24cf	d0 01		bne $24d2			bne 	_EHNoCarry
.24d1	c8		iny				iny
.24d2					_EHNoCarry:
.24d2	20 f3 25	jsr $25f3			jsr 	EXPrintString
.24d5	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.24d7	b1 03		lda ($03),y			lda 	(IP),y
.24d9	c8		iny				iny
.24da	11 03		ora ($03),y			ora 	(IP),y
.24dc	f0 14		beq $24f2			beq 	_EHNoLine
.24de	a9 fa		lda #$fa			lda 	#_EHMsg2 & $FF 				; print " at "
.24e0	a0 24		ldy #$24			ldy 	#_EHMsg2 >> 8
.24e2	20 f3 25	jsr $25f3			jsr 	EXPrintString
.24e5	a0 02		ldy #$02			ldy 	#2 							; print line number
.24e7	b1 03		lda ($03),y			lda 	(IP),y
.24e9	48		pha				pha
.24ea	88		dey				dey
.24eb	b1 03		lda ($03),y			lda 	(IP),y
.24ed	7a		ply				ply
.24ee	18		clc				clc
.24ef	20 18 1e	jsr $1e18			jsr 	PrintYA
.24f2					_EHNoLine:
.24f2	a9 0d		lda #$0d			lda 	#13
.24f4	20 2c 25	jsr $252c			jsr 	ExternPrint
.24f7	4c 46 24	jmp $2446			jmp 	WarmStartBlankStack			; S is indeterminate
>24fa	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.24ff					ExternInitialise:
.24ff	a9 90		lda #$90			lda 	#144 						; set colour
.2501	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2504	a9 01		lda #$01			lda 	#$01
.2506	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2509	a9 0e		lda #$0e			lda 	#14							; lower case
.250b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.250e	a9 93		lda #$93			lda 	#147 						; clear screen
.2510	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2513	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.2515	4c 38 25	jmp $2538			jmp 	ExternColour
.2518					ExternCheckBreak:
.2518	da		phx				phx 								; make sure we keep XY
.2519	5a		phy				phy
.251a	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.251d	f0 03		beq $2522			beq		_ECBExit 					; stopped
.251f	7a		ply				ply 								; restore and exit.
.2520	fa		plx				plx
.2521	60		rts				rts
.2522					_ECBExit:
.2522	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>2525	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.252c					ExternPrint:
.252c	48		pha				pha
.252d	da		phx				phx
.252e	5a		phy				phy
.252f	29 7f		and #$7f			and 	#$7F
.2531	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2534	7a		ply				ply
.2535	fa		plx				plx
.2536	68		pla				pla
.2537	60		rts				rts
.2538					ExternColour:
.2538	48		pha				pha
.2539	da		phx				phx
.253a	48		pha				pha
.253b	29 08		and #$08			and 	#8
.253d	0a		asl a				asl 	a
.253e	0a		asl a				asl 	a
.253f	0a		asl a				asl 	a
.2540	0a		asl a				asl 	a
.2541	49 92		eor #$92			eor 	#$92
.2543	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2546	68		pla				pla
.2547	29 07		and #$07			and 	#7
.2549	aa		tax				tax
.254a	bd 53 25	lda $2553,x			lda 	_ECTable,x
.254d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2550	fa		plx				plx
.2551	68		pla				pla
.2552	60		rts				rts
.2553					_ECTable:
>2553	90						.byte 	144
>2554	1c						.byte 	28
>2555	1e						.byte 	30
>2556	9e						.byte 	158
>2557	1f						.byte 	31
>2558	9c						.byte 	156
>2559	9f						.byte 	159
>255a	05						.byte 	5
.255b					ExternInput:
.255b	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.255d	85 17		sta $17				sta 	temp3
.255f	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.2561	85 18		sta $18				sta 	temp3+1
.2563	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.2566	c9 0d		cmp #$0d			cmp 	#13
.2568	f0 0c		beq $2576			beq 	_EIExit
.256a	29 7f		and #$7f			and 	#$7F
.256c	92 17		sta ($17)			sta 	(temp3)
.256e	e6 17		inc $17				inc 	temp3
.2570	d0 f1		bne $2563			bne 	_EIRead
.2572	e6 18		inc $18				inc 	temp3+1
.2574	80 ed		bra $2563			bra 	_EIRead
.2576	a9 00		lda #$00	_EIExit:lda 	#0
.2578	92 17		sta ($17)			sta 	(temp3)
.257a	a9 0d		lda #$0d			lda 	#13
.257c	20 2c 25	jsr $252c			jsr 	ExternPrint
.257f	60		rts				rts
.2580					ExternSave:
.2580	da		phx				phx
.2581	5a		phy				phy
.2582	85 15		sta $15				sta 	temp2 						; save start
.2584	84 16		sty $16				sty 	temp2+1
.2586	20 e8 25	jsr $25e8			jsr 	EXGetLength 				; get length of file into A
.2589	a6 17		ldx $17				ldx 	temp3
.258b	a4 18		ldy $18				ldy 	temp3+1
.258d	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.2590	a9 01		lda #$01			lda 	#1
.2592	a2 08		ldx #$08			ldx 	#8	 						; device #8
.2594	a0 00		ldy #$00			ldy 	#0
.2596	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.2599	a6 13		ldx $13				ldx 	temp1 						; end address
.259b	a4 14		ldy $14				ldy 	temp1+1
.259d	a9 15		lda #$15			lda 	#temp2
.259f	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.25a2	b0 03		bcs $25a7			bcs 	_ESSave
.25a4	7a		ply				ply
.25a5	fa		plx				plx
.25a6	60		rts				rts
.25a7					_ESSave:
.25a7	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>25aa	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>25b2	4c 45 44 00
.25b6					ExternLoad:
.25b6	da		phx				phx 								; save XY
.25b7	5a		phy				phy
.25b8	48		pha				pha 								; save target
.25b9	5a		phy				phy
.25ba	20 e8 25	jsr $25e8			jsr 	EXGetLength 				; get length of file into A
.25bd	a6 17		ldx $17				ldx 	temp3
.25bf	a4 18		ldy $18				ldy 	temp3+1
.25c1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.25c4	a9 01		lda #$01			lda 	#1
.25c6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.25c8	a0 00		ldy #$00			ldy 	#0
.25ca	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.25cd	7a		ply				ply 								; restore target to YX and call load
.25ce	fa		plx				plx
.25cf	a9 00		lda #$00			lda 	#0 							; load command
.25d1	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.25d4	b0 03		bcs $25d9			bcs 	_ESLoad
.25d6	7a		ply				ply
.25d7	fa		plx				plx
.25d8	60		rts				rts
.25d9					_ESLoad:
.25d9	20 cc 24	jsr $24cc			jsr 	ErrorHandler
>25dc	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>25e4	4c 45 44 00
.25e8					EXGetLength:
.25e8	5a		phy				phy
.25e9	a0 ff		ldy #$ff			ldy 	#255
.25eb	c8		iny		_EXGL0:	iny
.25ec	b1 17		lda ($17),y			lda 	(temp3),y
.25ee	d0 fb		bne $25eb			bne 	_EXGL0
.25f0	98		tya				tya
.25f1	7a		ply				ply
.25f2	60		rts				rts
.25f3					EXPrintString:
.25f3	48		pha				pha
.25f4	5a		phy				phy
.25f5	84 14		sty $14				sty 	temp1+1
.25f7	85 13		sta $13				sta 	temp1
.25f9	a0 00		ldy #$00			ldy 	#0
.25fb					_EXPSLoop:
.25fb	b1 13		lda ($13),y			lda 	(temp1),y
.25fd	f0 08		beq $2607			beq 	_EXPSExit
.25ff	29 7f		and #$7f			and 	#$7F
.2601	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2604	c8		iny				iny
.2605	80 f4		bra $25fb			bra 	_EXPSLoop
.2607					_EXPSExit:
.2607	7a		ply				ply
.2608	68		pla				pla
.2609	60		rts				rts

;******  Return to file: kernel.asm

.260a					Dictionary:

;******  Processing file: generated/dictionary.inc

>260a	05					.byte	_end0-*
>260b	00					.byte	$00
>260c	0a 15					.word	WordWrite
>260e	a1					.byte	$a1
.260f					_end0:
>260f	10					.byte	_end1-*
>2610	52					.byte	$52
>2611	e5 1e					.word	VarWriteHandler
>2613	ff 1e					.word	VarWriteHandlerDecode
>2615	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>261d	45 d2
.261f					_end1:
>261f	10					.byte	_end2-*
>2620	52					.byte	$52
>2621	a9 1e					.word	VarAddressHandler
>2623	c1 1e					.word	VarAddrHandlerDecode
>2625	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>262d	45 d2
.262f					_end2:
>262f	10					.byte	_end3-*
>2630	52					.byte	$52
>2631	c6 1e					.word	VarReadHandler
>2633	e0 1e					.word	VarReadHandlerDecode
>2635	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>263d	45 d2
.263f					_end3:
>263f	0c					.byte	_end4-*
>2640	52					.byte	$52
>2641	df 16					.word	CallHandler
>2643	8a 17					.word	CallHandlerDecode
>2645	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.264b					_end4:
>264b	0f					.byte	_end5-*
>264c	53					.byte	$53
>264d	1c 1d					.word	SkipComment
>264f	29 1d					.word	CommentDecoder
>2651	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>2659	d4
.265a					_end5:
>265a	0e					.byte	_end6-*
>265b	53					.byte	$53
>265c	47 1d					.word	DefineCode
>265e	5d 1d					.word	DefineDecoder
>2660	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2668					_end6:
>2668	0f					.byte	_end7-*
>2669	52					.byte	$52
>266a	6d 10					.word	Literal2Byte
>266c	b5 10					.word	Literal2ByteDecode
>266e	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2676	cc
.2677					_end7:
>2677	0e					.byte	_end8-*
>2678	80					.byte	$80
>2679	05 1d					.word	NextLine
>267b	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2683	4e c5
.2685					_end8:
>2685	0e					.byte	_end9-*
>2686	53					.byte	$53
>2687	c7 10					.word	LiteralString
>2689	e6 10					.word	LiteralStringDecoder
>268b	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2693					_end9:
>2693	05					.byte	_end10-*
>2694	00					.byte	$00
>2695	86 12					.word	Multiply16x16
>2697	aa					.byte	$aa
.2698					_end10:
>2698	05					.byte	_end11-*
>2699	00					.byte	$00
>269a	f7 10					.word	Add
>269c	ab					.byte	$ab
.269d					_end11:
>269d	06					.byte	_end12-*
>269e	00					.byte	$00
>269f	1b 15					.word	WordAdd
>26a1	2b a1					.byte	$2b,$a1
.26a3					_end12:
>26a3	05					.byte	_end13-*
>26a4	00					.byte	$00
>26a5	06 11					.word	Subtract
>26a7	ad					.byte	$ad
.26a8					_end13:
>26a8	06					.byte	_end14-*
>26a9	00					.byte	$00
>26aa	c2 13					.word	ConstantMinus1
>26ac	2d b1					.byte	$2d,$b1
.26ae					_end14:
>26ae	06					.byte	_end15-*
>26af	00					.byte	$00
>26b0	cc 1b					.word	DumpStack
>26b2	2e ae					.byte	$2e,$ae
.26b4					_end15:
>26b4	05					.byte	_end16-*
>26b5	00					.byte	$00
>26b6	d7 11					.word	Divide16x16
>26b8	af					.byte	$af
.26b9					_end16:
>26b9	05					.byte	_end17-*
>26ba	00					.byte	$00
>26bb	b5 13					.word	Constant0
>26bd	b0					.byte	$b0
.26be					_end17:
>26be	06					.byte	_end18-*
>26bf	00					.byte	$00
>26c0	1b 13					.word	CheckMinus
>26c2	30 bc					.byte	$30,$bc
.26c4					_end18:
>26c4	06					.byte	_end19-*
>26c5	00					.byte	$00
>26c6	2f 13					.word	CheckZero
>26c8	30 bd					.byte	$30,$bd
.26ca					_end19:
>26ca	05					.byte	_end20-*
>26cb	00					.byte	$00
>26cc	d1 13					.word	C1
>26ce	b1					.byte	$b1
.26cf					_end20:
>26cf	06					.byte	_end21-*
>26d0	00					.byte	$00
>26d1	c5 12					.word	Unary1Plus
>26d3	31 ab					.byte	$31,$ab
.26d5					_end21:
>26d5	06					.byte	_end22-*
>26d6	00					.byte	$00
>26d7	dc 12					.word	Unary1Minus
>26d9	31 ad					.byte	$31,$ad
.26db					_end22:
>26db	06					.byte	_end23-*
>26dc	00					.byte	$00
>26dd	e9 13					.word	C10
>26df	31 b0					.byte	$31,$b0
.26e1					_end23:
>26e1	07					.byte	_end24-*
>26e2	00					.byte	$00
>26e3	12 14					.word	C100
>26e5	31 30 b0				.byte	$31,$30,$b0
.26e8					_end24:
>26e8	08					.byte	_end25-*
>26e9	00					.byte	$00
>26ea	41 14					.word	C1024
>26ec	31 30 32 b4				.byte	$31,$30,$32,$b4
.26f0					_end25:
>26f0	07					.byte	_end26-*
>26f1	00					.byte	$00
>26f2	16 14					.word	C127
>26f4	31 32 b7				.byte	$31,$32,$b7
.26f7					_end26:
>26f7	07					.byte	_end27-*
>26f8	00					.byte	$00
>26f9	1a 14					.word	C128
>26fb	31 32 b8				.byte	$31,$32,$b8
.26fe					_end27:
>26fe	06					.byte	_end28-*
>26ff	00					.byte	$00
>2700	ed 13					.word	C15
>2702	31 b5					.byte	$31,$b5
.2704					_end28:
>2704	06					.byte	_end29-*
>2705	00					.byte	$00
>2706	f1 13					.word	C16
>2708	31 b6					.byte	$31,$b6
.270a					_end29:
>270a	07					.byte	_end30-*
>270b	00					.byte	$00
>270c	53 13					.word	Times16
>270e	31 36 aa				.byte	$31,$36,$aa
.2711					_end30:
>2711	07					.byte	_end31-*
>2712	00					.byte	$00
>2713	66 13					.word	Divide16
>2715	31 36 af				.byte	$31,$36,$af
.2718					_end31:
>2718	05					.byte	_end32-*
>2719	00					.byte	$00
>271a	d5 13					.word	C2
>271c	b2					.byte	$b2
.271d					_end32:
>271d	06					.byte	_end33-*
>271e	00					.byte	$00
>271f	5f 13					.word	Times2
>2721	32 aa					.byte	$32,$aa
.2723					_end33:
>2723	06					.byte	_end34-*
>2724	00					.byte	$00
>2725	ce 12					.word	Unary2Plus
>2727	32 ab					.byte	$32,$ab
.2729					_end34:
>2729	06					.byte	_end35-*
>272a	00					.byte	$00
>272b	e7 12					.word	Unary2Minus
>272d	32 ad					.byte	$32,$ad
.272f					_end35:
>272f	06					.byte	_end36-*
>2730	00					.byte	$00
>2731	72 13					.word	Divide2
>2733	32 af					.byte	$32,$af
.2735					_end36:
>2735	06					.byte	_end37-*
>2736	00					.byte	$00
>2737	f5 13					.word	C24
>2739	32 b4					.byte	$32,$b4
.273b					_end37:
>273b	07					.byte	_end38-*
>273c	00					.byte	$00
>273d	1e 14					.word	C255
>273f	32 35 b5				.byte	$32,$35,$b5
.2742					_end38:
>2742	07					.byte	_end39-*
>2743	00					.byte	$00
>2744	29 14					.word	C256
>2746	32 35 b6				.byte	$32,$35,$b6
.2749					_end39:
>2749	08					.byte	_end40-*
>274a	00					.byte	$00
>274b	79 13					.word	Times256
>274d	32 35 36 aa				.byte	$32,$35,$36,$aa
.2751					_end40:
>2751	08					.byte	_end41-*
>2752	00					.byte	$00
>2753	82 13					.word	Divide256
>2755	32 35 36 af				.byte	$32,$35,$36,$af
.2759					_end41:
>2759	05					.byte	_end42-*
>275a	00					.byte	$00
>275b	d9 13					.word	C3
>275d	b3					.byte	$b3
.275e					_end42:
>275e	06					.byte	_end43-*
>275f	00					.byte	$00
>2760	06 14					.word	C32
>2762	33 b2					.byte	$33,$b2
.2764					_end43:
>2764	09					.byte	_end44-*
>2765	00					.byte	$00
>2766	59 14					.word	C32767
>2768	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.276d					_end44:
>276d	09					.byte	_end45-*
>276e	00					.byte	$00
>276f	65 14					.word	C32768
>2771	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2776					_end45:
>2776	05					.byte	_end46-*
>2777	00					.byte	$00
>2778	dd 13					.word	C4
>277a	b4					.byte	$b4
.277b					_end46:
>277b	06					.byte	_end47-*
>277c	00					.byte	$00
>277d	5b 13					.word	Times4
>277f	34 aa					.byte	$34,$aa
.2781					_end47:
>2781	06					.byte	_end48-*
>2782	00					.byte	$00
>2783	6e 13					.word	Divide4
>2785	34 af					.byte	$34,$af
.2787					_end48:
>2787	08					.byte	_end49-*
>2788	00					.byte	$00
>2789	4d 14					.word	C4096
>278b	34 30 39 b6				.byte	$34,$30,$39,$b6
.278f					_end49:
>278f	05					.byte	_end50-*
>2790	00					.byte	$00
>2791	e1 13					.word	C5
>2793	b5					.byte	$b5
.2794					_end50:
>2794	07					.byte	_end51-*
>2795	00					.byte	$00
>2796	35 14					.word	C512
>2798	35 31 b2				.byte	$35,$31,$b2
.279b					_end51:
>279b	06					.byte	_end52-*
>279c	00					.byte	$00
>279d	0a 14					.word	C63
>279f	36 b3					.byte	$36,$b3
.27a1					_end52:
>27a1	06					.byte	_end53-*
>27a2	00					.byte	$00
>27a3	0e 14					.word	C64
>27a5	36 b4					.byte	$36,$b4
.27a7					_end53:
>27a7	05					.byte	_end54-*
>27a8	00					.byte	$00
>27a9	e5 13					.word	C8
>27ab	b8					.byte	$b8
.27ac					_end54:
>27ac	06					.byte	_end55-*
>27ad	00					.byte	$00
>27ae	57 13					.word	Times8
>27b0	38 aa					.byte	$38,$aa
.27b2					_end55:
>27b2	06					.byte	_end56-*
>27b3	00					.byte	$00
>27b4	6a 13					.word	Divide8
>27b6	38 af					.byte	$38,$af
.27b8					_end56:
>27b8	05					.byte	_end57-*
>27b9	40					.byte	$40
>27ba	47 17					.word	ReturnHandler
>27bc	bb					.byte	$bb
.27bd					_end57:
>27bd	05					.byte	_end58-*
>27be	00					.byte	$00
>27bf	73 11					.word	CheckLess
>27c1	bc					.byte	$bc
.27c2					_end58:
>27c2	06					.byte	_end59-*
>27c3	00					.byte	$00
>27c4	8c 11					.word	CheckLessEq
>27c6	3c bd					.byte	$3c,$bd
.27c8					_end59:
>27c8	06					.byte	_end60-*
>27c9	00					.byte	$00
>27ca	3c 11					.word	CheckNotEqual
>27cc	3c be					.byte	$3c,$be
.27ce					_end60:
>27ce	05					.byte	_end61-*
>27cf	00					.byte	$00
>27d0	3f 11					.word	CheckEqual
>27d2	bd					.byte	$bd
.27d3					_end61:
>27d3	05					.byte	_end62-*
>27d4	00					.byte	$00
>27d5	8f 11					.word	CheckGreater
>27d7	be					.byte	$be
.27d8					_end62:
>27d8	06					.byte	_end63-*
>27d9	00					.byte	$00
>27da	70 11					.word	CheckGreaterEq
>27dc	3e bd					.byte	$3e,$bd
.27de					_end63:
>27de	08					.byte	_end64-*
>27df	00					.byte	$00
>27e0	7a 14					.word	TestDup
>27e2	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.27e6					_end64:
>27e6	05					.byte	_end65-*
>27e7	00					.byte	$00
>27e8	ef 14					.word	WordRead
>27ea	c0					.byte	$c0
.27eb					_end65:
>27eb	07					.byte	_end66-*
>27ec	00					.byte	$00
>27ed	f5 12					.word	Absolute
>27ef	41 42 d3				.byte	$41,$42,$d3
.27f2					_end66:
>27f2	09					.byte	_end67-*
>27f3	00					.byte	$00
>27f4	32 15					.word	AllocateMemory
>27f6	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.27fb					_end67:
>27fb	07					.byte	_end68-*
>27fc	00					.byte	$00
>27fd	15 11					.word	And
>27ff	41 4e c4				.byte	$41,$4e,$c4
.2802					_end68:
>2802	0a					.byte	_end69-*
>2803	00					.byte	$00
>2804	57 1b					.word	AssertCode
>2806	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.280c					_end69:
>280c	09					.byte	_end70-*
>280d	00					.byte	$00
>280e	48 13					.word	ByteSwap
>2810	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2815					_end70:
>2815	06					.byte	_end71-*
>2816	00					.byte	$00
>2817	fd 14					.word	ByteWrite
>2819	43 a1					.byte	$43,$a1
.281b					_end71:
>281b	06					.byte	_end72-*
>281c	00					.byte	$00
>281d	e6 14					.word	ByteRead
>281f	43 c0					.byte	$43,$c0
.2821					_end72:
>2821	07					.byte	_end73-*
>2822	00					.byte	$00
>2823	5a 18					.word	ClrHandler
>2825	43 4c d2				.byte	$43,$4c,$d2
.2828					_end73:
>2828	08					.byte	_end74-*
>2829	00					.byte	$00
>282a	71 14					.word	Drop
>282c	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2830					_end74:
>2830	07					.byte	_end75-*
>2831	00					.byte	$00
>2832	83 14					.word	Dup
>2834	44 55 d0				.byte	$44,$55,$d0
.2837					_end75:
>2837	0a					.byte	_end76-*
>2838	21					.byte	$21
>2839	2b 16					.word	ElseHandler
>283b	2e 16					.word	ElseEncoder
>283d	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2841					_end76:
>2841	07					.byte	_end77-*
>2842	00					.byte	$00
>2843	78 1b					.word	EndProgram
>2845	45 4e c4				.byte	$45,$4e,$c4
.2848					_end77:
>2848	0b					.byte	_end78-*
>2849	20					.byte	$20
>284a	4d 16					.word	EndIfHandler
>284c	50 16					.word	EndIfEncoder
>284e	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2853					_end78:
>2853	09					.byte	_end79-*
>2854	20					.byte	$20
>2855	4b 15					.word	ForHandler
>2857	81 15					.word	ForEncoder
>2859	46 4f d2				.byte	$46,$4f,$d2
.285c					_end79:
>285c	08					.byte	_end80-*
>285d	21					.byte	$21
>285e	16 16					.word	IfHandler
>2860	19 16					.word	IfEncoder
>2862	49 c6					.byte	$49,$c6
.2864					_end80:
>2864	09					.byte	_end81-*
>2865	00					.byte	$00
>2866	f5 15					.word	GetIndex
>2868	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.286d					_end81:
>286d	08					.byte	_end82-*
>286e	00					.byte	$00
>286f	a6 1a					.word	ListCode
>2871	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2875					_end82:
>2875	07					.byte	_end83-*
>2876	00					.byte	$00
>2877	ac 11					.word	Maximum
>2879	4d 41 d8				.byte	$4d,$41,$d8
.287c					_end83:
>287c	07					.byte	_end84-*
>287d	00					.byte	$00
>287e	a8 11					.word	Minimum
>2880	4d 49 ce				.byte	$4d,$49,$ce
.2883					_end84:
>2883	07					.byte	_end85-*
>2884	00					.byte	$00
>2885	e8 11					.word	Modulus16x16
>2887	4d 4f c4				.byte	$4d,$4f,$c4
.288a					_end85:
>288a	0a					.byte	_end86-*
>288b	00					.byte	$00
>288c	fc 12					.word	Negate
>288e	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2894					_end86:
>2894	07					.byte	_end87-*
>2895	00					.byte	$00
>2896	51 18					.word	NewHandler
>2898	4e 45 d7				.byte	$4e,$45,$d7
.289b					_end87:
>289b	0a					.byte	_end88-*
>289c	21					.byte	$21
>289d	8e 15					.word	NextHandler
>289f	cd 15					.word	NextEncoder
>28a1	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.28a5					_end88:
>28a5	07					.byte	_end89-*
>28a6	00					.byte	$00
>28a7	b7 14					.word	Nip
>28a9	4e 49 d0				.byte	$4e,$49,$d0
.28ac					_end89:
>28ac	07					.byte	_end90-*
>28ad	00					.byte	$00
>28ae	0c 13					.word	OneComplement
>28b0	4e 4f d4				.byte	$4e,$4f,$d4
.28b3					_end90:
>28b3	06					.byte	_end91-*
>28b4	00					.byte	$00
>28b5	2f 11					.word	LogOr
>28b7	4f d2					.byte	$4f,$d2
.28b9					_end91:
>28b9	08					.byte	_end92-*
>28ba	00					.byte	$00
>28bb	9f 14					.word	Over
>28bd	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.28c1					_end92:
>28c1	0c					.byte	_end93-*
>28c2	20					.byte	$20
>28c3	7f 16					.word	RepeatHandler
>28c5	82 16					.word	RepeatEncoder
>28c7	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.28cd					_end93:
>28cd	07					.byte	_end94-*
>28ce	00					.byte	$00
>28cf	8b 13					.word	RandomNumber
>28d1	52 4e c4				.byte	$52,$4e,$c4
.28d4					_end94:
>28d4	07					.byte	_end95-*
>28d5	00					.byte	$00
>28d6	bc 14					.word	Rot
>28d8	52 4f d4				.byte	$52,$4f,$d4
.28db					_end95:
>28db	07					.byte	_end96-*
>28dc	00					.byte	$00
>28dd	21 1b					.word	RunProgram
>28df	52 55 ce				.byte	$52,$55,$ce
.28e2					_end96:
>28e2	07					.byte	_end97-*
>28e3	00					.byte	$00
>28e4	37 13					.word	SignTOS
>28e6	53 47 ce				.byte	$53,$47,$ce
.28e9					_end97:
>28e9	08					.byte	_end98-*
>28ea	00					.byte	$00
>28eb	70 1b					.word	StopCode
>28ed	53 54 4f d0				.byte	$53,$54,$4f,$d0
.28f1					_end98:
>28f1	08					.byte	_end99-*
>28f2	00					.byte	$00
>28f3	8c 14					.word	Swap
>28f5	53 57 41 d0				.byte	$53,$57,$41,$d0
.28f9					_end99:
>28f9	07					.byte	_end100-*
>28fa	00					.byte	$00
>28fb	35 1b					.word	Call6502
>28fd	53 59 d3				.byte	$53,$59,$d3
.2900					_end100:
>2900	0d					.byte	_end101-*
>2901	00					.byte	$00
>2902	fe 1d					.word	IntToString
>2904	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>290c	c7
.290d					_end101:
>290d	0b					.byte	_end102-*
>290e	21					.byte	$21
>290f	8f 16					.word	UntilHandler
>2911	92 16					.word	UntilEncoder
>2913	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2918					_end102:
>2918	09					.byte	_end103-*
>2919	00					.byte	$00
>291a	7b 1b					.word	VlistCode
>291c	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2921					_end103:
>2921	0a					.byte	_end104-*
>2922	40					.byte	$40
>2923	bd 18					.word	BreakCmd
>2925	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.292b					_end104:
>292b	09					.byte	_end105-*
>292c	00					.byte	$00
>292d	b7 18					.word	ExitDump
>292f	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2934					_end105:
>2934	07					.byte	_end106-*
>2935	00					.byte	$00
>2936	22 11					.word	Xor
>2938	58 4f d2				.byte	$58,$4f,$d2
.293b					_end106:
>293b	08					.byte	_end107-*
>293c	00					.byte	$00
>293d	48 1c					.word	System_Save
>293f	53 41 56 c5				.byte	$53,$41,$56,$c5
.2943					_end107:
>2943	08					.byte	_end108-*
>2944	00					.byte	$00
>2945	66 1c					.word	System_Load
>2947	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.294b					_end108:
>294b	0d					.byte	_end109-*
>294c	11					.byte	$11
>294d	04 1f					.word	IndexHandler
>294f	13 1f					.word	IndexHandlerDecode
>2951	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.2958					_end109:
>2958	07					.byte	_end110-*
>2959	00					.byte	$00
>295a	17 1c					.word	OldCode
>295c	4f 4c c4				.byte	$4f,$4c,$c4
.295f					_end110:
>295f	12					.byte	_end111-*
>2960	52					.byte	$52
>2961	6c 10					.word	HexLiteral2Byte
>2963	83 10					.word	HexLiteral2ByteDecode
>2965	24 24 48 45 58 4c 49 54			.byte	$24,$24,$48,$45,$58,$4c,$49,$54,$45,$52,$41,$cc
>296d	45 52 41 cc
.2971					_end111:
>2971	08					.byte	_end112-*
>2972	00					.byte	$00
>2973	62 10					.word	SetFastMode
>2975	46 41 53 d4				.byte	$46,$41,$53,$d4
.2979					_end112:
>2979	08					.byte	_end113-*
>297a	00					.byte	$00
>297b	5e 10					.word	SetSlowMode
>297d	53 4c 4f d7				.byte	$53,$4c,$4f,$d7
.2981					_end113:
>2981	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
