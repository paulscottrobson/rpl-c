
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Wed Jan 08 09:34:03 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					nextFreeMem:
>0008							.word 	?
.000a					temp1:
>000a							.word 	?
.000c					temp2:
>000c							.word 	?
.000e					temp3:
>000e							.word 	?
.0010					temp4:
>0010							.word 	?
.0012					freeMemory:
>0012							.word 	?
.0014					SignCount:
>0014							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes.
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1005	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1007	20 10 10	jsr $1010			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.100a	20 34 15	jsr $1534			jsr 		ClearVariableSpace 		; clear variables etc.
.100d	4c 00 00	jmp $0000			jmp 		Next

;******  Processing file: core.src

.1010					InitialiseCoreCode:
.1010	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1012	85 00		sta $00				sta 	Next
.1014	85 01		sta $01				sta 	Next+1
.1016	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1018	85 02		sta $02				sta 	Next+2
.101a	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.101c	84 04		sty $04				sty 	Next+4
.101e	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1020	60		rts				rts								; (2 INX skip offset and line#)
.1021					Literal2Byte:
.1021	a5 06		lda $06				lda 	TOS
.1023	48		pha				pha
.1024	a5 07		lda $07				lda 	TOS+1
.1026	48		pha				pha
.1027	e8		inx				inx  							; point X to the word
.1028	e8		inx				inx
.1029	8a		txa				txa 							; copy into Y
.102a	a8		tay				tay
.102b	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.102d	85 06		sta $06				sta 	TOS
.102f	c8		iny				iny 							; read and push the MSB
.1030	b1 03		lda ($03),y			lda 	(IP),y
.1032	85 07		sta $07				sta 	TOS+1
.1034	4c 00 00	jmp $0000			jmp 	Next
.1037					LiteralString:
.1037	a5 06		lda $06				lda 	TOS
.1039	48		pha				pha
.103a	a5 07		lda $07				lda 	TOS+1
.103c	48		pha				pha
.103d	e8		inx				inx
.103e	e8		inx				inx 							; skip over current word
.103f	8a		txa				txa 							; add to IP + 1 to give string address
.1040	a8		tay				tay 							; put in Y
.1041	38		sec				sec 							; make that TOS
.1042	65 03		adc $03				adc 	IP
.1044	85 06		sta $06				sta 	TOS
.1046	a5 04		lda $04				lda 	IP+1
.1048	69 00		adc #$00			adc 	#0
.104a	85 07		sta $07				sta 	TOS+1
.104c	8a		txa				txa 							; add data length to X
.104d	18		clc				clc
.104e	71 03		adc ($03),y			adc 	(IP),y
.1050	aa		tax				tax
.1051	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.1054					Add:
.1054	7a		ply				ply
.1055	68		pla				pla
.1056	18		clc				clc
.1057	65 06		adc $06				adc 	TOS
.1059	85 06		sta $06				sta 	TOS
.105b	98		tya				tya
.105c	65 07		adc $07				adc 	TOS+1
.105e	85 07		sta $07				sta 	TOS+1
.1060	4c 00 00	jmp $0000			jmp 	Next
.1063					Subtract:
.1063	7a		ply				ply
.1064	68		pla				pla
.1065	38		sec				sec
.1066	49 ff		eor #$ff			eor 	#$FF
.1068	65 06		adc $06				adc 	TOS
.106a	85 06		sta $06				sta 	TOS
.106c	98		tya				tya
.106d	49 ff		eor #$ff			eor 	#$FF
.106f	65 07		adc $07				adc 	TOS+1
.1071	85 07		sta $07				sta 	TOS+1
.1073	4c 00 00	jmp $0000			jmp 	Next
.1076					And:
.1076	68		pla				pla
.1077	25 07		and $07				and 	TOS+1
.1079	85 07		sta $07				sta 	TOS+1
.107b	68		pla				pla
.107c	25 06		and $06				and 	TOS
.107e	85 06		sta $06				sta 	TOS
.1080	4c 00 00	jmp $0000			jmp 	Next
.1083					Xor:
.1083	68		pla				pla
.1084	45 07		eor $07				eor 	TOS+1
.1086	85 07		sta $07				sta 	TOS+1
.1088	68		pla				pla
.1089	45 06		eor $06				eor 	TOS
.108b	85 06		sta $06				sta 	TOS
.108d	4c 00 00	jmp $0000			jmp 	Next
.1090					LogOr:
.1090	68		pla				pla
.1091	05 07		ora $07				ora 	TOS+1
.1093	85 07		sta $07				sta 	TOS+1
.1095	68		pla				pla
.1096	05 06		ora $06				ora 	TOS
.1098	85 06		sta $06				sta 	TOS
.109a	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.109d					CheckEqual:
.109d	86 0a		stx $0a				stx 	temp1
.109f	ba		tsx				tsx
.10a0	a5 06		lda $06				lda 	TOS
.10a2	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.10a5	d0 14		bne $10bb			bne	 	CompareFalse
.10a7	a5 07		lda $07				lda 	TOS+1
.10a9	5d 01 01	eor $0101,x			eor 	Stack2High,x
.10ac	d0 0d		bne $10bb			bne 	CompareFalse
.10ae					CompareTrue:
.10ae	a6 0a		ldx $0a				ldx 	temp1
.10b0	68		pla				pla
.10b1	68		pla				pla
.10b2	a9 ff		lda #$ff			lda 	#$FF
.10b4	85 06		sta $06				sta 	TOS
.10b6	85 07		sta $07				sta 	TOS+1
.10b8	4c 00 00	jmp $0000			jmp 	Next
.10bb					CompareFalse:
.10bb	a6 0a		ldx $0a				ldx 	temp1
.10bd	68		pla				pla
.10be	68		pla				pla
.10bf	64 06		stz $06				stz 	TOS
.10c1	64 07		stz $07				stz 	TOS+1
.10c3	4c 00 00	jmp $0000			jmp 	Next
.10c6					CheckLess:
.10c6	18		clc				clc
.10c7	86 0a		stx $0a				stx 	temp1
.10c9	ba		tsx				tsx
.10ca	a5 06		lda $06				lda 	TOS
.10cc	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.10cf	a5 07		lda $07				lda 	TOS+1
.10d1	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.10d4	50 02		bvc $10d8			bvc 	_CLNoFlip
.10d6	49 80		eor #$80			eor 	#$80
.10d8					_CLNoFlip:
.10d8	0a		asl a				asl 	a
.10d9	b0 e0		bcs $10bb			bcs 	CompareFalse
.10db	80 d1		bra $10ae			bra 	CompareTrue
.10dd					CheckGreater:
.10dd	18		clc				clc
.10de	86 0a		stx $0a				stx 	temp1
.10e0	ba		tsx				tsx
.10e1	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.10e4	e5 06		sbc $06				sbc 	TOS
.10e6	bd 01 01	lda $0101,x			lda 	Stack2High,x
.10e9	e5 07		sbc $07				sbc 	TOS+1
.10eb	50 02		bvc $10ef			bvc 	_CGNoFlip
.10ed	49 80		eor #$80			eor 	#$80
.10ef					_CGNoFlip:
.10ef	0a		asl a				asl 	a
.10f0	b0 c9		bcs $10bb			bcs 	CompareFalse
.10f2	80 ba		bra $10ae			bra 	CompareTrue
.10f4					Minimum:
.10f4	a9 00		lda #$00			lda 	#0
.10f6	80 02		bra $10fa			bra 	MinMaxCode
.10f8					Maximum:
.10f8	a9 80		lda #$80			lda 	#$80
.10fa					MinMaxCode:
.10fa	85 0b		sta $0b				sta 	temp1+1
.10fc	86 0a		stx $0a				stx 	temp1
.10fe	ba		tsx				tsx
.10ff	38		sec				sec
.1100	a5 06		lda $06				lda 	TOS
.1102	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1105	a5 07		lda $07				lda 	TOS+1
.1107	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.110a	50 02		bvc $110e			bvc 	_MMNoFlip
.110c	49 80		eor #$80			eor 	#$80
.110e					_MMNoFlip:
.110e	45 0b		eor $0b				eor 	temp1+1
.1110	30 0a		bmi $111c			bmi 	_MMNoCopy
.1112	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1115	85 06		sta $06				sta 	TOS
.1117	bd 01 01	lda $0101,x			lda 	Stack2High,x
.111a	85 07		sta $07				sta 	TOS+1
.111c					_MMNoCopy:
.111c	a6 0a		ldx $0a				ldx 	temp1
.111e	68		pla				pla
.111f	68		pla				pla
.1120	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.1123					Divide16x16:
.1123	86 0c		stx $0c				stx 	temp2
.1125	ba		tsx				tsx
.1126	20 49 11	jsr $1149			jsr 	IntegerDivide
.1129	68		pla				pla
.112a	85 07		sta $07				sta 	TOS+1
.112c	68		pla				pla
.112d	85 06		sta $06				sta 	TOS
.112f	a6 0c		ldx $0c				ldx 	temp2
.1131	4c 00 00	jmp $0000			jmp 	Next
.1134					Modulus16x16:
.1134	86 0c		stx $0c				stx 	temp2
.1136	ba		tsx				tsx
.1137	20 49 11	jsr $1149			jsr 	IntegerDivide
.113a	a6 0c		ldx $0c				ldx 	temp2
.113c	68		pla				pla
.113d	68		pla				pla
.113e	a5 0a		lda $0a				lda 	temp1
.1140	85 06		sta $06				sta 	TOS
.1142	a5 0b		lda $0b				lda 	temp1+1
.1144	85 07		sta $07				sta 	TOS+1
.1146	4c 00 00	jmp $0000			jmp 	Next
.1149					IntegerDivide:
.1149	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.114b	05 07		ora $07				ora 	TOS+1
.114d	d0 14		bne $1163			bne 	_BFDOkay
.114f	20 58 16	jsr $1658			jsr 	ErrorHandler
>1152	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>115a	20 42 59 20 5a 45 52 4f 00
.1163					_BFDOkay:
.1163	64 0a		stz $0a				stz 	temp1 						; Q/Dividend/Left in +0
.1165	64 0b		stz $0b				stz 	temp1+1 					; M/Divisor/Right in +2
.1167	64 14		stz $14				stz 	SignCount 					; Count of signs.
.1169	20 a4 11	jsr $11a4			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.116c	20 be 11	jsr $11be			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.116f	5a		phy				phy 								; Y is the counter
.1170	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1172					_BFDLoop:
.1172	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1175	3e 01 01	rol $0101,x			rol 	Stack2High,x
.1178	26 0a		rol $0a				rol 	temp1
.117a	26 0b		rol $0b				rol 	temp1+1
.117c	38		sec				sec
.117d	a5 0a		lda $0a				lda 	temp1+0 					; Calculate A-M on stack.
.117f	e5 06		sbc $06				sbc 	TOS
.1181	48		pha				pha
.1182	a5 0b		lda $0b				lda 	temp1+1
.1184	e5 07		sbc $07				sbc 	TOS+1
.1186	90 0f		bcc $1197			bcc 	_BFDNoAdd
.1188	85 0b		sta $0b				sta 	temp1+1
.118a	68		pla				pla
.118b	85 0a		sta $0a				sta 	temp1+0
.118d	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1190	09 01		ora #$01			ora 	#1
.1192	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1195	80 01		bra $1198			bra 	_BFDNext
.1197					_BFDNoAdd:
.1197	68		pla				pla 								; Throw away the intermediate calculations
.1198					_BFDNext:
.1198	88		dey				dey
.1199	d0 d7		bne $1172			bne 	_BFDLoop
.119b	7a		ply				ply 								; restore Y
.119c	46 14		lsr $14				lsr 	SignCount 					; if sign count odd,
.119e	90 03		bcc $11a3			bcc 	_BFDUnsigned 				; then the result is signed
.11a0	20 aa 11	jsr $11aa			jsr		IntegerNegateAlways 		; negate the result
.11a3					_BFDUnsigned:
.11a3	60		rts				rts
.11a4					CheckIntegerNegate:
.11a4	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.11a7	30 01		bmi $11aa			bmi 	IntegerNegateAlways 		; if so negate it
.11a9	60		rts				rts
.11aa					IntegerNegateAlways:
.11aa	e6 14		inc $14				inc 	SignCount 					; bump the count of signs
.11ac	38		sec				sec 								; negate
.11ad	a9 00		lda #$00			lda 	#0
.11af	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11b2	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11b5	a9 00		lda #$00			lda 	#0
.11b7	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11ba	9d 01 01	sta $0101,x			sta 	Stack2High,x
.11bd	60		rts				rts
.11be					CheckTOSNegate:
.11be	a5 07		lda $07				lda 	TOS+1
.11c0	10 0f		bpl $11d1			bpl		CTNNoChange
.11c2	e6 14		inc $14				inc 	SignCount
.11c4					TOSNegateAlways:
.11c4	38		sec				sec
.11c5	a9 00		lda #$00			lda 	#0
.11c7	e5 06		sbc $06				sbc 	TOS
.11c9	85 06		sta $06				sta 	TOS
.11cb	a9 00		lda #$00			lda 	#0
.11cd	e5 07		sbc $07				sbc 	TOS+1
.11cf	85 07		sta $07				sta 	TOS+1
.11d1					CTNNoChange:
.11d1	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.11d2					Multiply16x16:
.11d2	86 0a		stx $0a				stx 	temp1
.11d4	ba		tsx				tsx
.11d5	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.11d8	85 0c		sta $0c				sta 	temp2
.11da	bd 01 01	lda $0101,x			lda		Stack2High,x
.11dd	85 0d		sta $0d				sta 	temp2+1
.11df	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.11e2	9e 01 01	stz $0101,x			stz 	Stack2High,x
.11e5					_MultLoop:
.11e5	46 0d		lsr $0d				lsr 	temp2+1 					; ror temp2 into C
.11e7	66 0c		ror $0c				ror 	temp2
.11e9	90 11		bcc $11fc			bcc 	_MultNoAdd
.11eb	18		clc				clc 								; add 1st to 2nd
.11ec	a5 06		lda $06				lda 	TOS
.11ee	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.11f1	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11f4	a5 07		lda $07				lda 	TOS+1
.11f6	7d 01 01	adc $0101,x			adc 	Stack2High,x
.11f9	9d 01 01	sta $0101,x			sta 	Stack2High,x
.11fc					_MultNoAdd:
.11fc	06 06		asl $06				asl 	TOS 						; shift 1st left
.11fe	26 07		rol $07				rol 	TOS+1
.1200	a5 0c		lda $0c				lda 	temp2	 					; until zero
.1202	05 0d		ora $0d				ora 	temp2+1
.1204	d0 df		bne $11e5			bne 	_MultLoop
.1206	a6 0a		ldx $0a				ldx 	temp1 						; restore X load result
.1208	68		pla				pla
.1209	85 07		sta $07				sta 	TOS+1
.120b	68		pla				pla
.120c	85 06		sta $06				sta 	TOS
.120e	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.1211					Unary1Plus:
.1211	e6 06		inc $06				inc 	TOS
.1213	d0 02		bne $1217			bne 	_U1PSkip
.1215	e6 07		inc $07				inc 	TOS+1
.1217					_U1PSkip:
.1217	4c 00 00	jmp $0000			jmp 	Next
.121a					Unary2Plus:
.121a	18		clc				clc
.121b	a5 06		lda $06				lda 	TOS
.121d	69 02		adc #$02			adc 	#2
.121f	85 06		sta $06				sta 	TOS
.1221	90 02		bcc $1225			bcc 	_U1PSkip
.1223	e6 07		inc $07				inc 	TOS+1
.1225					_U1PSkip:
.1225	4c 00 00	jmp $0000			jmp 	Next
.1228					Unary1Minus:
.1228	a5 06		lda $06				lda 	TOS
.122a	d0 02		bne $122e			bne 	_U1MSkip
.122c	c6 07		dec $07				dec 	TOS+1
.122e					_U1MSkip:
.122e	c6 06		dec $06				dec 	TOS
.1230	4c 00 00	jmp $0000			jmp 	Next
.1233					Unary2Minus:
.1233	38		sec				sec
.1234	a5 06		lda $06				lda 	TOS
.1236	e9 02		sbc #$02			sbc 	#2
.1238	85 06		sta $06				sta 	TOS
.123a	b0 02		bcs $123e			bcs 	_U1PSkip
.123c	c6 07		dec $07				dec 	TOS+1
.123e					_U1PSkip:
.123e	4c 00 00	jmp $0000			jmp 	Next
.1241					Absolute:
.1241	a5 07		lda $07				lda 	TOS+1
.1243	30 03		bmi $1248			bmi 	Negate
.1245	4c 00 00	jmp $0000			jmp 	Next
.1248					Negate:
.1248	38		sec				sec
.1249	a9 00		lda #$00			lda 	#0
.124b	e5 06		sbc $06				sbc 	TOS
.124d	85 06		sta $06				sta 	TOS
.124f	a9 00		lda #$00			lda 	#0
.1251	e5 07		sbc $07				sbc 	TOS+1
.1253	85 07		sta $07				sta 	TOS+1
.1255	4c 00 00	jmp $0000			jmp 	Next
.1258					OneComplement:
.1258	a5 06		lda $06				lda 	TOS
.125a	49 ff		eor #$ff			eor 	#$FF
.125c	85 06		sta $06				sta 	TOS
.125e	a5 07		lda $07				lda 	TOS+1
.1260	49 ff		eor #$ff			eor 	#$FF
.1262	85 07		sta $07				sta 	TOS+1
.1264	4c 00 00	jmp $0000			jmp 	Next
.1267					CheckMinus:
.1267	a5 07		lda $07				lda 	TOS+1
.1269	30 07		bmi $1272			bmi 	UnaryTrue
.126b					UnaryFalse:
.126b	64 06		stz $06				stz 	TOS
.126d	64 07		stz $07				stz 	TOS+1
.126f	4c 00 00	jmp $0000			jmp 	Next
.1272					UnaryTrue:
.1272	a9 ff		lda #$ff			lda 	#$FF
.1274	85 06		sta $06				sta 	TOS
.1276	85 07		sta $07				sta 	TOS+1
.1278	4c 00 00	jmp $0000			jmp 	Next
.127b					CheckZero:
.127b	a5 06		lda $06				lda 	TOS
.127d	05 07		ora $07				ora 	TOS+1
.127f	d0 ea		bne $126b			bne 	UnaryFalse
.1281	80 ef		bra $1272			bra 	UnaryTrue
.1283					ByteSwap:
.1283	a5 06		lda $06				lda 	TOS
.1285	a4 07		ldy $07				ldy 	TOS+1
.1287	85 07		sta $07				sta 	TOS+1
.1289	84 06		sty $06				sty 	TOS
.128b	4c 00 00	jmp $0000			jmp 	Next
.128e					Times2:
.128e	06 06		asl $06				asl 	TOS
.1290	26 07		rol $07				rol 	TOS+1
.1292	4c 00 00	jmp $0000			jmp 	Next
.1295					Times4:
.1295	06 06		asl $06				asl 	TOS
.1297	26 07		rol $07				rol 	TOS+1
.1299	06 06		asl $06				asl 	TOS
.129b	26 07		rol $07				rol 	TOS+1
.129d	4c 00 00	jmp $0000			jmp 	Next
.12a0					Times16:
.12a0	06 06		asl $06				asl 	TOS
.12a2	26 07		rol $07				rol 	TOS+1
.12a4	06 06		asl $06				asl 	TOS
.12a6	26 07		rol $07				rol 	TOS+1
.12a8	06 06		asl $06				asl 	TOS
.12aa	26 07		rol $07				rol 	TOS+1
.12ac	06 06		asl $06				asl 	TOS
.12ae	26 07		rol $07				rol 	TOS+1
.12b0	4c 00 00	jmp $0000			jmp 	Next
.12b3					Divide2:
.12b3	a5 07		lda $07				lda 	TOS+1
.12b5	0a		asl a				asl 	a
.12b6	66 07		ror $07				ror 	TOS+1
.12b8	66 06		ror $06				ror 	TOS
.12ba	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.12bd					Constant0:
.12bd	a5 06		lda $06				lda 	TOS
.12bf	48		pha				pha
.12c0	a5 07		lda $07				lda 	TOS+1
.12c2	48		pha				pha
.12c3	64 06		stz $06				stz 	TOS
.12c5	64 07		stz $07				stz 	TOS+1
.12c7	4c 00 00	jmp $0000			jmp 	Next
.12ca					ConstantMinus1:
.12ca	a5 06		lda $06				lda 	TOS
.12cc	48		pha				pha
.12cd	a5 07		lda $07				lda 	TOS+1
.12cf	48		pha				pha
.12d0	a9 ff		lda #$ff			lda 	#$FF
.12d2	85 06		sta $06				sta 	TOS
.12d4	85 07		sta $07				sta 	TOS+1
.12d6	4c 00 00	jmp $0000			jmp 	Next
.12d9					C1:
.12d9	a0 01		ldy #$01			ldy 	#1
.12db	80 24		bra $1301			bra 	Const1Byte
.12dd					C2:
.12dd	a0 02		ldy #$02			ldy 	#2
.12df	80 20		bra $1301			bra 	Const1Byte
.12e1					C3:
.12e1	a0 03		ldy #$03			ldy 	#3
.12e3	80 1c		bra $1301			bra 	Const1Byte
.12e5					C4:
.12e5	a0 04		ldy #$04			ldy 	#4
.12e7	80 18		bra $1301			bra 	Const1Byte
.12e9					C5:
.12e9	a0 05		ldy #$05			ldy 	#5
.12eb	80 14		bra $1301			bra 	Const1Byte
.12ed					C8:
.12ed	a0 08		ldy #$08			ldy 	#8
.12ef	80 10		bra $1301			bra 	Const1Byte
.12f1					C10:
.12f1	a0 0a		ldy #$0a			ldy 	#10
.12f3	80 0c		bra $1301			bra 	Const1Byte
.12f5					C15:
.12f5	a0 0f		ldy #$0f			ldy 	#15
.12f7	80 08		bra $1301			bra 	Const1Byte
.12f9					C16:
.12f9	a0 10		ldy #$10			ldy 	#16
.12fb	80 04		bra $1301			bra 	Const1Byte
.12fd					C24:
.12fd	a0 18		ldy #$18			ldy 	#24
.12ff	80 00		bra $1301			bra 	Const1Byte
.1301					Const1Byte:
.1301	a5 06		lda $06				lda 	TOS
.1303	48		pha				pha
.1304	a5 07		lda $07				lda 	TOS+1
.1306	48		pha				pha
.1307	84 06		sty $06				sty 	TOS
.1309	64 07		stz $07				stz 	TOS+1
.130b	4c 00 00	jmp $0000			jmp 	Next
.130e					C32:
.130e	a0 20		ldy #$20			ldy 	#32
.1310	80 ef		bra $1301			bra 	Const1Byte
.1312					C48:
.1312	a0 30		ldy #$30			ldy 	#48
.1314	80 eb		bra $1301			bra 	Const1Byte
.1316					C50:
.1316	a0 32		ldy #$32			ldy 	#50
.1318	80 e7		bra $1301			bra 	Const1Byte
.131a					C63:
.131a	a0 3f		ldy #$3f			ldy 	#63
.131c	80 e3		bra $1301			bra 	Const1Byte
.131e					C64:
.131e	a0 40		ldy #$40			ldy 	#64
.1320	80 df		bra $1301			bra 	Const1Byte
.1322					C100:
.1322	a0 64		ldy #$64			ldy 	#100
.1324	80 db		bra $1301			bra 	Const1Byte
.1326					C127:
.1326	a0 7f		ldy #$7f			ldy 	#127
.1328	80 d7		bra $1301			bra 	Const1Byte
.132a					C128:
.132a	a0 80		ldy #$80			ldy 	#128
.132c	80 d3		bra $1301			bra 	Const1Byte
.132e					C255:
.132e	a0 ff		ldy #$ff			ldy 	#255
.1330	80 cf		bra $1301			bra 	Const1Byte
.1332					Const2Byte:
.1332	85 06		sta $06				sta 	TOS
.1334	84 07		sty $07				sty 	TOS+1
.1336	4c 00 00	jmp $0000			jmp 	Next
.1339					C256:
.1339	a5 06		lda $06				lda 	TOS
.133b	48		pha				pha
.133c	a5 07		lda $07				lda 	TOS+1
.133e	48		pha				pha
.133f	a9 00		lda #$00			lda 	#(256) & $FF
.1341	a0 01		ldy #$01			ldy 	#(256) >> 8
.1343	80 ed		bra $1332			bra 	Const2Byte
.1345					C512:
.1345	a5 06		lda $06				lda 	TOS
.1347	48		pha				pha
.1348	a5 07		lda $07				lda 	TOS+1
.134a	48		pha				pha
.134b	a9 00		lda #$00			lda 	#(512) & $FF
.134d	a0 02		ldy #$02			ldy 	#(512) >> 8
.134f	80 e1		bra $1332			bra 	Const2Byte
.1351					C1024:
.1351	a5 06		lda $06				lda 	TOS
.1353	48		pha				pha
.1354	a5 07		lda $07				lda 	TOS+1
.1356	48		pha				pha
.1357	a9 00		lda #$00			lda 	#(1024) & $FF
.1359	a0 04		ldy #$04			ldy 	#(1024) >> 8
.135b	80 d5		bra $1332			bra 	Const2Byte
.135d					C4096:
.135d	a5 06		lda $06				lda 	TOS
.135f	48		pha				pha
.1360	a5 07		lda $07				lda 	TOS+1
.1362	48		pha				pha
.1363	a9 00		lda #$00			lda 	#(4096) & $FF
.1365	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1367	80 c9		bra $1332			bra 	Const2Byte
.1369					C32767:
.1369	a5 06		lda $06				lda 	TOS
.136b	48		pha				pha
.136c	a5 07		lda $07				lda 	TOS+1
.136e	48		pha				pha
.136f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1371	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1373	80 bd		bra $1332			bra 	Const2Byte
.1375					C32768:
.1375	a5 06		lda $06				lda 	TOS
.1377	48		pha				pha
.1378	a5 07		lda $07				lda 	TOS+1
.137a	48		pha				pha
.137b	a9 00		lda #$00			lda 	#(32768) & $FF
.137d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.137f	80 b1		bra $1332			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1381					Drop:
.1381	68		pla				pla
.1382	85 07		sta $07				sta 	TOS+1
.1384	68		pla				pla
.1385	85 06		sta $06				sta 	TOS
.1387	4c 00 00	jmp $0000			jmp 	Next
.138a					TestDup:
.138a	a5 06		lda $06				lda 	TOS
.138c	05 07		ora $07				ora 	TOS+1
.138e	d0 03		bne $1393			bne 	Dup
.1390	4c 00 00	jmp $0000			jmp 	Next
.1393					Dup:
.1393	a5 06		lda $06				lda 	TOS
.1395	48		pha				pha
.1396	a5 07		lda $07				lda 	TOS+1
.1398	48		pha				pha
.1399	4c 00 00	jmp $0000			jmp 	Next
.139c					Swap:
.139c	86 0a		stx $0a				stx 	temp1
.139e	7a		ply				ply
.139f	fa		plx				plx
.13a0	a5 06		lda $06				lda 	TOS
.13a2	48		pha				pha
.13a3	a5 07		lda $07				lda 	TOS+1
.13a5	48		pha				pha
.13a6	86 06		stx $06				stx 	TOS
.13a8	84 07		sty $07				sty 	TOS+1
.13aa	a6 0a		ldx $0a				ldx 	temp1
.13ac	4c 00 00	jmp $0000			jmp 	Next
.13af					Over:
.13af	a5 06		lda $06				lda 	TOS
.13b1	48		pha				pha
.13b2	a5 07		lda $07				lda 	TOS+1
.13b4	48		pha				pha
.13b5	86 0a		stx $0a				stx 	temp1
.13b7	ba		tsx				tsx
.13b8	bd 04 01	lda $0104,x			lda 	stack3low,x
.13bb	85 06		sta $06				sta 	TOS
.13bd	bd 03 01	lda $0103,x			lda 	stack3High,x
.13c0	85 07		sta $07				sta 	TOS+1
.13c2	a6 0a		ldx $0a				ldx 	temp1
.13c4	4c 00 00	jmp $0000			jmp 	Next
.13c7					Nip:
.13c7	68		pla				pla
.13c8	68		pla				pla
.13c9	4c 00 00	jmp $0000			jmp 	Next
.13cc					Rot:
.13cc	86 0a		stx $0a				stx 	temp1
.13ce	ba		tsx				tsx
.13cf	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.13d2	a8		tay				tay
.13d3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.13d6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.13d9	a5 06		lda $06				lda 	TOS
.13db	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.13de	84 06		sty $06				sty 	TOS
.13e0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.13e3	a8		tay				tay
.13e4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.13e7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.13ea	a5 07		lda $07				lda 	TOS+1
.13ec	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13ef	84 07		sty $07				sty 	TOS+1
.13f1	a6 0a		ldx $0a				ldx 	temp1
.13f3	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.13f6					ByteRead:
.13f6	b2 06		lda ($06)			lda 	(TOS)
.13f8	85 06		sta $06				sta 	TOS
.13fa	64 07		stz $07				stz 	TOS+1
.13fc	4c 00 00	jmp $0000			jmp 	Next
.13ff					WordRead:
.13ff	a0 01		ldy #$01			ldy 	#1
.1401	b1 06		lda ($06),y			lda 	(TOS),y
.1403	a8		tay				tay
.1404	b2 06		lda ($06)			lda 	(TOS)
.1406	85 06		sta $06				sta 	TOS
.1408	84 07		sty $07				sty 	TOS+1
.140a	4c 00 00	jmp $0000			jmp 	Next
.140d					ByteWrite:
.140d	68		pla				pla
.140e	68		pla				pla
.140f	92 06		sta ($06)			sta 	(TOS)
.1411	68		pla				pla
.1412	85 07		sta $07				sta 	TOS+1
.1414	68		pla				pla
.1415	85 06		sta $06				sta 	TOS
.1417	4c 00 00	jmp $0000			jmp 	Next
.141a					WordWrite:
.141a	68		pla				pla
.141b	a0 01		ldy #$01			ldy 	#1
.141d	91 06		sta ($06),y			sta 	(TOS),y
.141f	68		pla				pla
.1420	92 06		sta ($06)			sta 	(TOS)
.1422	68		pla				pla
.1423	85 07		sta $07				sta 	TOS+1
.1425	68		pla				pla
.1426	85 06		sta $06				sta 	TOS
.1428	4c 00 00	jmp $0000			jmp 	Next
.142b					WordAdd:
.142b	7a		ply				ply
.142c	68		pla				pla
.142d	18		clc				clc
.142e	72 06		adc ($06)			adc 	(TOS)
.1430	92 06		sta ($06)			sta 	(TOS)
.1432	98		tya				tya
.1433	a0 01		ldy #$01			ldy 	#1
.1435	71 06		adc ($06),y			adc 	(TOS),y
.1437	91 06		sta ($06),y			sta 	(TOS),y
.1439	68		pla				pla
.143a	85 07		sta $07				sta 	TOS+1
.143c	68		pla				pla
.143d	85 06		sta $06				sta 	TOS
.143f	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1442					RepeatHandler:
.1442	4c 00 00	jmp $0000			jmp 	Next
.1445					UntilHandler:
.1445	4c 48 14	jmp $1448			jmp 	BranchBackwardsIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1448					BranchBackwardsIfZero:
.1448	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.144a	05 07		ora $07				ora 	TOS+1
.144c	f0 0a		beq $1458			beq 	BranchBackwardsTestSucceeds
.144e					BranchTestFails:
.144e	68		pla				pla
.144f	85 07		sta $07				sta 	TOS+1
.1451	68		pla				pla
.1452	85 06		sta $06				sta 	TOS
.1454	e8		inx				inx 								; skip over the relative branch.
.1455	4c 00 00	jmp $0000			jmp 	Next
.1458					BranchBackwardsTestSucceeds:
.1458	68		pla				pla
.1459	85 07		sta $07				sta 	TOS+1
.145b	68		pla				pla
.145c	85 06		sta $06				sta 	TOS
.145e	e8		inx				inx 								; advance by one, to skip the offset
.145f	8a		txa				txa 								; A = Y = position
.1460	a8		tay				tay
.1461	c8		iny				iny 								; (IP),Y now points to the back branch.
.1462	38		sec				sec
.1463	f1 03		sbc ($03),y			sbc 	(IP),y 						; adjust the position backwards
.1465	aa		tax				tax 								; position back in this line.
.1466	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1469					CallHandler:
.1469	e8		inx				inx									; bump X to the call address.
.146a	e8		inx				inx
.146b	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.146d	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.146f	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1471	f0 4b		beq $14be			beq 	_CHOverflow
.1473	a5 04		lda $04				lda 	IP+1
.1475	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1478	a5 03		lda $03				lda 	IP
.147a	99 00 07	sta $0700,y			sta 	returnStackLow,y
.147d	8a		txa				txa
.147e	99 80 07	sta $0780,y			sta 	returnStackX,y
.1481	8a		txa				txa 								; get the line number into temp1.
.1482	a8		tay				tay
.1483	b1 03		lda ($03),y			lda 	(IP),y
.1485	85 0a		sta $0a				sta 	temp1
.1487	c8		iny				iny
.1488	b1 03		lda ($03),y			lda 	(IP),y
.148a	85 0b		sta $0b				sta 	temp1+1
.148c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.148e	85 03		sta $03				sta 	0+(IP)
.1490	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1492	85 04		sta $04				sta 	1+(IP)
.1494	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1496	f0 17		beq $14af			beq 	_CHFail
.1498	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.149a					_CHSearch:
.149a	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.149c	c5 0a		cmp $0a				cmp 	temp1
.149e	f0 2d		beq $14cd			beq 	_CHFoundLSB
.14a0					_CHSearchNext:
.14a0	18		clc				clc
.14a1	a5 03		lda $03				lda 	IP
.14a3	72 03		adc ($03)			adc 	(IP)
.14a5	85 03		sta $03				sta 	IP
.14a7	90 02		bcc $14ab			bcc 	_NoCarryAdv
.14a9	e6 04		inc $04				inc 	IP+1
.14ab					_NoCarryAdv:
.14ab	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.14ad	d0 eb		bne $149a			bne 	_CHSearch
.14af					_CHFail:
.14af	20 58 16	jsr $1658			jsr 	ErrorHandler
>14b2	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>14ba	4f 4e 3f 00
.14be					_CHOverflow:
.14be	20 58 16	jsr $1658			jsr 	ErrorHandler
>14c1	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>14c9	54 48 3f 00
.14cd					_CHFoundLSB:
.14cd	c8		iny				iny 								; get MSB
.14ce	b1 03		lda ($03),y			lda 	(IP),y
.14d0	88		dey				dey
.14d1	c5 0b		cmp $0b				cmp 	temp1+1 					; matches, if not contineu
.14d3	d0 cb		bne $14a0			bne 	_CHSearchNext
.14d5	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.14d7	b1 03		lda ($03),y			lda 	(IP),y
.14d9	c9 44		cmp #$44			cmp 	#DefineCode & $FF
.14db	d0 d2		bne $14af			bne 	_CHFail
.14dd	c8		iny				iny
.14de	b1 03		lda ($03),y			lda 	(IP),y
.14e0	c9 16		cmp #$16			cmp 	#DefineCode >> 8
.14e2	d0 cb		bne $14af			bne 	_CHFail
.14e4	c8		iny				iny
.14e5	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.14e7	18		clc				clc
.14e8	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.14ea	aa		tax				tax
.14eb	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.14ee					ReturnHandler:
.14ee	a4 05		ldy $05				ldy 	rsp 						; get rsp
.14f0	30 15		bmi $1507			bmi 	_RHUnderflow 				; if -ve underflowed
.14f2	c6 05		dec $05				dec 	rsp 						; decrement rsp
.14f4	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.14f7	85 04		sta $04				sta 	IP+1
.14f9	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.14fc	85 03		sta $03				sta 	IP
.14fe	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1501	aa		tax				tax
.1502	f0 0e		beq $1512			beq 	_RHInLoop 					; this means you have done :something for ; next
.1504	4c 00 00	jmp $0000			jmp 	Next
.1507					_RHUnderflow:
.1507	20 58 16	jsr $1658			jsr 	ErrorHandler
>150a	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1512					_RHInLoop:
.1512	20 58 16	jsr $1658			jsr 	ErrorHandler
>1515	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>151d	4e 20 4c 4f 4f 50 3f 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1525					NewHandler:
.1525	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1528	20 34 15	jsr $1534			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.152b	4c 00 00	jmp $0000			jmp 	Next
.152e					ClrHandler:
.152e	20 34 15	jsr $1534			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1531	4c 00 00	jmp $0000			jmp 	Next
.1534					ClearVariableSpace:
.1534	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1536	85 05		sta $05				sta 	rsp
.1538	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.153a	85 08		sta $08				sta 	0+(nextFreeMem)
.153c	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.153e	85 09		sta $09				sta 	1+(nextFreeMem)
.1540	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1542					_CVSHashClear:
.1542	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1544	99 40 06	sta $0640,y			sta 	hashTable,y
.1547	88		dey				dey
.1548	10 f8		bpl $1542			bpl 	_CVSHashClear
.154a					_CVSFindEnd:
.154a	18		clc				clc
.154b	a5 08		lda $08				lda 	nextFreeMem
.154d	72 08		adc ($08)			adc 	(nextFreeMem)
.154f	85 08		sta $08				sta 	nextFreeMem
.1551	90 02		bcc $1555			bcc 	_NoCarryAdv
.1553	e6 09		inc $09				inc 	nextFreeMem+1
.1555					_NoCarryAdv:
.1555	b2 08		lda ($08)			lda 	(nextFreeMem)
.1557	d0 f1		bne $154a			bne 	_CVSFindEnd
.1559	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.155b	a0 00		ldy #$00			ldy 	#0
.155d	20 61 15	jsr $1561			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1560	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1561					AdvanceFreeMem:
.1561	18		clc				clc
.1562	65 08		adc $08				adc 	nextFreeMem
.1564	85 08		sta $08				sta 	nextFreeMem
.1566	98		tya				tya
.1567	65 09		adc $09				adc 	nextFreeMem+1
.1569	85 09		sta $09				sta 	nextFreeMem+1
.156b	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.156c					ExitDump:
.156c	ba		tsx				tsx 								; save Data Stack in temp1
.156d	86 0a		stx $0a				stx 	temp1
.156f	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1572					BreakCmd:
>1572	ff						.byte 	$FF
.1573	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1576					Call6502:
.1576	a5 06		lda $06				lda 	TOS 						; copy call address
.1578	85 0a		sta $0a				sta 	temp1
.157a	a5 07		lda $07				lda 	TOS+1
.157c	85 0b		sta $0b				sta 	temp1+1
.157e	68		pla				pla
.157f	85 07		sta $07				sta 	TOS+1
.1581	68		pla				pla
.1582	85 06		sta $06				sta 	TOS
.1584	20 8a 15	jsr $158a			jsr 	_CallTemp1 					; call it
.1587	4c 00 00	jmp $0000			jmp 	Next
.158a					_CallTemp1:
.158a	6c 0a 00	jmp ($000a)			jmp 	(temp1)
.158d					AssertCode:
.158d	a5 06		lda $06				lda 	TOS 						; TOS = 0
.158f	05 07		ora $07				ora 	TOS+1
.1591	f0 09		beq $159c			beq 	_ASFail 					; if zero fail
.1593	68		pla				pla
.1594	85 07		sta $07				sta 	TOS+1
.1596	68		pla				pla
.1597	85 06		sta $06				sta 	TOS
.1599	4c 00 00	jmp $0000			jmp 	Next
.159c					_ASFail:
.159c	20 58 16	jsr $1658			jsr 	ErrorHandler
>159f	41 53 53 45 52 54 00				.text 	"ASSERT",0
.15a6					StopCode:
.15a6	20 58 16	jsr $1658			jsr 	ErrorHandler
>15a9	53 54 4f 50 00					.text 	"STOP",0
.15ae					EndProgram:
.15ae	4c 55 16	jmp $1655			jmp 	WarmStart

;******  Return to file: kernel.asm


;******  Processing file: words/system/number.src

.15b1					ConvertToInteger:
.15b1	64 0e		stz $0e				stz 	temp3 						; reset value
.15b3	64 0f		stz $0f				stz 	temp3+1
.15b5	64 0a		stz $0a				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.15b7	a0 00		ldy #$00			ldy 	#0 							; look at first character
.15b9	b1 06		lda ($06),y			lda 	(TOS),y
.15bb	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.15bd	d0 03		bne $15c2			bne 	_CTILoop
.15bf	c6 0a		dec $0a				dec 	temp1
.15c1	c8		iny				iny
.15c2					_CTILoop:
.15c2	b1 06		lda ($06),y			lda 	(TOS),y 					; next digit
.15c4	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.15c6	38		sec				sec
.15c7	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.15c9	90 55		bcc $1620			bcc 	_CTIFail 					; out of range.
.15cb	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.15cd	90 0b		bcc $15da			bcc 	_CTILegal
.15cf	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.15d1	90 4d		bcc $1620			bcc 	_CTIFail
.15d3	38		sec				sec
.15d4	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.15d6	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.15d8	b0 46		bcs $1620			bcs 	_CTIFail
.15da					_CTILegal:
.15da	85 0b		sta $0b				sta 	temp1+1 					; save digit value.
.15dc	06 0e		asl $0e				asl 	temp3
.15de	26 0f		rol $0f				rol 	temp3+1
.15e0	a5 0e		lda $0e				lda 	temp3 						; copy x2 into temp2
.15e2	85 0c		sta $0c				sta 	temp2
.15e4	a5 0f		lda $0f				lda 	temp3+1
.15e6	85 0d		sta $0d				sta 	temp2+1
.15e8	06 0e		asl $0e				asl 	temp3
.15ea	26 0f		rol $0f				rol 	temp3+1
.15ec	06 0e		asl $0e				asl 	temp3
.15ee	26 0f		rol $0f				rol 	temp3+1
.15f0	24 0a		bit $0a				bit 	temp1 						; hexadecimal
.15f2	10 06		bpl $15fa			bpl 	_CTIDecimal
.15f4	06 0e		asl $0e				asl 	temp3
.15f6	26 0f		rol $0f				rol 	temp3+1
.15f8	80 13		bra $160d			bra 	_CTIAddLoop
.15fa					_CTIDecimal:
.15fa	18		clc				clc 								; x 8 + x 2 = x 10
.15fb	a5 0e		lda $0e				lda 	temp3
.15fd	65 0c		adc $0c				adc 	temp2
.15ff	85 0e		sta $0e				sta 	temp3
.1601	a5 0f		lda $0f				lda 	temp3+1
.1603	65 0d		adc $0d				adc 	temp2+1
.1605	85 0f		sta $0f				sta 	temp3+1
.1607	a5 0b		lda $0b				lda 	temp1+1 					; check digit 0-9
.1609	c9 0a		cmp #$0a			cmp 	#10
.160b	b0 13		bcs $1620			bcs 	_CTIFail
.160d					_CTIAddLoop:
.160d	18		clc				clc
.160e	a5 0e		lda $0e				lda 	temp3
.1610	65 0b		adc $0b				adc 	temp1+1
.1612	85 0e		sta $0e				sta 	temp3
.1614	90 02		bcc $1618			bcc 	_CTINoCarry
.1616	e6 0f		inc $0f				inc 	temp3+1
.1618					_CTINoCarry:
.1618	b1 06		lda ($06),y			lda 	(TOS),y 					; was this the last character
.161a	c8		iny				iny
.161b	0a		asl a				asl 	a
.161c	90 a4		bcc $15c2			bcc 	_CTILoop 					; no, go back.
.161e					_CTIOkay:
.161e	38		sec				sec
.161f	60		rts				rts
.1620					_CTIFail:
.1620	18		clc				clc
.1621	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1622					NextLine:
.1622	18		clc				clc
.1623	a5 03		lda $03				lda 	IP
.1625	72 03		adc ($03)			adc 	(IP)
.1627	85 03		sta $03				sta 	IP
.1629	90 02		bcc $162d			bcc 	_NoCarryAdv
.162b	e6 04		inc $04				inc 	IP+1
.162d					_NoCarryAdv:
.162d	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.162f	f0 05		beq $1636			beq 	_NLGoEnd
.1631	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1633	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1636					_NLGoEnd:
.1636	4c 55 16	jmp $1655			jmp 	WarmStart
.1639					SkipComment:
.1639	e8		inx				inx									; (IP),X points to the length.
.163a	e8		inx				inx
.163b	8a		txa				txa
.163c	a8		tay				tay 								; put into Y
.163d	18		clc				clc
.163e	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1640	aa		tax				tax 								; put back in X
.1641	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1644					DefineCode:
.1644	20 58 16	jsr $1658			jsr 	ErrorHandler
>1647	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>164f	4f 4e 3f 00

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1653					VarReadHandler:
>1653	ff						.byte 	$FF
.1654					VarWriteHandler:
>1654	ff						.byte 	$FF

;******  Return to file: kernel.asm

.1655					WarmStart:
>1655	ff						.byte 	$FF
.1656	a2 00		ldx #$00			ldx 	#$00
.1658					ErrorHandler:
>1658	ff						.byte 	$FF
.1659	a2 5e		ldx #$5e			ldx 	#$5E
.165b					Dictionary:

;******  Processing file: generated/dictionary.inc

>165b	05					.byte	_end1-*
>165c	00					.byte	$00
>165d	1a 14					.word	WordWrite
>165f	a1					.byte	$a1
.1660					_end1:
>1660	0e					.byte	_end2-*
>1661	40					.byte	$40
>1662	54 16					.word	VarWriteHandler
>1664	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>166c	45 d2
.166e					_end2:
>166e	0e					.byte	_end3-*
>166f	40					.byte	$40
>1670	53 16					.word	VarReadHandler
>1672	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>167a	45 d2
.167c					_end3:
>167c	0a					.byte	_end4-*
>167d	40					.byte	$40
>167e	69 14					.word	CallHandler
>1680	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1686					_end4:
>1686	0d					.byte	_end5-*
>1687	40					.byte	$40
>1688	39 16					.word	SkipComment
>168a	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1692	d4
.1693					_end5:
>1693	0c					.byte	_end6-*
>1694	40					.byte	$40
>1695	44 16					.word	DefineCode
>1697	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.169f					_end6:
>169f	0d					.byte	_end7-*
>16a0	40					.byte	$40
>16a1	21 10					.word	Literal2Byte
>16a3	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>16ab	cc
.16ac					_end7:
>16ac	0e					.byte	_end8-*
>16ad	80					.byte	$80
>16ae	22 16					.word	NextLine
>16b0	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>16b8	4e c5
.16ba					_end8:
>16ba	0c					.byte	_end9-*
>16bb	40					.byte	$40
>16bc	37 10					.word	LiteralString
>16be	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.16c6					_end9:
>16c6	05					.byte	_end10-*
>16c7	00					.byte	$00
>16c8	d2 11					.word	Multiply16x16
>16ca	aa					.byte	$aa
.16cb					_end10:
>16cb	05					.byte	_end11-*
>16cc	00					.byte	$00
>16cd	54 10					.word	Add
>16cf	ab					.byte	$ab
.16d0					_end11:
>16d0	06					.byte	_end12-*
>16d1	00					.byte	$00
>16d2	2b 14					.word	WordAdd
>16d4	2b a1					.byte	$2b,$a1
.16d6					_end12:
>16d6	05					.byte	_end13-*
>16d7	00					.byte	$00
>16d8	63 10					.word	Subtract
>16da	ad					.byte	$ad
.16db					_end13:
>16db	06					.byte	_end14-*
>16dc	00					.byte	$00
>16dd	ca 12					.word	ConstantMinus1
>16df	2d b1					.byte	$2d,$b1
.16e1					_end14:
>16e1	05					.byte	_end15-*
>16e2	00					.byte	$00
>16e3	23 11					.word	Divide16x16
>16e5	af					.byte	$af
.16e6					_end15:
>16e6	05					.byte	_end16-*
>16e7	00					.byte	$00
>16e8	bd 12					.word	Constant0
>16ea	b0					.byte	$b0
.16eb					_end16:
>16eb	06					.byte	_end17-*
>16ec	00					.byte	$00
>16ed	67 12					.word	CheckMinus
>16ef	30 bc					.byte	$30,$bc
.16f1					_end17:
>16f1	06					.byte	_end18-*
>16f2	00					.byte	$00
>16f3	7b 12					.word	CheckZero
>16f5	30 bd					.byte	$30,$bd
.16f7					_end18:
>16f7	05					.byte	_end19-*
>16f8	00					.byte	$00
>16f9	d9 12					.word	C1
>16fb	b1					.byte	$b1
.16fc					_end19:
>16fc	06					.byte	_end20-*
>16fd	00					.byte	$00
>16fe	11 12					.word	Unary1Plus
>1700	31 ab					.byte	$31,$ab
.1702					_end20:
>1702	06					.byte	_end21-*
>1703	00					.byte	$00
>1704	28 12					.word	Unary1Minus
>1706	31 ad					.byte	$31,$ad
.1708					_end21:
>1708	06					.byte	_end22-*
>1709	00					.byte	$00
>170a	f1 12					.word	C10
>170c	31 b0					.byte	$31,$b0
.170e					_end22:
>170e	07					.byte	_end23-*
>170f	00					.byte	$00
>1710	22 13					.word	C100
>1712	31 30 b0				.byte	$31,$30,$b0
.1715					_end23:
>1715	08					.byte	_end24-*
>1716	00					.byte	$00
>1717	51 13					.word	C1024
>1719	31 30 32 b4				.byte	$31,$30,$32,$b4
.171d					_end24:
>171d	07					.byte	_end25-*
>171e	00					.byte	$00
>171f	26 13					.word	C127
>1721	31 32 b7				.byte	$31,$32,$b7
.1724					_end25:
>1724	07					.byte	_end26-*
>1725	00					.byte	$00
>1726	2a 13					.word	C128
>1728	31 32 b8				.byte	$31,$32,$b8
.172b					_end26:
>172b	06					.byte	_end27-*
>172c	00					.byte	$00
>172d	f5 12					.word	C15
>172f	31 b5					.byte	$31,$b5
.1731					_end27:
>1731	06					.byte	_end28-*
>1732	00					.byte	$00
>1733	f9 12					.word	C16
>1735	31 b6					.byte	$31,$b6
.1737					_end28:
>1737	07					.byte	_end29-*
>1738	00					.byte	$00
>1739	a0 12					.word	Times16
>173b	31 36 aa				.byte	$31,$36,$aa
.173e					_end29:
>173e	05					.byte	_end30-*
>173f	00					.byte	$00
>1740	dd 12					.word	C2
>1742	b2					.byte	$b2
.1743					_end30:
>1743	06					.byte	_end31-*
>1744	00					.byte	$00
>1745	8e 12					.word	Times2
>1747	32 aa					.byte	$32,$aa
.1749					_end31:
>1749	06					.byte	_end32-*
>174a	00					.byte	$00
>174b	1a 12					.word	Unary2Plus
>174d	32 ab					.byte	$32,$ab
.174f					_end32:
>174f	06					.byte	_end33-*
>1750	00					.byte	$00
>1751	33 12					.word	Unary2Minus
>1753	32 ad					.byte	$32,$ad
.1755					_end33:
>1755	06					.byte	_end34-*
>1756	00					.byte	$00
>1757	b3 12					.word	Divide2
>1759	32 af					.byte	$32,$af
.175b					_end34:
>175b	06					.byte	_end35-*
>175c	00					.byte	$00
>175d	fd 12					.word	C24
>175f	32 b4					.byte	$32,$b4
.1761					_end35:
>1761	07					.byte	_end36-*
>1762	00					.byte	$00
>1763	2e 13					.word	C255
>1765	32 35 b5				.byte	$32,$35,$b5
.1768					_end36:
>1768	07					.byte	_end37-*
>1769	00					.byte	$00
>176a	39 13					.word	C256
>176c	32 35 b6				.byte	$32,$35,$b6
.176f					_end37:
>176f	05					.byte	_end38-*
>1770	00					.byte	$00
>1771	e1 12					.word	C3
>1773	b3					.byte	$b3
.1774					_end38:
>1774	06					.byte	_end39-*
>1775	00					.byte	$00
>1776	0e 13					.word	C32
>1778	33 b2					.byte	$33,$b2
.177a					_end39:
>177a	09					.byte	_end40-*
>177b	00					.byte	$00
>177c	69 13					.word	C32767
>177e	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.1783					_end40:
>1783	09					.byte	_end41-*
>1784	00					.byte	$00
>1785	75 13					.word	C32768
>1787	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.178c					_end41:
>178c	05					.byte	_end42-*
>178d	00					.byte	$00
>178e	e5 12					.word	C4
>1790	b4					.byte	$b4
.1791					_end42:
>1791	06					.byte	_end43-*
>1792	00					.byte	$00
>1793	95 12					.word	Times4
>1795	34 aa					.byte	$34,$aa
.1797					_end43:
>1797	06					.byte	_end44-*
>1798	00					.byte	$00
>1799	16 13					.word	C50
>179b	34 b0					.byte	$34,$b0
.179d					_end44:
>179d	08					.byte	_end45-*
>179e	00					.byte	$00
>179f	5d 13					.word	C4096
>17a1	34 30 39 b6				.byte	$34,$30,$39,$b6
.17a5					_end45:
>17a5	06					.byte	_end46-*
>17a6	00					.byte	$00
>17a7	12 13					.word	C48
>17a9	34 b8					.byte	$34,$b8
.17ab					_end46:
>17ab	05					.byte	_end47-*
>17ac	00					.byte	$00
>17ad	e9 12					.word	C5
>17af	b5					.byte	$b5
.17b0					_end47:
>17b0	07					.byte	_end48-*
>17b1	00					.byte	$00
>17b2	45 13					.word	C512
>17b4	35 31 b2				.byte	$35,$31,$b2
.17b7					_end48:
>17b7	06					.byte	_end49-*
>17b8	00					.byte	$00
>17b9	1a 13					.word	C63
>17bb	36 b3					.byte	$36,$b3
.17bd					_end49:
>17bd	06					.byte	_end50-*
>17be	00					.byte	$00
>17bf	1e 13					.word	C64
>17c1	36 b4					.byte	$36,$b4
.17c3					_end50:
>17c3	05					.byte	_end51-*
>17c4	00					.byte	$00
>17c5	ed 12					.word	C8
>17c7	b8					.byte	$b8
.17c8					_end51:
>17c8	05					.byte	_end52-*
>17c9	40					.byte	$40
>17ca	ee 14					.word	ReturnHandler
>17cc	bb					.byte	$bb
.17cd					_end52:
>17cd	05					.byte	_end53-*
>17ce	00					.byte	$00
>17cf	c6 10					.word	CheckLess
>17d1	bc					.byte	$bc
.17d2					_end53:
>17d2	05					.byte	_end54-*
>17d3	00					.byte	$00
>17d4	9d 10					.word	CheckEqual
>17d6	bd					.byte	$bd
.17d7					_end54:
>17d7	05					.byte	_end55-*
>17d8	00					.byte	$00
>17d9	dd 10					.word	CheckGreater
>17db	be					.byte	$be
.17dc					_end55:
>17dc	08					.byte	_end56-*
>17dd	00					.byte	$00
>17de	8a 13					.word	TestDup
>17e0	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.17e4					_end56:
>17e4	05					.byte	_end57-*
>17e5	00					.byte	$00
>17e6	ff 13					.word	WordRead
>17e8	c0					.byte	$c0
.17e9					_end57:
>17e9	07					.byte	_end58-*
>17ea	00					.byte	$00
>17eb	41 12					.word	Absolute
>17ed	41 42 d3				.byte	$41,$42,$d3
.17f0					_end58:
>17f0	07					.byte	_end59-*
>17f1	00					.byte	$00
>17f2	76 10					.word	And
>17f4	41 4e c4				.byte	$41,$4e,$c4
.17f7					_end59:
>17f7	0a					.byte	_end60-*
>17f8	00					.byte	$00
>17f9	8d 15					.word	AssertCode
>17fb	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.1801					_end60:
>1801	09					.byte	_end61-*
>1802	00					.byte	$00
>1803	83 12					.word	ByteSwap
>1805	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.180a					_end61:
>180a	06					.byte	_end62-*
>180b	00					.byte	$00
>180c	0d 14					.word	ByteWrite
>180e	43 a1					.byte	$43,$a1
.1810					_end62:
>1810	06					.byte	_end63-*
>1811	00					.byte	$00
>1812	f6 13					.word	ByteRead
>1814	43 c0					.byte	$43,$c0
.1816					_end63:
>1816	07					.byte	_end64-*
>1817	00					.byte	$00
>1818	2e 15					.word	ClrHandler
>181a	43 4c d2				.byte	$43,$4c,$d2
.181d					_end64:
>181d	08					.byte	_end65-*
>181e	00					.byte	$00
>181f	81 13					.word	Drop
>1821	44 52 4f d0				.byte	$44,$52,$4f,$d0
.1825					_end65:
>1825	07					.byte	_end66-*
>1826	00					.byte	$00
>1827	93 13					.word	Dup
>1829	44 55 d0				.byte	$44,$55,$d0
.182c					_end66:
>182c	07					.byte	_end67-*
>182d	00					.byte	$00
>182e	ae 15					.word	EndProgram
>1830	45 4e c4				.byte	$45,$4e,$c4
.1833					_end67:
>1833	07					.byte	_end68-*
>1834	00					.byte	$00
>1835	f8 10					.word	Maximum
>1837	4d 41 d8				.byte	$4d,$41,$d8
.183a					_end68:
>183a	07					.byte	_end69-*
>183b	00					.byte	$00
>183c	f4 10					.word	Minimum
>183e	4d 49 ce				.byte	$4d,$49,$ce
.1841					_end69:
>1841	07					.byte	_end70-*
>1842	00					.byte	$00
>1843	34 11					.word	Modulus16x16
>1845	4d 4f c4				.byte	$4d,$4f,$c4
.1848					_end70:
>1848	0a					.byte	_end71-*
>1849	00					.byte	$00
>184a	48 12					.word	Negate
>184c	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.1852					_end71:
>1852	07					.byte	_end72-*
>1853	00					.byte	$00
>1854	25 15					.word	NewHandler
>1856	4e 45 d7				.byte	$4e,$45,$d7
.1859					_end72:
>1859	07					.byte	_end73-*
>185a	00					.byte	$00
>185b	c7 13					.word	Nip
>185d	4e 49 d0				.byte	$4e,$49,$d0
.1860					_end73:
>1860	07					.byte	_end74-*
>1861	00					.byte	$00
>1862	58 12					.word	OneComplement
>1864	4e 4f d4				.byte	$4e,$4f,$d4
.1867					_end74:
>1867	06					.byte	_end75-*
>1868	00					.byte	$00
>1869	90 10					.word	LogOr
>186b	4f d2					.byte	$4f,$d2
.186d					_end75:
>186d	08					.byte	_end76-*
>186e	00					.byte	$00
>186f	af 13					.word	Over
>1871	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.1875					_end76:
>1875	0a					.byte	_end77-*
>1876	00					.byte	$00
>1877	42 14					.word	RepeatHandler
>1879	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.187f					_end77:
>187f	07					.byte	_end78-*
>1880	00					.byte	$00
>1881	cc 13					.word	Rot
>1883	52 4f d4				.byte	$52,$4f,$d4
.1886					_end78:
>1886	08					.byte	_end79-*
>1887	00					.byte	$00
>1888	a6 15					.word	StopCode
>188a	53 54 4f d0				.byte	$53,$54,$4f,$d0
.188e					_end79:
>188e	08					.byte	_end80-*
>188f	00					.byte	$00
>1890	9c 13					.word	Swap
>1892	53 57 41 d0				.byte	$53,$57,$41,$d0
.1896					_end80:
>1896	07					.byte	_end81-*
>1897	00					.byte	$00
>1898	76 15					.word	Call6502
>189a	53 59 d3				.byte	$53,$59,$d3
.189d					_end81:
>189d	09					.byte	_end82-*
>189e	00					.byte	$00
>189f	45 14					.word	UntilHandler
>18a1	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.18a6					_end82:
>18a6	0a					.byte	_end83-*
>18a7	40					.byte	$40
>18a8	72 15					.word	BreakCmd
>18aa	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.18b0					_end83:
>18b0	09					.byte	_end84-*
>18b1	00					.byte	$00
>18b2	6c 15					.word	ExitDump
>18b4	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.18b9					_end84:
>18b9	07					.byte	_end85-*
>18ba	00					.byte	$00
>18bb	83 10					.word	Xor
>18bd	58 4f d2				.byte	$58,$4f,$d2
.18c0					_end85:
>18c0	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
