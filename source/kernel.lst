
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 11 13:57:17 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	20 df 10	jsr $10df			jsr 		ExternInitialise
.1006	a9 26		lda #$26			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 cf 11	jsr $11cf			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010	4c 3b 16	jmp $163b			jmp 	EncodeTest
.1013					WarmStart:
.1013	a9 03		lda #$03			lda 	#COL_Yellow
.1015	20 16 11	jsr $1116			jsr 	ExternColour
.1018	20 39 11	jsr $1139			jsr 	ExternInput
.101b	a9 06		lda #$06			lda 	#COL_Cyan
.101d	20 16 11	jsr $1116			jsr 	ExternColour
.1020	4c f3 1b	jmp $1bf3			jmp 	RunProgram
.1023					ErrorHandler:
>1023	ff						.byte 	$FF
.1024	a2 5e		ldx #$5e			ldx 	#$5E
.1026					BootMsg:
>1026	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102e	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103e	2a 0d 0d
>1041	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1049	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1059	30 32 30 0d 0d
>105e	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1065	5b 32 30 2d 30 31 2d 31			.text	"[20-01-11 13:57]"
>106d	31 20 31 33 3a 35 37 5d

;******  Return to file: kernel.asm

>1075	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1078					InitialiseCoreCode:
.1078	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.107a	85 00		sta $00				sta 	Next
.107c	85 01		sta $01				sta 	Next+1
.107e	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1080	85 02		sta $02				sta 	Next+2
.1082	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.1084	84 04		sty $04				sty 	Next+4
.1086	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1088	60		rts				rts								; (2 INX skip offset and line#)
.1089					Literal2Byte:
.1089	a5 06		lda $06				lda 	TOS
.108b	48		pha				pha
.108c	a5 07		lda $07				lda 	TOS+1
.108e	48		pha				pha
.108f	e8		inx				inx  							; point X to the word
.1090	e8		inx				inx
.1091	8a		txa				txa 							; copy into Y
.1092	a8		tay				tay
.1093	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1095	85 06		sta $06				sta 	TOS
.1097	c8		iny				iny 							; read and push the MSB
.1098	b1 03		lda ($03),y			lda 	(IP),y
.109a	85 07		sta $07				sta 	TOS+1
.109c	4c 00 00	jmp $0000			jmp 	Next
.109f					Literal2ByteDecode:
.109f	a9 06		lda #$06			lda 	#CTH_Keyword
.10a1	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.10a4	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a6	aa		tax				tax
.10a7	c8		iny				iny
.10a8	b1 08		lda ($08),y			lda 	(srcPtr),y
.10aa	a8		tay				tay
.10ab	8a		txa				txa
.10ac	38		sec				sec 							; output signed
.10ad	20 59 1b	jsr $1b59			jsr 	DecodeYAToBuffer
.10b0	60		rts				rts
.10b1					LiteralString:
.10b1	a5 06		lda $06				lda 	TOS
.10b3	48		pha				pha
.10b4	a5 07		lda $07				lda 	TOS+1
.10b6	48		pha				pha
.10b7	e8		inx				inx
.10b8	e8		inx				inx 							; skip over current word
.10b9	8a		txa				txa 							; add to IP + 1 to give string address
.10ba	a8		tay				tay 							; put in Y
.10bb	38		sec				sec 							; make that TOS
.10bc	65 03		adc $03				adc 	IP
.10be	85 06		sta $06				sta 	TOS
.10c0	a5 04		lda $04				lda 	IP+1
.10c2	69 00		adc #$00			adc 	#0
.10c4	85 07		sta $07				sta 	TOS+1
.10c6	8a		txa				txa 							; add data length to X
.10c7	18		clc				clc
.10c8	71 03		adc ($03),y			adc 	(IP),y
.10ca	aa		tax				tax
.10cb	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment
.10ce					LiteralStringDecoder:
.10ce	a9 05		lda #$05			lda 	#CTH_String
.10d0	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.10d3	a9 22		lda #$22			lda 	#'"'
.10d5	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.10d8	20 40 1b	jsr $1b40			jsr 	DecodeOutputData
.10db	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.10de	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10df					ExternInitialise:
.10df	a9 90		lda #$90			lda 	#144 						; set colour
.10e1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e4	a9 01		lda #$01			lda 	#$01
.10e6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e9	a9 0e		lda #$0e			lda 	#14							; lower case
.10eb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10ee	a9 93		lda #$93			lda 	#147 						; clear screen
.10f0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f3	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f5	4c 16 11	jmp $1116			jmp 	ExternColour
.10f8					ExternCheckBreak:
.10f8	da		phx				phx 								; make sure we keep XY
.10f9	5a		phy				phy
.10fa	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fd	f0 03		beq $1102			beq		_ECBExit 					; stopped
.10ff	7a		ply				ply 								; restore and exit.
.1100	fa		plx				plx
.1101	60		rts				rts
.1102					_ECBExit:
.1102	20 23 10	jsr $1023			jsr 	ErrorHandler
>1105	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.110c					ExternPrint:
.110c	48		pha				pha
.110d	da		phx				phx
.110e	5a		phy				phy
.110f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1112	7a		ply				ply
.1113	fa		plx				plx
.1114	68		pla				pla
.1115	60		rts				rts
.1116					ExternColour:
.1116	48		pha				pha
.1117	da		phx				phx
.1118	48		pha				pha
.1119	29 08		and #$08			and 	#8
.111b	0a		asl a				asl 	a
.111c	0a		asl a				asl 	a
.111d	0a		asl a				asl 	a
.111e	0a		asl a				asl 	a
.111f	49 92		eor #$92			eor 	#$92
.1121	20 0c 11	jsr $110c			jsr 	ExternPrint
.1124	68		pla				pla
.1125	29 07		and #$07			and 	#7
.1127	aa		tax				tax
.1128	bd 31 11	lda $1131,x			lda 	_ECTable,x
.112b	20 0c 11	jsr $110c			jsr 	ExternPrint
.112e	fa		plx				plx
.112f	68		pla				pla
.1130	60		rts				rts
.1131					_ECTable:
>1131	90						.byte 	144
>1132	1c						.byte 	28
>1133	1e						.byte 	30
>1134	9e						.byte 	158
>1135	1f						.byte 	31
>1136	9c						.byte 	156
>1137	9f						.byte 	159
>1138	05						.byte 	5
.1139					ExternInput:
.1139	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.113b	85 14		sta $14				sta 	temp3
.113d	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113f	85 15		sta $15				sta 	temp3+1
.1141	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1144	29 7f		and #$7f			and 	#$7F
.1146	c9 0d		cmp #$0d			cmp 	#13
.1148	f0 0a		beq $1154			beq 	_EIExit
.114a	92 14		sta ($14)			sta 	(temp3)
.114c	e6 14		inc $14				inc 	temp3
.114e	d0 f1		bne $1141			bne 	_EIRead
.1150	e6 15		inc $15				inc 	temp3+1
.1152	80 ed		bra $1141			bra 	_EIRead
.1154	a9 00		lda #$00	_EIExit:lda 	#0
.1156	92 14		sta ($14)			sta 	(temp3)
.1158	a9 0d		lda #$0d			lda 	#13
.115a	20 0c 11	jsr $110c			jsr 	ExternPrint
.115d	60		rts				rts
.115e					ExternSave:
.115e	da		phx				phx
.115f	5a		phy				phy
.1160	85 12		sta $12				sta 	temp2 						; save start
.1162	84 13		sty $13				sty 	temp2+1
.1164	20 c6 11	jsr $11c6			jsr 	EXGetLength 				; get length of file into A
.1167	a6 14		ldx $14				ldx 	temp3
.1169	a4 15		ldy $15				ldy 	temp3+1
.116b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116e	a9 01		lda #$01			lda 	#1
.1170	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1172	a0 00		ldy #$00			ldy 	#0
.1174	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1177	a6 10		ldx $10				ldx 	temp1 						; end address
.1179	a4 11		ldy $11				ldy 	temp1+1
.117b	a9 12		lda #$12			lda 	#temp2
.117d	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1180	b0 03		bcs $1185			bcs 	_ESSave
.1182	7a		ply				ply
.1183	fa		plx				plx
.1184	60		rts				rts
.1185					_ESSave:
.1185	20 23 10	jsr $1023			jsr 	ErrorHandler
>1188	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>1190	4c 45 44 00
.1194					ExternLoad:
.1194	da		phx				phx 								; save XY
.1195	5a		phy				phy
.1196	48		pha				pha 								; save target
.1197	5a		phy				phy
.1198	20 c6 11	jsr $11c6			jsr 	EXGetLength 				; get length of file into A
.119b	a6 14		ldx $14				ldx 	temp3
.119d	a4 15		ldy $15				ldy 	temp3+1
.119f	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11a2	a9 01		lda #$01			lda 	#1
.11a4	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a6	a0 00		ldy #$00			ldy 	#0
.11a8	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11ab	7a		ply				ply 								; restore target to YX and call load
.11ac	fa		plx				plx
.11ad	a9 00		lda #$00			lda 	#0 							; load command
.11af	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11b2	b0 03		bcs $11b7			bcs 	_ESLoad
.11b4	7a		ply				ply
.11b5	fa		plx				plx
.11b6	60		rts				rts
.11b7					_ESLoad:
.11b7	20 23 10	jsr $1023			jsr 	ErrorHandler
>11ba	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11c2	4c 45 44 00
.11c6					EXGetLength:
.11c6	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c8	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11ca	d0 02		bne $11ce			bne 	_EXGLExit
.11cc	e6 15		inc $15				inc 	temp3+1
.11ce					_EXGLExit:
.11ce	60		rts				rts
.11cf					EXPrintString:
.11cf	48		pha				pha
.11d0	5a		phy				phy
.11d1	84 11		sty $11				sty 	temp1+1
.11d3	85 10		sta $10				sta 	temp1
.11d5	a0 00		ldy #$00			ldy 	#0
.11d7					_EXPSLoop:
.11d7	b1 10		lda ($10),y			lda 	(temp1),y
.11d9	f0 08		beq $11e3			beq 	_EXPSExit
.11db	29 7f		and #$7f			and 	#$7F
.11dd	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11e0	c8		iny				iny
.11e1	80 f4		bra $11d7			bra 	_EXPSLoop
.11e3					_EXPSExit:
.11e3	7a		ply				ply
.11e4	68		pla				pla
.11e5	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e6					Add:
.11e6	7a		ply				ply
.11e7	68		pla				pla
.11e8	18		clc				clc
.11e9	65 06		adc $06				adc 	TOS
.11eb	85 06		sta $06				sta 	TOS
.11ed	98		tya				tya
.11ee	65 07		adc $07				adc 	TOS+1
.11f0	85 07		sta $07				sta 	TOS+1
.11f2	4c 00 00	jmp $0000			jmp 	Next
.11f5					Subtract:
.11f5	7a		ply				ply
.11f6	68		pla				pla
.11f7	38		sec				sec
.11f8	49 ff		eor #$ff			eor 	#$FF
.11fa	65 06		adc $06				adc 	TOS
.11fc	85 06		sta $06				sta 	TOS
.11fe	98		tya				tya
.11ff	49 ff		eor #$ff			eor 	#$FF
.1201	65 07		adc $07				adc 	TOS+1
.1203	85 07		sta $07				sta 	TOS+1
.1205	4c 00 00	jmp $0000			jmp 	Next
.1208					And:
.1208	68		pla				pla
.1209	25 07		and $07				and 	TOS+1
.120b	85 07		sta $07				sta 	TOS+1
.120d	68		pla				pla
.120e	25 06		and $06				and 	TOS
.1210	85 06		sta $06				sta 	TOS
.1212	4c 00 00	jmp $0000			jmp 	Next
.1215					Xor:
.1215	68		pla				pla
.1216	45 07		eor $07				eor 	TOS+1
.1218	85 07		sta $07				sta 	TOS+1
.121a	68		pla				pla
.121b	45 06		eor $06				eor 	TOS
.121d	85 06		sta $06				sta 	TOS
.121f	4c 00 00	jmp $0000			jmp 	Next
.1222					LogOr:
.1222	68		pla				pla
.1223	05 07		ora $07				ora 	TOS+1
.1225	85 07		sta $07				sta 	TOS+1
.1227	68		pla				pla
.1228	05 06		ora $06				ora 	TOS
.122a	85 06		sta $06				sta 	TOS
.122c	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122f					CheckNotEqual:
.122f	38		sec				sec
.1230	80 01		bra $1233			bra 	CECode
.1232					CheckEqual:
.1232	18		clc				clc
.1233					CECode:
.1233	86 10		stx $10				stx 	temp1
.1235	ba		tsx				tsx
.1236	08		php				php
.1237	a5 06		lda $06				lda 	TOS
.1239	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.123c	d0 17		bne $1255			bne	 	CompareFalse
.123e	a5 07		lda $07				lda 	TOS+1
.1240	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1243	d0 10		bne $1255			bne 	CompareFalse
.1245					CompareTrue:
.1245	a6 10		ldx $10				ldx 	temp1
.1247	28		plp				plp
.1248	b0 10		bcs $125a			bcs		CompareFalse2
.124a					CompareTrue2:
.124a	68		pla				pla
.124b	68		pla				pla
.124c	a9 ff		lda #$ff			lda 	#$FF
.124e	85 06		sta $06				sta 	TOS
.1250	85 07		sta $07				sta 	TOS+1
.1252	4c 00 00	jmp $0000			jmp 	Next
.1255					CompareFalse:
.1255	a6 10		ldx $10				ldx 	temp1
.1257	28		plp				plp
.1258	b0 f0		bcs $124a			bcs		CompareTrue2
.125a					CompareFalse2:
.125a	68		pla				pla
.125b	68		pla				pla
.125c	64 06		stz $06				stz 	TOS
.125e	64 07		stz $07				stz 	TOS+1
.1260	4c 00 00	jmp $0000			jmp 	Next
.1263					CheckGreaterEq:
.1263	38		sec				sec
.1264	80 01		bra $1267			bra		CLCode
.1266					CheckLess:
.1266	18		clc				clc
.1267	86 10		stx $10		CLCode:	stx 	temp1
.1269	ba		tsx				tsx
.126a	08		php				php
.126b	18		clc				clc
.126c	a5 06		lda $06				lda 	TOS
.126e	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1271	a5 07		lda $07				lda 	TOS+1
.1273	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1276	50 02		bvc $127a			bvc 	_CLNoFlip
.1278	49 80		eor #$80			eor 	#$80
.127a					_CLNoFlip:
.127a	0a		asl a				asl 	a
.127b	b0 d8		bcs $1255			bcs 	CompareFalse
.127d	80 c6		bra $1245			bra 	CompareTrue
.127f					CheckLessEq:
.127f	38		sec				sec
.1280	80 01		bra $1283			bra		CGCode
.1282					CheckGreater:
.1282	18		clc				clc
.1283					CGCode:
.1283	86 10		stx $10				stx 	temp1
.1285	ba		tsx				tsx
.1286	08		php				php
.1287	18		clc				clc
.1288	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.128b	e5 06		sbc $06				sbc 	TOS
.128d	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1290	e5 07		sbc $07				sbc 	TOS+1
.1292	50 02		bvc $1296			bvc 	_CGNoFlip
.1294	49 80		eor #$80			eor 	#$80
.1296					_CGNoFlip:
.1296	0a		asl a				asl 	a
.1297	b0 bc		bcs $1255			bcs 	CompareFalse
.1299	80 aa		bra $1245			bra 	CompareTrue
.129b					Minimum:
.129b	a9 00		lda #$00			lda 	#0
.129d	80 02		bra $12a1			bra 	MinMaxCode
.129f					Maximum:
.129f	a9 80		lda #$80			lda 	#$80
.12a1					MinMaxCode:
.12a1	85 11		sta $11				sta 	temp1+1
.12a3	86 10		stx $10				stx 	temp1
.12a5	ba		tsx				tsx
.12a6	38		sec				sec
.12a7	a5 06		lda $06				lda 	TOS
.12a9	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12ac	a5 07		lda $07				lda 	TOS+1
.12ae	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12b1	50 02		bvc $12b5			bvc 	_MMNoFlip
.12b3	49 80		eor #$80			eor 	#$80
.12b5					_MMNoFlip:
.12b5	45 11		eor $11				eor 	temp1+1
.12b7	30 0a		bmi $12c3			bmi 	_MMNoCopy
.12b9	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12bc	85 06		sta $06				sta 	TOS
.12be	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12c1	85 07		sta $07				sta 	TOS+1
.12c3					_MMNoCopy:
.12c3	a6 10		ldx $10				ldx 	temp1
.12c5	68		pla				pla
.12c6	68		pla				pla
.12c7	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12ca					Divide16x16:
.12ca	86 12		stx $12				stx 	temp2
.12cc	ba		tsx				tsx
.12cd	20 f0 12	jsr $12f0			jsr 	IntegerDivide
.12d0	68		pla				pla
.12d1	85 07		sta $07				sta 	TOS+1
.12d3	68		pla				pla
.12d4	85 06		sta $06				sta 	TOS
.12d6	a6 12		ldx $12				ldx 	temp2
.12d8	4c 00 00	jmp $0000			jmp 	Next
.12db					Modulus16x16:
.12db	86 12		stx $12				stx 	temp2
.12dd	ba		tsx				tsx
.12de	20 f0 12	jsr $12f0			jsr 	IntegerDivide
.12e1	a6 12		ldx $12				ldx 	temp2
.12e3	68		pla				pla
.12e4	68		pla				pla
.12e5	a5 10		lda $10				lda 	temp1
.12e7	85 06		sta $06				sta 	TOS
.12e9	a5 11		lda $11				lda 	temp1+1
.12eb	85 07		sta $07				sta 	TOS+1
.12ed	4c 00 00	jmp $0000			jmp 	Next
.12f0					IntegerDivide:
.12f0	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12f2	05 07		ora $07				ora 	TOS+1
.12f4	d0 14		bne $130a			bne 	_BFDOkay
.12f6	20 23 10	jsr $1023			jsr 	ErrorHandler
>12f9	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1301	20 42 59 20 5a 45 52 4f 00
.130a					_BFDOkay:
.130a	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.130c	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130e	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1310	20 4b 13	jsr $134b			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1313	20 65 13	jsr $1365			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1316	5a		phy				phy 								; Y is the counter
.1317	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1319					_BFDLoop:
.1319	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.131c	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131f	26 10		rol $10				rol 	temp1
.1321	26 11		rol $11				rol 	temp1+1
.1323	38		sec				sec
.1324	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1326	e5 06		sbc $06				sbc 	TOS
.1328	48		pha				pha
.1329	a5 11		lda $11				lda 	temp1+1
.132b	e5 07		sbc $07				sbc 	TOS+1
.132d	90 0f		bcc $133e			bcc 	_BFDNoAdd
.132f	85 11		sta $11				sta 	temp1+1
.1331	68		pla				pla
.1332	85 10		sta $10				sta 	temp1+0
.1334	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1337	09 01		ora #$01			ora 	#1
.1339	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.133c	80 01		bra $133f			bra 	_BFDNext
.133e					_BFDNoAdd:
.133e	68		pla				pla 								; Throw away the intermediate calculations
.133f					_BFDNext:
.133f	88		dey				dey
.1340	d0 d7		bne $1319			bne 	_BFDLoop
.1342	7a		ply				ply 								; restore Y
.1343	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1345	90 03		bcc $134a			bcc 	_BFDUnsigned 				; then the result is signed
.1347	20 51 13	jsr $1351			jsr		IntegerNegateAlways 		; negate the result
.134a					_BFDUnsigned:
.134a	60		rts				rts
.134b					CheckIntegerNegate:
.134b	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134e	30 01		bmi $1351			bmi 	IntegerNegateAlways 		; if so negate it
.1350	60		rts				rts
.1351					IntegerNegateAlways:
.1351	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1353	38		sec				sec 								; negate
.1354	a9 00		lda #$00			lda 	#0
.1356	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1359	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.135c	a9 00		lda #$00			lda 	#0
.135e	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1361	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1364	60		rts				rts
.1365					CheckTOSNegate:
.1365	a5 07		lda $07				lda 	TOS+1
.1367	10 0f		bpl $1378			bpl		CTNNoChange
.1369	e6 1a		inc $1a				inc 	SignCount
.136b					TOSNegateAlways:
.136b	38		sec				sec
.136c	a9 00		lda #$00			lda 	#0
.136e	e5 06		sbc $06				sbc 	TOS
.1370	85 06		sta $06				sta 	TOS
.1372	a9 00		lda #$00			lda 	#0
.1374	e5 07		sbc $07				sbc 	TOS+1
.1376	85 07		sta $07				sta 	TOS+1
.1378					CTNNoChange:
.1378	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1379					Multiply16x16:
.1379	86 10		stx $10				stx 	temp1
.137b	ba		tsx				tsx
.137c	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137f	85 12		sta $12				sta 	temp2
.1381	bd 01 01	lda $0101,x			lda		Stack2High,x
.1384	85 13		sta $13				sta 	temp2+1
.1386	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1389	9e 01 01	stz $0101,x			stz 	Stack2High,x
.138c					_MultLoop:
.138c	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138e	66 12		ror $12				ror 	temp2
.1390	90 11		bcc $13a3			bcc 	_MultNoAdd
.1392	18		clc				clc 								; add 1st to 2nd
.1393	a5 06		lda $06				lda 	TOS
.1395	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1398	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.139b	a5 07		lda $07				lda 	TOS+1
.139d	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13a0	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a3					_MultNoAdd:
.13a3	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a5	26 07		rol $07				rol 	TOS+1
.13a7	a5 12		lda $12				lda 	temp2	 					; until zero
.13a9	05 13		ora $13				ora 	temp2+1
.13ab	d0 df		bne $138c			bne 	_MultLoop
.13ad	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13af	68		pla				pla
.13b0	85 07		sta $07				sta 	TOS+1
.13b2	68		pla				pla
.13b3	85 06		sta $06				sta 	TOS
.13b5	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b8					Unary1Plus:
.13b8	e6 06		inc $06				inc 	TOS
.13ba	d0 02		bne $13be			bne 	_U1PSkip
.13bc	e6 07		inc $07				inc 	TOS+1
.13be					_U1PSkip:
.13be	4c 00 00	jmp $0000			jmp 	Next
.13c1					Unary2Plus:
.13c1	18		clc				clc
.13c2	a5 06		lda $06				lda 	TOS
.13c4	69 02		adc #$02			adc 	#2
.13c6	85 06		sta $06				sta 	TOS
.13c8	90 02		bcc $13cc			bcc 	_U1PSkip
.13ca	e6 07		inc $07				inc 	TOS+1
.13cc					_U1PSkip:
.13cc	4c 00 00	jmp $0000			jmp 	Next
.13cf					Unary1Minus:
.13cf	a5 06		lda $06				lda 	TOS
.13d1	d0 02		bne $13d5			bne 	_U1MSkip
.13d3	c6 07		dec $07				dec 	TOS+1
.13d5					_U1MSkip:
.13d5	c6 06		dec $06				dec 	TOS
.13d7	4c 00 00	jmp $0000			jmp 	Next
.13da					Unary2Minus:
.13da	38		sec				sec
.13db	a5 06		lda $06				lda 	TOS
.13dd	e9 02		sbc #$02			sbc 	#2
.13df	85 06		sta $06				sta 	TOS
.13e1	b0 02		bcs $13e5			bcs 	_U1PSkip
.13e3	c6 07		dec $07				dec 	TOS+1
.13e5					_U1PSkip:
.13e5	4c 00 00	jmp $0000			jmp 	Next
.13e8					Absolute:
.13e8	a5 07		lda $07				lda 	TOS+1
.13ea	30 03		bmi $13ef			bmi 	Negate
.13ec	4c 00 00	jmp $0000			jmp 	Next
.13ef					Negate:
.13ef	38		sec				sec
.13f0	a9 00		lda #$00			lda 	#0
.13f2	e5 06		sbc $06				sbc 	TOS
.13f4	85 06		sta $06				sta 	TOS
.13f6	a9 00		lda #$00			lda 	#0
.13f8	e5 07		sbc $07				sbc 	TOS+1
.13fa	85 07		sta $07				sta 	TOS+1
.13fc	4c 00 00	jmp $0000			jmp 	Next
.13ff					OneComplement:
.13ff	a5 06		lda $06				lda 	TOS
.1401	49 ff		eor #$ff			eor 	#$FF
.1403	85 06		sta $06				sta 	TOS
.1405	a5 07		lda $07				lda 	TOS+1
.1407	49 ff		eor #$ff			eor 	#$FF
.1409	85 07		sta $07				sta 	TOS+1
.140b	4c 00 00	jmp $0000			jmp 	Next
.140e					CheckMinus:
.140e	a5 07		lda $07				lda 	TOS+1
.1410	30 07		bmi $1419			bmi 	UnaryTrue
.1412					UnaryFalse:
.1412	64 06		stz $06				stz 	TOS
.1414	64 07		stz $07				stz 	TOS+1
.1416	4c 00 00	jmp $0000			jmp 	Next
.1419					UnaryTrue:
.1419	a9 ff		lda #$ff			lda 	#$FF
.141b	85 06		sta $06				sta 	TOS
.141d	85 07		sta $07				sta 	TOS+1
.141f	4c 00 00	jmp $0000			jmp 	Next
.1422					CheckZero:
.1422	a5 06		lda $06				lda 	TOS
.1424	05 07		ora $07				ora 	TOS+1
.1426	d0 ea		bne $1412			bne 	UnaryFalse
.1428	80 ef		bra $1419			bra 	UnaryTrue
.142a					SignTOS:
.142a	a5 07		lda $07				lda 	TOS+1
.142c	30 eb		bmi $1419			bmi		UnaryTrue
.142e	05 06		ora $06				ora 	TOS
.1430	f0 e0		beq $1412			beq 	UnaryFalse
.1432	a9 01		lda #$01			lda 	#1
.1434	85 06		sta $06				sta 	TOS
.1436	64 07		stz $07				stz		TOS+1
.1438	4c 00 00	jmp $0000			jmp 	Next
.143b					ByteSwap:
.143b	a5 06		lda $06				lda 	TOS
.143d	a4 07		ldy $07				ldy 	TOS+1
.143f	85 07		sta $07				sta 	TOS+1
.1441	84 06		sty $06				sty 	TOS
.1443	4c 00 00	jmp $0000			jmp 	Next
.1446					Times16:
.1446	06 06		asl $06				asl 	TOS
.1448	26 07		rol $07				rol 	TOS+1
.144a					Times8:
.144a	06 06		asl $06				asl 	TOS
.144c	26 07		rol $07				rol 	TOS+1
.144e					Times4:
.144e	06 06		asl $06				asl 	TOS
.1450	26 07		rol $07				rol 	TOS+1
.1452					Times2:
.1452	06 06		asl $06				asl 	TOS
.1454	26 07		rol $07				rol 	TOS+1
.1456	4c 00 00	jmp $0000			jmp 	Next
.1459					Divide16:
.1459	46 07		lsr $07				lsr 	TOS+1
.145b	66 06		ror $06				ror 	TOS
.145d					Divide8:
.145d	46 07		lsr $07				lsr 	TOS+1
.145f	66 06		ror $06				ror 	TOS
.1461					Divide4:
.1461	46 07		lsr $07				lsr 	TOS+1
.1463	66 06		ror $06				ror 	TOS
.1465					Divide2:
.1465	46 07		lsr $07				lsr 	TOS+1
.1467	66 06		ror $06				ror 	TOS
.1469	4c 00 00	jmp $0000			jmp 	Next
.146c					Times256:
.146c	a5 06		lda $06				lda 	TOS
.146e	85 07		sta $07				sta 	TOS+1
.1470	64 06		stz $06				stz 	TOS
.1472	4c 00 00	jmp $0000			jmp 	Next
.1475					Divide256:
.1475	a5 07		lda $07				lda 	TOS+1
.1477	85 06		sta $06				sta 	TOS
.1479	64 07		stz $07				stz 	TOS+1
.147b	4c 00 00	jmp $0000			jmp 	Next
.147e					RandomNumber:
.147e	a5 06		lda $06				lda 	TOS
.1480	48		pha				pha
.1481	a5 07		lda $07				lda 	TOS+1
.1483	48		pha				pha
.1484	a5 1b		lda $1b				lda 	randomSeed
.1486	05 1c		ora $1c				ora 	randomSeed+1
.1488	d0 08		bne $1492			bne 	_RH_NoInit
.148a	a9 7c		lda #$7c			lda 	#$7C
.148c	85 1b		sta $1b				sta 	randomSeed
.148e	a9 a1		lda #$a1			lda 	#$A1
.1490	85 1c		sta $1c				sta 	randomSeed+1
.1492					_RH_NoInit:
.1492	a5 1b		lda $1b				lda 	randomSeed
.1494	4a		lsr a		        lsr		a
.1495	26 1c		rol $1c		        rol 	randomSeed+1
.1497	90 02		bcc $149b	        bcc 	_RH_NoEor
.1499	49 b4		eor #$b4	        eor 	#$B4
.149b					_RH_NoEor:
.149b	85 1b		sta $1b		        sta 	randomSeed
.149d	45 1c		eor $1c		        eor 	randomSeed+1
.149f	85 07		sta $07		        sta 	TOS+1
.14a1	a5 1b		lda $1b		        lda 	randomSeed
.14a3	85 06		sta $06		        sta 	TOS
.14a5	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a8					Constant0:
.14a8	a5 06		lda $06				lda 	TOS
.14aa	48		pha				pha
.14ab	a5 07		lda $07				lda 	TOS+1
.14ad	48		pha				pha
.14ae	64 06		stz $06				stz 	TOS
.14b0	64 07		stz $07				stz 	TOS+1
.14b2	4c 00 00	jmp $0000			jmp 	Next
.14b5					ConstantMinus1:
.14b5	a5 06		lda $06				lda 	TOS
.14b7	48		pha				pha
.14b8	a5 07		lda $07				lda 	TOS+1
.14ba	48		pha				pha
.14bb	a9 ff		lda #$ff			lda 	#$FF
.14bd	85 06		sta $06				sta 	TOS
.14bf	85 07		sta $07				sta 	TOS+1
.14c1	4c 00 00	jmp $0000			jmp 	Next
.14c4					C1:
.14c4	a0 01		ldy #$01			ldy 	#1
.14c6	80 24		bra $14ec			bra 	Const1Byte
.14c8					C2:
.14c8	a0 02		ldy #$02			ldy 	#2
.14ca	80 20		bra $14ec			bra 	Const1Byte
.14cc					C3:
.14cc	a0 03		ldy #$03			ldy 	#3
.14ce	80 1c		bra $14ec			bra 	Const1Byte
.14d0					C4:
.14d0	a0 04		ldy #$04			ldy 	#4
.14d2	80 18		bra $14ec			bra 	Const1Byte
.14d4					C5:
.14d4	a0 05		ldy #$05			ldy 	#5
.14d6	80 14		bra $14ec			bra 	Const1Byte
.14d8					C8:
.14d8	a0 08		ldy #$08			ldy 	#8
.14da	80 10		bra $14ec			bra 	Const1Byte
.14dc					C10:
.14dc	a0 0a		ldy #$0a			ldy 	#10
.14de	80 0c		bra $14ec			bra 	Const1Byte
.14e0					C15:
.14e0	a0 0f		ldy #$0f			ldy 	#15
.14e2	80 08		bra $14ec			bra 	Const1Byte
.14e4					C16:
.14e4	a0 10		ldy #$10			ldy 	#16
.14e6	80 04		bra $14ec			bra 	Const1Byte
.14e8					C24:
.14e8	a0 18		ldy #$18			ldy 	#24
.14ea	80 00		bra $14ec			bra 	Const1Byte
.14ec					Const1Byte:
.14ec	a5 06		lda $06				lda 	TOS
.14ee	48		pha				pha
.14ef	a5 07		lda $07				lda 	TOS+1
.14f1	48		pha				pha
.14f2	84 06		sty $06				sty 	TOS
.14f4	64 07		stz $07				stz 	TOS+1
.14f6	4c 00 00	jmp $0000			jmp 	Next
.14f9					C32:
.14f9	a0 20		ldy #$20			ldy 	#32
.14fb	80 ef		bra $14ec			bra 	Const1Byte
.14fd					C63:
.14fd	a0 3f		ldy #$3f			ldy 	#63
.14ff	80 eb		bra $14ec			bra 	Const1Byte
.1501					C64:
.1501	a0 40		ldy #$40			ldy 	#64
.1503	80 e7		bra $14ec			bra 	Const1Byte
.1505					C100:
.1505	a0 64		ldy #$64			ldy 	#100
.1507	80 e3		bra $14ec			bra 	Const1Byte
.1509					C127:
.1509	a0 7f		ldy #$7f			ldy 	#127
.150b	80 df		bra $14ec			bra 	Const1Byte
.150d					C128:
.150d	a0 80		ldy #$80			ldy 	#128
.150f	80 db		bra $14ec			bra 	Const1Byte
.1511					C255:
.1511	a0 ff		ldy #$ff			ldy 	#255
.1513	80 d7		bra $14ec			bra 	Const1Byte
.1515					Const2Byte:
.1515	85 06		sta $06				sta 	TOS
.1517	84 07		sty $07				sty 	TOS+1
.1519	4c 00 00	jmp $0000			jmp 	Next
.151c					C256:
.151c	a5 06		lda $06				lda 	TOS
.151e	48		pha				pha
.151f	a5 07		lda $07				lda 	TOS+1
.1521	48		pha				pha
.1522	a9 00		lda #$00			lda 	#(256) & $FF
.1524	a0 01		ldy #$01			ldy 	#(256) >> 8
.1526	80 ed		bra $1515			bra 	Const2Byte
.1528					C512:
.1528	a5 06		lda $06				lda 	TOS
.152a	48		pha				pha
.152b	a5 07		lda $07				lda 	TOS+1
.152d	48		pha				pha
.152e	a9 00		lda #$00			lda 	#(512) & $FF
.1530	a0 02		ldy #$02			ldy 	#(512) >> 8
.1532	80 e1		bra $1515			bra 	Const2Byte
.1534					C1024:
.1534	a5 06		lda $06				lda 	TOS
.1536	48		pha				pha
.1537	a5 07		lda $07				lda 	TOS+1
.1539	48		pha				pha
.153a	a9 00		lda #$00			lda 	#(1024) & $FF
.153c	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153e	80 d5		bra $1515			bra 	Const2Byte
.1540					C4096:
.1540	a5 06		lda $06				lda 	TOS
.1542	48		pha				pha
.1543	a5 07		lda $07				lda 	TOS+1
.1545	48		pha				pha
.1546	a9 00		lda #$00			lda 	#(4096) & $FF
.1548	a0 10		ldy #$10			ldy 	#(4096) >> 8
.154a	80 c9		bra $1515			bra 	Const2Byte
.154c					C32767:
.154c	a5 06		lda $06				lda 	TOS
.154e	48		pha				pha
.154f	a5 07		lda $07				lda 	TOS+1
.1551	48		pha				pha
.1552	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1554	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1556	80 bd		bra $1515			bra 	Const2Byte
.1558					C32768:
.1558	a5 06		lda $06				lda 	TOS
.155a	48		pha				pha
.155b	a5 07		lda $07				lda 	TOS+1
.155d	48		pha				pha
.155e	a9 00		lda #$00			lda 	#(32768) & $FF
.1560	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1562	80 b1		bra $1515			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1564					Drop:
.1564	68		pla				pla
.1565	85 07		sta $07				sta 	TOS+1
.1567	68		pla				pla
.1568	85 06		sta $06				sta 	TOS
.156a	4c 00 00	jmp $0000			jmp 	Next
.156d					TestDup:
.156d	a5 06		lda $06				lda 	TOS
.156f	05 07		ora $07				ora 	TOS+1
.1571	d0 03		bne $1576			bne 	Dup
.1573	4c 00 00	jmp $0000			jmp 	Next
.1576					Dup:
.1576	a5 06		lda $06				lda 	TOS
.1578	48		pha				pha
.1579	a5 07		lda $07				lda 	TOS+1
.157b	48		pha				pha
.157c	4c 00 00	jmp $0000			jmp 	Next
.157f					Swap:
.157f	86 10		stx $10				stx 	temp1
.1581	7a		ply				ply
.1582	fa		plx				plx
.1583	a5 06		lda $06				lda 	TOS
.1585	48		pha				pha
.1586	a5 07		lda $07				lda 	TOS+1
.1588	48		pha				pha
.1589	86 06		stx $06				stx 	TOS
.158b	84 07		sty $07				sty 	TOS+1
.158d	a6 10		ldx $10				ldx 	temp1
.158f	4c 00 00	jmp $0000			jmp 	Next
.1592					Over:
.1592	a5 06		lda $06				lda 	TOS
.1594	48		pha				pha
.1595	a5 07		lda $07				lda 	TOS+1
.1597	48		pha				pha
.1598	86 10		stx $10				stx 	temp1
.159a	ba		tsx				tsx
.159b	bd 04 01	lda $0104,x			lda 	stack3low,x
.159e	85 06		sta $06				sta 	TOS
.15a0	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a3	85 07		sta $07				sta 	TOS+1
.15a5	a6 10		ldx $10				ldx 	temp1
.15a7	4c 00 00	jmp $0000			jmp 	Next
.15aa					Nip:
.15aa	68		pla				pla
.15ab	68		pla				pla
.15ac	4c 00 00	jmp $0000			jmp 	Next
.15af					Rot:
.15af	86 10		stx $10				stx 	temp1
.15b1	ba		tsx				tsx
.15b2	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b5	a8		tay				tay
.15b6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b9	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15bc	a5 06		lda $06				lda 	TOS
.15be	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15c1	84 06		sty $06				sty 	TOS
.15c3	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c6	a8		tay				tay
.15c7	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15ca	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15cd	a5 07		lda $07				lda 	TOS+1
.15cf	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15d2	84 07		sty $07				sty 	TOS+1
.15d4	a6 10		ldx $10				ldx 	temp1
.15d6	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d9					ByteRead:
.15d9	b2 06		lda ($06)			lda 	(TOS)
.15db	85 06		sta $06				sta 	TOS
.15dd	64 07		stz $07				stz 	TOS+1
.15df	4c 00 00	jmp $0000			jmp 	Next
.15e2					WordRead:
.15e2	a0 01		ldy #$01			ldy 	#1
.15e4	b1 06		lda ($06),y			lda 	(TOS),y
.15e6	a8		tay				tay
.15e7	b2 06		lda ($06)			lda 	(TOS)
.15e9	85 06		sta $06				sta 	TOS
.15eb	84 07		sty $07				sty 	TOS+1
.15ed	4c 00 00	jmp $0000			jmp 	Next
.15f0					ByteWrite:
.15f0	68		pla				pla
.15f1	68		pla				pla
.15f2	92 06		sta ($06)			sta 	(TOS)
.15f4	68		pla				pla
.15f5	85 07		sta $07				sta 	TOS+1
.15f7	68		pla				pla
.15f8	85 06		sta $06				sta 	TOS
.15fa	4c 00 00	jmp $0000			jmp 	Next
.15fd					WordWrite:
.15fd	68		pla				pla
.15fe	a0 01		ldy #$01			ldy 	#1
.1600	91 06		sta ($06),y			sta 	(TOS),y
.1602	68		pla				pla
.1603	92 06		sta ($06)			sta 	(TOS)
.1605	68		pla				pla
.1606	85 07		sta $07				sta 	TOS+1
.1608	68		pla				pla
.1609	85 06		sta $06				sta 	TOS
.160b	4c 00 00	jmp $0000			jmp 	Next
.160e					WordAdd:
.160e	7a		ply				ply
.160f	68		pla				pla
.1610	18		clc				clc
.1611	72 06		adc ($06)			adc 	(TOS)
.1613	92 06		sta ($06)			sta 	(TOS)
.1615	98		tya				tya
.1616	a0 01		ldy #$01			ldy 	#1
.1618	71 06		adc ($06),y			adc 	(TOS),y
.161a	91 06		sta ($06),y			sta 	(TOS),y
.161c	68		pla				pla
.161d	85 07		sta $07				sta 	TOS+1
.161f	68		pla				pla
.1620	85 06		sta $06				sta 	TOS
.1622	4c 00 00	jmp $0000			jmp 	Next
.1625					AllocateMemory:
.1625	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1627	48		pha				pha
.1628	a5 07		lda $07				lda 	TOS+1
.162a	48		pha				pha
.162b	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162d	85 06		sta $06				sta 	TOS
.162f	a5 0f		lda $0f				lda 	nextFreeMem+1
.1631	85 07		sta $07				sta 	TOS+1
.1633	7a		ply				ply 								; advance the free ram pointer
.1634	68		pla				pla
.1635	20 34 1a	jsr $1a34			jsr 	AdvanceFreeMem
.1638	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.163b					EncodeTest:
.163b	a9 43		lda #$43			lda 	#(_EncTest & $FF)
.163d	a0 16		ldy #$16			ldy 	#(_EncTest >> 8)
.163f	20 5d 16	jsr $165d			jsr 	EncodeProgram
>1642	ff						.byte 	$FF
.1643					_EncTest:
>1643	31 30 32 35 20					.text	"1025 "
>1648	22 53 54 52 22 20 44 55				.text 	'"STR" DUP IF '
>1650	50 20 49 46 20
>1655	20 27 48 45 4c 4c 4f 00				.text	" 'HELLO",0
.165d					EncodeProgram:
.165d	48		pha				pha 								; save registers.
.165e	da		phx				phx
.165f	5a		phy				phy
.1660	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1662	85 08		sta $08				sta		srcPtr
.1664	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1666	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1669	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.166c	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.166f	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.1671	20 67 17	jsr $1767			jsr 	CheckIsDigit
.1674	90 09		bcc $167f			bcc 	_EPNoLineNumber 			; if so there is a line number
.1676	20 89 17	jsr $1789			jsr 	EncodeGetConstant 			; extract that constant from the source
.1679	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.167c	8c 12 09	sty $0912			sty 	encodeBuffer+2
.167f					_EPNoLineNumber:
.167f					EncodeLoop:
.167f	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.1681	f0 0b		beq $168e			beq 	_EPEndEncode
.1683	c9 20		cmp #$20			cmp 	#32
.1685	d0 12		bne $1699			bne 	_EPNotSpace
.1687	a9 01		lda #$01			lda 	#1
.1689	20 7f 17	jsr $177f			jsr 	EncodeAddSrcPtr
.168c	80 f1		bra $167f			bra	 	EncodeLoop
.168e					_EPEndEncode:
.168e	a9 1d		lda #$1d			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.1690	a0 1d		ldy #$1d			ldy 	#NextLine >> 8
.1692	20 4e 17	jsr $174e			jsr 	EncodeWriteWord
.1695	7a		ply				ply									; restore and exit.
.1696	fa		plx				plx
.1697	68		pla				pla
.1698	60		rts				rts
.1699					_EPNotSpace:
.1699	b2 08		lda ($08)			lda 	(srcPtr)
.169b	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.169d	f0 04		beq $16a3			beq 	_EPIsComStr
.169f	c9 27		cmp #$27			cmp 	#"'"
.16a1	d0 05		bne $16a8			bne 	_EPNotComStr
.16a3					_EPIsComStr:
.16a3	20 f9 16	jsr $16f9			jsr 	EncodeCommentString
.16a6	80 d7		bra $167f			bra 	EncodeLoop
.16a8					_EPNotComStr:
.16a8	38		sec				sec
.16a9	20 9a 17	jsr $179a			jsr 	EncSetBit7Word
.16ac	20 ad 17	jsr $17ad			jsr 	EncodeSearchDictionary		; look it up
.16af	90 45		bcc $16f6			bcc 	_EPNotInDictionary
.16b1	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16b3	84 11		sty $11				sty 	temp1+1
.16b5	a0 01		ldy #$01			ldy 	#1
.16b7	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.16b9	29 20		and #$20			and 	#$20
.16bb	d0 12		bne $16cf			bne 	_EPEncodeRoutine 			; if so, do special routine.
.16bd	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.16bf	b1 10		lda ($10),y			lda 	(temp1),y
.16c1	20 58 17	jsr $1758			jsr 	EncodeWriteByte
.16c4	c8		iny				iny
.16c5	b1 10		lda ($10),y			lda 	(temp1),y
.16c7	20 58 17	jsr $1758			jsr 	EncodeWriteByte
.16ca	20 73 17	jsr $1773			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16cd	80 b0		bra $167f			bra 	EncodeLoop
.16cf					_EPEncodeRoutine:
>16cf	ff						.byte 	$FF
.16d0	a0 01		ldy #$01			ldy 	#1							; get type bit
.16d2	b1 10		lda ($10),y			lda 	(temp1),y
.16d4	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.16d6	29 10		and #$10			and 	#$10 						; but decoder comes first
.16d8	f0 02		beq $16dc			beq 	_EPENoDecoder
.16da	c8		iny				iny 								; so if it exists, adjust for it.
.16db	c8		iny				iny
.16dc					_EPENoDecoder:
.16dc	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.16de	85 12		sta $12				sta 	temp2
.16e0	c8		iny				iny
.16e1	b1 10		lda ($10),y			lda 	(temp1),y
.16e3	85 13		sta $13				sta 	temp2+1
.16e5	48		pha				pha 								; call routine preserving state
.16e6	da		phx				phx
.16e7	5a		phy				phy
.16e8	20 f3 16	jsr $16f3			jsr 	_EPECallTemp2
.16eb	7a		ply				ply
.16ec	fa		plx				plx
.16ed	68		pla				pla
.16ee	20 73 17	jsr $1773			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16f1	80 8c		bra $167f			bra 	EncodeLoop
.16f3					_EPECallTemp2:
.16f3	6c 12 00	jmp ($0012)			jmp 	(temp2)
.16f6					_EPNotInDictionary:
>16f6	ff						.byte 	$FF
.16f7	80 fd		bra $16f6			bra 	_EPNotInDictionary

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.16f9					EncodeCommentString:
.16f9	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.16fb	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.16fd	aa		tax				tax 								; save in X
.16fe	a9 34		lda #$34			lda 	#(SkipComment & $FF)		; get the routine to use
.1700	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.1702	e0 27		cpx #$27			cpx 	#"'"
.1704	f0 06		beq $170c			beq 	_ECSGotCmd
.1706	86 10		stx $10				stx		temp1 						; other terminator = "
.1708	a9 b1		lda #$b1			lda 	#(LiteralString & $FF)
.170a	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.170c					_ECSGotCmd:
.170c	20 4e 17	jsr $174e			jsr 	EncodeWriteWord 			; write word out.
.170f	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1712	a9 01		lda #$01			lda 	#1
.1714	20 58 17	jsr $1758			jsr 	EncodeWriteByte 			; write total length, so far 1.
.1717	a0 01		ldy #$01			ldy 	#1 							; for reading the actual text
.1719					_ECSCopyText:
.1719	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.171b	f0 18		beq $1735			beq 	_ECSEndOfLine 				; end of line ?
.171d	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.171f	f0 09		beq $172a			beq 	_ECSEndOfString 			; if so must be closing quote.
.1721	20 58 17	jsr $1758			jsr 	EncodeWriteByte 			; write the byte out
.1724	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.1727	c8		iny				iny 								; next character
.1728	80 ef		bra $1719			bra 	_ECSCopyText
.172a					_ECSEndOfString:
.172a	c8		iny				iny 								; skip closing quote.
.172b	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.172d	20 58 17	jsr $1758			jsr 	EncodeWriteByte
.1730	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1733	80 0e		bra $1743			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1735					_ECSEndOfLine:
.1735	a5 10		lda $10				lda 	temp1 						; missing closing quote
.1737	f0 0a		beq $1743			beq 	_ECSComplete 				; if we were doing a string.
.1739	20 23 10	jsr $1023			jsr 	ErrorHandler
>173c	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.1743					_ECSComplete:
.1743	98		tya				tya
.1744	18		clc				clc
.1745	65 08		adc $08				adc 	srcPtr
.1747	85 08		sta $08				sta 	srcPtr
.1749	90 02		bcc $174d			bcc 	_ECSExit
.174b	e6 09		inc $09				inc 	srcPtr+1
.174d					_ECSExit:
.174d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.174e					EncodeWriteWord:
.174e	48		pha				pha
.174f	20 58 17	jsr $1758			jsr 	EncodeWriteByte
.1752	98		tya				tya
.1753	20 58 17	jsr $1758			jsr 	EncodeWriteByte
.1756	68		pla				pla
.1757	60		rts				rts
.1758					EncodeWriteByte:
.1758	da		phx				phx
.1759	ae 10 09	ldx $0910			ldx 	encodeBuffer
.175c	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.175f	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.1762	ee 10 09	inc $0910			inc 	encodeBuffer
.1765	fa		plx				plx
.1766	60		rts				rts
.1767					CheckIsDigit:
.1767	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.1769	90 06		bcc $1771			bcc 	_CIDFail
.176b	c9 3a		cmp #$3a			cmp 	#"9"+1
.176d	b0 02		bcs $1771			bcs 	_CIDFail
.176f	38		sec				sec
.1770	60		rts				rts
.1771					_CIDFail:
.1771	18		clc				clc
.1772	60		rts				rts
.1773					EncodeMoveNextWord:
.1773	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.1775					_EPNWLoop:
.1775	c8		iny				iny
.1776	b1 08		lda ($08),y			lda 	(srcPtr),y
.1778	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.177a	b0 f9		bcs $1775			bcs 	_EPNWLoop
.177c	98		tya				tya
.177d	80 00		bra $177f			bra 	EncodeAddSrcPtr
.177f					EncodeAddSrcPtr:
.177f	18		clc				clc 								; add offset
.1780	65 08		adc $08				adc 	srcPtr
.1782	85 08		sta $08				sta 	srcPtr
.1784	90 02		bcc $1788			bcc 	_EASPNoCarry
.1786	e6 09		inc $09				inc 	srcPtr+1					; carry through
.1788					_EASPNoCarry:
.1788	60		rts				rts
.1789					EncodeGetConstant:
.1789	a5 08		lda $08				lda 	srcPtr 						; get source
.178b	a4 09		ldy $09				ldy 	srcPtr+1
.178d	20 8f 1c	jsr $1c8f			jsr 	ConvertToInteger 			; call converter
.1790	90 07		bcc $1799			bcc 	_EGCExit
.1792	20 7f 17	jsr $177f			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.1795	a5 14		lda $14				lda 	temp3 						; get result into YA
.1797	a4 15		ldy $15				ldy 	temp3+1
.1799					_EGCExit:
.1799	60		rts				rts
.179a					EncSetBit7Word:
.179a	08		php				php 								; save carry
.179b	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.179d					_ESB7Loop:
.179d	c8		iny				iny
.179e	b1 08		lda ($08),y			lda 	(srcPtr),y
.17a0	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.17a2	b0 f9		bcs $179d			bcs 	_ESB7Loop
.17a4	88		dey				dey									; previous character
.17a5	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.17a7	0a		asl a				asl 	a 							; shift bit 7 out
.17a8	28		plp				plp 								; restore carry
.17a9	6a		ror a				ror 	a 							; shift it in
.17aa	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.17ac	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.17ad					EncodeSearchDictionary:
.17ad	a9 55		lda #$55			lda 	#(Dictionary) & $FF
.17af	85 10		sta $10				sta 	0+(temp1)
.17b1	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.17b3	85 11		sta $11				sta 	1+(temp1)
.17b5					_ESDLoop:
.17b5	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.17b7	18		clc				clc
.17b8	f0 46		beq $1800			beq 	_ESDExit
.17ba	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.17bc	b1 10		lda ($10),y			lda 	(temp1),y
.17be	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.17bf	4a		lsr a				lsr 	a
.17c0	4a		lsr a				lsr 	a
.17c1	4a		lsr a				lsr 	a
.17c2	c8		iny				iny 								; Y = 2
.17c3	4a		lsr a				lsr 	a
.17c4	90 01		bcc $17c7			bcc 	_ESDNotDec
.17c6	c8		iny				iny
.17c7					_ESDNotDec:
.17c7	4a		lsr a				lsr 	a
.17c8	90 01		bcc $17cb			bcc 	_ESDNotInc
.17ca	c8		iny				iny
.17cb					_ESDNotInc:
.17cb	98		tya				tya
.17cc	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.17cd	a8		tay				tay
.17ce	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.17d0	d2 08		cmp ($08)			cmp 	(srcPtr)
.17d2	d0 1f		bne $17f3			bne 	_ESDNext 					; do not match, go to next
.17d4	98		tya				tya 								; make temp2 point to the name in
.17d5	18		clc				clc 								; the dictionary.
.17d6	65 10		adc $10				adc 	temp1
.17d8	85 12		sta $12				sta 	temp2
.17da	a5 11		lda $11				lda 	temp1+1
.17dc	69 00		adc #$00			adc 	#0
.17de	85 13		sta $13				sta 	temp2+1
.17e0	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.17e2					_ESDCompare:
.17e2	c8		iny				iny
.17e3	b1 08		lda ($08),y			lda 	(srcPtr),y
.17e5	d1 12		cmp ($12),y			cmp 	(temp2),y
.17e7	d0 0a		bne $17f3			bne 	_ESDNext
.17e9	0a		asl a				asl 	a
.17ea	90 f6		bcc $17e2			bcc 	_ESDCompare
.17ec	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.17ee	a4 11		ldy $11				ldy 	temp1+1
.17f0	38		sec				sec
.17f1	80 0d		bra $1800			bra 	_ESDExit
.17f3					_ESDNext:
.17f3	18		clc				clc
.17f4	a5 10		lda $10				lda 	temp1
.17f6	72 10		adc ($10)			adc 	(temp1)
.17f8	85 10		sta $10				sta 	temp1
.17fa	90 b9		bcc $17b5			bcc 	_ESDLoop
.17fc	e6 11		inc $11				inc 	temp1+1
.17fe	80 b5		bra $17b5			bra 	_ESDLoop
.1800					_ESDExit:
.1800	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1801					ForHandler:
.1801	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1803	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.1805	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1807	f0 18		beq $1821			beq 	_FHOverflow
.1809	a5 07		lda $07				lda 	TOS+1
.180b	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.180e	a5 06		lda $06				lda 	TOS
.1810	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1813	a9 ff		lda #$ff			lda 	#$FF
.1815	99 80 07	sta $0780,y			sta 	returnStackX,y
.1818	68		pla				pla
.1819	85 07		sta $07				sta 	TOS+1
.181b	68		pla				pla
.181c	85 06		sta $06				sta 	TOS
.181e	4c 00 00	jmp $0000			jmp 	Next
.1821					_FHOverflow:
.1821	20 23 10	jsr $1023			jsr 	ErrorHandler
>1824	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>182c	4b 3f 00
.182f					NextHandler:
.182f	da		phx				phx
.1830	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1832	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1835	c9 ff		cmp #$ff			cmp 	#$FF
.1837	d0 21		bne $185a			bne 	NHNoFor
.1839	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.183c	d0 03		bne $1841			bne 	_NHNoBorrow
.183e	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1841					_NHNoBorrow:
.1841	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1844	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1847	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.184a	fa		plx				plx 								; restore X and re-test
.184b	09 00		ora #$00			ora 	#0
.184d	f0 05		beq $1854			beq 	_NHComplete 				; if so then complete, else loop.
.184f	e8		inx				inx 								; advance to branch
.1850	e8		inx				inx
.1851	4c b3 18	jmp $18b3			jmp 	BranchAlways
.1854					_NHComplete:
.1854	e8		inx				inx 								; skip over the branch quantity
.1855	c6 05		dec $05				dec 	rsp 						; drop the indx
.1857	4c 00 00	jmp $0000			jmp 	Next
.185a					NHNoFor:
.185a	20 23 10	jsr $1023			jsr 	ErrorHandler
>185d	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.1865					GetIndex:
.1865	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1867	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.186a	c9 ff		cmp #$ff			cmp 	#$FF
.186c	d0 ec		bne $185a			bne 	NHNoFor
.186e	a5 06		lda $06				lda 	TOS
.1870	48		pha				pha
.1871	a5 07		lda $07				lda 	TOS+1
.1873	48		pha				pha
.1874	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1877	38		sec				sec
.1878	e9 01		sbc #$01			sbc 	#1
.187a	85 06		sta $06				sta 	TOS
.187c	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.187f	e9 00		sbc #$00			sbc 	#0
.1881	85 07		sta $07				sta 	TOS+1
.1883	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.1886					IfHandler:
.1886	4c 9b 18	jmp $189b			jmp 	BranchIfZero
.1889					IfEncodeHandler:
.1889	a9 ff		lda #$ff			lda 	#$FF
.188b	20 58 17	jsr $1758			jsr	 	EncodeWriteByte
.188e	60		rts				rts
.188f					ElseHandler:
.188f	4c b1 18	jmp $18b1			jmp 	BranchTestSucceedsNoPop
.1892					EndIfHandler:
.1892	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1895					RepeatHandler:
.1895	4c 00 00	jmp $0000			jmp 	Next
.1898					UntilHandler:
.1898	4c 9b 18	jmp $189b			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.189b					BranchIfZero:
.189b	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.189d	05 07		ora $07				ora 	TOS+1
.189f	f0 0a		beq $18ab			beq 	BranchTestSucceeds
.18a1					BranchTestFails:
.18a1	68		pla				pla
.18a2	85 07		sta $07				sta 	TOS+1
.18a4	68		pla				pla
.18a5	85 06		sta $06				sta 	TOS
.18a7	e8		inx				inx 								; skip over the relative branch.
.18a8	4c 00 00	jmp $0000			jmp 	Next
.18ab					BranchTestSucceeds:
.18ab	68		pla				pla
.18ac	85 07		sta $07				sta 	TOS+1
.18ae	68		pla				pla
.18af	85 06		sta $06				sta 	TOS
.18b1					BranchTestSucceedsNoPop:
.18b1	e8		inx				inx 								; advance by two, to the offset
.18b2	e8		inx				inx
.18b3					BranchAlways:
.18b3	8a		txa				txa 								; A = Y = position
.18b4	a8		tay				tay 								; (IP),Y now points to the branch target
.18b5	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.18b7	aa		tax				tax 								; position back in this line.
.18b8	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.18bb					CallHandler:
.18bb	e8		inx				inx									; bump X to the call address.
.18bc	e8		inx				inx
.18bd	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.18bf	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.18c1	c0 40		cpy #$40			cpy 	#$40 						; overflow
.18c3	f0 4b		beq $1910			beq 	_CHOverflow
.18c5	a5 04		lda $04				lda 	IP+1
.18c7	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.18ca	a5 03		lda $03				lda 	IP
.18cc	99 00 07	sta $0700,y			sta 	returnStackLow,y
.18cf	8a		txa				txa
.18d0	99 80 07	sta $0780,y			sta 	returnStackX,y
.18d3	8a		txa				txa 								; get the line number into temp1.
.18d4	a8		tay				tay
.18d5	b1 03		lda ($03),y			lda 	(IP),y
.18d7	85 10		sta $10				sta 	temp1
.18d9	c8		iny				iny
.18da	b1 03		lda ($03),y			lda 	(IP),y
.18dc	85 11		sta $11				sta 	temp1+1
.18de	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.18e0	85 03		sta $03				sta 	0+(IP)
.18e2	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.18e4	85 04		sta $04				sta 	1+(IP)
.18e6	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.18e8	f0 17		beq $1901			beq 	_CHFail
.18ea	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.18ec					_CHSearch:
.18ec	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.18ee	c5 10		cmp $10				cmp 	temp1
.18f0	f0 2d		beq $191f			beq 	_CHFoundLSB
.18f2					_CHSearchNext:
.18f2	18		clc				clc
.18f3	a5 03		lda $03				lda 	IP
.18f5	72 03		adc ($03)			adc 	(IP)
.18f7	85 03		sta $03				sta 	IP
.18f9	90 02		bcc $18fd			bcc 	_NoCarryAdv
.18fb	e6 04		inc $04				inc 	IP+1
.18fd					_NoCarryAdv:
.18fd	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.18ff	d0 eb		bne $18ec			bne 	_CHSearch
.1901					_CHFail:
.1901	20 23 10	jsr $1023			jsr 	ErrorHandler
>1904	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>190c	4f 4e 3f 00
.1910					_CHOverflow:
.1910	20 23 10	jsr $1023			jsr 	ErrorHandler
>1913	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>191b	54 48 3f 00
.191f					_CHFoundLSB:
.191f	c8		iny				iny 								; get MSB
.1920	b1 03		lda ($03),y			lda 	(IP),y
.1922	88		dey				dey
.1923	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1925	d0 cb		bne $18f2			bne 	_CHSearchNext
.1927	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1929	b1 03		lda ($03),y			lda 	(IP),y
.192b	c9 57		cmp #$57			cmp 	#DefineCode & $FF
.192d	d0 d2		bne $1901			bne 	_CHFail
.192f	c8		iny				iny
.1930	b1 03		lda ($03),y			lda 	(IP),y
.1932	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1934	d0 cb		bne $1901			bne 	_CHFail
.1936	c8		iny				iny
.1937	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1939	18		clc				clc
.193a	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.193c	aa		tax				tax
.193d	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.1940					ReturnHandler:
.1940	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1942	30 15		bmi $1959			bmi 	_RHUnderflow 				; if -ve underflowed
.1944	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1946	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1949	85 04		sta $04				sta 	IP+1
.194b	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.194e	85 03		sta $03				sta 	IP
.1950	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1953	aa		tax				tax
.1954	f0 0e		beq $1964			beq 	_RHInLoop 					; this means you have done :something for ; next
.1956	4c 00 00	jmp $0000			jmp 	Next
.1959					_RHUnderflow:
.1959	20 23 10	jsr $1023			jsr 	ErrorHandler
>195c	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1964					_RHInLoop:
.1964	20 23 10	jsr $1023			jsr 	ErrorHandler
>1967	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>196f	4e 20 4c 4f 4f 50 3f 00
.1977					CallHandlerDecode:
.1977	a9 03		lda #$03			lda 	#CTH_Call					; space
.1979	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.197c	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.197e	aa		tax				tax
.197f	c8		iny				iny
.1980	b1 08		lda ($08),y			lda 	(srcPtr),y
.1982	a8		tay				tay
.1983	8a		txa				txa
.1984	20 c1 19	jsr $19c1			jsr 	FindLine 					; try to locate that line.
.1987	b0 11		bcs $199a			bcs 	_CHDFound 					; if found .....
.1989					_CHDLineOnly:
.1989	48		pha				pha
.198a	a9 3c		lda #$3c			lda 	#"<"
.198c	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.198f	68		pla				pla
.1990	18		clc				clc 								; output unsigned
.1991	20 59 1b	jsr $1b59			jsr 	DecodeYAToBuffer
.1994	a9 3e		lda #$3e			lda 	#">"
.1996	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1999	60		rts				rts
.199a					_CHDFound:
.199a	48		pha				pha 								; save YA
.199b	5a		phy				phy
.199c	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.199e	b1 10		lda ($10),y			lda 	(temp1),y
.19a0	c9 57		cmp #$57			cmp 	#DefineCode & 255
.19a2	d0 07		bne $19ab			bne 	_CHDNoDefine
.19a4	c8		iny				iny
.19a5	b1 10		lda ($10),y			lda 	(temp1),y
.19a7	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.19a9	f0 04		beq $19af			beq 	_CHDFoundDefine
.19ab					_CHDNoDefine:
.19ab	7a		ply				ply									; restore the line number and print it in <>
.19ac	68		pla				pla
.19ad	80 da		bra $1989			bra 	_CHDLineOnly
.19af					_CHDFoundDefine:
.19af	68		pla				pla 								; throw saved line number.
.19b0	68		pla				pla
.19b1	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.19b3					_CHDOutName:
.19b3	c8		iny				iny 								; next
.19b4	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.19b6	48		pha				pha
.19b7	29 7f		and #$7f			and 	#$7F
.19b9	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.19bc	68		pla				pla
.19bd	0a		asl a				asl 	a 							; bit 7 to carry
.19be	90 f3		bcc $19b3			bcc 	_CHDOutName
.19c0	60		rts				rts
.19c1					FindLine:
.19c1	48		pha				pha 								; save registers
.19c2	da		phx				phx
.19c3	5a		phy				phy
.19c4	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.19c6	84 13		sty $13				sty 	temp2+1
.19c8	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.19ca	85 10		sta $10				sta 	0+(temp1)
.19cc	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.19ce	85 11		sta $11				sta 	1+(temp1)
.19d0					_FLLoop:
.19d0	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.19d2	18		clc				clc									; if so exit with CC.
.19d3	f0 1d		beq $19f2			beq 	_FLExit
.19d5	a0 01		ldy #$01			ldy 	#1 							; check line # match
.19d7	b1 10		lda ($10),y			lda 	(temp1),y
.19d9	c5 12		cmp $12				cmp 	temp2
.19db	d0 08		bne $19e5			bne 	_FLNext
.19dd	c8		iny				iny
.19de	b1 10		lda ($10),y			lda 	(temp1),y
.19e0	c5 13		cmp $13				cmp 	temp2+1
.19e2	38		sec				sec 								; if so exit with CS
.19e3	f0 0d		beq $19f2			beq 	_FLExit
.19e5					_FLNext:
.19e5	18		clc				clc
.19e6	a5 10		lda $10				lda 	temp1
.19e8	72 10		adc ($10)			adc 	(temp1)
.19ea	85 10		sta $10				sta 	temp1
.19ec	90 02		bcc $19f0			bcc 	_NoCarryAdv
.19ee	e6 11		inc $11				inc 	temp1+1
.19f0					_NoCarryAdv:
.19f0	80 de		bra $19d0			bra 	_FLLoop 					; keep looking.
.19f2					_FLExit:
.19f2	7a		ply				ply
.19f3	fa		plx				plx
.19f4	68		pla				pla
.19f5	60		rts				rts
.19f6	18		clc				clc
.19f7	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.19f8					NewHandler:
.19f8	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.19fb	20 07 1a	jsr $1a07			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.19fe	4c 00 00	jmp $0000			jmp 	Next
.1a01					ClrHandler:
.1a01	20 07 1a	jsr $1a07			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1a04	4c 00 00	jmp $0000			jmp 	Next
.1a07					ClearVariableSpace:
.1a07	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1a09	85 05		sta $05				sta 	rsp
.1a0b	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a0d	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1a0f	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a11	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1a13	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1a15					_CVSHashClear:
.1a15	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1a17	99 40 06	sta $0640,y			sta 	hashTable,y
.1a1a	88		dey				dey
.1a1b	10 f8		bpl $1a15			bpl 	_CVSHashClear
.1a1d					_CVSFindEnd:
.1a1d	18		clc				clc
.1a1e	a5 0e		lda $0e				lda 	nextFreeMem
.1a20	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1a22	85 0e		sta $0e				sta 	nextFreeMem
.1a24	90 02		bcc $1a28			bcc 	_NoCarryAdv
.1a26	e6 0f		inc $0f				inc 	nextFreeMem+1
.1a28					_NoCarryAdv:
.1a28	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1a2a	d0 f1		bne $1a1d			bne 	_CVSFindEnd
.1a2c	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1a2e	a0 00		ldy #$00			ldy 	#0
.1a30	20 34 1a	jsr $1a34			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1a33	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1a34					AdvanceFreeMem:
.1a34	18		clc				clc
.1a35	65 0e		adc $0e				adc 	nextFreeMem
.1a37	85 0e		sta $0e				sta 	nextFreeMem
.1a39	98		tya				tya
.1a3a	65 0f		adc $0f				adc 	nextFreeMem+1
.1a3c	85 0f		sta $0f				sta 	nextFreeMem+1
.1a3e	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1a3f					ExitDump:
.1a3f	ba		tsx				tsx 								; save Data Stack in temp1
.1a40	86 10		stx $10				stx 	temp1
.1a42	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1a45					BreakCmd:
>1a45	ff						.byte 	$FF
.1a46	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1a49					DecodeLineIntoBufPtr:
.1a49	48		pha				pha
.1a4a	da		phx				phx
.1a4b	5a		phy				phy
.1a4c	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1a4e	84 09		sty $09				sty 	srcPtr+1
.1a50	90 1b		bcc $1a6d			bcc 	_DecodeNoLineNumber
.1a52	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1a54	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a56	aa		tax				tax
.1a57	c8		iny				iny
.1a58	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a5a	a8		tay				tay
.1a5b	8a		txa				txa
.1a5c	18		clc				clc
.1a5d	20 59 1b	jsr $1b59			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1a60	aa		tax				tax 								; count in X
.1a61					_DecodeLineSpace:
.1a61	e0 05		cpx #$05			cpx 	#5
.1a63	f0 08		beq $1a6d			beq 	_DecodeNoLineNumber
.1a65	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1a67	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1a6a	e8		inx				inx
.1a6b	80 f4		bra $1a61			bra 	_DecodeLineSpace
.1a6d					_DecodeNoLineNumber:
.1a6d	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1a6f					_DecodeLoop:
.1a6f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1a71	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1a73	c8		iny				iny
.1a74	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a76	85 11		sta $11				sta 	temp1+1
.1a78	c8		iny				iny 								; y points to the byte after it.
.1a79	a5 10		lda $10				lda 	temp1
.1a7b	c9 1d		cmp #$1d			cmp 	#NextLine & $FF
.1a7d	d0 06		bne $1a85			bne 	_DecodeNotEOL
.1a7f	a5 11		lda $11				lda 	temp1+1
.1a81	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.1a83	f0 0b		beq $1a90			beq 	_DecodeEOL
.1a85					_DecodeNotEOL:
.1a85	20 98 1a	jsr $1a98			jsr 	IdentifyCodeWord
.1a88	20 e2 1a	jsr $1ae2			jsr 	DecodeFoundWord
.1a8b	20 cc 1a	jsr $1acc			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1a8e	80 df		bra $1a6f			bra 	_DecodeLoop 				; and go round again
.1a90					_DecodeEOL:
.1a90	a9 00		lda #$00			lda 	#0
.1a92	92 0a		sta ($0a)			sta 	(bufPtr)
.1a94	7a		ply				ply 								; restore registers and exit
.1a95	fa		plx				plx
.1a96	68		pla				pla
.1a97	60		rts				rts
.1a98					IdentifyCodeWord:
.1a98	5a		phy				phy 								; save current position on the stack.
.1a99	a9 55		lda #$55			lda 	#(Dictionary) & $FF
.1a9b	85 0c		sta $0c				sta 	0+(matchPtr)
.1a9d	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1a9f	85 0d		sta $0d				sta 	1+(matchPtr)
.1aa1					_DecodeIdentify:
.1aa1	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1aa3	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1aa5	c5 10		cmp $10				cmp 	temp1
.1aa7	d0 07		bne $1ab0			bne 	_DecodeIdNext
.1aa9	c8		iny				iny
.1aaa	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1aac	c5 11		cmp $11				cmp 	temp1+1
.1aae	f0 1a		beq $1aca			beq 	_DecodeIdFound
.1ab0					_DecodeIdNext:
.1ab0	18		clc				clc
.1ab1	b2 0c		lda ($0c)			lda 	(matchPtr)
.1ab3	f0 0a		beq $1abf			beq 	_DecodeIdIssue
.1ab5	65 0c		adc $0c				adc 	matchPtr
.1ab7	85 0c		sta $0c				sta 	matchPtr
.1ab9	90 e6		bcc $1aa1			bcc 	_DecodeIdentify
.1abb	e6 0d		inc $0d				inc 	matchPtr+1
.1abd	80 e2		bra $1aa1			bra 	_DecodeIdentify
.1abf					_DecodeIdIssue:
.1abf	20 23 10	jsr $1023			jsr 	ErrorHandler
>1ac2	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.1aca					_DecodeIdFound:
.1aca	7a		ply				ply 								; restore position.
.1acb	60		rts				rts
.1acc					AdvanceToNext:
.1acc	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1acd	a0 01		ldy #$01			ldy 	#1
.1acf	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1ad1	29 03		and #$03			and 	#3 							; bits 0-1.
.1ad3	7a		ply				ply
.1ad4	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1ad6	d0 02		bne $1ada			bne 	_ATN012
.1ad8	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1ada					_ATN012:
.1ada	85 12		sta $12				sta 	temp2 						; now add that to Y
.1adc	98		tya				tya
.1add	18		clc				clc
.1ade	65 12		adc $12				adc 	temp2
.1ae0	a8		tay				tay
.1ae1	60		rts				rts
.1ae2					DecodeFoundWord:
.1ae2	5a		phy				phy 								; save current position
.1ae3	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1ae5	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1ae7	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1ae9	29 10		and #$10			and 	#$10
.1aeb	d0 0e		bne $1afb			bne 	_DFWSpecialDecoder
.1aed	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1aef	30 08		bmi $1af9			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1af1	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1af3	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1af6	20 14 1b	jsr $1b14			jsr 	DecodeCurrentWord 			; expand that.
.1af9					_DFWExit:
.1af9	7a		ply				ply 								; restore current position
.1afa	60		rts				rts
.1afb					_DFWSpecialDecoder:
.1afb	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1afd	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1aff	85 12		sta $12				sta 	temp2
.1b01	c8		iny				iny
.1b02	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b04	85 13		sta $13				sta 	temp2+1
.1b06	7a		ply				ply 	 							; restore current position into Y
.1b07	48		pha				pha 								; save registers
.1b08	da		phx				phx
.1b09	5a		phy				phy
.1b0a	20 11 1b	jsr $1b11			jsr 	_DFWCallDecoder				; call the decoder routine
.1b0d	7a		ply				ply 								; restore registers and exit
.1b0e	fa		plx				plx
.1b0f	68		pla				pla
.1b10	60		rts				rts
.1b11					_DFWCallDecoder:
.1b11	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1b14					DecodeCurrentWord:
.1b14	5a		phy				phy
.1b15	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1b17	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b19	a0 04		ldy #$04			ldy 	#4 							; original offset
.1b1b	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1b1c	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1b1d	4a		lsr a				lsr 	a 							; bit set.
.1b1e	4a		lsr a				lsr 	a
.1b1f	4a		lsr a				lsr 	a 							; decoder bit
.1b20	90 02		bcc $1b24			bcc 	_DWBNoDec
.1b22	c8		iny				iny
.1b23	c8		iny				iny
.1b24					_DWBNoDec:
.1b24	4a		lsr a				lsr 	a
.1b25	90 02		bcc $1b29			bcc 	_DWBNoEnc
.1b27	c8		iny				iny
.1b28	c8		iny				iny
.1b29					_DWBNoEnc:
.1b29					_DWBWordOut:
.1b29	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1b2b	48		pha				pha
.1b2c	29 7f		and #$7f			and 	#$7F
.1b2e	20 37 1b	jsr $1b37			jsr		DecodeWriteBuffer
.1b31	c8		iny				iny
.1b32	68		pla				pla
.1b33	10 f4		bpl $1b29			bpl 	_DWBWordOut
.1b35	7a		ply				ply 								; restore Y and exit
.1b36	60		rts				rts
.1b37					DecodeWriteBuffer:
.1b37	92 0a		sta ($0a)			sta 	(bufPtr)
.1b39	e6 0a		inc $0a				inc 	bufPtr
.1b3b	d0 02		bne $1b3f			bne 	_DWBNoCarry
.1b3d	e6 0b		inc $0b				inc 	bufPtr+1
.1b3f					_DWBNoCarry:
.1b3f	60		rts				rts
.1b40					DecodeOutputData:
.1b40	48		pha				pha
.1b41	da		phx				phx
.1b42	5a		phy				phy
.1b43	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1b45	aa		tax				tax
.1b46					_DODLoop:
.1b46	ca		dex				dex 								; done it all ?
.1b47	f0 0c		beq $1b55			beq		_DODExit
.1b49	c8		iny				iny 								; output next character
.1b4a	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b4c	29 7f		and #$7f			and 	#$7F
.1b4e	f0 f6		beq $1b46			beq 	_DODLoop 					; don't print NULL
.1b50	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1b53	80 f1		bra $1b46			bra 	_DODLoop
.1b55					_DODExit:
.1b55	7a		ply				ply
.1b56	fa		plx				plx
.1b57	68		pla				pla
.1b58	60		rts				rts
.1b59					DecodeYAToBuffer:
.1b59	da		phx				phx
.1b5a	5a		phy				phy
.1b5b	48		pha				pha
.1b5c	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1b5e	85 12		sta $12				sta 	temp2
.1b60	a5 0b		lda $0b				lda 	bufPtr+1
.1b62	85 13		sta $13				sta 	temp2+1
.1b64	68		pla				pla
.1b65	20 97 1d	jsr $1d97			jsr 	ConvertToStringMain 		; convert YA to string there
.1b68	aa		tax				tax 								; chars output to X
.1b69	18		clc				clc
.1b6a	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1b6c	85 0a		sta $0a				sta 	bufPtr
.1b6e	90 02		bcc $1b72			bcc 	_DYABNoCarry
.1b70	e6 0b		inc $0b				inc 	bufPtr+1
.1b72					_DYABNoCarry:
.1b72	8a		txa				txa 								; count in A
.1b73	7a		ply				ply									; restore and exit.
.1b74	fa		plx				plx
.1b75	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1b76					ListCode:
.1b76	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1b78	64 1f		stz $1f				stz 	ListLowest+1
.1b7a	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1b7c	85 1d		sta $1d				sta 	ListCount
.1b7e	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1b80	85 18		sta $18				sta 	0+(listPtr)
.1b82	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1b84	85 19		sta $19				sta 	1+(listPtr)
.1b86	86 10		stx $10				stx 	temp1						; S->A
.1b88	ba		tsx				tsx
.1b89	8a		txa				txa
.1b8a	a6 10		ldx $10				ldx 	temp1
.1b8c	c9 80		cmp #$80			cmp 	#NumberStackBase
.1b8e	f0 0e		beq $1b9e			beq 	_LCLoop
.1b90	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1b92	85 1e		sta $1e				sta 	ListLowest
.1b94	a5 07		lda $07				lda 	TOS+1
.1b96	85 1f		sta $1f				sta 	ListLowest+1
.1b98	68		pla				pla
.1b99	85 07		sta $07				sta 	TOS+1
.1b9b	68		pla				pla
.1b9c	85 06		sta $06				sta 	TOS
.1b9e					_LCLoop:
.1b9e	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1ba0	f0 4e		beq $1bf0			beq 	_LCExit
.1ba2	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1ba4	b1 18		lda ($18),y			lda 	(listPtr),y
.1ba6	c5 1e		cmp $1e				cmp 	ListLowest
.1ba8	c8		iny				iny
.1ba9	b1 18		lda ($18),y			lda 	(listPtr),y
.1bab	e5 1f		sbc $1f				sbc 	ListLowest+1
.1bad	90 34		bcc $1be3			bcc 	_LCNext
.1baf	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1bb1	85 0a		sta $0a				sta 	0+(bufPtr)
.1bb3	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1bb5	85 0b		sta $0b				sta 	1+(bufPtr)
.1bb7	a5 18		lda $18				lda 	listPtr 					; output the line.
.1bb9	a4 19		ldy $19				ldy 	listPtr+1
.1bbb	38		sec				sec
.1bbc	20 49 1a	jsr $1a49			jsr 	DecodeLineIntoBufPtr
.1bbf	a9 02		lda #$02			lda 	#CTH_LineNo
.1bc1	20 16 11	jsr $1116			jsr 	ExternColour
.1bc4	a0 ff		ldy #$ff			ldy 	#255
.1bc6					_LCLoop2:
.1bc6	c8		iny				iny
.1bc7	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1bca	f0 0e		beq $1bda			beq 	_LCEnd
.1bcc	c9 20		cmp #$20			cmp 	#32
.1bce	b0 05		bcs $1bd5			bcs 	_LCPrint
.1bd0	20 16 11	jsr $1116			jsr 	ExternColour
.1bd3	a9 20		lda #$20			lda 	#32
.1bd5					_LCPrint:
.1bd5	20 0c 11	jsr $110c			jsr 	ExternPrint
.1bd8	80 ec		bra $1bc6			bra 	_LCLoop2
.1bda	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1bdc	20 0c 11	jsr $110c			jsr 	ExternPrint
.1bdf	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1be1	f0 0d		beq $1bf0			beq 	_LCExit
.1be3					_LCNext:
.1be3	18		clc				clc
.1be4	a5 18		lda $18				lda 	listPtr
.1be6	72 18		adc ($18)			adc 	(listPtr)
.1be8	85 18		sta $18				sta 	listPtr
.1bea	90 02		bcc $1bee			bcc 	_NoCarryAdv
.1bec	e6 19		inc $19				inc 	listPtr+1
.1bee					_NoCarryAdv:
.1bee	80 ae		bra $1b9e			bra 	_LCLoop 					; go round again.
.1bf0					_LCExit:
.1bf0	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1bf3					RunProgram:
.1bf3	a2 80		ldx #$80			ldx 	#NumberStackBase
.1bf5	9a		txs				txs
.1bf6	20 07 1a	jsr $1a07			jsr 		ClearVariableSpace 		; clear variables etc.
.1bf9	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1bfb	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1bfd	20 78 10	jsr $1078			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.1c00	4c 00 00	jmp $0000			jmp 		Next
.1c03					Call6502:
.1c03	a5 06		lda $06				lda 	TOS 						; copy call address
.1c05	85 10		sta $10				sta 	temp1
.1c07	a5 07		lda $07				lda 	TOS+1
.1c09	85 11		sta $11				sta 	temp1+1
.1c0b	68		pla				pla
.1c0c	85 07		sta $07				sta 	TOS+1
.1c0e	68		pla				pla
.1c0f	85 06		sta $06				sta 	TOS
.1c11	20 17 1c	jsr $1c17			jsr 	_CallTemp1 					; call it
.1c14	4c 00 00	jmp $0000			jmp 	Next
.1c17					_CallTemp1:
.1c17	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1c1a					AssertCode:
.1c1a	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1c1c	05 07		ora $07				ora 	TOS+1
.1c1e	f0 09		beq $1c29			beq 	_ASFail 					; if zero fail
.1c20	68		pla				pla
.1c21	85 07		sta $07				sta 	TOS+1
.1c23	68		pla				pla
.1c24	85 06		sta $06				sta 	TOS
.1c26	4c 00 00	jmp $0000			jmp 	Next
.1c29					_ASFail:
.1c29	20 23 10	jsr $1023			jsr 	ErrorHandler
>1c2c	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1c33					StopCode:
.1c33	20 23 10	jsr $1023			jsr 	ErrorHandler
>1c36	53 54 4f 50 00					.text 	"STOP",0
.1c3b					EndProgram:
.1c3b	4c 13 10	jmp $1013			jmp 	WarmStart
.1c3e					VlistCode:
.1c3e	a9 55		lda #$55			lda 	#(Dictionary) & $FF
.1c40	85 10		sta $10				sta 	0+(temp1)
.1c42	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1c44	85 11		sta $11				sta 	1+(temp1)
.1c46	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1c48	b1 10		lda ($10),y			lda 	(temp1),y
.1c4a	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1c4c	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1c4d	4a		lsr a				lsr 	a
.1c4e	4a		lsr a				lsr		a
.1c4f	4a		lsr a				lsr 	a
.1c50	4a		lsr a				lsr 	a 							; add those bits in
.1c51	90 02		bcc $1c55			bcc 	_VLNoDec
.1c53	c8		iny				iny
.1c54	c8		iny				iny
.1c55					_VLNoDec:
.1c55	4a		lsr a				lsr 	a
.1c56	90 02		bcc $1c5a			bcc 	_VLNoEnc
.1c58	c8		iny				iny
.1c59	c8		iny				iny
.1c5a					_VLNoEnc:
.1c5a	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1c5c	c9 24		cmp #$24			cmp 	#"$"
.1c5e	d0 06		bne $1c66			bne 	_VLPrint
.1c60	c8		iny				iny
.1c61	51 10		eor ($10),y			eor 	(temp1),y
.1c63	f0 13		beq $1c78			beq 	_VLNext
.1c65	88		dey				dey
.1c66					_VLPrint:
.1c66	b1 10		lda ($10),y			lda 	(temp1),y
.1c68	48		pha				pha
.1c69	c8		iny				iny
.1c6a	29 7f		and #$7f			and 	#$7F
.1c6c	20 0c 11	jsr $110c			jsr 	ExternPrint
.1c6f	68		pla				pla
.1c70	0a		asl a				asl 	a
.1c71	90 f3		bcc $1c66			bcc 	_VLPrint
.1c73	a9 20		lda #$20			lda 	#32
.1c75	20 0c 11	jsr $110c			jsr 	ExternPrint
.1c78					_VLNext:
.1c78	18		clc				clc 								; go to next
.1c79	b2 10		lda ($10)			lda 	(temp1)
.1c7b	65 10		adc $10				adc 	temp1
.1c7d	85 10		sta $10				sta 	temp1
.1c7f	90 02		bcc $1c83			bcc 	_VLNoCarry
.1c81	e6 11		inc $11				inc 	temp1+1
.1c83					_VLNoCarry:
.1c83	b2 10		lda ($10)			lda 	(temp1)
.1c85	d0 bf		bne $1c46			bne 	_VLLoop
.1c87	a9 0d		lda #$0d			lda 	#13
.1c89	20 0c 11	jsr $110c			jsr 	ExternPrint
.1c8c	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1c8f					ConvertToInteger:
.1c8f	84 17		sty $17				sty 	temp4+1
.1c91	85 16		sta $16				sta 	temp4
.1c93	64 14		stz $14				stz 	temp3 						; reset value
.1c95	64 15		stz $15				stz 	temp3+1
.1c97	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1c99	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1c9b	b1 16		lda ($16),y			lda 	(temp4),y
.1c9d	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1c9f	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1ca1	d0 01		bne $1ca4			bne 	_CTINotMinus
.1ca3	c8		iny				iny									; skip -
.1ca4					_CTINotMinus:
.1ca4	b1 16		lda ($16),y			lda 	(temp4),y
.1ca6	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1ca8	d0 03		bne $1cad			bne 	_CTILoop
.1caa	c6 10		dec $10				dec 	temp1
.1cac	c8		iny				iny
.1cad					_CTILoop:
.1cad	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1caf	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1cb1	38		sec				sec
.1cb2	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1cb4	90 65		bcc $1d1b			bcc 	_CTIFail 					; out of range.
.1cb6	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1cb8	90 0b		bcc $1cc5			bcc 	_CTILegal
.1cba	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1cbc	90 5d		bcc $1d1b			bcc 	_CTIFail
.1cbe	38		sec				sec
.1cbf	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1cc1	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1cc3	b0 56		bcs $1d1b			bcs 	_CTIFail
.1cc5					_CTILegal:
.1cc5	48		pha				pha 								; save digit value.
.1cc6	06 14		asl $14				asl 	temp3
.1cc8	26 15		rol $15				rol 	temp3+1
.1cca	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1ccc	85 12		sta $12				sta 	temp2
.1cce	a5 15		lda $15				lda 	temp3+1
.1cd0	85 13		sta $13				sta 	temp2+1
.1cd2	06 14		asl $14				asl 	temp3
.1cd4	26 15		rol $15				rol 	temp3+1
.1cd6	06 14		asl $14				asl 	temp3
.1cd8	26 15		rol $15				rol 	temp3+1
.1cda	24 10		bit $10				bit 	temp1 						; hexadecimal
.1cdc	10 07		bpl $1ce5			bpl 	_CTIDecimal
.1cde	06 14		asl $14				asl 	temp3
.1ce0	26 15		rol $15				rol 	temp3+1
.1ce2	68		pla				pla 								; get digit back
.1ce3	80 12		bra $1cf7			bra 	_CTIAddLoop
.1ce5					_CTIDecimal:
.1ce5	18		clc				clc 								; x 8 + x 2 = x 10
.1ce6	a5 14		lda $14				lda 	temp3
.1ce8	65 12		adc $12				adc 	temp2
.1cea	85 14		sta $14				sta 	temp3
.1cec	a5 15		lda $15				lda 	temp3+1
.1cee	65 13		adc $13				adc 	temp2+1
.1cf0	85 15		sta $15				sta 	temp3+1
.1cf2	68		pla				pla 								; check digit 0-9
.1cf3	c9 0a		cmp #$0a			cmp 	#10
.1cf5	b0 24		bcs $1d1b			bcs 	_CTIFail
.1cf7					_CTIAddLoop:
.1cf7	18		clc				clc
.1cf8	65 14		adc $14				adc 	temp3
.1cfa	85 14		sta $14				sta 	temp3
.1cfc	90 02		bcc $1d00			bcc 	_CTINoCarry
.1cfe	e6 15		inc $15				inc 	temp3+1
.1d00					_CTINoCarry:
.1d00	c8		iny				iny
.1d01	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1d03	c9 21		cmp #$21			cmp 	#32+1
.1d05	b0 a6		bcs $1cad			bcs 	_CTILoop 					; no, go back.
.1d07	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1d09	d0 0d		bne $1d18			bne 	_CTIOkay
.1d0b	38		sec				sec
.1d0c	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1d0e	e5 14		sbc $14				sbc 	temp3
.1d10	85 14		sta $14				sta 	temp3
.1d12	a9 00		lda #$00			lda 	#0
.1d14	e5 15		sbc $15				sbc 	temp3+1
.1d16	85 15		sta $15				sta 	temp3+1
.1d18					_CTIOkay:
.1d18	98		tya				tya
.1d19	38		sec				sec
.1d1a	60		rts				rts
.1d1b					_CTIFail:
.1d1b	18		clc				clc
.1d1c	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1d1d					NextLine:
.1d1d	18		clc				clc
.1d1e	a5 03		lda $03				lda 	IP
.1d20	72 03		adc ($03)			adc 	(IP)
.1d22	85 03		sta $03				sta 	IP
.1d24	90 02		bcc $1d28			bcc 	_NoCarryAdv
.1d26	e6 04		inc $04				inc 	IP+1
.1d28					_NoCarryAdv:
.1d28	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1d2a	f0 05		beq $1d31			beq 	_NLGoEnd
.1d2c	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1d2e	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1d31					_NLGoEnd:
.1d31	4c 13 10	jmp $1013			jmp 	WarmStart
.1d34					SkipComment:
.1d34	e8		inx				inx									; (IP),X points to the length.
.1d35	e8		inx				inx
.1d36	8a		txa				txa
.1d37	a8		tay				tay 								; put into Y
.1d38	18		clc				clc
.1d39	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1d3b	aa		tax				tax 								; put back in X
.1d3c	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1d3f					CommentDecoder:
.1d3f	a9 06		lda #$06			lda 	#CTH_Keyword
.1d41	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d44	a9 27		lda #$27			lda 	#"'"
.1d46	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d49	a9 0b		lda #$0b			lda 	#CTH_Comment
.1d4b	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d4e	20 40 1b	jsr $1b40			jsr 	DecodeOutputData
.1d51	a9 20		lda #$20			lda 	#32
.1d53	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d56	60		rts				rts
.1d57					DefineCode:
.1d57	20 23 10	jsr $1023			jsr 	ErrorHandler
>1d5a	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1d62	4f 4e 3f 00
.1d66					DefineDecoder:
.1d66	a9 07		lda #$07			lda 	#CTH_Definition
.1d68	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d6b	a9 3a		lda #$3a			lda 	#":"
.1d6d	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d70	20 40 1b	jsr $1b40			jsr 	DecodeOutputData
.1d73	a9 20		lda #$20			lda 	#32
.1d75	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1d78	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1d79					IntToString:
.1d79	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1d7b	85 12		sta $12				sta 	0+(temp2)
.1d7d	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1d7f	85 13		sta $13				sta 	1+(temp2)
.1d81	a5 06		lda $06				lda 	TOS 						; value in YA
.1d83	a4 07		ldy $07				ldy 	TOS+1
.1d85	20 93 1d	jsr $1d93			jsr 	ConvertToString
.1d88	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1d8a	85 06		sta $06				sta 	0+(TOS)
.1d8c	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1d8e	85 07		sta $07				sta 	1+(TOS)
.1d90	4c 00 00	jmp $0000			jmp 	Next
.1d93					ConvertToString:
.1d93	38		sec				sec
.1d94	80 01		bra $1d97			bra 	ConvertToStringMain
.1d96					ConvertToStringUnsigned:
.1d96	18		clc				clc
.1d97					ConvertToStringMain:
.1d97	da		phx				phx									; save XY
.1d98	5a		phy				phy
.1d99	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1d9b	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1d9d	84 11		sty $11				sty 	temp1+1
.1d9f	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1da1	90 16		bcc $1db9			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1da3	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1da5	10 12		bpl $1db9			bpl 	_CTSUnsigned
.1da7	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1da9	91 12		sta ($12),y			sta 	(temp2),y
.1dab	c8		iny				iny
.1dac	38		sec				sec 								; negate temp1
.1dad	a9 00		lda #$00			lda 	#0
.1daf	e5 10		sbc $10				sbc 	temp1
.1db1	85 10		sta $10				sta 	temp1
.1db3	a9 00		lda #$00			lda 	#0
.1db5	e5 11		sbc $11				sbc 	temp1+1
.1db7	85 11		sta $11				sta 	temp1+1
.1db9					_CTSUnsigned:
.1db9	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1dbb					_CTSLoop:
.1dbb	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1dbd	91 12		sta ($12),y			sta 	(temp2),y
.1dbf					_CTSSubLoop:
.1dbf	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1dc1	1a		inc a				inc 	a
.1dc2	91 12		sta ($12),y			sta 	(temp2),y
.1dc4	38		sec				sec 								; do subtraction saving interim result
.1dc5	a5 10		lda $10				lda 	temp1
.1dc7	fd fa 1d	sbc $1dfa,x			sbc 	_CTSTable,x
.1dca	48		pha				pha
.1dcb	a5 11		lda $11				lda 	temp1+1
.1dcd	fd fb 1d	sbc $1dfb,x			sbc 	_CTSTable+1,x
.1dd0	90 07		bcc $1dd9			bcc 	_CTSCantSubtract 			; end of subtraction.
.1dd2	85 11		sta $11				sta 	temp1+1 					; save result back
.1dd4	68		pla				pla
.1dd5	85 10		sta $10				sta 	temp1
.1dd7	80 e6		bra $1dbf			bra 	_CTSSubLoop
.1dd9					_CTSCantSubtract:
.1dd9	68		pla				pla 								; throw away interim
.1dda	e8		inx				inx 								; next subtractor
.1ddb	e8		inx				inx
.1ddc	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1dde	49 30		eor #$30			eor 	#"0"
.1de0	05 1a		ora $1a				ora 	SignCount
.1de2	85 1a		sta $1a				sta 	SignCount
.1de4	f0 01		beq $1de7			beq		_CTSLZ 						; if all zeros so far suppress.
.1de6	c8		iny				iny 								; next character
.1de7					_CTSLZ:
.1de7	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1de9	d0 d0		bne $1dbb			bne 	_CTSLoop
.1deb					_CTSComplete:
.1deb	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1ded	09 30		ora #$30			ora 	#48 						; ASCII
.1def	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1df1	c8		iny				iny
.1df2	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1df4	91 12		sta ($12),y			sta 	(temp2),y
.1df6	98		tya				tya 								; size in A
.1df7	7a		ply				ply									; pull and exit.
.1df8	fa		plx				plx
.1df9	60		rts				rts
.1dfa					_CTSTable:
>1dfa	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e02					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1e02					VarAddressHandler:
.1e02	18		clc				clc 								; find variable, error if it doesn't exist.
.1e03	20 54 1e	jsr $1e54			jsr 	VariableFind
.1e06	a5 06		lda $06				lda 	TOS
.1e08	48		pha				pha
.1e09	a5 07		lda $07				lda 	TOS+1
.1e0b	48		pha				pha
.1e0c	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1e0e	85 06		sta $06				sta 	TOS
.1e10	a5 11		lda $11				lda		temp1+1
.1e12	85 07		sta $07				sta 	TOS+1
.1e14	4c 00 00	jmp $0000			jmp 	Next
.1e17					VarAddrHandlerDecode:
.1e17	a9 26		lda #$26			lda 	#"&"
.1e19	4c 02 1f	jmp $1f02			jmp 	VarHandlerDecode
.1e1c					VarReadHandler:
.1e1c	18		clc				clc 								; find variable, error if it doesn't exist.
.1e1d	20 54 1e	jsr $1e54			jsr 	VariableFind
.1e20	a5 06		lda $06				lda 	TOS
.1e22	48		pha				pha
.1e23	a5 07		lda $07				lda 	TOS+1
.1e25	48		pha				pha
.1e26	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1e28	85 06		sta $06				sta 	TOS
.1e2a	a0 01		ldy #$01			ldy 	#1
.1e2c	b1 10		lda ($10),y			lda 	(temp1),y
.1e2e	85 07		sta $07				sta 	TOS+1
.1e30	4c 00 00	jmp $0000			jmp 	Next
.1e33					VarReadHandlerDecode:
.1e33	a9 40		lda #$40			lda 	#"@"
.1e35	4c 02 1f	jmp $1f02			jmp 	VarHandlerDecode
.1e38					VarWriteHandler:
.1e38	38		sec				sec 								; find variable, create it if it doesn't exist.
.1e39	20 54 1e	jsr $1e54			jsr 	VariableFind
.1e3c	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1e3e	92 10		sta ($10)			sta 	(temp1)
.1e40	a5 07		lda $07				lda 	TOS+1
.1e42	a0 01		ldy #$01			ldy 	#1
.1e44	91 10		sta ($10),y			sta 	(temp1),y
.1e46	68		pla				pla
.1e47	85 07		sta $07				sta 	TOS+1
.1e49	68		pla				pla
.1e4a	85 06		sta $06				sta 	TOS
.1e4c	4c 00 00	jmp $0000			jmp 	Next
.1e4f					VarWriteHandlerDecode:
.1e4f	a9 21		lda #$21			lda 	#"!"
.1e51	4c 02 1f	jmp $1f02			jmp 	VarHandlerDecode
.1e54					VariableFind:
.1e54	08		php				php 								; save autocreate flag.
.1e55	e8		inx				inx 								; advance to/over the variable name.
.1e56	e8		inx				inx
.1e57	8a		txa				txa 								; put in Y
.1e58	a8		tay				tay
.1e59	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1e5b	85 12		sta $12				sta 	temp2
.1e5d	c8		iny				iny
.1e5e	b1 03		lda ($03),y			lda 	(IP),y
.1e60	85 13		sta $13				sta 	temp2+1
.1e62	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1e64	b0 0f		bcs $1e75			bcs 	_VFLong
.1e66	a5 13		lda $13				lda 	temp2+1
.1e68	d0 0b		bne $1e75			bne 	_VFLong
.1e6a	a5 12		lda $12				lda 	temp2						; this is the index
.1e6c	0a		asl a				asl 	a 							; double it
.1e6d	85 10		sta $10				sta 	temp1
.1e6f	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1e71	85 11		sta $11				sta 	temp1+1
.1e73	28		plp				plp 								; throw creation flag, it always exists.
.1e74	60		rts				rts
.1e75					_VFLong:
.1e75	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1e77	6a		ror a				ror 	a
.1e78	6a		ror a				ror 	a
.1e79	6a		ror a				ror 	a
.1e7a	6a		ror a				ror 	a
.1e7b	45 12		eor $12				eor 	temp2
.1e7d	45 13		eor $13				eor 	temp2+1
.1e7f	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1e81	0a		asl a				asl 	a
.1e82	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1e84	85 10		sta $10				sta 	temp1
.1e86	85 14		sta $14				sta 	temp3
.1e88	a9 06		lda #$06			lda 	#hashTable >> 8
.1e8a	85 11		sta $11				sta 	temp1+1
.1e8c	85 15		sta $15				sta 	temp3+1
.1e8e					_VFSearch:
.1e8e	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1e90	b1 10		lda ($10),y			lda 	(temp1),y
.1e92	f0 23		beq $1eb7			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1e94	a8		tay				tay 								; follow the link through.
.1e95	b2 10		lda ($10)			lda 	(temp1)
.1e97	85 10		sta $10				sta 	temp1
.1e99	84 11		sty $11				sty 	temp1+1
.1e9b	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1e9d	b1 10		lda ($10),y			lda 	(temp1),y
.1e9f	c5 12		cmp $12				cmp 	temp2
.1ea1	d0 eb		bne $1e8e			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1ea3	c8		iny				iny 								; same for 2nd byte of name
.1ea4	b1 10		lda ($10),y			lda 	(temp1),y
.1ea6	c5 13		cmp $13				cmp 	temp2+1
.1ea8	d0 e4		bne $1e8e			bne 	_VFSearch
.1eaa	18		clc				clc
.1eab	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1ead	69 02		adc #$02			adc 	#2
.1eaf	85 10		sta $10				sta 	temp1
.1eb1	90 02		bcc $1eb5			bcc 	_VFNoPage1
.1eb3	e6 11		inc $11				inc 	temp1+1
.1eb5					_VFNoPage1:
.1eb5	28		plp				plp 								; don't need to worry about creation flag
.1eb6	60		rts				rts
.1eb7					_VFNotFound:
.1eb7	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1eb8	b0 0d		bcs $1ec7			bcs 	_VFCreate
.1eba	20 23 10	jsr $1023			jsr 	ErrorHandler
>1ebd	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1ec5	3f 00
.1ec7					_VFCreate:
.1ec7	a0 01		ldy #$01			ldy 	#1
.1ec9	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1ecb	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1ecd	b1 14		lda ($14),y			lda 	(temp3),y
.1ecf	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1ed1	c8		iny				iny
.1ed2	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1ed4	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1ed6	c8		iny				iny
.1ed7	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1ed9	c8		iny				iny
.1eda	a5 12		lda $12				lda 	temp2 						; copy the name out
.1edc	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1ede	c8		iny				iny
.1edf	a5 13		lda $13				lda 	temp2+1
.1ee1	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1ee3	a0 01		ldy #$01			ldy 	#1
.1ee5	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1ee7	92 14		sta ($14)			sta 	(temp3)
.1ee9	a5 0f		lda $0f				lda 	nextFreeMem+1
.1eeb	91 14		sta ($14),y			sta 	(temp3),y
.1eed	18		clc				clc
.1eee	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1ef0	69 02		adc #$02			adc 	#2
.1ef2	85 10		sta $10				sta 	temp1
.1ef4	a5 0f		lda $0f				lda 	nextFreeMem+1
.1ef6	69 00		adc #$00			adc 	#0
.1ef8	85 11		sta $11				sta 	temp1+1
.1efa	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1efc	a0 00		ldy #$00			ldy 	#0
.1efe	20 34 1a	jsr $1a34			jsr 	AdvanceFreeMem
.1f01	60		rts				rts
.1f02					VarHandlerDecode:
.1f02	48		pha				pha 								; save, leading space
.1f03	a9 20		lda #$20			lda 	#" "
.1f05	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1f08	68		pla				pla 								; restore and write type
.1f09	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1f0c	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1f0e	85 10		sta $10				sta 	temp1
.1f10	c8		iny				iny
.1f11	b1 08		lda ($08),y			lda 	(srcPtr),y
.1f13	85 11		sta $11				sta 	temp1+1
.1f15	a5 10		lda $10				lda 	temp1 						; output the first character
.1f17	29 1f		and #$1f			and 	#31
.1f19	20 44 1f	jsr $1f44			jsr 	VHOutVarChar
.1f1c	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1f1e					_VHDShift:
.1f1e	46 11		lsr $11				lsr 	temp1+1
.1f20	66 10		ror $10				ror 	temp1
.1f22	ca		dex				dex
.1f23	d0 f9		bne $1f1e			bne 	_VHDShift
.1f25	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1f27					_VHDDiv40:
.1f27	e8		inx				inx
.1f28	38		sec				sec
.1f29	a5 10		lda $10				lda 	temp1
.1f2b	e9 28		sbc #$28			sbc 	#40
.1f2d	a8		tay				tay
.1f2e	a5 11		lda $11				lda 	temp1+1
.1f30	e9 00		sbc #$00			sbc 	#0
.1f32	90 06		bcc $1f3a			bcc 	_VHDivDone
.1f34	85 11		sta $11				sta 	temp1+1
.1f36	84 10		sty $10				sty 	temp1
.1f38	80 ed		bra $1f27			bra 	_VHDDiv40
.1f3a					_VHDivDone:
.1f3a	a5 10		lda $10				lda 	temp1 						; remainder
.1f3c	20 44 1f	jsr $1f44			jsr 	VHOutVarChar
.1f3f	8a		txa				txa
.1f40	20 44 1f	jsr $1f44			jsr 	VHOutVarChar 				; and result.
.1f43	60		rts				rts
.1f44					VHOutVarChar:
.1f44	c9 00		cmp #$00			cmp 	#0
.1f46	f0 0c		beq $1f54			beq 	_VHOExit
.1f48	18		clc				clc
.1f49	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1f4b	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1f4d	90 02		bcc $1f51			bcc 	_VHOOut
.1f4f	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1f51					_VHOOut:
.1f51	20 37 1b	jsr $1b37			jsr 	DecodeWriteBuffer
.1f54					_VHOExit:
.1f54	60		rts				rts

;******  Return to file: kernel.asm

.1f55					Dictionary:

;******  Processing file: generated/dictionary.inc

>1f55	05					.byte	_end1-*
>1f56	00					.byte	$00
>1f57	fd 15					.word	WordWrite
>1f59	a1					.byte	$a1
.1f5a					_end1:
>1f5a	10					.byte	_end2-*
>1f5b	52					.byte	$52
>1f5c	38 1e					.word	VarWriteHandler
>1f5e	4f 1e					.word	VarWriteHandlerDecode
>1f60	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1f68	45 d2
.1f6a					_end2:
>1f6a	10					.byte	_end3-*
>1f6b	52					.byte	$52
>1f6c	02 1e					.word	VarAddressHandler
>1f6e	17 1e					.word	VarAddrHandlerDecode
>1f70	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1f78	45 d2
.1f7a					_end3:
>1f7a	10					.byte	_end4-*
>1f7b	52					.byte	$52
>1f7c	1c 1e					.word	VarReadHandler
>1f7e	33 1e					.word	VarReadHandlerDecode
>1f80	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>1f88	45 d2
.1f8a					_end4:
>1f8a	0c					.byte	_end5-*
>1f8b	52					.byte	$52
>1f8c	bb 18					.word	CallHandler
>1f8e	77 19					.word	CallHandlerDecode
>1f90	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1f96					_end5:
>1f96	0f					.byte	_end6-*
>1f97	53					.byte	$53
>1f98	34 1d					.word	SkipComment
>1f9a	3f 1d					.word	CommentDecoder
>1f9c	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1fa4	d4
.1fa5					_end6:
>1fa5	0e					.byte	_end7-*
>1fa6	53					.byte	$53
>1fa7	57 1d					.word	DefineCode
>1fa9	66 1d					.word	DefineDecoder
>1fab	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.1fb3					_end7:
>1fb3	0f					.byte	_end8-*
>1fb4	52					.byte	$52
>1fb5	89 10					.word	Literal2Byte
>1fb7	9f 10					.word	Literal2ByteDecode
>1fb9	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>1fc1	cc
.1fc2					_end8:
>1fc2	0e					.byte	_end9-*
>1fc3	80					.byte	$80
>1fc4	1d 1d					.word	NextLine
>1fc6	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>1fce	4e c5
.1fd0					_end9:
>1fd0	0e					.byte	_end10-*
>1fd1	53					.byte	$53
>1fd2	b1 10					.word	LiteralString
>1fd4	ce 10					.word	LiteralStringDecoder
>1fd6	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.1fde					_end10:
>1fde	05					.byte	_end11-*
>1fdf	00					.byte	$00
>1fe0	79 13					.word	Multiply16x16
>1fe2	aa					.byte	$aa
.1fe3					_end11:
>1fe3	05					.byte	_end12-*
>1fe4	00					.byte	$00
>1fe5	e6 11					.word	Add
>1fe7	ab					.byte	$ab
.1fe8					_end12:
>1fe8	06					.byte	_end13-*
>1fe9	00					.byte	$00
>1fea	0e 16					.word	WordAdd
>1fec	2b a1					.byte	$2b,$a1
.1fee					_end13:
>1fee	05					.byte	_end14-*
>1fef	00					.byte	$00
>1ff0	f5 11					.word	Subtract
>1ff2	ad					.byte	$ad
.1ff3					_end14:
>1ff3	06					.byte	_end15-*
>1ff4	00					.byte	$00
>1ff5	b5 14					.word	ConstantMinus1
>1ff7	2d b1					.byte	$2d,$b1
.1ff9					_end15:
>1ff9	05					.byte	_end16-*
>1ffa	00					.byte	$00
>1ffb	ca 12					.word	Divide16x16
>1ffd	af					.byte	$af
.1ffe					_end16:
>1ffe	05					.byte	_end17-*
>1fff	00					.byte	$00
>2000	a8 14					.word	Constant0
>2002	b0					.byte	$b0
.2003					_end17:
>2003	06					.byte	_end18-*
>2004	00					.byte	$00
>2005	0e 14					.word	CheckMinus
>2007	30 bc					.byte	$30,$bc
.2009					_end18:
>2009	06					.byte	_end19-*
>200a	00					.byte	$00
>200b	22 14					.word	CheckZero
>200d	30 bd					.byte	$30,$bd
.200f					_end19:
>200f	05					.byte	_end20-*
>2010	00					.byte	$00
>2011	c4 14					.word	C1
>2013	b1					.byte	$b1
.2014					_end20:
>2014	06					.byte	_end21-*
>2015	00					.byte	$00
>2016	b8 13					.word	Unary1Plus
>2018	31 ab					.byte	$31,$ab
.201a					_end21:
>201a	06					.byte	_end22-*
>201b	00					.byte	$00
>201c	cf 13					.word	Unary1Minus
>201e	31 ad					.byte	$31,$ad
.2020					_end22:
>2020	06					.byte	_end23-*
>2021	00					.byte	$00
>2022	dc 14					.word	C10
>2024	31 b0					.byte	$31,$b0
.2026					_end23:
>2026	07					.byte	_end24-*
>2027	00					.byte	$00
>2028	05 15					.word	C100
>202a	31 30 b0				.byte	$31,$30,$b0
.202d					_end24:
>202d	08					.byte	_end25-*
>202e	00					.byte	$00
>202f	34 15					.word	C1024
>2031	31 30 32 b4				.byte	$31,$30,$32,$b4
.2035					_end25:
>2035	07					.byte	_end26-*
>2036	00					.byte	$00
>2037	09 15					.word	C127
>2039	31 32 b7				.byte	$31,$32,$b7
.203c					_end26:
>203c	07					.byte	_end27-*
>203d	00					.byte	$00
>203e	0d 15					.word	C128
>2040	31 32 b8				.byte	$31,$32,$b8
.2043					_end27:
>2043	06					.byte	_end28-*
>2044	00					.byte	$00
>2045	e0 14					.word	C15
>2047	31 b5					.byte	$31,$b5
.2049					_end28:
>2049	06					.byte	_end29-*
>204a	00					.byte	$00
>204b	e4 14					.word	C16
>204d	31 b6					.byte	$31,$b6
.204f					_end29:
>204f	07					.byte	_end30-*
>2050	00					.byte	$00
>2051	46 14					.word	Times16
>2053	31 36 aa				.byte	$31,$36,$aa
.2056					_end30:
>2056	07					.byte	_end31-*
>2057	00					.byte	$00
>2058	59 14					.word	Divide16
>205a	31 36 af				.byte	$31,$36,$af
.205d					_end31:
>205d	05					.byte	_end32-*
>205e	00					.byte	$00
>205f	c8 14					.word	C2
>2061	b2					.byte	$b2
.2062					_end32:
>2062	06					.byte	_end33-*
>2063	00					.byte	$00
>2064	52 14					.word	Times2
>2066	32 aa					.byte	$32,$aa
.2068					_end33:
>2068	06					.byte	_end34-*
>2069	00					.byte	$00
>206a	c1 13					.word	Unary2Plus
>206c	32 ab					.byte	$32,$ab
.206e					_end34:
>206e	06					.byte	_end35-*
>206f	00					.byte	$00
>2070	da 13					.word	Unary2Minus
>2072	32 ad					.byte	$32,$ad
.2074					_end35:
>2074	06					.byte	_end36-*
>2075	00					.byte	$00
>2076	65 14					.word	Divide2
>2078	32 af					.byte	$32,$af
.207a					_end36:
>207a	06					.byte	_end37-*
>207b	00					.byte	$00
>207c	e8 14					.word	C24
>207e	32 b4					.byte	$32,$b4
.2080					_end37:
>2080	07					.byte	_end38-*
>2081	00					.byte	$00
>2082	11 15					.word	C255
>2084	32 35 b5				.byte	$32,$35,$b5
.2087					_end38:
>2087	07					.byte	_end39-*
>2088	00					.byte	$00
>2089	1c 15					.word	C256
>208b	32 35 b6				.byte	$32,$35,$b6
.208e					_end39:
>208e	08					.byte	_end40-*
>208f	00					.byte	$00
>2090	6c 14					.word	Times256
>2092	32 35 36 aa				.byte	$32,$35,$36,$aa
.2096					_end40:
>2096	08					.byte	_end41-*
>2097	00					.byte	$00
>2098	75 14					.word	Divide256
>209a	32 35 36 af				.byte	$32,$35,$36,$af
.209e					_end41:
>209e	05					.byte	_end42-*
>209f	00					.byte	$00
>20a0	cc 14					.word	C3
>20a2	b3					.byte	$b3
.20a3					_end42:
>20a3	06					.byte	_end43-*
>20a4	00					.byte	$00
>20a5	f9 14					.word	C32
>20a7	33 b2					.byte	$33,$b2
.20a9					_end43:
>20a9	09					.byte	_end44-*
>20aa	00					.byte	$00
>20ab	4c 15					.word	C32767
>20ad	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.20b2					_end44:
>20b2	09					.byte	_end45-*
>20b3	00					.byte	$00
>20b4	58 15					.word	C32768
>20b6	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.20bb					_end45:
>20bb	05					.byte	_end46-*
>20bc	00					.byte	$00
>20bd	d0 14					.word	C4
>20bf	b4					.byte	$b4
.20c0					_end46:
>20c0	06					.byte	_end47-*
>20c1	00					.byte	$00
>20c2	4e 14					.word	Times4
>20c4	34 aa					.byte	$34,$aa
.20c6					_end47:
>20c6	06					.byte	_end48-*
>20c7	00					.byte	$00
>20c8	61 14					.word	Divide4
>20ca	34 af					.byte	$34,$af
.20cc					_end48:
>20cc	08					.byte	_end49-*
>20cd	00					.byte	$00
>20ce	40 15					.word	C4096
>20d0	34 30 39 b6				.byte	$34,$30,$39,$b6
.20d4					_end49:
>20d4	05					.byte	_end50-*
>20d5	00					.byte	$00
>20d6	d4 14					.word	C5
>20d8	b5					.byte	$b5
.20d9					_end50:
>20d9	07					.byte	_end51-*
>20da	00					.byte	$00
>20db	28 15					.word	C512
>20dd	35 31 b2				.byte	$35,$31,$b2
.20e0					_end51:
>20e0	06					.byte	_end52-*
>20e1	00					.byte	$00
>20e2	fd 14					.word	C63
>20e4	36 b3					.byte	$36,$b3
.20e6					_end52:
>20e6	06					.byte	_end53-*
>20e7	00					.byte	$00
>20e8	01 15					.word	C64
>20ea	36 b4					.byte	$36,$b4
.20ec					_end53:
>20ec	05					.byte	_end54-*
>20ed	00					.byte	$00
>20ee	d8 14					.word	C8
>20f0	b8					.byte	$b8
.20f1					_end54:
>20f1	06					.byte	_end55-*
>20f2	00					.byte	$00
>20f3	4a 14					.word	Times8
>20f5	38 aa					.byte	$38,$aa
.20f7					_end55:
>20f7	06					.byte	_end56-*
>20f8	00					.byte	$00
>20f9	5d 14					.word	Divide8
>20fb	38 af					.byte	$38,$af
.20fd					_end56:
>20fd	05					.byte	_end57-*
>20fe	40					.byte	$40
>20ff	40 19					.word	ReturnHandler
>2101	bb					.byte	$bb
.2102					_end57:
>2102	05					.byte	_end58-*
>2103	00					.byte	$00
>2104	66 12					.word	CheckLess
>2106	bc					.byte	$bc
.2107					_end58:
>2107	06					.byte	_end59-*
>2108	00					.byte	$00
>2109	7f 12					.word	CheckLessEq
>210b	3c bd					.byte	$3c,$bd
.210d					_end59:
>210d	06					.byte	_end60-*
>210e	00					.byte	$00
>210f	2f 12					.word	CheckNotEqual
>2111	3c be					.byte	$3c,$be
.2113					_end60:
>2113	05					.byte	_end61-*
>2114	00					.byte	$00
>2115	32 12					.word	CheckEqual
>2117	bd					.byte	$bd
.2118					_end61:
>2118	05					.byte	_end62-*
>2119	00					.byte	$00
>211a	82 12					.word	CheckGreater
>211c	be					.byte	$be
.211d					_end62:
>211d	06					.byte	_end63-*
>211e	00					.byte	$00
>211f	63 12					.word	CheckGreaterEq
>2121	3e bd					.byte	$3e,$bd
.2123					_end63:
>2123	08					.byte	_end64-*
>2124	00					.byte	$00
>2125	6d 15					.word	TestDup
>2127	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.212b					_end64:
>212b	05					.byte	_end65-*
>212c	00					.byte	$00
>212d	e2 15					.word	WordRead
>212f	c0					.byte	$c0
.2130					_end65:
>2130	07					.byte	_end66-*
>2131	00					.byte	$00
>2132	e8 13					.word	Absolute
>2134	41 42 d3				.byte	$41,$42,$d3
.2137					_end66:
>2137	09					.byte	_end67-*
>2138	00					.byte	$00
>2139	25 16					.word	AllocateMemory
>213b	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.2140					_end67:
>2140	07					.byte	_end68-*
>2141	00					.byte	$00
>2142	08 12					.word	And
>2144	41 4e c4				.byte	$41,$4e,$c4
.2147					_end68:
>2147	0a					.byte	_end69-*
>2148	00					.byte	$00
>2149	1a 1c					.word	AssertCode
>214b	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.2151					_end69:
>2151	09					.byte	_end70-*
>2152	00					.byte	$00
>2153	3b 14					.word	ByteSwap
>2155	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.215a					_end70:
>215a	06					.byte	_end71-*
>215b	00					.byte	$00
>215c	f0 15					.word	ByteWrite
>215e	43 a1					.byte	$43,$a1
.2160					_end71:
>2160	06					.byte	_end72-*
>2161	00					.byte	$00
>2162	d9 15					.word	ByteRead
>2164	43 c0					.byte	$43,$c0
.2166					_end72:
>2166	07					.byte	_end73-*
>2167	00					.byte	$00
>2168	01 1a					.word	ClrHandler
>216a	43 4c d2				.byte	$43,$4c,$d2
.216d					_end73:
>216d	08					.byte	_end74-*
>216e	00					.byte	$00
>216f	64 15					.word	Drop
>2171	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2175					_end74:
>2175	07					.byte	_end75-*
>2176	00					.byte	$00
>2177	76 15					.word	Dup
>2179	44 55 d0				.byte	$44,$55,$d0
.217c					_end75:
>217c	08					.byte	_end76-*
>217d	01					.byte	$01
>217e	8f 18					.word	ElseHandler
>2180	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2184					_end76:
>2184	07					.byte	_end77-*
>2185	00					.byte	$00
>2186	3b 1c					.word	EndProgram
>2188	45 4e c4				.byte	$45,$4e,$c4
.218b					_end77:
>218b	09					.byte	_end78-*
>218c	00					.byte	$00
>218d	92 18					.word	EndIfHandler
>218f	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2194					_end78:
>2194	07					.byte	_end79-*
>2195	00					.byte	$00
>2196	01 18					.word	ForHandler
>2198	46 4f d2				.byte	$46,$4f,$d2
.219b					_end79:
>219b	08					.byte	_end80-*
>219c	21					.byte	$21
>219d	86 18					.word	IfHandler
>219f	89 18					.word	IfEncodeHandler
>21a1	49 c6					.byte	$49,$c6
.21a3					_end80:
>21a3	09					.byte	_end81-*
>21a4	00					.byte	$00
>21a5	65 18					.word	GetIndex
>21a7	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.21ac					_end81:
>21ac	08					.byte	_end82-*
>21ad	00					.byte	$00
>21ae	76 1b					.word	ListCode
>21b0	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.21b4					_end82:
>21b4	07					.byte	_end83-*
>21b5	00					.byte	$00
>21b6	9f 12					.word	Maximum
>21b8	4d 41 d8				.byte	$4d,$41,$d8
.21bb					_end83:
>21bb	07					.byte	_end84-*
>21bc	00					.byte	$00
>21bd	9b 12					.word	Minimum
>21bf	4d 49 ce				.byte	$4d,$49,$ce
.21c2					_end84:
>21c2	07					.byte	_end85-*
>21c3	00					.byte	$00
>21c4	db 12					.word	Modulus16x16
>21c6	4d 4f c4				.byte	$4d,$4f,$c4
.21c9					_end85:
>21c9	0a					.byte	_end86-*
>21ca	00					.byte	$00
>21cb	ef 13					.word	Negate
>21cd	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.21d3					_end86:
>21d3	07					.byte	_end87-*
>21d4	00					.byte	$00
>21d5	f8 19					.word	NewHandler
>21d7	4e 45 d7				.byte	$4e,$45,$d7
.21da					_end87:
>21da	08					.byte	_end88-*
>21db	01					.byte	$01
>21dc	2f 18					.word	NextHandler
>21de	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.21e2					_end88:
>21e2	07					.byte	_end89-*
>21e3	00					.byte	$00
>21e4	aa 15					.word	Nip
>21e6	4e 49 d0				.byte	$4e,$49,$d0
.21e9					_end89:
>21e9	07					.byte	_end90-*
>21ea	00					.byte	$00
>21eb	ff 13					.word	OneComplement
>21ed	4e 4f d4				.byte	$4e,$4f,$d4
.21f0					_end90:
>21f0	06					.byte	_end91-*
>21f1	00					.byte	$00
>21f2	22 12					.word	LogOr
>21f4	4f d2					.byte	$4f,$d2
.21f6					_end91:
>21f6	08					.byte	_end92-*
>21f7	00					.byte	$00
>21f8	92 15					.word	Over
>21fa	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.21fe					_end92:
>21fe	0a					.byte	_end93-*
>21ff	00					.byte	$00
>2200	95 18					.word	RepeatHandler
>2202	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.2208					_end93:
>2208	07					.byte	_end94-*
>2209	00					.byte	$00
>220a	7e 14					.word	RandomNumber
>220c	52 4e c4				.byte	$52,$4e,$c4
.220f					_end94:
>220f	07					.byte	_end95-*
>2210	00					.byte	$00
>2211	af 15					.word	Rot
>2213	52 4f d4				.byte	$52,$4f,$d4
.2216					_end95:
>2216	07					.byte	_end96-*
>2217	00					.byte	$00
>2218	f3 1b					.word	RunProgram
>221a	52 55 ce				.byte	$52,$55,$ce
.221d					_end96:
>221d	07					.byte	_end97-*
>221e	00					.byte	$00
>221f	2a 14					.word	SignTOS
>2221	53 47 ce				.byte	$53,$47,$ce
.2224					_end97:
>2224	08					.byte	_end98-*
>2225	00					.byte	$00
>2226	33 1c					.word	StopCode
>2228	53 54 4f d0				.byte	$53,$54,$4f,$d0
.222c					_end98:
>222c	08					.byte	_end99-*
>222d	00					.byte	$00
>222e	7f 15					.word	Swap
>2230	53 57 41 d0				.byte	$53,$57,$41,$d0
.2234					_end99:
>2234	07					.byte	_end100-*
>2235	00					.byte	$00
>2236	03 1c					.word	Call6502
>2238	53 59 d3				.byte	$53,$59,$d3
.223b					_end100:
>223b	0d					.byte	_end101-*
>223c	00					.byte	$00
>223d	79 1d					.word	IntToString
>223f	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2247	c7
.2248					_end101:
>2248	09					.byte	_end102-*
>2249	01					.byte	$01
>224a	98 18					.word	UntilHandler
>224c	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2251					_end102:
>2251	09					.byte	_end103-*
>2252	00					.byte	$00
>2253	3e 1c					.word	VlistCode
>2255	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.225a					_end103:
>225a	0a					.byte	_end104-*
>225b	40					.byte	$40
>225c	45 1a					.word	BreakCmd
>225e	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2264					_end104:
>2264	09					.byte	_end105-*
>2265	00					.byte	$00
>2266	3f 1a					.word	ExitDump
>2268	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.226d					_end105:
>226d	07					.byte	_end106-*
>226e	00					.byte	$00
>226f	15 12					.word	Xor
>2271	58 4f d2				.byte	$58,$4f,$d2
.2274					_end106:
>2274	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
