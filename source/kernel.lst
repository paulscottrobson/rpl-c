
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 11 14:57:38 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 df 10	jsr $10df			jsr 	ExternInitialise
.1006	a9 26		lda #$26			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 cf 11	jsr $11cf			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010	4c 3b 16	jmp $163b			jmp 	EncodeTest
.1013					WarmStart:
.1013	a9 03		lda #$03			lda 	#COL_Yellow
.1015	20 16 11	jsr $1116			jsr 	ExternColour
.1018	20 39 11	jsr $1139			jsr 	ExternInput
.101b	a9 06		lda #$06			lda 	#COL_Cyan
.101d	20 16 11	jsr $1116			jsr 	ExternColour
.1020	4c 79 1c	jmp $1c79			jmp 	RunProgram
.1023					ErrorHandler:
>1023	ff						.byte 	$FF
.1024	a2 5e		ldx #$5e			ldx 	#$5E
.1026					BootMsg:
>1026	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102e	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103e	2a 0d 0d
>1041	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1049	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1059	30 32 30 0d 0d
>105e	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1065	5b 32 30 2d 30 31 2d 31			.text	"[20-01-11 14:57]"
>106d	31 20 31 34 3a 35 37 5d

;******  Return to file: kernel.asm

>1075	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1078					InitialiseCoreCode:
.1078	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.107a	85 00		sta $00				sta 	Next
.107c	85 01		sta $01				sta 	Next+1
.107e	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1080	85 02		sta $02				sta 	Next+2
.1082	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.1084	84 04		sty $04				sty 	Next+4
.1086	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1088	60		rts				rts								; (2 INX skip offset and line#)
.1089					Literal2Byte:
.1089	a5 06		lda $06				lda 	TOS
.108b	48		pha				pha
.108c	a5 07		lda $07				lda 	TOS+1
.108e	48		pha				pha
.108f	e8		inx				inx  							; point X to the word
.1090	e8		inx				inx
.1091	8a		txa				txa 							; copy into Y
.1092	a8		tay				tay
.1093	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1095	85 06		sta $06				sta 	TOS
.1097	c8		iny				iny 							; read and push the MSB
.1098	b1 03		lda ($03),y			lda 	(IP),y
.109a	85 07		sta $07				sta 	TOS+1
.109c	4c 00 00	jmp $0000			jmp 	Next
.109f					Literal2ByteDecode:
.109f	a9 06		lda #$06			lda 	#CTH_Keyword
.10a1	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.10a4	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a6	aa		tax				tax
.10a7	c8		iny				iny
.10a8	b1 08		lda ($08),y			lda 	(srcPtr),y
.10aa	a8		tay				tay
.10ab	8a		txa				txa
.10ac	38		sec				sec 							; output signed
.10ad	20 df 1b	jsr $1bdf			jsr 	DecodeYAToBuffer
.10b0	60		rts				rts
.10b1					LiteralString:
.10b1	a5 06		lda $06				lda 	TOS
.10b3	48		pha				pha
.10b4	a5 07		lda $07				lda 	TOS+1
.10b6	48		pha				pha
.10b7	e8		inx				inx
.10b8	e8		inx				inx 							; skip over current word
.10b9	8a		txa				txa 							; add to IP + 1 to give string address
.10ba	a8		tay				tay 							; put in Y
.10bb	38		sec				sec 							; make that TOS
.10bc	65 03		adc $03				adc 	IP
.10be	85 06		sta $06				sta 	TOS
.10c0	a5 04		lda $04				lda 	IP+1
.10c2	69 00		adc #$00			adc 	#0
.10c4	85 07		sta $07				sta 	TOS+1
.10c6	8a		txa				txa 							; add data length to X
.10c7	18		clc				clc
.10c8	71 03		adc ($03),y			adc 	(IP),y
.10ca	aa		tax				tax
.10cb	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment
.10ce					LiteralStringDecoder:
.10ce	a9 05		lda #$05			lda 	#CTH_String
.10d0	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.10d3	a9 22		lda #$22			lda 	#'"'
.10d5	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.10d8	20 c6 1b	jsr $1bc6			jsr 	DecodeOutputData
.10db	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.10de	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10df					ExternInitialise:
.10df	a9 90		lda #$90			lda 	#144 						; set colour
.10e1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e4	a9 01		lda #$01			lda 	#$01
.10e6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e9	a9 0e		lda #$0e			lda 	#14							; lower case
.10eb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10ee	a9 93		lda #$93			lda 	#147 						; clear screen
.10f0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f3	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f5	4c 16 11	jmp $1116			jmp 	ExternColour
.10f8					ExternCheckBreak:
.10f8	da		phx				phx 								; make sure we keep XY
.10f9	5a		phy				phy
.10fa	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fd	f0 03		beq $1102			beq		_ECBExit 					; stopped
.10ff	7a		ply				ply 								; restore and exit.
.1100	fa		plx				plx
.1101	60		rts				rts
.1102					_ECBExit:
.1102	20 23 10	jsr $1023			jsr 	ErrorHandler
>1105	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.110c					ExternPrint:
.110c	48		pha				pha
.110d	da		phx				phx
.110e	5a		phy				phy
.110f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1112	7a		ply				ply
.1113	fa		plx				plx
.1114	68		pla				pla
.1115	60		rts				rts
.1116					ExternColour:
.1116	48		pha				pha
.1117	da		phx				phx
.1118	48		pha				pha
.1119	29 08		and #$08			and 	#8
.111b	0a		asl a				asl 	a
.111c	0a		asl a				asl 	a
.111d	0a		asl a				asl 	a
.111e	0a		asl a				asl 	a
.111f	49 92		eor #$92			eor 	#$92
.1121	20 0c 11	jsr $110c			jsr 	ExternPrint
.1124	68		pla				pla
.1125	29 07		and #$07			and 	#7
.1127	aa		tax				tax
.1128	bd 31 11	lda $1131,x			lda 	_ECTable,x
.112b	20 0c 11	jsr $110c			jsr 	ExternPrint
.112e	fa		plx				plx
.112f	68		pla				pla
.1130	60		rts				rts
.1131					_ECTable:
>1131	90						.byte 	144
>1132	1c						.byte 	28
>1133	1e						.byte 	30
>1134	9e						.byte 	158
>1135	1f						.byte 	31
>1136	9c						.byte 	156
>1137	9f						.byte 	159
>1138	05						.byte 	5
.1139					ExternInput:
.1139	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.113b	85 14		sta $14				sta 	temp3
.113d	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113f	85 15		sta $15				sta 	temp3+1
.1141	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1144	29 7f		and #$7f			and 	#$7F
.1146	c9 0d		cmp #$0d			cmp 	#13
.1148	f0 0a		beq $1154			beq 	_EIExit
.114a	92 14		sta ($14)			sta 	(temp3)
.114c	e6 14		inc $14				inc 	temp3
.114e	d0 f1		bne $1141			bne 	_EIRead
.1150	e6 15		inc $15				inc 	temp3+1
.1152	80 ed		bra $1141			bra 	_EIRead
.1154	a9 00		lda #$00	_EIExit:lda 	#0
.1156	92 14		sta ($14)			sta 	(temp3)
.1158	a9 0d		lda #$0d			lda 	#13
.115a	20 0c 11	jsr $110c			jsr 	ExternPrint
.115d	60		rts				rts
.115e					ExternSave:
.115e	da		phx				phx
.115f	5a		phy				phy
.1160	85 12		sta $12				sta 	temp2 						; save start
.1162	84 13		sty $13				sty 	temp2+1
.1164	20 c6 11	jsr $11c6			jsr 	EXGetLength 				; get length of file into A
.1167	a6 14		ldx $14				ldx 	temp3
.1169	a4 15		ldy $15				ldy 	temp3+1
.116b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116e	a9 01		lda #$01			lda 	#1
.1170	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1172	a0 00		ldy #$00			ldy 	#0
.1174	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1177	a6 10		ldx $10				ldx 	temp1 						; end address
.1179	a4 11		ldy $11				ldy 	temp1+1
.117b	a9 12		lda #$12			lda 	#temp2
.117d	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1180	b0 03		bcs $1185			bcs 	_ESSave
.1182	7a		ply				ply
.1183	fa		plx				plx
.1184	60		rts				rts
.1185					_ESSave:
.1185	20 23 10	jsr $1023			jsr 	ErrorHandler
>1188	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>1190	4c 45 44 00
.1194					ExternLoad:
.1194	da		phx				phx 								; save XY
.1195	5a		phy				phy
.1196	48		pha				pha 								; save target
.1197	5a		phy				phy
.1198	20 c6 11	jsr $11c6			jsr 	EXGetLength 				; get length of file into A
.119b	a6 14		ldx $14				ldx 	temp3
.119d	a4 15		ldy $15				ldy 	temp3+1
.119f	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11a2	a9 01		lda #$01			lda 	#1
.11a4	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a6	a0 00		ldy #$00			ldy 	#0
.11a8	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11ab	7a		ply				ply 								; restore target to YX and call load
.11ac	fa		plx				plx
.11ad	a9 00		lda #$00			lda 	#0 							; load command
.11af	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11b2	b0 03		bcs $11b7			bcs 	_ESLoad
.11b4	7a		ply				ply
.11b5	fa		plx				plx
.11b6	60		rts				rts
.11b7					_ESLoad:
.11b7	20 23 10	jsr $1023			jsr 	ErrorHandler
>11ba	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11c2	4c 45 44 00
.11c6					EXGetLength:
.11c6	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c8	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11ca	d0 02		bne $11ce			bne 	_EXGLExit
.11cc	e6 15		inc $15				inc 	temp3+1
.11ce					_EXGLExit:
.11ce	60		rts				rts
.11cf					EXPrintString:
.11cf	48		pha				pha
.11d0	5a		phy				phy
.11d1	84 11		sty $11				sty 	temp1+1
.11d3	85 10		sta $10				sta 	temp1
.11d5	a0 00		ldy #$00			ldy 	#0
.11d7					_EXPSLoop:
.11d7	b1 10		lda ($10),y			lda 	(temp1),y
.11d9	f0 08		beq $11e3			beq 	_EXPSExit
.11db	29 7f		and #$7f			and 	#$7F
.11dd	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11e0	c8		iny				iny
.11e1	80 f4		bra $11d7			bra 	_EXPSLoop
.11e3					_EXPSExit:
.11e3	7a		ply				ply
.11e4	68		pla				pla
.11e5	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e6					Add:
.11e6	7a		ply				ply
.11e7	68		pla				pla
.11e8	18		clc				clc
.11e9	65 06		adc $06				adc 	TOS
.11eb	85 06		sta $06				sta 	TOS
.11ed	98		tya				tya
.11ee	65 07		adc $07				adc 	TOS+1
.11f0	85 07		sta $07				sta 	TOS+1
.11f2	4c 00 00	jmp $0000			jmp 	Next
.11f5					Subtract:
.11f5	7a		ply				ply
.11f6	68		pla				pla
.11f7	38		sec				sec
.11f8	49 ff		eor #$ff			eor 	#$FF
.11fa	65 06		adc $06				adc 	TOS
.11fc	85 06		sta $06				sta 	TOS
.11fe	98		tya				tya
.11ff	49 ff		eor #$ff			eor 	#$FF
.1201	65 07		adc $07				adc 	TOS+1
.1203	85 07		sta $07				sta 	TOS+1
.1205	4c 00 00	jmp $0000			jmp 	Next
.1208					And:
.1208	68		pla				pla
.1209	25 07		and $07				and 	TOS+1
.120b	85 07		sta $07				sta 	TOS+1
.120d	68		pla				pla
.120e	25 06		and $06				and 	TOS
.1210	85 06		sta $06				sta 	TOS
.1212	4c 00 00	jmp $0000			jmp 	Next
.1215					Xor:
.1215	68		pla				pla
.1216	45 07		eor $07				eor 	TOS+1
.1218	85 07		sta $07				sta 	TOS+1
.121a	68		pla				pla
.121b	45 06		eor $06				eor 	TOS
.121d	85 06		sta $06				sta 	TOS
.121f	4c 00 00	jmp $0000			jmp 	Next
.1222					LogOr:
.1222	68		pla				pla
.1223	05 07		ora $07				ora 	TOS+1
.1225	85 07		sta $07				sta 	TOS+1
.1227	68		pla				pla
.1228	05 06		ora $06				ora 	TOS
.122a	85 06		sta $06				sta 	TOS
.122c	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122f					CheckNotEqual:
.122f	38		sec				sec
.1230	80 01		bra $1233			bra 	CECode
.1232					CheckEqual:
.1232	18		clc				clc
.1233					CECode:
.1233	86 10		stx $10				stx 	temp1
.1235	ba		tsx				tsx
.1236	08		php				php
.1237	a5 06		lda $06				lda 	TOS
.1239	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.123c	d0 17		bne $1255			bne	 	CompareFalse
.123e	a5 07		lda $07				lda 	TOS+1
.1240	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1243	d0 10		bne $1255			bne 	CompareFalse
.1245					CompareTrue:
.1245	a6 10		ldx $10				ldx 	temp1
.1247	28		plp				plp
.1248	b0 10		bcs $125a			bcs		CompareFalse2
.124a					CompareTrue2:
.124a	68		pla				pla
.124b	68		pla				pla
.124c	a9 ff		lda #$ff			lda 	#$FF
.124e	85 06		sta $06				sta 	TOS
.1250	85 07		sta $07				sta 	TOS+1
.1252	4c 00 00	jmp $0000			jmp 	Next
.1255					CompareFalse:
.1255	a6 10		ldx $10				ldx 	temp1
.1257	28		plp				plp
.1258	b0 f0		bcs $124a			bcs		CompareTrue2
.125a					CompareFalse2:
.125a	68		pla				pla
.125b	68		pla				pla
.125c	64 06		stz $06				stz 	TOS
.125e	64 07		stz $07				stz 	TOS+1
.1260	4c 00 00	jmp $0000			jmp 	Next
.1263					CheckGreaterEq:
.1263	38		sec				sec
.1264	80 01		bra $1267			bra		CLCode
.1266					CheckLess:
.1266	18		clc				clc
.1267	86 10		stx $10		CLCode:	stx 	temp1
.1269	ba		tsx				tsx
.126a	08		php				php
.126b	18		clc				clc
.126c	a5 06		lda $06				lda 	TOS
.126e	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1271	a5 07		lda $07				lda 	TOS+1
.1273	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1276	50 02		bvc $127a			bvc 	_CLNoFlip
.1278	49 80		eor #$80			eor 	#$80
.127a					_CLNoFlip:
.127a	0a		asl a				asl 	a
.127b	b0 d8		bcs $1255			bcs 	CompareFalse
.127d	80 c6		bra $1245			bra 	CompareTrue
.127f					CheckLessEq:
.127f	38		sec				sec
.1280	80 01		bra $1283			bra		CGCode
.1282					CheckGreater:
.1282	18		clc				clc
.1283					CGCode:
.1283	86 10		stx $10				stx 	temp1
.1285	ba		tsx				tsx
.1286	08		php				php
.1287	18		clc				clc
.1288	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.128b	e5 06		sbc $06				sbc 	TOS
.128d	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1290	e5 07		sbc $07				sbc 	TOS+1
.1292	50 02		bvc $1296			bvc 	_CGNoFlip
.1294	49 80		eor #$80			eor 	#$80
.1296					_CGNoFlip:
.1296	0a		asl a				asl 	a
.1297	b0 bc		bcs $1255			bcs 	CompareFalse
.1299	80 aa		bra $1245			bra 	CompareTrue
.129b					Minimum:
.129b	a9 00		lda #$00			lda 	#0
.129d	80 02		bra $12a1			bra 	MinMaxCode
.129f					Maximum:
.129f	a9 80		lda #$80			lda 	#$80
.12a1					MinMaxCode:
.12a1	85 11		sta $11				sta 	temp1+1
.12a3	86 10		stx $10				stx 	temp1
.12a5	ba		tsx				tsx
.12a6	38		sec				sec
.12a7	a5 06		lda $06				lda 	TOS
.12a9	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12ac	a5 07		lda $07				lda 	TOS+1
.12ae	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12b1	50 02		bvc $12b5			bvc 	_MMNoFlip
.12b3	49 80		eor #$80			eor 	#$80
.12b5					_MMNoFlip:
.12b5	45 11		eor $11				eor 	temp1+1
.12b7	30 0a		bmi $12c3			bmi 	_MMNoCopy
.12b9	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12bc	85 06		sta $06				sta 	TOS
.12be	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12c1	85 07		sta $07				sta 	TOS+1
.12c3					_MMNoCopy:
.12c3	a6 10		ldx $10				ldx 	temp1
.12c5	68		pla				pla
.12c6	68		pla				pla
.12c7	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12ca					Divide16x16:
.12ca	86 12		stx $12				stx 	temp2
.12cc	ba		tsx				tsx
.12cd	20 f0 12	jsr $12f0			jsr 	IntegerDivide
.12d0	68		pla				pla
.12d1	85 07		sta $07				sta 	TOS+1
.12d3	68		pla				pla
.12d4	85 06		sta $06				sta 	TOS
.12d6	a6 12		ldx $12				ldx 	temp2
.12d8	4c 00 00	jmp $0000			jmp 	Next
.12db					Modulus16x16:
.12db	86 12		stx $12				stx 	temp2
.12dd	ba		tsx				tsx
.12de	20 f0 12	jsr $12f0			jsr 	IntegerDivide
.12e1	a6 12		ldx $12				ldx 	temp2
.12e3	68		pla				pla
.12e4	68		pla				pla
.12e5	a5 10		lda $10				lda 	temp1
.12e7	85 06		sta $06				sta 	TOS
.12e9	a5 11		lda $11				lda 	temp1+1
.12eb	85 07		sta $07				sta 	TOS+1
.12ed	4c 00 00	jmp $0000			jmp 	Next
.12f0					IntegerDivide:
.12f0	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12f2	05 07		ora $07				ora 	TOS+1
.12f4	d0 14		bne $130a			bne 	_BFDOkay
.12f6	20 23 10	jsr $1023			jsr 	ErrorHandler
>12f9	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1301	20 42 59 20 5a 45 52 4f 00
.130a					_BFDOkay:
.130a	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.130c	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130e	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.1310	20 4b 13	jsr $134b			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1313	20 65 13	jsr $1365			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1316	5a		phy				phy 								; Y is the counter
.1317	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1319					_BFDLoop:
.1319	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.131c	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131f	26 10		rol $10				rol 	temp1
.1321	26 11		rol $11				rol 	temp1+1
.1323	38		sec				sec
.1324	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1326	e5 06		sbc $06				sbc 	TOS
.1328	48		pha				pha
.1329	a5 11		lda $11				lda 	temp1+1
.132b	e5 07		sbc $07				sbc 	TOS+1
.132d	90 0f		bcc $133e			bcc 	_BFDNoAdd
.132f	85 11		sta $11				sta 	temp1+1
.1331	68		pla				pla
.1332	85 10		sta $10				sta 	temp1+0
.1334	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1337	09 01		ora #$01			ora 	#1
.1339	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.133c	80 01		bra $133f			bra 	_BFDNext
.133e					_BFDNoAdd:
.133e	68		pla				pla 								; Throw away the intermediate calculations
.133f					_BFDNext:
.133f	88		dey				dey
.1340	d0 d7		bne $1319			bne 	_BFDLoop
.1342	7a		ply				ply 								; restore Y
.1343	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1345	90 03		bcc $134a			bcc 	_BFDUnsigned 				; then the result is signed
.1347	20 51 13	jsr $1351			jsr		IntegerNegateAlways 		; negate the result
.134a					_BFDUnsigned:
.134a	60		rts				rts
.134b					CheckIntegerNegate:
.134b	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134e	30 01		bmi $1351			bmi 	IntegerNegateAlways 		; if so negate it
.1350	60		rts				rts
.1351					IntegerNegateAlways:
.1351	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1353	38		sec				sec 								; negate
.1354	a9 00		lda #$00			lda 	#0
.1356	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1359	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.135c	a9 00		lda #$00			lda 	#0
.135e	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1361	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1364	60		rts				rts
.1365					CheckTOSNegate:
.1365	a5 07		lda $07				lda 	TOS+1
.1367	10 0f		bpl $1378			bpl		CTNNoChange
.1369	e6 1a		inc $1a				inc 	SignCount
.136b					TOSNegateAlways:
.136b	38		sec				sec
.136c	a9 00		lda #$00			lda 	#0
.136e	e5 06		sbc $06				sbc 	TOS
.1370	85 06		sta $06				sta 	TOS
.1372	a9 00		lda #$00			lda 	#0
.1374	e5 07		sbc $07				sbc 	TOS+1
.1376	85 07		sta $07				sta 	TOS+1
.1378					CTNNoChange:
.1378	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1379					Multiply16x16:
.1379	86 10		stx $10				stx 	temp1
.137b	ba		tsx				tsx
.137c	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137f	85 12		sta $12				sta 	temp2
.1381	bd 01 01	lda $0101,x			lda		Stack2High,x
.1384	85 13		sta $13				sta 	temp2+1
.1386	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1389	9e 01 01	stz $0101,x			stz 	Stack2High,x
.138c					_MultLoop:
.138c	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138e	66 12		ror $12				ror 	temp2
.1390	90 11		bcc $13a3			bcc 	_MultNoAdd
.1392	18		clc				clc 								; add 1st to 2nd
.1393	a5 06		lda $06				lda 	TOS
.1395	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1398	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.139b	a5 07		lda $07				lda 	TOS+1
.139d	7d 01 01	adc $0101,x			adc 	Stack2High,x
.13a0	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a3					_MultNoAdd:
.13a3	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a5	26 07		rol $07				rol 	TOS+1
.13a7	a5 12		lda $12				lda 	temp2	 					; until zero
.13a9	05 13		ora $13				ora 	temp2+1
.13ab	d0 df		bne $138c			bne 	_MultLoop
.13ad	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13af	68		pla				pla
.13b0	85 07		sta $07				sta 	TOS+1
.13b2	68		pla				pla
.13b3	85 06		sta $06				sta 	TOS
.13b5	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b8					Unary1Plus:
.13b8	e6 06		inc $06				inc 	TOS
.13ba	d0 02		bne $13be			bne 	_U1PSkip
.13bc	e6 07		inc $07				inc 	TOS+1
.13be					_U1PSkip:
.13be	4c 00 00	jmp $0000			jmp 	Next
.13c1					Unary2Plus:
.13c1	18		clc				clc
.13c2	a5 06		lda $06				lda 	TOS
.13c4	69 02		adc #$02			adc 	#2
.13c6	85 06		sta $06				sta 	TOS
.13c8	90 02		bcc $13cc			bcc 	_U1PSkip
.13ca	e6 07		inc $07				inc 	TOS+1
.13cc					_U1PSkip:
.13cc	4c 00 00	jmp $0000			jmp 	Next
.13cf					Unary1Minus:
.13cf	a5 06		lda $06				lda 	TOS
.13d1	d0 02		bne $13d5			bne 	_U1MSkip
.13d3	c6 07		dec $07				dec 	TOS+1
.13d5					_U1MSkip:
.13d5	c6 06		dec $06				dec 	TOS
.13d7	4c 00 00	jmp $0000			jmp 	Next
.13da					Unary2Minus:
.13da	38		sec				sec
.13db	a5 06		lda $06				lda 	TOS
.13dd	e9 02		sbc #$02			sbc 	#2
.13df	85 06		sta $06				sta 	TOS
.13e1	b0 02		bcs $13e5			bcs 	_U1PSkip
.13e3	c6 07		dec $07				dec 	TOS+1
.13e5					_U1PSkip:
.13e5	4c 00 00	jmp $0000			jmp 	Next
.13e8					Absolute:
.13e8	a5 07		lda $07				lda 	TOS+1
.13ea	30 03		bmi $13ef			bmi 	Negate
.13ec	4c 00 00	jmp $0000			jmp 	Next
.13ef					Negate:
.13ef	38		sec				sec
.13f0	a9 00		lda #$00			lda 	#0
.13f2	e5 06		sbc $06				sbc 	TOS
.13f4	85 06		sta $06				sta 	TOS
.13f6	a9 00		lda #$00			lda 	#0
.13f8	e5 07		sbc $07				sbc 	TOS+1
.13fa	85 07		sta $07				sta 	TOS+1
.13fc	4c 00 00	jmp $0000			jmp 	Next
.13ff					OneComplement:
.13ff	a5 06		lda $06				lda 	TOS
.1401	49 ff		eor #$ff			eor 	#$FF
.1403	85 06		sta $06				sta 	TOS
.1405	a5 07		lda $07				lda 	TOS+1
.1407	49 ff		eor #$ff			eor 	#$FF
.1409	85 07		sta $07				sta 	TOS+1
.140b	4c 00 00	jmp $0000			jmp 	Next
.140e					CheckMinus:
.140e	a5 07		lda $07				lda 	TOS+1
.1410	30 07		bmi $1419			bmi 	UnaryTrue
.1412					UnaryFalse:
.1412	64 06		stz $06				stz 	TOS
.1414	64 07		stz $07				stz 	TOS+1
.1416	4c 00 00	jmp $0000			jmp 	Next
.1419					UnaryTrue:
.1419	a9 ff		lda #$ff			lda 	#$FF
.141b	85 06		sta $06				sta 	TOS
.141d	85 07		sta $07				sta 	TOS+1
.141f	4c 00 00	jmp $0000			jmp 	Next
.1422					CheckZero:
.1422	a5 06		lda $06				lda 	TOS
.1424	05 07		ora $07				ora 	TOS+1
.1426	d0 ea		bne $1412			bne 	UnaryFalse
.1428	80 ef		bra $1419			bra 	UnaryTrue
.142a					SignTOS:
.142a	a5 07		lda $07				lda 	TOS+1
.142c	30 eb		bmi $1419			bmi		UnaryTrue
.142e	05 06		ora $06				ora 	TOS
.1430	f0 e0		beq $1412			beq 	UnaryFalse
.1432	a9 01		lda #$01			lda 	#1
.1434	85 06		sta $06				sta 	TOS
.1436	64 07		stz $07				stz		TOS+1
.1438	4c 00 00	jmp $0000			jmp 	Next
.143b					ByteSwap:
.143b	a5 06		lda $06				lda 	TOS
.143d	a4 07		ldy $07				ldy 	TOS+1
.143f	85 07		sta $07				sta 	TOS+1
.1441	84 06		sty $06				sty 	TOS
.1443	4c 00 00	jmp $0000			jmp 	Next
.1446					Times16:
.1446	06 06		asl $06				asl 	TOS
.1448	26 07		rol $07				rol 	TOS+1
.144a					Times8:
.144a	06 06		asl $06				asl 	TOS
.144c	26 07		rol $07				rol 	TOS+1
.144e					Times4:
.144e	06 06		asl $06				asl 	TOS
.1450	26 07		rol $07				rol 	TOS+1
.1452					Times2:
.1452	06 06		asl $06				asl 	TOS
.1454	26 07		rol $07				rol 	TOS+1
.1456	4c 00 00	jmp $0000			jmp 	Next
.1459					Divide16:
.1459	46 07		lsr $07				lsr 	TOS+1
.145b	66 06		ror $06				ror 	TOS
.145d					Divide8:
.145d	46 07		lsr $07				lsr 	TOS+1
.145f	66 06		ror $06				ror 	TOS
.1461					Divide4:
.1461	46 07		lsr $07				lsr 	TOS+1
.1463	66 06		ror $06				ror 	TOS
.1465					Divide2:
.1465	46 07		lsr $07				lsr 	TOS+1
.1467	66 06		ror $06				ror 	TOS
.1469	4c 00 00	jmp $0000			jmp 	Next
.146c					Times256:
.146c	a5 06		lda $06				lda 	TOS
.146e	85 07		sta $07				sta 	TOS+1
.1470	64 06		stz $06				stz 	TOS
.1472	4c 00 00	jmp $0000			jmp 	Next
.1475					Divide256:
.1475	a5 07		lda $07				lda 	TOS+1
.1477	85 06		sta $06				sta 	TOS
.1479	64 07		stz $07				stz 	TOS+1
.147b	4c 00 00	jmp $0000			jmp 	Next
.147e					RandomNumber:
.147e	a5 06		lda $06				lda 	TOS
.1480	48		pha				pha
.1481	a5 07		lda $07				lda 	TOS+1
.1483	48		pha				pha
.1484	a5 1b		lda $1b				lda 	randomSeed
.1486	05 1c		ora $1c				ora 	randomSeed+1
.1488	d0 08		bne $1492			bne 	_RH_NoInit
.148a	a9 7c		lda #$7c			lda 	#$7C
.148c	85 1b		sta $1b				sta 	randomSeed
.148e	a9 a1		lda #$a1			lda 	#$A1
.1490	85 1c		sta $1c				sta 	randomSeed+1
.1492					_RH_NoInit:
.1492	a5 1b		lda $1b				lda 	randomSeed
.1494	4a		lsr a		        lsr		a
.1495	26 1c		rol $1c		        rol 	randomSeed+1
.1497	90 02		bcc $149b	        bcc 	_RH_NoEor
.1499	49 b4		eor #$b4	        eor 	#$B4
.149b					_RH_NoEor:
.149b	85 1b		sta $1b		        sta 	randomSeed
.149d	45 1c		eor $1c		        eor 	randomSeed+1
.149f	85 07		sta $07		        sta 	TOS+1
.14a1	a5 1b		lda $1b		        lda 	randomSeed
.14a3	85 06		sta $06		        sta 	TOS
.14a5	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a8					Constant0:
.14a8	a5 06		lda $06				lda 	TOS
.14aa	48		pha				pha
.14ab	a5 07		lda $07				lda 	TOS+1
.14ad	48		pha				pha
.14ae	64 06		stz $06				stz 	TOS
.14b0	64 07		stz $07				stz 	TOS+1
.14b2	4c 00 00	jmp $0000			jmp 	Next
.14b5					ConstantMinus1:
.14b5	a5 06		lda $06				lda 	TOS
.14b7	48		pha				pha
.14b8	a5 07		lda $07				lda 	TOS+1
.14ba	48		pha				pha
.14bb	a9 ff		lda #$ff			lda 	#$FF
.14bd	85 06		sta $06				sta 	TOS
.14bf	85 07		sta $07				sta 	TOS+1
.14c1	4c 00 00	jmp $0000			jmp 	Next
.14c4					C1:
.14c4	a0 01		ldy #$01			ldy 	#1
.14c6	80 24		bra $14ec			bra 	Const1Byte
.14c8					C2:
.14c8	a0 02		ldy #$02			ldy 	#2
.14ca	80 20		bra $14ec			bra 	Const1Byte
.14cc					C3:
.14cc	a0 03		ldy #$03			ldy 	#3
.14ce	80 1c		bra $14ec			bra 	Const1Byte
.14d0					C4:
.14d0	a0 04		ldy #$04			ldy 	#4
.14d2	80 18		bra $14ec			bra 	Const1Byte
.14d4					C5:
.14d4	a0 05		ldy #$05			ldy 	#5
.14d6	80 14		bra $14ec			bra 	Const1Byte
.14d8					C8:
.14d8	a0 08		ldy #$08			ldy 	#8
.14da	80 10		bra $14ec			bra 	Const1Byte
.14dc					C10:
.14dc	a0 0a		ldy #$0a			ldy 	#10
.14de	80 0c		bra $14ec			bra 	Const1Byte
.14e0					C15:
.14e0	a0 0f		ldy #$0f			ldy 	#15
.14e2	80 08		bra $14ec			bra 	Const1Byte
.14e4					C16:
.14e4	a0 10		ldy #$10			ldy 	#16
.14e6	80 04		bra $14ec			bra 	Const1Byte
.14e8					C24:
.14e8	a0 18		ldy #$18			ldy 	#24
.14ea	80 00		bra $14ec			bra 	Const1Byte
.14ec					Const1Byte:
.14ec	a5 06		lda $06				lda 	TOS
.14ee	48		pha				pha
.14ef	a5 07		lda $07				lda 	TOS+1
.14f1	48		pha				pha
.14f2	84 06		sty $06				sty 	TOS
.14f4	64 07		stz $07				stz 	TOS+1
.14f6	4c 00 00	jmp $0000			jmp 	Next
.14f9					C32:
.14f9	a0 20		ldy #$20			ldy 	#32
.14fb	80 ef		bra $14ec			bra 	Const1Byte
.14fd					C63:
.14fd	a0 3f		ldy #$3f			ldy 	#63
.14ff	80 eb		bra $14ec			bra 	Const1Byte
.1501					C64:
.1501	a0 40		ldy #$40			ldy 	#64
.1503	80 e7		bra $14ec			bra 	Const1Byte
.1505					C100:
.1505	a0 64		ldy #$64			ldy 	#100
.1507	80 e3		bra $14ec			bra 	Const1Byte
.1509					C127:
.1509	a0 7f		ldy #$7f			ldy 	#127
.150b	80 df		bra $14ec			bra 	Const1Byte
.150d					C128:
.150d	a0 80		ldy #$80			ldy 	#128
.150f	80 db		bra $14ec			bra 	Const1Byte
.1511					C255:
.1511	a0 ff		ldy #$ff			ldy 	#255
.1513	80 d7		bra $14ec			bra 	Const1Byte
.1515					Const2Byte:
.1515	85 06		sta $06				sta 	TOS
.1517	84 07		sty $07				sty 	TOS+1
.1519	4c 00 00	jmp $0000			jmp 	Next
.151c					C256:
.151c	a5 06		lda $06				lda 	TOS
.151e	48		pha				pha
.151f	a5 07		lda $07				lda 	TOS+1
.1521	48		pha				pha
.1522	a9 00		lda #$00			lda 	#(256) & $FF
.1524	a0 01		ldy #$01			ldy 	#(256) >> 8
.1526	80 ed		bra $1515			bra 	Const2Byte
.1528					C512:
.1528	a5 06		lda $06				lda 	TOS
.152a	48		pha				pha
.152b	a5 07		lda $07				lda 	TOS+1
.152d	48		pha				pha
.152e	a9 00		lda #$00			lda 	#(512) & $FF
.1530	a0 02		ldy #$02			ldy 	#(512) >> 8
.1532	80 e1		bra $1515			bra 	Const2Byte
.1534					C1024:
.1534	a5 06		lda $06				lda 	TOS
.1536	48		pha				pha
.1537	a5 07		lda $07				lda 	TOS+1
.1539	48		pha				pha
.153a	a9 00		lda #$00			lda 	#(1024) & $FF
.153c	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153e	80 d5		bra $1515			bra 	Const2Byte
.1540					C4096:
.1540	a5 06		lda $06				lda 	TOS
.1542	48		pha				pha
.1543	a5 07		lda $07				lda 	TOS+1
.1545	48		pha				pha
.1546	a9 00		lda #$00			lda 	#(4096) & $FF
.1548	a0 10		ldy #$10			ldy 	#(4096) >> 8
.154a	80 c9		bra $1515			bra 	Const2Byte
.154c					C32767:
.154c	a5 06		lda $06				lda 	TOS
.154e	48		pha				pha
.154f	a5 07		lda $07				lda 	TOS+1
.1551	48		pha				pha
.1552	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1554	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1556	80 bd		bra $1515			bra 	Const2Byte
.1558					C32768:
.1558	a5 06		lda $06				lda 	TOS
.155a	48		pha				pha
.155b	a5 07		lda $07				lda 	TOS+1
.155d	48		pha				pha
.155e	a9 00		lda #$00			lda 	#(32768) & $FF
.1560	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1562	80 b1		bra $1515			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1564					Drop:
.1564	68		pla				pla
.1565	85 07		sta $07				sta 	TOS+1
.1567	68		pla				pla
.1568	85 06		sta $06				sta 	TOS
.156a	4c 00 00	jmp $0000			jmp 	Next
.156d					TestDup:
.156d	a5 06		lda $06				lda 	TOS
.156f	05 07		ora $07				ora 	TOS+1
.1571	d0 03		bne $1576			bne 	Dup
.1573	4c 00 00	jmp $0000			jmp 	Next
.1576					Dup:
.1576	a5 06		lda $06				lda 	TOS
.1578	48		pha				pha
.1579	a5 07		lda $07				lda 	TOS+1
.157b	48		pha				pha
.157c	4c 00 00	jmp $0000			jmp 	Next
.157f					Swap:
.157f	86 10		stx $10				stx 	temp1
.1581	7a		ply				ply
.1582	fa		plx				plx
.1583	a5 06		lda $06				lda 	TOS
.1585	48		pha				pha
.1586	a5 07		lda $07				lda 	TOS+1
.1588	48		pha				pha
.1589	86 06		stx $06				stx 	TOS
.158b	84 07		sty $07				sty 	TOS+1
.158d	a6 10		ldx $10				ldx 	temp1
.158f	4c 00 00	jmp $0000			jmp 	Next
.1592					Over:
.1592	a5 06		lda $06				lda 	TOS
.1594	48		pha				pha
.1595	a5 07		lda $07				lda 	TOS+1
.1597	48		pha				pha
.1598	86 10		stx $10				stx 	temp1
.159a	ba		tsx				tsx
.159b	bd 04 01	lda $0104,x			lda 	stack3low,x
.159e	85 06		sta $06				sta 	TOS
.15a0	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a3	85 07		sta $07				sta 	TOS+1
.15a5	a6 10		ldx $10				ldx 	temp1
.15a7	4c 00 00	jmp $0000			jmp 	Next
.15aa					Nip:
.15aa	68		pla				pla
.15ab	68		pla				pla
.15ac	4c 00 00	jmp $0000			jmp 	Next
.15af					Rot:
.15af	86 10		stx $10				stx 	temp1
.15b1	ba		tsx				tsx
.15b2	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b5	a8		tay				tay
.15b6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b9	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15bc	a5 06		lda $06				lda 	TOS
.15be	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15c1	84 06		sty $06				sty 	TOS
.15c3	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c6	a8		tay				tay
.15c7	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15ca	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15cd	a5 07		lda $07				lda 	TOS+1
.15cf	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15d2	84 07		sty $07				sty 	TOS+1
.15d4	a6 10		ldx $10				ldx 	temp1
.15d6	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d9					ByteRead:
.15d9	b2 06		lda ($06)			lda 	(TOS)
.15db	85 06		sta $06				sta 	TOS
.15dd	64 07		stz $07				stz 	TOS+1
.15df	4c 00 00	jmp $0000			jmp 	Next
.15e2					WordRead:
.15e2	a0 01		ldy #$01			ldy 	#1
.15e4	b1 06		lda ($06),y			lda 	(TOS),y
.15e6	a8		tay				tay
.15e7	b2 06		lda ($06)			lda 	(TOS)
.15e9	85 06		sta $06				sta 	TOS
.15eb	84 07		sty $07				sty 	TOS+1
.15ed	4c 00 00	jmp $0000			jmp 	Next
.15f0					ByteWrite:
.15f0	68		pla				pla
.15f1	68		pla				pla
.15f2	92 06		sta ($06)			sta 	(TOS)
.15f4	68		pla				pla
.15f5	85 07		sta $07				sta 	TOS+1
.15f7	68		pla				pla
.15f8	85 06		sta $06				sta 	TOS
.15fa	4c 00 00	jmp $0000			jmp 	Next
.15fd					WordWrite:
.15fd	68		pla				pla
.15fe	a0 01		ldy #$01			ldy 	#1
.1600	91 06		sta ($06),y			sta 	(TOS),y
.1602	68		pla				pla
.1603	92 06		sta ($06)			sta 	(TOS)
.1605	68		pla				pla
.1606	85 07		sta $07				sta 	TOS+1
.1608	68		pla				pla
.1609	85 06		sta $06				sta 	TOS
.160b	4c 00 00	jmp $0000			jmp 	Next
.160e					WordAdd:
.160e	7a		ply				ply
.160f	68		pla				pla
.1610	18		clc				clc
.1611	72 06		adc ($06)			adc 	(TOS)
.1613	92 06		sta ($06)			sta 	(TOS)
.1615	98		tya				tya
.1616	a0 01		ldy #$01			ldy 	#1
.1618	71 06		adc ($06),y			adc 	(TOS),y
.161a	91 06		sta ($06),y			sta 	(TOS),y
.161c	68		pla				pla
.161d	85 07		sta $07				sta 	TOS+1
.161f	68		pla				pla
.1620	85 06		sta $06				sta 	TOS
.1622	4c 00 00	jmp $0000			jmp 	Next
.1625					AllocateMemory:
.1625	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1627	48		pha				pha
.1628	a5 07		lda $07				lda 	TOS+1
.162a	48		pha				pha
.162b	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162d	85 06		sta $06				sta 	TOS
.162f	a5 0f		lda $0f				lda 	nextFreeMem+1
.1631	85 07		sta $07				sta 	TOS+1
.1633	7a		ply				ply 								; advance the free ram pointer
.1634	68		pla				pla
.1635	20 ba 1a	jsr $1aba			jsr 	AdvanceFreeMem
.1638	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.163b					EncodeTest:
.163b	a9 53		lda #$53			lda 	#(_EncTest & $FF)
.163d	a0 16		ldy #$16			ldy 	#(_EncTest >> 8)
.163f	20 7b 16	jsr $167b			jsr 	EncodeProgram
.1642	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1644	85 0a		sta $0a				sta 	0+(bufPtr)
.1646	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1648	85 0b		sta $0b				sta 	1+(bufPtr)
.164a	a0 09		ldy #$09			ldy 	#encodeBuffer>>8
.164c	a9 10		lda #$10			lda 	#encodeBuffer & $FF
.164e	38		sec				sec
.164f	20 cf 1a	jsr $1acf			jsr 	DecodeLineIntoBufPtr
>1652	ff						.byte 	$FF
.1653					_EncTest:
>1653	31 30 32 35 20					.text	"1025 "
>1658	22 53 54 52 22 20 44 55				.text 	'"STR" DUP BM6 BM2 SUB700'
>1660	50 20 42 4d 36 20 42 4d 32 20 53 55 42 37 30 30
>1670	20 27 48 45 4c 4c 4f 20				.text	" 'HELLO   ",0
>1678	20 20 00
.167b					EncodeProgram:
.167b	48		pha				pha 								; save registers.
.167c	da		phx				phx
.167d	5a		phy				phy
.167e	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1680	85 08		sta $08				sta		srcPtr
.1682	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1684	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1687	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.168a	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.168d	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.168f	20 ed 17	jsr $17ed			jsr 	CheckIsDigit
.1692	90 09		bcc $169d			bcc 	_EPNoLineNumber 			; if so there is a line number
.1694	20 0f 18	jsr $180f			jsr 	EncodeGetConstant 			; extract that constant from the source
.1697	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.169a	8c 12 09	sty $0912			sty 	encodeBuffer+2
.169d					_EPNoLineNumber:
.169d					EncodeLoop:
.169d	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.169f	f0 0b		beq $16ac			beq 	_EPEndEncode
.16a1	c9 20		cmp #$20			cmp 	#32
.16a3	d0 12		bne $16b7			bne 	_EPNotSpace
.16a5	a9 01		lda #$01			lda 	#1
.16a7	20 05 18	jsr $1805			jsr 	EncodeAddSrcPtr
.16aa	80 f1		bra $169d			bra	 	EncodeLoop
.16ac					_EPEndEncode:
.16ac	a9 a3		lda #$a3			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.16ae	a0 1d		ldy #$1d			ldy 	#NextLine >> 8
.16b0	20 d4 17	jsr $17d4			jsr 	EncodeWriteWord
.16b3	7a		ply				ply									; restore and exit.
.16b4	fa		plx				plx
.16b5	68		pla				pla
.16b6	60		rts				rts
.16b7					_EPNotSpace:
.16b7	b2 08		lda ($08)			lda 	(srcPtr)
.16b9	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.16bb	f0 04		beq $16c1			beq 	_EPIsComStr
.16bd	c9 27		cmp #$27			cmp 	#"'"
.16bf	d0 05		bne $16c6			bne 	_EPNotComStr
.16c1					_EPIsComStr:
.16c1	20 31 17	jsr $1731			jsr 	EncodeCommentString
.16c4	80 d7		bra $169d			bra 	EncodeLoop
.16c6					_EPNotComStr:
.16c6	38		sec				sec
.16c7	20 20 18	jsr $1820			jsr 	EncSetBit7Word
.16ca	20 33 18	jsr $1833			jsr 	EncodeSearchDictionary		; look it up
.16cd	90 44		bcc $1713			bcc 	_EPNotInDictionary
.16cf	85 10		sta $10				sta 	temp1 						; save dictionary record address
.16d1	84 11		sty $11				sty 	temp1+1
.16d3	a0 01		ldy #$01			ldy 	#1
.16d5	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.16d7	29 20		and #$20			and 	#$20
.16d9	d0 12		bne $16ed			bne 	_EPEncodeRoutine 			; if so, do special routine.
.16db	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.16dd	b1 10		lda ($10),y			lda 	(temp1),y
.16df	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.16e2	c8		iny				iny
.16e3	b1 10		lda ($10),y			lda 	(temp1),y
.16e5	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.16e8	20 f9 17	jsr $17f9			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16eb	80 b0		bra $169d			bra 	EncodeLoop
.16ed					_EPEncodeRoutine:
.16ed	a0 01		ldy #$01			ldy 	#1							; get type bit
.16ef	b1 10		lda ($10),y			lda 	(temp1),y
.16f1	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.16f3	29 10		and #$10			and 	#$10 						; but decoder comes first
.16f5	f0 02		beq $16f9			beq 	_EPENoDecoder
.16f7	c8		iny				iny 								; so if it exists, adjust for it.
.16f8	c8		iny				iny
.16f9					_EPENoDecoder:
.16f9	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.16fb	85 12		sta $12				sta 	temp2
.16fd	c8		iny				iny
.16fe	b1 10		lda ($10),y			lda 	(temp1),y
.1700	85 13		sta $13				sta 	temp2+1
.1702	48		pha				pha 								; call routine preserving state
.1703	da		phx				phx
.1704	5a		phy				phy
.1705	20 10 17	jsr $1710			jsr 	_EPECallTemp2
.1708	7a		ply				ply
.1709	fa		plx				plx
.170a	68		pla				pla
.170b	20 f9 17	jsr $17f9			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.170e	80 8d		bra $169d			bra 	EncodeLoop
.1710					_EPECallTemp2:
.1710	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1713					_EPNotInDictionary:
.1713	20 86 17	jsr $1786			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.1716	90 19		bcc $1731			bcc 	_EPNotDefined
.1718	48		pha				pha
.1719	a9 41		lda #$41			lda	 	#CallHandler & $FF 			; write code call handler
.171b	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.171e	a9 19		lda #$19			lda	 	#CallHandler >> 8
.1720	20 de 17	jsr $17de			jsr 	EncodeWriteByte 			; write line number
.1723	68		pla				pla
.1724	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.1727	98		tya				tya
.1728	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.172b	20 f9 17	jsr $17f9			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.172e	4c 9d 16	jmp $169d			jmp 	EncodeLoop
.1731					_EPNotDefined:

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.1731					EncodeCommentString:
.1731	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.1733	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.1735	aa		tax				tax 								; save in X
.1736	a9 ba		lda #$ba			lda 	#(SkipComment & $FF)		; get the routine to use
.1738	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.173a	e0 27		cpx #$27			cpx 	#"'"
.173c	f0 06		beq $1744			beq 	_ECSGotCmd
.173e	86 10		stx $10				stx		temp1 						; other terminator = "
.1740	a9 b1		lda #$b1			lda 	#(LiteralString & $FF)
.1742	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.1744					_ECSGotCmd:
.1744	20 d4 17	jsr $17d4			jsr 	EncodeWriteWord 			; write word out.
.1747	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.174a	a9 01		lda #$01			lda 	#1
.174c	20 de 17	jsr $17de			jsr 	EncodeWriteByte 			; write total length, so far 1.
.174f	a0 01		ldy #$01			ldy 	#1 							; for reading the actual text
.1751					_ECSCopyText:
.1751	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.1753	f0 18		beq $176d			beq 	_ECSEndOfLine 				; end of line ?
.1755	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.1757	f0 09		beq $1762			beq 	_ECSEndOfString 			; if so must be closing quote.
.1759	20 de 17	jsr $17de			jsr 	EncodeWriteByte 			; write the byte out
.175c	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.175f	c8		iny				iny 								; next character
.1760	80 ef		bra $1751			bra 	_ECSCopyText
.1762					_ECSEndOfString:
.1762	c8		iny				iny 								; skip closing quote.
.1763	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.1765	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.1768	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.176b	80 0e		bra $177b			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.176d					_ECSEndOfLine:
.176d	a5 10		lda $10				lda 	temp1 						; missing closing quote
.176f	f0 0a		beq $177b			beq 	_ECSComplete 				; if we were doing a string.
.1771	20 23 10	jsr $1023			jsr 	ErrorHandler
>1774	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.177b					_ECSComplete:
.177b	98		tya				tya
.177c	18		clc				clc
.177d	65 08		adc $08				adc 	srcPtr
.177f	85 08		sta $08				sta 	srcPtr
.1781	90 02		bcc $1785			bcc 	_ECSExit
.1783	e6 09		inc $09				inc 	srcPtr+1
.1785					_ECSExit:
.1785	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1786					EncodeSearchUserDefined:
.1786	38		sec				sec 								; temp1 = srcPtr-6 because the
.1787	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1789	e9 06		sbc #$06			sbc		#6
.178b	85 10		sta $10				sta 	temp1
.178d	a5 09		lda $09				lda 	srcPtr+1
.178f	e9 00		sbc #$00			sbc 	#0
.1791	85 11		sta $11				sta 	temp1+1
.1793	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1795	85 12		sta $12				sta 	0+(temp2)
.1797	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1799	85 13		sta $13				sta 	1+(temp2)
.179b					_ESULoop:
.179b	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.179d	f0 33		beq $17d2			beq 	_ESUFail
.179f	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.17a1	b1 12		lda ($12),y			lda 	(temp2),y
.17a3	c9 dd		cmp #$dd			cmp 	#DefineCode & $FF
.17a5	d0 1e		bne $17c5			bne 	_ESUNext
.17a7	c8		iny				iny
.17a8	b1 12		lda ($12),y			lda 	(temp2),y
.17aa	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.17ac	d0 17		bne $17c5			bne 	_ESUNext
.17ae	c8		iny				iny 								; skip length byte.
.17af					_ESUCompare:
.17af	c8		iny				iny
.17b0	b1 12		lda ($12),y			lda 	(temp2),y
.17b2	d1 10		cmp ($10),y			cmp 	(temp1),y
.17b4	d0 0f		bne $17c5			bne 	_ESUNext
.17b6	0a		asl a				asl 	a 							; bit 7 set => found it.
.17b7	90 f6		bcc $17af			bcc 	_ESUCompare
.17b9	a0 01		ldy #$01			ldy 	#1
.17bb	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.17bd	aa		tax				tax
.17be	c8		iny				iny
.17bf	b1 12		lda ($12),y			lda 	(temp2),y
.17c1	a8		tay				tay
.17c2	8a		txa				txa
.17c3	38		sec				sec 								; return with carry set as found
.17c4	60		rts				rts
.17c5					_ESUNext:
.17c5	18		clc				clc
.17c6	a5 12		lda $12				lda 	temp2
.17c8	72 12		adc ($12)			adc 	(temp2)
.17ca	85 12		sta $12				sta 	temp2
.17cc	90 02		bcc $17d0			bcc 	_NoCarryAdv
.17ce	e6 13		inc $13				inc 	temp2+1
.17d0					_NoCarryAdv:
.17d0	80 c9		bra $179b			bra 	_ESULoop 					; and loop round
.17d2					_ESUFail:
.17d2	18		clc				clc
.17d3	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.17d4					EncodeWriteWord:
.17d4	48		pha				pha
.17d5	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.17d8	98		tya				tya
.17d9	20 de 17	jsr $17de			jsr 	EncodeWriteByte
.17dc	68		pla				pla
.17dd	60		rts				rts
.17de					EncodeWriteByte:
.17de	da		phx				phx
.17df	ae 10 09	ldx $0910			ldx 	encodeBuffer
.17e2	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.17e5	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.17e8	ee 10 09	inc $0910			inc 	encodeBuffer
.17eb	fa		plx				plx
.17ec	60		rts				rts
.17ed					CheckIsDigit:
.17ed	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.17ef	90 06		bcc $17f7			bcc 	_CIDFail
.17f1	c9 3a		cmp #$3a			cmp 	#"9"+1
.17f3	b0 02		bcs $17f7			bcs 	_CIDFail
.17f5	38		sec				sec
.17f6	60		rts				rts
.17f7					_CIDFail:
.17f7	18		clc				clc
.17f8	60		rts				rts
.17f9					EncodeMoveNextWord:
.17f9	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.17fb					_EPNWLoop:
.17fb	c8		iny				iny
.17fc	b1 08		lda ($08),y			lda 	(srcPtr),y
.17fe	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.1800	b0 f9		bcs $17fb			bcs 	_EPNWLoop
.1802	98		tya				tya
.1803	80 00		bra $1805			bra 	EncodeAddSrcPtr
.1805					EncodeAddSrcPtr:
.1805	18		clc				clc 								; add offset
.1806	65 08		adc $08				adc 	srcPtr
.1808	85 08		sta $08				sta 	srcPtr
.180a	90 02		bcc $180e			bcc 	_EASPNoCarry
.180c	e6 09		inc $09				inc 	srcPtr+1					; carry through
.180e					_EASPNoCarry:
.180e	60		rts				rts
.180f					EncodeGetConstant:
.180f	a5 08		lda $08				lda 	srcPtr 						; get source
.1811	a4 09		ldy $09				ldy 	srcPtr+1
.1813	20 15 1d	jsr $1d15			jsr 	ConvertToInteger 			; call converter
.1816	90 07		bcc $181f			bcc 	_EGCExit
.1818	20 05 18	jsr $1805			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.181b	a5 14		lda $14				lda 	temp3 						; get result into YA
.181d	a4 15		ldy $15				ldy 	temp3+1
.181f					_EGCExit:
.181f	60		rts				rts
.1820					EncSetBit7Word:
.1820	08		php				php 								; save carry
.1821	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.1823					_ESB7Loop:
.1823	c8		iny				iny
.1824	b1 08		lda ($08),y			lda 	(srcPtr),y
.1826	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.1828	b0 f9		bcs $1823			bcs 	_ESB7Loop
.182a	88		dey				dey									; previous character
.182b	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.182d	0a		asl a				asl 	a 							; shift bit 7 out
.182e	28		plp				plp 								; restore carry
.182f	6a		ror a				ror 	a 							; shift it in
.1830	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.1832	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.1833					EncodeSearchDictionary:
.1833	a9 db		lda #$db			lda 	#(Dictionary) & $FF
.1835	85 10		sta $10				sta 	0+(temp1)
.1837	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1839	85 11		sta $11				sta 	1+(temp1)
.183b					_ESDLoop:
.183b	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.183d	18		clc				clc
.183e	f0 46		beq $1886			beq 	_ESDExit
.1840	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1842	b1 10		lda ($10),y			lda 	(temp1),y
.1844	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.1845	4a		lsr a				lsr 	a
.1846	4a		lsr a				lsr 	a
.1847	4a		lsr a				lsr 	a
.1848	c8		iny				iny 								; Y = 2
.1849	4a		lsr a				lsr 	a
.184a	90 01		bcc $184d			bcc 	_ESDNotDec
.184c	c8		iny				iny
.184d					_ESDNotDec:
.184d	4a		lsr a				lsr 	a
.184e	90 01		bcc $1851			bcc 	_ESDNotInc
.1850	c8		iny				iny
.1851					_ESDNotInc:
.1851	98		tya				tya
.1852	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1853	a8		tay				tay
.1854	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.1856	d2 08		cmp ($08)			cmp 	(srcPtr)
.1858	d0 1f		bne $1879			bne 	_ESDNext 					; do not match, go to next
.185a	98		tya				tya 								; make temp2 point to the name in
.185b	18		clc				clc 								; the dictionary.
.185c	65 10		adc $10				adc 	temp1
.185e	85 12		sta $12				sta 	temp2
.1860	a5 11		lda $11				lda 	temp1+1
.1862	69 00		adc #$00			adc 	#0
.1864	85 13		sta $13				sta 	temp2+1
.1866	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.1868					_ESDCompare:
.1868	c8		iny				iny
.1869	b1 08		lda ($08),y			lda 	(srcPtr),y
.186b	d1 12		cmp ($12),y			cmp 	(temp2),y
.186d	d0 0a		bne $1879			bne 	_ESDNext
.186f	0a		asl a				asl 	a
.1870	90 f6		bcc $1868			bcc 	_ESDCompare
.1872	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.1874	a4 11		ldy $11				ldy 	temp1+1
.1876	38		sec				sec
.1877	80 0d		bra $1886			bra 	_ESDExit
.1879					_ESDNext:
.1879	18		clc				clc
.187a	a5 10		lda $10				lda 	temp1
.187c	72 10		adc ($10)			adc 	(temp1)
.187e	85 10		sta $10				sta 	temp1
.1880	90 b9		bcc $183b			bcc 	_ESDLoop
.1882	e6 11		inc $11				inc 	temp1+1
.1884	80 b5		bra $183b			bra 	_ESDLoop
.1886					_ESDExit:
.1886	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1887					ForHandler:
.1887	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1889	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.188b	c0 40		cpy #$40			cpy 	#$40 						; overflow
.188d	f0 18		beq $18a7			beq 	_FHOverflow
.188f	a5 07		lda $07				lda 	TOS+1
.1891	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1894	a5 06		lda $06				lda 	TOS
.1896	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1899	a9 ff		lda #$ff			lda 	#$FF
.189b	99 80 07	sta $0780,y			sta 	returnStackX,y
.189e	68		pla				pla
.189f	85 07		sta $07				sta 	TOS+1
.18a1	68		pla				pla
.18a2	85 06		sta $06				sta 	TOS
.18a4	4c 00 00	jmp $0000			jmp 	Next
.18a7					_FHOverflow:
.18a7	20 23 10	jsr $1023			jsr 	ErrorHandler
>18aa	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>18b2	4b 3f 00
.18b5					NextHandler:
.18b5	da		phx				phx
.18b6	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.18b8	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.18bb	c9 ff		cmp #$ff			cmp 	#$FF
.18bd	d0 21		bne $18e0			bne 	NHNoFor
.18bf	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.18c2	d0 03		bne $18c7			bne 	_NHNoBorrow
.18c4	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.18c7					_NHNoBorrow:
.18c7	de 00 07	dec $0700,x			dec 	returnStackLow,x
.18ca	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.18cd	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.18d0	fa		plx				plx 								; restore X and re-test
.18d1	09 00		ora #$00			ora 	#0
.18d3	f0 05		beq $18da			beq 	_NHComplete 				; if so then complete, else loop.
.18d5	e8		inx				inx 								; advance to branch
.18d6	e8		inx				inx
.18d7	4c 39 19	jmp $1939			jmp 	BranchAlways
.18da					_NHComplete:
.18da	e8		inx				inx 								; skip over the branch quantity
.18db	c6 05		dec $05				dec 	rsp 						; drop the indx
.18dd	4c 00 00	jmp $0000			jmp 	Next
.18e0					NHNoFor:
.18e0	20 23 10	jsr $1023			jsr 	ErrorHandler
>18e3	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.18eb					GetIndex:
.18eb	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.18ed	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.18f0	c9 ff		cmp #$ff			cmp 	#$FF
.18f2	d0 ec		bne $18e0			bne 	NHNoFor
.18f4	a5 06		lda $06				lda 	TOS
.18f6	48		pha				pha
.18f7	a5 07		lda $07				lda 	TOS+1
.18f9	48		pha				pha
.18fa	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.18fd	38		sec				sec
.18fe	e9 01		sbc #$01			sbc 	#1
.1900	85 06		sta $06				sta 	TOS
.1902	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1905	e9 00		sbc #$00			sbc 	#0
.1907	85 07		sta $07				sta 	TOS+1
.1909	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.190c					IfHandler:
.190c	4c 21 19	jmp $1921			jmp 	BranchIfZero
.190f					IfEncodeHandler:
.190f	a9 ff		lda #$ff			lda 	#$FF
.1911	20 de 17	jsr $17de			jsr	 	EncodeWriteByte
.1914	60		rts				rts
.1915					ElseHandler:
.1915	4c 37 19	jmp $1937			jmp 	BranchTestSucceedsNoPop
.1918					EndIfHandler:
.1918	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.191b					RepeatHandler:
.191b	4c 00 00	jmp $0000			jmp 	Next
.191e					UntilHandler:
.191e	4c 21 19	jmp $1921			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.1921					BranchIfZero:
.1921	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1923	05 07		ora $07				ora 	TOS+1
.1925	f0 0a		beq $1931			beq 	BranchTestSucceeds
.1927					BranchTestFails:
.1927	68		pla				pla
.1928	85 07		sta $07				sta 	TOS+1
.192a	68		pla				pla
.192b	85 06		sta $06				sta 	TOS
.192d	e8		inx				inx 								; skip over the relative branch.
.192e	4c 00 00	jmp $0000			jmp 	Next
.1931					BranchTestSucceeds:
.1931	68		pla				pla
.1932	85 07		sta $07				sta 	TOS+1
.1934	68		pla				pla
.1935	85 06		sta $06				sta 	TOS
.1937					BranchTestSucceedsNoPop:
.1937	e8		inx				inx 								; advance by two, to the offset
.1938	e8		inx				inx
.1939					BranchAlways:
.1939	8a		txa				txa 								; A = Y = position
.193a	a8		tay				tay 								; (IP),Y now points to the branch target
.193b	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.193d	aa		tax				tax 								; position back in this line.
.193e	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.1941					CallHandler:
.1941	e8		inx				inx									; bump X to the call address.
.1942	e8		inx				inx
.1943	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1945	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1947	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1949	f0 4b		beq $1996			beq 	_CHOverflow
.194b	a5 04		lda $04				lda 	IP+1
.194d	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1950	a5 03		lda $03				lda 	IP
.1952	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1955	8a		txa				txa
.1956	99 80 07	sta $0780,y			sta 	returnStackX,y
.1959	8a		txa				txa 								; get the line number into temp1.
.195a	a8		tay				tay
.195b	b1 03		lda ($03),y			lda 	(IP),y
.195d	85 10		sta $10				sta 	temp1
.195f	c8		iny				iny
.1960	b1 03		lda ($03),y			lda 	(IP),y
.1962	85 11		sta $11				sta 	temp1+1
.1964	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1966	85 03		sta $03				sta 	0+(IP)
.1968	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.196a	85 04		sta $04				sta 	1+(IP)
.196c	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.196e	f0 17		beq $1987			beq 	_CHFail
.1970	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1972					_CHSearch:
.1972	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.1974	c5 10		cmp $10				cmp 	temp1
.1976	f0 2d		beq $19a5			beq 	_CHFoundLSB
.1978					_CHSearchNext:
.1978	18		clc				clc
.1979	a5 03		lda $03				lda 	IP
.197b	72 03		adc ($03)			adc 	(IP)
.197d	85 03		sta $03				sta 	IP
.197f	90 02		bcc $1983			bcc 	_NoCarryAdv
.1981	e6 04		inc $04				inc 	IP+1
.1983					_NoCarryAdv:
.1983	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1985	d0 eb		bne $1972			bne 	_CHSearch
.1987					_CHFail:
.1987	20 23 10	jsr $1023			jsr 	ErrorHandler
>198a	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1992	4f 4e 3f 00
.1996					_CHOverflow:
.1996	20 23 10	jsr $1023			jsr 	ErrorHandler
>1999	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>19a1	54 48 3f 00
.19a5					_CHFoundLSB:
.19a5	c8		iny				iny 								; get MSB
.19a6	b1 03		lda ($03),y			lda 	(IP),y
.19a8	88		dey				dey
.19a9	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.19ab	d0 cb		bne $1978			bne 	_CHSearchNext
.19ad	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.19af	b1 03		lda ($03),y			lda 	(IP),y
.19b1	c9 dd		cmp #$dd			cmp 	#DefineCode & $FF
.19b3	d0 d2		bne $1987			bne 	_CHFail
.19b5	c8		iny				iny
.19b6	b1 03		lda ($03),y			lda 	(IP),y
.19b8	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.19ba	d0 cb		bne $1987			bne 	_CHFail
.19bc	c8		iny				iny
.19bd	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.19bf	18		clc				clc
.19c0	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.19c2	aa		tax				tax
.19c3	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.19c6					ReturnHandler:
.19c6	a4 05		ldy $05				ldy 	rsp 						; get rsp
.19c8	30 15		bmi $19df			bmi 	_RHUnderflow 				; if -ve underflowed
.19ca	c6 05		dec $05				dec 	rsp 						; decrement rsp
.19cc	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.19cf	85 04		sta $04				sta 	IP+1
.19d1	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.19d4	85 03		sta $03				sta 	IP
.19d6	b9 80 07	lda $0780,y			lda 	returnStackX,y
.19d9	aa		tax				tax
.19da	f0 0e		beq $19ea			beq 	_RHInLoop 					; this means you have done :something for ; next
.19dc	4c 00 00	jmp $0000			jmp 	Next
.19df					_RHUnderflow:
.19df	20 23 10	jsr $1023			jsr 	ErrorHandler
>19e2	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.19ea					_RHInLoop:
.19ea	20 23 10	jsr $1023			jsr 	ErrorHandler
>19ed	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>19f5	4e 20 4c 4f 4f 50 3f 00
.19fd					CallHandlerDecode:
.19fd	a9 03		lda #$03			lda 	#CTH_Call					; space
.19ff	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1a02	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1a04	aa		tax				tax
.1a05	c8		iny				iny
.1a06	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a08	a8		tay				tay
.1a09	8a		txa				txa
.1a0a	20 47 1a	jsr $1a47			jsr 	FindLine 					; try to locate that line.
.1a0d	b0 11		bcs $1a20			bcs 	_CHDFound 					; if found .....
.1a0f					_CHDLineOnly:
.1a0f	48		pha				pha
.1a10	a9 3c		lda #$3c			lda 	#"<"
.1a12	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1a15	68		pla				pla
.1a16	18		clc				clc 								; output unsigned
.1a17	20 df 1b	jsr $1bdf			jsr 	DecodeYAToBuffer
.1a1a	a9 3e		lda #$3e			lda 	#">"
.1a1c	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1a1f	60		rts				rts
.1a20					_CHDFound:
.1a20	48		pha				pha 								; save YA
.1a21	5a		phy				phy
.1a22	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1a24	b1 10		lda ($10),y			lda 	(temp1),y
.1a26	c9 dd		cmp #$dd			cmp 	#DefineCode & 255
.1a28	d0 07		bne $1a31			bne 	_CHDNoDefine
.1a2a	c8		iny				iny
.1a2b	b1 10		lda ($10),y			lda 	(temp1),y
.1a2d	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1a2f	f0 04		beq $1a35			beq 	_CHDFoundDefine
.1a31					_CHDNoDefine:
.1a31	7a		ply				ply									; restore the line number and print it in <>
.1a32	68		pla				pla
.1a33	80 da		bra $1a0f			bra 	_CHDLineOnly
.1a35					_CHDFoundDefine:
.1a35	68		pla				pla 								; throw saved line number.
.1a36	68		pla				pla
.1a37	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1a39					_CHDOutName:
.1a39	c8		iny				iny 								; next
.1a3a	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1a3c	48		pha				pha
.1a3d	29 7f		and #$7f			and 	#$7F
.1a3f	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1a42	68		pla				pla
.1a43	0a		asl a				asl 	a 							; bit 7 to carry
.1a44	90 f3		bcc $1a39			bcc 	_CHDOutName
.1a46	60		rts				rts
.1a47					FindLine:
.1a47	48		pha				pha 								; save registers
.1a48	da		phx				phx
.1a49	5a		phy				phy
.1a4a	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1a4c	84 13		sty $13				sty 	temp2+1
.1a4e	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a50	85 10		sta $10				sta 	0+(temp1)
.1a52	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a54	85 11		sta $11				sta 	1+(temp1)
.1a56					_FLLoop:
.1a56	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1a58	18		clc				clc									; if so exit with CC.
.1a59	f0 1d		beq $1a78			beq 	_FLExit
.1a5b	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1a5d	b1 10		lda ($10),y			lda 	(temp1),y
.1a5f	c5 12		cmp $12				cmp 	temp2
.1a61	d0 08		bne $1a6b			bne 	_FLNext
.1a63	c8		iny				iny
.1a64	b1 10		lda ($10),y			lda 	(temp1),y
.1a66	c5 13		cmp $13				cmp 	temp2+1
.1a68	38		sec				sec 								; if so exit with CS
.1a69	f0 0d		beq $1a78			beq 	_FLExit
.1a6b					_FLNext:
.1a6b	18		clc				clc
.1a6c	a5 10		lda $10				lda 	temp1
.1a6e	72 10		adc ($10)			adc 	(temp1)
.1a70	85 10		sta $10				sta 	temp1
.1a72	90 02		bcc $1a76			bcc 	_NoCarryAdv
.1a74	e6 11		inc $11				inc 	temp1+1
.1a76					_NoCarryAdv:
.1a76	80 de		bra $1a56			bra 	_FLLoop 					; keep looking.
.1a78					_FLExit:
.1a78	7a		ply				ply
.1a79	fa		plx				plx
.1a7a	68		pla				pla
.1a7b	60		rts				rts
.1a7c	18		clc				clc
.1a7d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1a7e					NewHandler:
.1a7e	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1a81	20 8d 1a	jsr $1a8d			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1a84	4c 00 00	jmp $0000			jmp 	Next
.1a87					ClrHandler:
.1a87	20 8d 1a	jsr $1a8d			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1a8a	4c 00 00	jmp $0000			jmp 	Next
.1a8d					ClearVariableSpace:
.1a8d	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1a8f	85 05		sta $05				sta 	rsp
.1a91	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a93	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1a95	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a97	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1a99	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1a9b					_CVSHashClear:
.1a9b	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1a9d	99 40 06	sta $0640,y			sta 	hashTable,y
.1aa0	88		dey				dey
.1aa1	10 f8		bpl $1a9b			bpl 	_CVSHashClear
.1aa3					_CVSFindEnd:
.1aa3	18		clc				clc
.1aa4	a5 0e		lda $0e				lda 	nextFreeMem
.1aa6	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1aa8	85 0e		sta $0e				sta 	nextFreeMem
.1aaa	90 02		bcc $1aae			bcc 	_NoCarryAdv
.1aac	e6 0f		inc $0f				inc 	nextFreeMem+1
.1aae					_NoCarryAdv:
.1aae	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1ab0	d0 f1		bne $1aa3			bne 	_CVSFindEnd
.1ab2	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1ab4	a0 00		ldy #$00			ldy 	#0
.1ab6	20 ba 1a	jsr $1aba			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1ab9	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1aba					AdvanceFreeMem:
.1aba	18		clc				clc
.1abb	65 0e		adc $0e				adc 	nextFreeMem
.1abd	85 0e		sta $0e				sta 	nextFreeMem
.1abf	98		tya				tya
.1ac0	65 0f		adc $0f				adc 	nextFreeMem+1
.1ac2	85 0f		sta $0f				sta 	nextFreeMem+1
.1ac4	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1ac5					ExitDump:
.1ac5	ba		tsx				tsx 								; save Data Stack in temp1
.1ac6	86 10		stx $10				stx 	temp1
.1ac8	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1acb					BreakCmd:
>1acb	ff						.byte 	$FF
.1acc	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1acf					DecodeLineIntoBufPtr:
.1acf	48		pha				pha
.1ad0	da		phx				phx
.1ad1	5a		phy				phy
.1ad2	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1ad4	84 09		sty $09				sty 	srcPtr+1
.1ad6	90 1b		bcc $1af3			bcc 	_DecodeNoLineNumber
.1ad8	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1ada	b1 08		lda ($08),y			lda 	(srcPtr),y
.1adc	aa		tax				tax
.1add	c8		iny				iny
.1ade	b1 08		lda ($08),y			lda 	(srcPtr),y
.1ae0	a8		tay				tay
.1ae1	8a		txa				txa
.1ae2	18		clc				clc
.1ae3	20 df 1b	jsr $1bdf			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1ae6	aa		tax				tax 								; count in X
.1ae7					_DecodeLineSpace:
.1ae7	e0 05		cpx #$05			cpx 	#5
.1ae9	f0 08		beq $1af3			beq 	_DecodeNoLineNumber
.1aeb	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1aed	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1af0	e8		inx				inx
.1af1	80 f4		bra $1ae7			bra 	_DecodeLineSpace
.1af3					_DecodeNoLineNumber:
.1af3	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1af5					_DecodeLoop:
.1af5	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1af7	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1af9	c8		iny				iny
.1afa	b1 08		lda ($08),y			lda 	(srcPtr),y
.1afc	85 11		sta $11				sta 	temp1+1
.1afe	c8		iny				iny 								; y points to the byte after it.
.1aff	a5 10		lda $10				lda 	temp1
.1b01	c9 a3		cmp #$a3			cmp 	#NextLine & $FF
.1b03	d0 06		bne $1b0b			bne 	_DecodeNotEOL
.1b05	a5 11		lda $11				lda 	temp1+1
.1b07	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.1b09	f0 0b		beq $1b16			beq 	_DecodeEOL
.1b0b					_DecodeNotEOL:
.1b0b	20 1e 1b	jsr $1b1e			jsr 	IdentifyCodeWord
.1b0e	20 68 1b	jsr $1b68			jsr 	DecodeFoundWord
.1b11	20 52 1b	jsr $1b52			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1b14	80 df		bra $1af5			bra 	_DecodeLoop 				; and go round again
.1b16					_DecodeEOL:
.1b16	a9 00		lda #$00			lda 	#0
.1b18	92 0a		sta ($0a)			sta 	(bufPtr)
.1b1a	7a		ply				ply 								; restore registers and exit
.1b1b	fa		plx				plx
.1b1c	68		pla				pla
.1b1d	60		rts				rts
.1b1e					IdentifyCodeWord:
.1b1e	5a		phy				phy 								; save current position on the stack.
.1b1f	a9 db		lda #$db			lda 	#(Dictionary) & $FF
.1b21	85 0c		sta $0c				sta 	0+(matchPtr)
.1b23	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1b25	85 0d		sta $0d				sta 	1+(matchPtr)
.1b27					_DecodeIdentify:
.1b27	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1b29	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b2b	c5 10		cmp $10				cmp 	temp1
.1b2d	d0 07		bne $1b36			bne 	_DecodeIdNext
.1b2f	c8		iny				iny
.1b30	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b32	c5 11		cmp $11				cmp 	temp1+1
.1b34	f0 1a		beq $1b50			beq 	_DecodeIdFound
.1b36					_DecodeIdNext:
.1b36	18		clc				clc
.1b37	b2 0c		lda ($0c)			lda 	(matchPtr)
.1b39	f0 0a		beq $1b45			beq 	_DecodeIdIssue
.1b3b	65 0c		adc $0c				adc 	matchPtr
.1b3d	85 0c		sta $0c				sta 	matchPtr
.1b3f	90 e6		bcc $1b27			bcc 	_DecodeIdentify
.1b41	e6 0d		inc $0d				inc 	matchPtr+1
.1b43	80 e2		bra $1b27			bra 	_DecodeIdentify
.1b45					_DecodeIdIssue:
.1b45	20 23 10	jsr $1023			jsr 	ErrorHandler
>1b48	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.1b50					_DecodeIdFound:
.1b50	7a		ply				ply 								; restore position.
.1b51	60		rts				rts
.1b52					AdvanceToNext:
.1b52	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1b53	a0 01		ldy #$01			ldy 	#1
.1b55	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b57	29 03		and #$03			and 	#3 							; bits 0-1.
.1b59	7a		ply				ply
.1b5a	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1b5c	d0 02		bne $1b60			bne 	_ATN012
.1b5e	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1b60					_ATN012:
.1b60	85 12		sta $12				sta 	temp2 						; now add that to Y
.1b62	98		tya				tya
.1b63	18		clc				clc
.1b64	65 12		adc $12				adc 	temp2
.1b66	a8		tay				tay
.1b67	60		rts				rts
.1b68					DecodeFoundWord:
.1b68	5a		phy				phy 								; save current position
.1b69	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1b6b	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1b6d	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1b6f	29 10		and #$10			and 	#$10
.1b71	d0 0e		bne $1b81			bne 	_DFWSpecialDecoder
.1b73	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1b75	30 08		bmi $1b7f			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1b77	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1b79	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1b7c	20 9a 1b	jsr $1b9a			jsr 	DecodeCurrentWord 			; expand that.
.1b7f					_DFWExit:
.1b7f	7a		ply				ply 								; restore current position
.1b80	60		rts				rts
.1b81					_DFWSpecialDecoder:
.1b81	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1b83	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1b85	85 12		sta $12				sta 	temp2
.1b87	c8		iny				iny
.1b88	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b8a	85 13		sta $13				sta 	temp2+1
.1b8c	7a		ply				ply 	 							; restore current position into Y
.1b8d	48		pha				pha 								; save registers
.1b8e	da		phx				phx
.1b8f	5a		phy				phy
.1b90	20 97 1b	jsr $1b97			jsr 	_DFWCallDecoder				; call the decoder routine
.1b93	7a		ply				ply 								; restore registers and exit
.1b94	fa		plx				plx
.1b95	68		pla				pla
.1b96	60		rts				rts
.1b97					_DFWCallDecoder:
.1b97	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1b9a					DecodeCurrentWord:
.1b9a	5a		phy				phy
.1b9b	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1b9d	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b9f	a0 04		ldy #$04			ldy 	#4 							; original offset
.1ba1	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1ba2	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1ba3	4a		lsr a				lsr 	a 							; bit set.
.1ba4	4a		lsr a				lsr 	a
.1ba5	4a		lsr a				lsr 	a 							; decoder bit
.1ba6	90 02		bcc $1baa			bcc 	_DWBNoDec
.1ba8	c8		iny				iny
.1ba9	c8		iny				iny
.1baa					_DWBNoDec:
.1baa	4a		lsr a				lsr 	a
.1bab	90 02		bcc $1baf			bcc 	_DWBNoEnc
.1bad	c8		iny				iny
.1bae	c8		iny				iny
.1baf					_DWBNoEnc:
.1baf					_DWBWordOut:
.1baf	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1bb1	48		pha				pha
.1bb2	29 7f		and #$7f			and 	#$7F
.1bb4	20 bd 1b	jsr $1bbd			jsr		DecodeWriteBuffer
.1bb7	c8		iny				iny
.1bb8	68		pla				pla
.1bb9	10 f4		bpl $1baf			bpl 	_DWBWordOut
.1bbb	7a		ply				ply 								; restore Y and exit
.1bbc	60		rts				rts
.1bbd					DecodeWriteBuffer:
.1bbd	92 0a		sta ($0a)			sta 	(bufPtr)
.1bbf	e6 0a		inc $0a				inc 	bufPtr
.1bc1	d0 02		bne $1bc5			bne 	_DWBNoCarry
.1bc3	e6 0b		inc $0b				inc 	bufPtr+1
.1bc5					_DWBNoCarry:
.1bc5	60		rts				rts
.1bc6					DecodeOutputData:
.1bc6	48		pha				pha
.1bc7	da		phx				phx
.1bc8	5a		phy				phy
.1bc9	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1bcb	aa		tax				tax
.1bcc					_DODLoop:
.1bcc	ca		dex				dex 								; done it all ?
.1bcd	f0 0c		beq $1bdb			beq		_DODExit
.1bcf	c8		iny				iny 								; output next character
.1bd0	b1 08		lda ($08),y			lda 	(srcPtr),y
.1bd2	29 7f		and #$7f			and 	#$7F
.1bd4	f0 f6		beq $1bcc			beq 	_DODLoop 					; don't print NULL
.1bd6	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1bd9	80 f1		bra $1bcc			bra 	_DODLoop
.1bdb					_DODExit:
.1bdb	7a		ply				ply
.1bdc	fa		plx				plx
.1bdd	68		pla				pla
.1bde	60		rts				rts
.1bdf					DecodeYAToBuffer:
.1bdf	da		phx				phx
.1be0	5a		phy				phy
.1be1	48		pha				pha
.1be2	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1be4	85 12		sta $12				sta 	temp2
.1be6	a5 0b		lda $0b				lda 	bufPtr+1
.1be8	85 13		sta $13				sta 	temp2+1
.1bea	68		pla				pla
.1beb	20 1d 1e	jsr $1e1d			jsr 	ConvertToStringMain 		; convert YA to string there
.1bee	aa		tax				tax 								; chars output to X
.1bef	18		clc				clc
.1bf0	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1bf2	85 0a		sta $0a				sta 	bufPtr
.1bf4	90 02		bcc $1bf8			bcc 	_DYABNoCarry
.1bf6	e6 0b		inc $0b				inc 	bufPtr+1
.1bf8					_DYABNoCarry:
.1bf8	8a		txa				txa 								; count in A
.1bf9	7a		ply				ply									; restore and exit.
.1bfa	fa		plx				plx
.1bfb	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1bfc					ListCode:
.1bfc	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1bfe	64 1f		stz $1f				stz 	ListLowest+1
.1c00	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1c02	85 1d		sta $1d				sta 	ListCount
.1c04	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c06	85 18		sta $18				sta 	0+(listPtr)
.1c08	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c0a	85 19		sta $19				sta 	1+(listPtr)
.1c0c	86 10		stx $10				stx 	temp1						; S->A
.1c0e	ba		tsx				tsx
.1c0f	8a		txa				txa
.1c10	a6 10		ldx $10				ldx 	temp1
.1c12	c9 80		cmp #$80			cmp 	#NumberStackBase
.1c14	f0 0e		beq $1c24			beq 	_LCLoop
.1c16	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1c18	85 1e		sta $1e				sta 	ListLowest
.1c1a	a5 07		lda $07				lda 	TOS+1
.1c1c	85 1f		sta $1f				sta 	ListLowest+1
.1c1e	68		pla				pla
.1c1f	85 07		sta $07				sta 	TOS+1
.1c21	68		pla				pla
.1c22	85 06		sta $06				sta 	TOS
.1c24					_LCLoop:
.1c24	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1c26	f0 4e		beq $1c76			beq 	_LCExit
.1c28	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1c2a	b1 18		lda ($18),y			lda 	(listPtr),y
.1c2c	c5 1e		cmp $1e				cmp 	ListLowest
.1c2e	c8		iny				iny
.1c2f	b1 18		lda ($18),y			lda 	(listPtr),y
.1c31	e5 1f		sbc $1f				sbc 	ListLowest+1
.1c33	90 34		bcc $1c69			bcc 	_LCNext
.1c35	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1c37	85 0a		sta $0a				sta 	0+(bufPtr)
.1c39	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1c3b	85 0b		sta $0b				sta 	1+(bufPtr)
.1c3d	a5 18		lda $18				lda 	listPtr 					; output the line.
.1c3f	a4 19		ldy $19				ldy 	listPtr+1
.1c41	38		sec				sec
.1c42	20 cf 1a	jsr $1acf			jsr 	DecodeLineIntoBufPtr
.1c45	a9 02		lda #$02			lda 	#CTH_LineNo
.1c47	20 16 11	jsr $1116			jsr 	ExternColour
.1c4a	a0 ff		ldy #$ff			ldy 	#255
.1c4c					_LCLoop2:
.1c4c	c8		iny				iny
.1c4d	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c50	f0 0e		beq $1c60			beq 	_LCEnd
.1c52	c9 20		cmp #$20			cmp 	#32
.1c54	b0 05		bcs $1c5b			bcs 	_LCPrint
.1c56	20 16 11	jsr $1116			jsr 	ExternColour
.1c59	a9 20		lda #$20			lda 	#32
.1c5b					_LCPrint:
.1c5b	20 0c 11	jsr $110c			jsr 	ExternPrint
.1c5e	80 ec		bra $1c4c			bra 	_LCLoop2
.1c60	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1c62	20 0c 11	jsr $110c			jsr 	ExternPrint
.1c65	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1c67	f0 0d		beq $1c76			beq 	_LCExit
.1c69					_LCNext:
.1c69	18		clc				clc
.1c6a	a5 18		lda $18				lda 	listPtr
.1c6c	72 18		adc ($18)			adc 	(listPtr)
.1c6e	85 18		sta $18				sta 	listPtr
.1c70	90 02		bcc $1c74			bcc 	_NoCarryAdv
.1c72	e6 19		inc $19				inc 	listPtr+1
.1c74					_NoCarryAdv:
.1c74	80 ae		bra $1c24			bra 	_LCLoop 					; go round again.
.1c76					_LCExit:
.1c76	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1c79					RunProgram:
.1c79	a2 80		ldx #$80			ldx 	#NumberStackBase
.1c7b	9a		txs				txs
.1c7c	20 8d 1a	jsr $1a8d			jsr 		ClearVariableSpace 		; clear variables etc.
.1c7f	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1c81	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1c83	20 78 10	jsr $1078			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.1c86	4c 00 00	jmp $0000			jmp 		Next
.1c89					Call6502:
.1c89	a5 06		lda $06				lda 	TOS 						; copy call address
.1c8b	85 10		sta $10				sta 	temp1
.1c8d	a5 07		lda $07				lda 	TOS+1
.1c8f	85 11		sta $11				sta 	temp1+1
.1c91	68		pla				pla
.1c92	85 07		sta $07				sta 	TOS+1
.1c94	68		pla				pla
.1c95	85 06		sta $06				sta 	TOS
.1c97	20 9d 1c	jsr $1c9d			jsr 	_CallTemp1 					; call it
.1c9a	4c 00 00	jmp $0000			jmp 	Next
.1c9d					_CallTemp1:
.1c9d	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1ca0					AssertCode:
.1ca0	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1ca2	05 07		ora $07				ora 	TOS+1
.1ca4	f0 09		beq $1caf			beq 	_ASFail 					; if zero fail
.1ca6	68		pla				pla
.1ca7	85 07		sta $07				sta 	TOS+1
.1ca9	68		pla				pla
.1caa	85 06		sta $06				sta 	TOS
.1cac	4c 00 00	jmp $0000			jmp 	Next
.1caf					_ASFail:
.1caf	20 23 10	jsr $1023			jsr 	ErrorHandler
>1cb2	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1cb9					StopCode:
.1cb9	20 23 10	jsr $1023			jsr 	ErrorHandler
>1cbc	53 54 4f 50 00					.text 	"STOP",0
.1cc1					EndProgram:
.1cc1	4c 13 10	jmp $1013			jmp 	WarmStart
.1cc4					VlistCode:
.1cc4	a9 db		lda #$db			lda 	#(Dictionary) & $FF
.1cc6	85 10		sta $10				sta 	0+(temp1)
.1cc8	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1cca	85 11		sta $11				sta 	1+(temp1)
.1ccc	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1cce	b1 10		lda ($10),y			lda 	(temp1),y
.1cd0	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1cd2	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1cd3	4a		lsr a				lsr 	a
.1cd4	4a		lsr a				lsr		a
.1cd5	4a		lsr a				lsr 	a
.1cd6	4a		lsr a				lsr 	a 							; add those bits in
.1cd7	90 02		bcc $1cdb			bcc 	_VLNoDec
.1cd9	c8		iny				iny
.1cda	c8		iny				iny
.1cdb					_VLNoDec:
.1cdb	4a		lsr a				lsr 	a
.1cdc	90 02		bcc $1ce0			bcc 	_VLNoEnc
.1cde	c8		iny				iny
.1cdf	c8		iny				iny
.1ce0					_VLNoEnc:
.1ce0	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1ce2	c9 24		cmp #$24			cmp 	#"$"
.1ce4	d0 06		bne $1cec			bne 	_VLPrint
.1ce6	c8		iny				iny
.1ce7	51 10		eor ($10),y			eor 	(temp1),y
.1ce9	f0 13		beq $1cfe			beq 	_VLNext
.1ceb	88		dey				dey
.1cec					_VLPrint:
.1cec	b1 10		lda ($10),y			lda 	(temp1),y
.1cee	48		pha				pha
.1cef	c8		iny				iny
.1cf0	29 7f		and #$7f			and 	#$7F
.1cf2	20 0c 11	jsr $110c			jsr 	ExternPrint
.1cf5	68		pla				pla
.1cf6	0a		asl a				asl 	a
.1cf7	90 f3		bcc $1cec			bcc 	_VLPrint
.1cf9	a9 20		lda #$20			lda 	#32
.1cfb	20 0c 11	jsr $110c			jsr 	ExternPrint
.1cfe					_VLNext:
.1cfe	18		clc				clc 								; go to next
.1cff	b2 10		lda ($10)			lda 	(temp1)
.1d01	65 10		adc $10				adc 	temp1
.1d03	85 10		sta $10				sta 	temp1
.1d05	90 02		bcc $1d09			bcc 	_VLNoCarry
.1d07	e6 11		inc $11				inc 	temp1+1
.1d09					_VLNoCarry:
.1d09	b2 10		lda ($10)			lda 	(temp1)
.1d0b	d0 bf		bne $1ccc			bne 	_VLLoop
.1d0d	a9 0d		lda #$0d			lda 	#13
.1d0f	20 0c 11	jsr $110c			jsr 	ExternPrint
.1d12	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1d15					ConvertToInteger:
.1d15	84 17		sty $17				sty 	temp4+1
.1d17	85 16		sta $16				sta 	temp4
.1d19	64 14		stz $14				stz 	temp3 						; reset value
.1d1b	64 15		stz $15				stz 	temp3+1
.1d1d	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1d1f	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1d21	b1 16		lda ($16),y			lda 	(temp4),y
.1d23	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1d25	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1d27	d0 01		bne $1d2a			bne 	_CTINotMinus
.1d29	c8		iny				iny									; skip -
.1d2a					_CTINotMinus:
.1d2a	b1 16		lda ($16),y			lda 	(temp4),y
.1d2c	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1d2e	d0 03		bne $1d33			bne 	_CTILoop
.1d30	c6 10		dec $10				dec 	temp1
.1d32	c8		iny				iny
.1d33					_CTILoop:
.1d33	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1d35	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1d37	38		sec				sec
.1d38	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1d3a	90 65		bcc $1da1			bcc 	_CTIFail 					; out of range.
.1d3c	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1d3e	90 0b		bcc $1d4b			bcc 	_CTILegal
.1d40	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d42	90 5d		bcc $1da1			bcc 	_CTIFail
.1d44	38		sec				sec
.1d45	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d47	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d49	b0 56		bcs $1da1			bcs 	_CTIFail
.1d4b					_CTILegal:
.1d4b	48		pha				pha 								; save digit value.
.1d4c	06 14		asl $14				asl 	temp3
.1d4e	26 15		rol $15				rol 	temp3+1
.1d50	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1d52	85 12		sta $12				sta 	temp2
.1d54	a5 15		lda $15				lda 	temp3+1
.1d56	85 13		sta $13				sta 	temp2+1
.1d58	06 14		asl $14				asl 	temp3
.1d5a	26 15		rol $15				rol 	temp3+1
.1d5c	06 14		asl $14				asl 	temp3
.1d5e	26 15		rol $15				rol 	temp3+1
.1d60	24 10		bit $10				bit 	temp1 						; hexadecimal
.1d62	10 07		bpl $1d6b			bpl 	_CTIDecimal
.1d64	06 14		asl $14				asl 	temp3
.1d66	26 15		rol $15				rol 	temp3+1
.1d68	68		pla				pla 								; get digit back
.1d69	80 12		bra $1d7d			bra 	_CTIAddLoop
.1d6b					_CTIDecimal:
.1d6b	18		clc				clc 								; x 8 + x 2 = x 10
.1d6c	a5 14		lda $14				lda 	temp3
.1d6e	65 12		adc $12				adc 	temp2
.1d70	85 14		sta $14				sta 	temp3
.1d72	a5 15		lda $15				lda 	temp3+1
.1d74	65 13		adc $13				adc 	temp2+1
.1d76	85 15		sta $15				sta 	temp3+1
.1d78	68		pla				pla 								; check digit 0-9
.1d79	c9 0a		cmp #$0a			cmp 	#10
.1d7b	b0 24		bcs $1da1			bcs 	_CTIFail
.1d7d					_CTIAddLoop:
.1d7d	18		clc				clc
.1d7e	65 14		adc $14				adc 	temp3
.1d80	85 14		sta $14				sta 	temp3
.1d82	90 02		bcc $1d86			bcc 	_CTINoCarry
.1d84	e6 15		inc $15				inc 	temp3+1
.1d86					_CTINoCarry:
.1d86	c8		iny				iny
.1d87	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1d89	c9 21		cmp #$21			cmp 	#32+1
.1d8b	b0 a6		bcs $1d33			bcs 	_CTILoop 					; no, go back.
.1d8d	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1d8f	d0 0d		bne $1d9e			bne 	_CTIOkay
.1d91	38		sec				sec
.1d92	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1d94	e5 14		sbc $14				sbc 	temp3
.1d96	85 14		sta $14				sta 	temp3
.1d98	a9 00		lda #$00			lda 	#0
.1d9a	e5 15		sbc $15				sbc 	temp3+1
.1d9c	85 15		sta $15				sta 	temp3+1
.1d9e					_CTIOkay:
.1d9e	98		tya				tya
.1d9f	38		sec				sec
.1da0	60		rts				rts
.1da1					_CTIFail:
.1da1	18		clc				clc
.1da2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1da3					NextLine:
.1da3	18		clc				clc
.1da4	a5 03		lda $03				lda 	IP
.1da6	72 03		adc ($03)			adc 	(IP)
.1da8	85 03		sta $03				sta 	IP
.1daa	90 02		bcc $1dae			bcc 	_NoCarryAdv
.1dac	e6 04		inc $04				inc 	IP+1
.1dae					_NoCarryAdv:
.1dae	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1db0	f0 05		beq $1db7			beq 	_NLGoEnd
.1db2	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1db4	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1db7					_NLGoEnd:
.1db7	4c 13 10	jmp $1013			jmp 	WarmStart
.1dba					SkipComment:
.1dba	e8		inx				inx									; (IP),X points to the length.
.1dbb	e8		inx				inx
.1dbc	8a		txa				txa
.1dbd	a8		tay				tay 								; put into Y
.1dbe	18		clc				clc
.1dbf	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1dc1	aa		tax				tax 								; put back in X
.1dc2	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1dc5					CommentDecoder:
.1dc5	a9 06		lda #$06			lda 	#CTH_Keyword
.1dc7	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1dca	a9 27		lda #$27			lda 	#"'"
.1dcc	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1dcf	a9 0b		lda #$0b			lda 	#CTH_Comment
.1dd1	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1dd4	20 c6 1b	jsr $1bc6			jsr 	DecodeOutputData
.1dd7	a9 20		lda #$20			lda 	#32
.1dd9	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1ddc	60		rts				rts
.1ddd					DefineCode:
.1ddd	20 23 10	jsr $1023			jsr 	ErrorHandler
>1de0	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1de8	4f 4e 3f 00
.1dec					DefineDecoder:
.1dec	a9 07		lda #$07			lda 	#CTH_Definition
.1dee	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1df1	a9 3a		lda #$3a			lda 	#":"
.1df3	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1df6	20 c6 1b	jsr $1bc6			jsr 	DecodeOutputData
.1df9	a9 20		lda #$20			lda 	#32
.1dfb	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1dfe	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1dff					IntToString:
.1dff	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e01	85 12		sta $12				sta 	0+(temp2)
.1e03	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e05	85 13		sta $13				sta 	1+(temp2)
.1e07	a5 06		lda $06				lda 	TOS 						; value in YA
.1e09	a4 07		ldy $07				ldy 	TOS+1
.1e0b	20 19 1e	jsr $1e19			jsr 	ConvertToString
.1e0e	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e10	85 06		sta $06				sta 	0+(TOS)
.1e12	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e14	85 07		sta $07				sta 	1+(TOS)
.1e16	4c 00 00	jmp $0000			jmp 	Next
.1e19					ConvertToString:
.1e19	38		sec				sec
.1e1a	80 01		bra $1e1d			bra 	ConvertToStringMain
.1e1c					ConvertToStringUnsigned:
.1e1c	18		clc				clc
.1e1d					ConvertToStringMain:
.1e1d	da		phx				phx									; save XY
.1e1e	5a		phy				phy
.1e1f	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1e21	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1e23	84 11		sty $11				sty 	temp1+1
.1e25	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1e27	90 16		bcc $1e3f			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1e29	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1e2b	10 12		bpl $1e3f			bpl 	_CTSUnsigned
.1e2d	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1e2f	91 12		sta ($12),y			sta 	(temp2),y
.1e31	c8		iny				iny
.1e32	38		sec				sec 								; negate temp1
.1e33	a9 00		lda #$00			lda 	#0
.1e35	e5 10		sbc $10				sbc 	temp1
.1e37	85 10		sta $10				sta 	temp1
.1e39	a9 00		lda #$00			lda 	#0
.1e3b	e5 11		sbc $11				sbc 	temp1+1
.1e3d	85 11		sta $11				sta 	temp1+1
.1e3f					_CTSUnsigned:
.1e3f	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1e41					_CTSLoop:
.1e41	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e43	91 12		sta ($12),y			sta 	(temp2),y
.1e45					_CTSSubLoop:
.1e45	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1e47	1a		inc a				inc 	a
.1e48	91 12		sta ($12),y			sta 	(temp2),y
.1e4a	38		sec				sec 								; do subtraction saving interim result
.1e4b	a5 10		lda $10				lda 	temp1
.1e4d	fd 80 1e	sbc $1e80,x			sbc 	_CTSTable,x
.1e50	48		pha				pha
.1e51	a5 11		lda $11				lda 	temp1+1
.1e53	fd 81 1e	sbc $1e81,x			sbc 	_CTSTable+1,x
.1e56	90 07		bcc $1e5f			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e58	85 11		sta $11				sta 	temp1+1 					; save result back
.1e5a	68		pla				pla
.1e5b	85 10		sta $10				sta 	temp1
.1e5d	80 e6		bra $1e45			bra 	_CTSSubLoop
.1e5f					_CTSCantSubtract:
.1e5f	68		pla				pla 								; throw away interim
.1e60	e8		inx				inx 								; next subtractor
.1e61	e8		inx				inx
.1e62	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1e64	49 30		eor #$30			eor 	#"0"
.1e66	05 1a		ora $1a				ora 	SignCount
.1e68	85 1a		sta $1a				sta 	SignCount
.1e6a	f0 01		beq $1e6d			beq		_CTSLZ 						; if all zeros so far suppress.
.1e6c	c8		iny				iny 								; next character
.1e6d					_CTSLZ:
.1e6d	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1e6f	d0 d0		bne $1e41			bne 	_CTSLoop
.1e71					_CTSComplete:
.1e71	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1e73	09 30		ora #$30			ora 	#48 						; ASCII
.1e75	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1e77	c8		iny				iny
.1e78	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e7a	91 12		sta ($12),y			sta 	(temp2),y
.1e7c	98		tya				tya 								; size in A
.1e7d	7a		ply				ply									; pull and exit.
.1e7e	fa		plx				plx
.1e7f	60		rts				rts
.1e80					_CTSTable:
>1e80	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e88					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1e88					VarAddressHandler:
.1e88	18		clc				clc 								; find variable, error if it doesn't exist.
.1e89	20 da 1e	jsr $1eda			jsr 	VariableFind
.1e8c	a5 06		lda $06				lda 	TOS
.1e8e	48		pha				pha
.1e8f	a5 07		lda $07				lda 	TOS+1
.1e91	48		pha				pha
.1e92	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1e94	85 06		sta $06				sta 	TOS
.1e96	a5 11		lda $11				lda		temp1+1
.1e98	85 07		sta $07				sta 	TOS+1
.1e9a	4c 00 00	jmp $0000			jmp 	Next
.1e9d					VarAddrHandlerDecode:
.1e9d	a9 26		lda #$26			lda 	#"&"
.1e9f	4c 88 1f	jmp $1f88			jmp 	VarHandlerDecode
.1ea2					VarReadHandler:
.1ea2	18		clc				clc 								; find variable, error if it doesn't exist.
.1ea3	20 da 1e	jsr $1eda			jsr 	VariableFind
.1ea6	a5 06		lda $06				lda 	TOS
.1ea8	48		pha				pha
.1ea9	a5 07		lda $07				lda 	TOS+1
.1eab	48		pha				pha
.1eac	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1eae	85 06		sta $06				sta 	TOS
.1eb0	a0 01		ldy #$01			ldy 	#1
.1eb2	b1 10		lda ($10),y			lda 	(temp1),y
.1eb4	85 07		sta $07				sta 	TOS+1
.1eb6	4c 00 00	jmp $0000			jmp 	Next
.1eb9					VarReadHandlerDecode:
.1eb9	a9 40		lda #$40			lda 	#"@"
.1ebb	4c 88 1f	jmp $1f88			jmp 	VarHandlerDecode
.1ebe					VarWriteHandler:
.1ebe	38		sec				sec 								; find variable, create it if it doesn't exist.
.1ebf	20 da 1e	jsr $1eda			jsr 	VariableFind
.1ec2	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1ec4	92 10		sta ($10)			sta 	(temp1)
.1ec6	a5 07		lda $07				lda 	TOS+1
.1ec8	a0 01		ldy #$01			ldy 	#1
.1eca	91 10		sta ($10),y			sta 	(temp1),y
.1ecc	68		pla				pla
.1ecd	85 07		sta $07				sta 	TOS+1
.1ecf	68		pla				pla
.1ed0	85 06		sta $06				sta 	TOS
.1ed2	4c 00 00	jmp $0000			jmp 	Next
.1ed5					VarWriteHandlerDecode:
.1ed5	a9 21		lda #$21			lda 	#"!"
.1ed7	4c 88 1f	jmp $1f88			jmp 	VarHandlerDecode
.1eda					VariableFind:
.1eda	08		php				php 								; save autocreate flag.
.1edb	e8		inx				inx 								; advance to/over the variable name.
.1edc	e8		inx				inx
.1edd	8a		txa				txa 								; put in Y
.1ede	a8		tay				tay
.1edf	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1ee1	85 12		sta $12				sta 	temp2
.1ee3	c8		iny				iny
.1ee4	b1 03		lda ($03),y			lda 	(IP),y
.1ee6	85 13		sta $13				sta 	temp2+1
.1ee8	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1eea	b0 0f		bcs $1efb			bcs 	_VFLong
.1eec	a5 13		lda $13				lda 	temp2+1
.1eee	d0 0b		bne $1efb			bne 	_VFLong
.1ef0	a5 12		lda $12				lda 	temp2						; this is the index
.1ef2	0a		asl a				asl 	a 							; double it
.1ef3	85 10		sta $10				sta 	temp1
.1ef5	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1ef7	85 11		sta $11				sta 	temp1+1
.1ef9	28		plp				plp 								; throw creation flag, it always exists.
.1efa	60		rts				rts
.1efb					_VFLong:
.1efb	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1efd	6a		ror a				ror 	a
.1efe	6a		ror a				ror 	a
.1eff	6a		ror a				ror 	a
.1f00	6a		ror a				ror 	a
.1f01	45 12		eor $12				eor 	temp2
.1f03	45 13		eor $13				eor 	temp2+1
.1f05	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1f07	0a		asl a				asl 	a
.1f08	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1f0a	85 10		sta $10				sta 	temp1
.1f0c	85 14		sta $14				sta 	temp3
.1f0e	a9 06		lda #$06			lda 	#hashTable >> 8
.1f10	85 11		sta $11				sta 	temp1+1
.1f12	85 15		sta $15				sta 	temp3+1
.1f14					_VFSearch:
.1f14	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1f16	b1 10		lda ($10),y			lda 	(temp1),y
.1f18	f0 23		beq $1f3d			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1f1a	a8		tay				tay 								; follow the link through.
.1f1b	b2 10		lda ($10)			lda 	(temp1)
.1f1d	85 10		sta $10				sta 	temp1
.1f1f	84 11		sty $11				sty 	temp1+1
.1f21	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1f23	b1 10		lda ($10),y			lda 	(temp1),y
.1f25	c5 12		cmp $12				cmp 	temp2
.1f27	d0 eb		bne $1f14			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f29	c8		iny				iny 								; same for 2nd byte of name
.1f2a	b1 10		lda ($10),y			lda 	(temp1),y
.1f2c	c5 13		cmp $13				cmp 	temp2+1
.1f2e	d0 e4		bne $1f14			bne 	_VFSearch
.1f30	18		clc				clc
.1f31	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1f33	69 02		adc #$02			adc 	#2
.1f35	85 10		sta $10				sta 	temp1
.1f37	90 02		bcc $1f3b			bcc 	_VFNoPage1
.1f39	e6 11		inc $11				inc 	temp1+1
.1f3b					_VFNoPage1:
.1f3b	28		plp				plp 								; don't need to worry about creation flag
.1f3c	60		rts				rts
.1f3d					_VFNotFound:
.1f3d	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1f3e	b0 0d		bcs $1f4d			bcs 	_VFCreate
.1f40	20 23 10	jsr $1023			jsr 	ErrorHandler
>1f43	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1f4b	3f 00
.1f4d					_VFCreate:
.1f4d	a0 01		ldy #$01			ldy 	#1
.1f4f	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1f51	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1f53	b1 14		lda ($14),y			lda 	(temp3),y
.1f55	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f57	c8		iny				iny
.1f58	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1f5a	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f5c	c8		iny				iny
.1f5d	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f5f	c8		iny				iny
.1f60	a5 12		lda $12				lda 	temp2 						; copy the name out
.1f62	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f64	c8		iny				iny
.1f65	a5 13		lda $13				lda 	temp2+1
.1f67	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f69	a0 01		ldy #$01			ldy 	#1
.1f6b	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1f6d	92 14		sta ($14)			sta 	(temp3)
.1f6f	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f71	91 14		sta ($14),y			sta 	(temp3),y
.1f73	18		clc				clc
.1f74	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1f76	69 02		adc #$02			adc 	#2
.1f78	85 10		sta $10				sta 	temp1
.1f7a	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f7c	69 00		adc #$00			adc 	#0
.1f7e	85 11		sta $11				sta 	temp1+1
.1f80	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1f82	a0 00		ldy #$00			ldy 	#0
.1f84	20 ba 1a	jsr $1aba			jsr 	AdvanceFreeMem
.1f87	60		rts				rts
.1f88					VarHandlerDecode:
.1f88	48		pha				pha 								; save, leading space
.1f89	a9 20		lda #$20			lda 	#" "
.1f8b	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1f8e	68		pla				pla 								; restore and write type
.1f8f	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1f92	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1f94	85 10		sta $10				sta 	temp1
.1f96	c8		iny				iny
.1f97	b1 08		lda ($08),y			lda 	(srcPtr),y
.1f99	85 11		sta $11				sta 	temp1+1
.1f9b	a5 10		lda $10				lda 	temp1 						; output the first character
.1f9d	29 1f		and #$1f			and 	#31
.1f9f	20 ca 1f	jsr $1fca			jsr 	VHOutVarChar
.1fa2	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1fa4					_VHDShift:
.1fa4	46 11		lsr $11				lsr 	temp1+1
.1fa6	66 10		ror $10				ror 	temp1
.1fa8	ca		dex				dex
.1fa9	d0 f9		bne $1fa4			bne 	_VHDShift
.1fab	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1fad					_VHDDiv40:
.1fad	e8		inx				inx
.1fae	38		sec				sec
.1faf	a5 10		lda $10				lda 	temp1
.1fb1	e9 28		sbc #$28			sbc 	#40
.1fb3	a8		tay				tay
.1fb4	a5 11		lda $11				lda 	temp1+1
.1fb6	e9 00		sbc #$00			sbc 	#0
.1fb8	90 06		bcc $1fc0			bcc 	_VHDivDone
.1fba	85 11		sta $11				sta 	temp1+1
.1fbc	84 10		sty $10				sty 	temp1
.1fbe	80 ed		bra $1fad			bra 	_VHDDiv40
.1fc0					_VHDivDone:
.1fc0	a5 10		lda $10				lda 	temp1 						; remainder
.1fc2	20 ca 1f	jsr $1fca			jsr 	VHOutVarChar
.1fc5	8a		txa				txa
.1fc6	20 ca 1f	jsr $1fca			jsr 	VHOutVarChar 				; and result.
.1fc9	60		rts				rts
.1fca					VHOutVarChar:
.1fca	c9 00		cmp #$00			cmp 	#0
.1fcc	f0 0c		beq $1fda			beq 	_VHOExit
.1fce	18		clc				clc
.1fcf	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1fd1	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1fd3	90 02		bcc $1fd7			bcc 	_VHOOut
.1fd5	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1fd7					_VHOOut:
.1fd7	20 bd 1b	jsr $1bbd			jsr 	DecodeWriteBuffer
.1fda					_VHOExit:
.1fda	60		rts				rts

;******  Return to file: kernel.asm

.1fdb					Dictionary:

;******  Processing file: generated/dictionary.inc

>1fdb	05					.byte	_end1-*
>1fdc	00					.byte	$00
>1fdd	fd 15					.word	WordWrite
>1fdf	a1					.byte	$a1
.1fe0					_end1:
>1fe0	10					.byte	_end2-*
>1fe1	52					.byte	$52
>1fe2	be 1e					.word	VarWriteHandler
>1fe4	d5 1e					.word	VarWriteHandlerDecode
>1fe6	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1fee	45 d2
.1ff0					_end2:
>1ff0	10					.byte	_end3-*
>1ff1	52					.byte	$52
>1ff2	88 1e					.word	VarAddressHandler
>1ff4	9d 1e					.word	VarAddrHandlerDecode
>1ff6	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1ffe	45 d2
.2000					_end3:
>2000	10					.byte	_end4-*
>2001	52					.byte	$52
>2002	a2 1e					.word	VarReadHandler
>2004	b9 1e					.word	VarReadHandlerDecode
>2006	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>200e	45 d2
.2010					_end4:
>2010	0c					.byte	_end5-*
>2011	52					.byte	$52
>2012	41 19					.word	CallHandler
>2014	fd 19					.word	CallHandlerDecode
>2016	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.201c					_end5:
>201c	0f					.byte	_end6-*
>201d	53					.byte	$53
>201e	ba 1d					.word	SkipComment
>2020	c5 1d					.word	CommentDecoder
>2022	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>202a	d4
.202b					_end6:
>202b	0e					.byte	_end7-*
>202c	53					.byte	$53
>202d	dd 1d					.word	DefineCode
>202f	ec 1d					.word	DefineDecoder
>2031	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2039					_end7:
>2039	0f					.byte	_end8-*
>203a	52					.byte	$52
>203b	89 10					.word	Literal2Byte
>203d	9f 10					.word	Literal2ByteDecode
>203f	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2047	cc
.2048					_end8:
>2048	0e					.byte	_end9-*
>2049	80					.byte	$80
>204a	a3 1d					.word	NextLine
>204c	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2054	4e c5
.2056					_end9:
>2056	0e					.byte	_end10-*
>2057	53					.byte	$53
>2058	b1 10					.word	LiteralString
>205a	ce 10					.word	LiteralStringDecoder
>205c	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2064					_end10:
>2064	05					.byte	_end11-*
>2065	00					.byte	$00
>2066	79 13					.word	Multiply16x16
>2068	aa					.byte	$aa
.2069					_end11:
>2069	05					.byte	_end12-*
>206a	00					.byte	$00
>206b	e6 11					.word	Add
>206d	ab					.byte	$ab
.206e					_end12:
>206e	06					.byte	_end13-*
>206f	00					.byte	$00
>2070	0e 16					.word	WordAdd
>2072	2b a1					.byte	$2b,$a1
.2074					_end13:
>2074	05					.byte	_end14-*
>2075	00					.byte	$00
>2076	f5 11					.word	Subtract
>2078	ad					.byte	$ad
.2079					_end14:
>2079	06					.byte	_end15-*
>207a	00					.byte	$00
>207b	b5 14					.word	ConstantMinus1
>207d	2d b1					.byte	$2d,$b1
.207f					_end15:
>207f	05					.byte	_end16-*
>2080	00					.byte	$00
>2081	ca 12					.word	Divide16x16
>2083	af					.byte	$af
.2084					_end16:
>2084	05					.byte	_end17-*
>2085	00					.byte	$00
>2086	a8 14					.word	Constant0
>2088	b0					.byte	$b0
.2089					_end17:
>2089	06					.byte	_end18-*
>208a	00					.byte	$00
>208b	0e 14					.word	CheckMinus
>208d	30 bc					.byte	$30,$bc
.208f					_end18:
>208f	06					.byte	_end19-*
>2090	00					.byte	$00
>2091	22 14					.word	CheckZero
>2093	30 bd					.byte	$30,$bd
.2095					_end19:
>2095	05					.byte	_end20-*
>2096	00					.byte	$00
>2097	c4 14					.word	C1
>2099	b1					.byte	$b1
.209a					_end20:
>209a	06					.byte	_end21-*
>209b	00					.byte	$00
>209c	b8 13					.word	Unary1Plus
>209e	31 ab					.byte	$31,$ab
.20a0					_end21:
>20a0	06					.byte	_end22-*
>20a1	00					.byte	$00
>20a2	cf 13					.word	Unary1Minus
>20a4	31 ad					.byte	$31,$ad
.20a6					_end22:
>20a6	06					.byte	_end23-*
>20a7	00					.byte	$00
>20a8	dc 14					.word	C10
>20aa	31 b0					.byte	$31,$b0
.20ac					_end23:
>20ac	07					.byte	_end24-*
>20ad	00					.byte	$00
>20ae	05 15					.word	C100
>20b0	31 30 b0				.byte	$31,$30,$b0
.20b3					_end24:
>20b3	08					.byte	_end25-*
>20b4	00					.byte	$00
>20b5	34 15					.word	C1024
>20b7	31 30 32 b4				.byte	$31,$30,$32,$b4
.20bb					_end25:
>20bb	07					.byte	_end26-*
>20bc	00					.byte	$00
>20bd	09 15					.word	C127
>20bf	31 32 b7				.byte	$31,$32,$b7
.20c2					_end26:
>20c2	07					.byte	_end27-*
>20c3	00					.byte	$00
>20c4	0d 15					.word	C128
>20c6	31 32 b8				.byte	$31,$32,$b8
.20c9					_end27:
>20c9	06					.byte	_end28-*
>20ca	00					.byte	$00
>20cb	e0 14					.word	C15
>20cd	31 b5					.byte	$31,$b5
.20cf					_end28:
>20cf	06					.byte	_end29-*
>20d0	00					.byte	$00
>20d1	e4 14					.word	C16
>20d3	31 b6					.byte	$31,$b6
.20d5					_end29:
>20d5	07					.byte	_end30-*
>20d6	00					.byte	$00
>20d7	46 14					.word	Times16
>20d9	31 36 aa				.byte	$31,$36,$aa
.20dc					_end30:
>20dc	07					.byte	_end31-*
>20dd	00					.byte	$00
>20de	59 14					.word	Divide16
>20e0	31 36 af				.byte	$31,$36,$af
.20e3					_end31:
>20e3	05					.byte	_end32-*
>20e4	00					.byte	$00
>20e5	c8 14					.word	C2
>20e7	b2					.byte	$b2
.20e8					_end32:
>20e8	06					.byte	_end33-*
>20e9	00					.byte	$00
>20ea	52 14					.word	Times2
>20ec	32 aa					.byte	$32,$aa
.20ee					_end33:
>20ee	06					.byte	_end34-*
>20ef	00					.byte	$00
>20f0	c1 13					.word	Unary2Plus
>20f2	32 ab					.byte	$32,$ab
.20f4					_end34:
>20f4	06					.byte	_end35-*
>20f5	00					.byte	$00
>20f6	da 13					.word	Unary2Minus
>20f8	32 ad					.byte	$32,$ad
.20fa					_end35:
>20fa	06					.byte	_end36-*
>20fb	00					.byte	$00
>20fc	65 14					.word	Divide2
>20fe	32 af					.byte	$32,$af
.2100					_end36:
>2100	06					.byte	_end37-*
>2101	00					.byte	$00
>2102	e8 14					.word	C24
>2104	32 b4					.byte	$32,$b4
.2106					_end37:
>2106	07					.byte	_end38-*
>2107	00					.byte	$00
>2108	11 15					.word	C255
>210a	32 35 b5				.byte	$32,$35,$b5
.210d					_end38:
>210d	07					.byte	_end39-*
>210e	00					.byte	$00
>210f	1c 15					.word	C256
>2111	32 35 b6				.byte	$32,$35,$b6
.2114					_end39:
>2114	08					.byte	_end40-*
>2115	00					.byte	$00
>2116	6c 14					.word	Times256
>2118	32 35 36 aa				.byte	$32,$35,$36,$aa
.211c					_end40:
>211c	08					.byte	_end41-*
>211d	00					.byte	$00
>211e	75 14					.word	Divide256
>2120	32 35 36 af				.byte	$32,$35,$36,$af
.2124					_end41:
>2124	05					.byte	_end42-*
>2125	00					.byte	$00
>2126	cc 14					.word	C3
>2128	b3					.byte	$b3
.2129					_end42:
>2129	06					.byte	_end43-*
>212a	00					.byte	$00
>212b	f9 14					.word	C32
>212d	33 b2					.byte	$33,$b2
.212f					_end43:
>212f	09					.byte	_end44-*
>2130	00					.byte	$00
>2131	4c 15					.word	C32767
>2133	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.2138					_end44:
>2138	09					.byte	_end45-*
>2139	00					.byte	$00
>213a	58 15					.word	C32768
>213c	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.2141					_end45:
>2141	05					.byte	_end46-*
>2142	00					.byte	$00
>2143	d0 14					.word	C4
>2145	b4					.byte	$b4
.2146					_end46:
>2146	06					.byte	_end47-*
>2147	00					.byte	$00
>2148	4e 14					.word	Times4
>214a	34 aa					.byte	$34,$aa
.214c					_end47:
>214c	06					.byte	_end48-*
>214d	00					.byte	$00
>214e	61 14					.word	Divide4
>2150	34 af					.byte	$34,$af
.2152					_end48:
>2152	08					.byte	_end49-*
>2153	00					.byte	$00
>2154	40 15					.word	C4096
>2156	34 30 39 b6				.byte	$34,$30,$39,$b6
.215a					_end49:
>215a	05					.byte	_end50-*
>215b	00					.byte	$00
>215c	d4 14					.word	C5
>215e	b5					.byte	$b5
.215f					_end50:
>215f	07					.byte	_end51-*
>2160	00					.byte	$00
>2161	28 15					.word	C512
>2163	35 31 b2				.byte	$35,$31,$b2
.2166					_end51:
>2166	06					.byte	_end52-*
>2167	00					.byte	$00
>2168	fd 14					.word	C63
>216a	36 b3					.byte	$36,$b3
.216c					_end52:
>216c	06					.byte	_end53-*
>216d	00					.byte	$00
>216e	01 15					.word	C64
>2170	36 b4					.byte	$36,$b4
.2172					_end53:
>2172	05					.byte	_end54-*
>2173	00					.byte	$00
>2174	d8 14					.word	C8
>2176	b8					.byte	$b8
.2177					_end54:
>2177	06					.byte	_end55-*
>2178	00					.byte	$00
>2179	4a 14					.word	Times8
>217b	38 aa					.byte	$38,$aa
.217d					_end55:
>217d	06					.byte	_end56-*
>217e	00					.byte	$00
>217f	5d 14					.word	Divide8
>2181	38 af					.byte	$38,$af
.2183					_end56:
>2183	05					.byte	_end57-*
>2184	40					.byte	$40
>2185	c6 19					.word	ReturnHandler
>2187	bb					.byte	$bb
.2188					_end57:
>2188	05					.byte	_end58-*
>2189	00					.byte	$00
>218a	66 12					.word	CheckLess
>218c	bc					.byte	$bc
.218d					_end58:
>218d	06					.byte	_end59-*
>218e	00					.byte	$00
>218f	7f 12					.word	CheckLessEq
>2191	3c bd					.byte	$3c,$bd
.2193					_end59:
>2193	06					.byte	_end60-*
>2194	00					.byte	$00
>2195	2f 12					.word	CheckNotEqual
>2197	3c be					.byte	$3c,$be
.2199					_end60:
>2199	05					.byte	_end61-*
>219a	00					.byte	$00
>219b	32 12					.word	CheckEqual
>219d	bd					.byte	$bd
.219e					_end61:
>219e	05					.byte	_end62-*
>219f	00					.byte	$00
>21a0	82 12					.word	CheckGreater
>21a2	be					.byte	$be
.21a3					_end62:
>21a3	06					.byte	_end63-*
>21a4	00					.byte	$00
>21a5	63 12					.word	CheckGreaterEq
>21a7	3e bd					.byte	$3e,$bd
.21a9					_end63:
>21a9	08					.byte	_end64-*
>21aa	00					.byte	$00
>21ab	6d 15					.word	TestDup
>21ad	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.21b1					_end64:
>21b1	05					.byte	_end65-*
>21b2	00					.byte	$00
>21b3	e2 15					.word	WordRead
>21b5	c0					.byte	$c0
.21b6					_end65:
>21b6	07					.byte	_end66-*
>21b7	00					.byte	$00
>21b8	e8 13					.word	Absolute
>21ba	41 42 d3				.byte	$41,$42,$d3
.21bd					_end66:
>21bd	09					.byte	_end67-*
>21be	00					.byte	$00
>21bf	25 16					.word	AllocateMemory
>21c1	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.21c6					_end67:
>21c6	07					.byte	_end68-*
>21c7	00					.byte	$00
>21c8	08 12					.word	And
>21ca	41 4e c4				.byte	$41,$4e,$c4
.21cd					_end68:
>21cd	0a					.byte	_end69-*
>21ce	00					.byte	$00
>21cf	a0 1c					.word	AssertCode
>21d1	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.21d7					_end69:
>21d7	09					.byte	_end70-*
>21d8	00					.byte	$00
>21d9	3b 14					.word	ByteSwap
>21db	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.21e0					_end70:
>21e0	06					.byte	_end71-*
>21e1	00					.byte	$00
>21e2	f0 15					.word	ByteWrite
>21e4	43 a1					.byte	$43,$a1
.21e6					_end71:
>21e6	06					.byte	_end72-*
>21e7	00					.byte	$00
>21e8	d9 15					.word	ByteRead
>21ea	43 c0					.byte	$43,$c0
.21ec					_end72:
>21ec	07					.byte	_end73-*
>21ed	00					.byte	$00
>21ee	87 1a					.word	ClrHandler
>21f0	43 4c d2				.byte	$43,$4c,$d2
.21f3					_end73:
>21f3	08					.byte	_end74-*
>21f4	00					.byte	$00
>21f5	64 15					.word	Drop
>21f7	44 52 4f d0				.byte	$44,$52,$4f,$d0
.21fb					_end74:
>21fb	07					.byte	_end75-*
>21fc	00					.byte	$00
>21fd	76 15					.word	Dup
>21ff	44 55 d0				.byte	$44,$55,$d0
.2202					_end75:
>2202	08					.byte	_end76-*
>2203	01					.byte	$01
>2204	15 19					.word	ElseHandler
>2206	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.220a					_end76:
>220a	07					.byte	_end77-*
>220b	00					.byte	$00
>220c	c1 1c					.word	EndProgram
>220e	45 4e c4				.byte	$45,$4e,$c4
.2211					_end77:
>2211	09					.byte	_end78-*
>2212	00					.byte	$00
>2213	18 19					.word	EndIfHandler
>2215	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.221a					_end78:
>221a	07					.byte	_end79-*
>221b	00					.byte	$00
>221c	87 18					.word	ForHandler
>221e	46 4f d2				.byte	$46,$4f,$d2
.2221					_end79:
>2221	08					.byte	_end80-*
>2222	21					.byte	$21
>2223	0c 19					.word	IfHandler
>2225	0f 19					.word	IfEncodeHandler
>2227	49 c6					.byte	$49,$c6
.2229					_end80:
>2229	09					.byte	_end81-*
>222a	00					.byte	$00
>222b	eb 18					.word	GetIndex
>222d	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.2232					_end81:
>2232	08					.byte	_end82-*
>2233	00					.byte	$00
>2234	fc 1b					.word	ListCode
>2236	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.223a					_end82:
>223a	07					.byte	_end83-*
>223b	00					.byte	$00
>223c	9f 12					.word	Maximum
>223e	4d 41 d8				.byte	$4d,$41,$d8
.2241					_end83:
>2241	07					.byte	_end84-*
>2242	00					.byte	$00
>2243	9b 12					.word	Minimum
>2245	4d 49 ce				.byte	$4d,$49,$ce
.2248					_end84:
>2248	07					.byte	_end85-*
>2249	00					.byte	$00
>224a	db 12					.word	Modulus16x16
>224c	4d 4f c4				.byte	$4d,$4f,$c4
.224f					_end85:
>224f	0a					.byte	_end86-*
>2250	00					.byte	$00
>2251	ef 13					.word	Negate
>2253	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2259					_end86:
>2259	07					.byte	_end87-*
>225a	00					.byte	$00
>225b	7e 1a					.word	NewHandler
>225d	4e 45 d7				.byte	$4e,$45,$d7
.2260					_end87:
>2260	08					.byte	_end88-*
>2261	01					.byte	$01
>2262	b5 18					.word	NextHandler
>2264	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2268					_end88:
>2268	07					.byte	_end89-*
>2269	00					.byte	$00
>226a	aa 15					.word	Nip
>226c	4e 49 d0				.byte	$4e,$49,$d0
.226f					_end89:
>226f	07					.byte	_end90-*
>2270	00					.byte	$00
>2271	ff 13					.word	OneComplement
>2273	4e 4f d4				.byte	$4e,$4f,$d4
.2276					_end90:
>2276	06					.byte	_end91-*
>2277	00					.byte	$00
>2278	22 12					.word	LogOr
>227a	4f d2					.byte	$4f,$d2
.227c					_end91:
>227c	08					.byte	_end92-*
>227d	00					.byte	$00
>227e	92 15					.word	Over
>2280	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.2284					_end92:
>2284	0a					.byte	_end93-*
>2285	00					.byte	$00
>2286	1b 19					.word	RepeatHandler
>2288	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.228e					_end93:
>228e	07					.byte	_end94-*
>228f	00					.byte	$00
>2290	7e 14					.word	RandomNumber
>2292	52 4e c4				.byte	$52,$4e,$c4
.2295					_end94:
>2295	07					.byte	_end95-*
>2296	00					.byte	$00
>2297	af 15					.word	Rot
>2299	52 4f d4				.byte	$52,$4f,$d4
.229c					_end95:
>229c	07					.byte	_end96-*
>229d	00					.byte	$00
>229e	79 1c					.word	RunProgram
>22a0	52 55 ce				.byte	$52,$55,$ce
.22a3					_end96:
>22a3	07					.byte	_end97-*
>22a4	00					.byte	$00
>22a5	2a 14					.word	SignTOS
>22a7	53 47 ce				.byte	$53,$47,$ce
.22aa					_end97:
>22aa	08					.byte	_end98-*
>22ab	00					.byte	$00
>22ac	b9 1c					.word	StopCode
>22ae	53 54 4f d0				.byte	$53,$54,$4f,$d0
.22b2					_end98:
>22b2	08					.byte	_end99-*
>22b3	00					.byte	$00
>22b4	7f 15					.word	Swap
>22b6	53 57 41 d0				.byte	$53,$57,$41,$d0
.22ba					_end99:
>22ba	07					.byte	_end100-*
>22bb	00					.byte	$00
>22bc	89 1c					.word	Call6502
>22be	53 59 d3				.byte	$53,$59,$d3
.22c1					_end100:
>22c1	0d					.byte	_end101-*
>22c2	00					.byte	$00
>22c3	ff 1d					.word	IntToString
>22c5	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>22cd	c7
.22ce					_end101:
>22ce	09					.byte	_end102-*
>22cf	01					.byte	$01
>22d0	1e 19					.word	UntilHandler
>22d2	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.22d7					_end102:
>22d7	09					.byte	_end103-*
>22d8	00					.byte	$00
>22d9	c4 1c					.word	VlistCode
>22db	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.22e0					_end103:
>22e0	0a					.byte	_end104-*
>22e1	40					.byte	$40
>22e2	cb 1a					.word	BreakCmd
>22e4	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.22ea					_end104:
>22ea	09					.byte	_end105-*
>22eb	00					.byte	$00
>22ec	c5 1a					.word	ExitDump
>22ee	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.22f3					_end105:
>22f3	07					.byte	_end106-*
>22f4	00					.byte	$00
>22f5	15 12					.word	Xor
>22f7	58 4f d2				.byte	$58,$4f,$d2
.22fa					_end106:
>22fa	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
