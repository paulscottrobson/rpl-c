
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Fri Jan 10 17:39:48 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	20 dc 10	jsr $10dc			jsr 		ExternInitialise
.1006	a9 23		lda #$23			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 cc 11	jsr $11cc			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010					WarmStart:
.1010	a9 03		lda #$03			lda 	#COL_Yellow
.1012	20 13 11	jsr $1113			jsr 	ExternColour
.1015	20 36 11	jsr $1136			jsr 	ExternInput
.1018	a9 06		lda #$06			lda 	#COL_Cyan
.101a	20 13 11	jsr $1113			jsr 	ExternColour
.101d	4c 24 1a	jmp $1a24			jmp 	RunProgram
.1020					ErrorHandler:
>1020	ff						.byte 	$FF
.1021	a2 5e		ldx #$5e			ldx 	#$5E
.1023					BootMsg:
>1023	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103b	2a 0d 0d
>103e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1046	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1056	30 32 30 0d 0d
>105b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1062	5b 32 30 2d 30 31 2d 31			.text	"[20-01-10 17:39]"
>106a	30 20 31 37 3a 33 39 5d

;******  Return to file: kernel.asm

>1072	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1075					InitialiseCoreCode:
.1075	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1077	85 00		sta $00				sta 	Next
.1079	85 01		sta $01				sta 	Next+1
.107b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.107d	85 02		sta $02				sta 	Next+2
.107f	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.1081	84 04		sty $04				sty 	Next+4
.1083	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1085	60		rts				rts								; (2 INX skip offset and line#)
.1086					Literal2Byte:
.1086	a5 06		lda $06				lda 	TOS
.1088	48		pha				pha
.1089	a5 07		lda $07				lda 	TOS+1
.108b	48		pha				pha
.108c	e8		inx				inx  							; point X to the word
.108d	e8		inx				inx
.108e	8a		txa				txa 							; copy into Y
.108f	a8		tay				tay
.1090	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1092	85 06		sta $06				sta 	TOS
.1094	c8		iny				iny 							; read and push the MSB
.1095	b1 03		lda ($03),y			lda 	(IP),y
.1097	85 07		sta $07				sta 	TOS+1
.1099	4c 00 00	jmp $0000			jmp 	Next
.109c					Literal2ByteDecode:
.109c	a9 06		lda #$06			lda 	#CTH_Keyword
.109e	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.10a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a3	aa		tax				tax
.10a4	c8		iny				iny
.10a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a7	a8		tay				tay
.10a8	8a		txa				txa
.10a9	38		sec				sec 							; output signed
.10aa	20 8a 19	jsr $198a			jsr 	DecodeYAToBuffer
.10ad	60		rts				rts
.10ae					LiteralString:
.10ae	a5 06		lda $06				lda 	TOS
.10b0	48		pha				pha
.10b1	a5 07		lda $07				lda 	TOS+1
.10b3	48		pha				pha
.10b4	e8		inx				inx
.10b5	e8		inx				inx 							; skip over current word
.10b6	8a		txa				txa 							; add to IP + 1 to give string address
.10b7	a8		tay				tay 							; put in Y
.10b8	38		sec				sec 							; make that TOS
.10b9	65 03		adc $03				adc 	IP
.10bb	85 06		sta $06				sta 	TOS
.10bd	a5 04		lda $04				lda 	IP+1
.10bf	69 00		adc #$00			adc 	#0
.10c1	85 07		sta $07				sta 	TOS+1
.10c3	8a		txa				txa 							; add data length to X
.10c4	18		clc				clc
.10c5	71 03		adc ($03),y			adc 	(IP),y
.10c7	aa		tax				tax
.10c8	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment
.10cb					LiteralStringDecoder:
.10cb	a9 05		lda #$05			lda 	#CTH_String
.10cd	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.10d0	a9 22		lda #$22			lda 	#'"'
.10d2	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.10d5	20 71 19	jsr $1971			jsr 	DecodeOutputData
.10d8	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.10db	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10dc					ExternInitialise:
.10dc	a9 90		lda #$90			lda 	#144 						; set colour
.10de	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e1	a9 01		lda #$01			lda 	#$01
.10e3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e6	a9 0e		lda #$0e			lda 	#14							; lower case
.10e8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10eb	a9 93		lda #$93			lda 	#147 						; clear screen
.10ed	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f0	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f2	4c 13 11	jmp $1113			jmp 	ExternColour
.10f5					ExternCheckBreak:
.10f5	da		phx				phx 								; make sure we keep XY
.10f6	5a		phy				phy
.10f7	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fa	f0 03		beq $10ff			beq		_ECBExit 					; stopped
.10fc	7a		ply				ply 								; restore and exit.
.10fd	fa		plx				plx
.10fe	60		rts				rts
.10ff					_ECBExit:
.10ff	20 20 10	jsr $1020			jsr 	ErrorHandler
>1102	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.1109					ExternPrint:
.1109	48		pha				pha
.110a	da		phx				phx
.110b	5a		phy				phy
.110c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.110f	7a		ply				ply
.1110	fa		plx				plx
.1111	68		pla				pla
.1112	60		rts				rts
.1113					ExternColour:
.1113	48		pha				pha
.1114	da		phx				phx
.1115	48		pha				pha
.1116	29 08		and #$08			and 	#8
.1118	0a		asl a				asl 	a
.1119	0a		asl a				asl 	a
.111a	0a		asl a				asl 	a
.111b	0a		asl a				asl 	a
.111c	49 92		eor #$92			eor 	#$92
.111e	20 09 11	jsr $1109			jsr 	ExternPrint
.1121	68		pla				pla
.1122	29 07		and #$07			and 	#7
.1124	aa		tax				tax
.1125	bd 2e 11	lda $112e,x			lda 	_ECTable,x
.1128	20 09 11	jsr $1109			jsr 	ExternPrint
.112b	fa		plx				plx
.112c	68		pla				pla
.112d	60		rts				rts
.112e					_ECTable:
>112e	90						.byte 	144
>112f	1c						.byte 	28
>1130	1e						.byte 	30
>1131	9e						.byte 	158
>1132	1f						.byte 	31
>1133	9c						.byte 	156
>1134	9f						.byte 	159
>1135	05						.byte 	5
.1136					ExternInput:
.1136	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.1138	85 14		sta $14				sta 	temp3
.113a	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113c	85 15		sta $15				sta 	temp3+1
.113e	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1141	29 7f		and #$7f			and 	#$7F
.1143	c9 0d		cmp #$0d			cmp 	#13
.1145	f0 0a		beq $1151			beq 	_EIExit
.1147	92 14		sta ($14)			sta 	(temp3)
.1149	e6 14		inc $14				inc 	temp3
.114b	d0 f1		bne $113e			bne 	_EIRead
.114d	e6 15		inc $15				inc 	temp3+1
.114f	80 ed		bra $113e			bra 	_EIRead
.1151	a9 00		lda #$00	_EIExit:lda 	#0
.1153	92 14		sta ($14)			sta 	(temp3)
.1155	a9 0d		lda #$0d			lda 	#13
.1157	20 09 11	jsr $1109			jsr 	ExternPrint
.115a	60		rts				rts
.115b					ExternSave:
.115b	da		phx				phx
.115c	5a		phy				phy
.115d	85 12		sta $12				sta 	temp2 						; save start
.115f	84 13		sty $13				sty 	temp2+1
.1161	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1164	a6 14		ldx $14				ldx 	temp3
.1166	a4 15		ldy $15				ldy 	temp3+1
.1168	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116b	a9 01		lda #$01			lda 	#1
.116d	a2 08		ldx #$08			ldx 	#8	 						; device #8
.116f	a0 00		ldy #$00			ldy 	#0
.1171	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1174	a6 10		ldx $10				ldx 	temp1 						; end address
.1176	a4 11		ldy $11				ldy 	temp1+1
.1178	a9 12		lda #$12			lda 	#temp2
.117a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.117d	b0 03		bcs $1182			bcs 	_ESSave
.117f	7a		ply				ply
.1180	fa		plx				plx
.1181	60		rts				rts
.1182					_ESSave:
.1182	20 20 10	jsr $1020			jsr 	ErrorHandler
>1185	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>118d	4c 45 44 00
.1191					ExternLoad:
.1191	da		phx				phx 								; save XY
.1192	5a		phy				phy
.1193	48		pha				pha 								; save target
.1194	5a		phy				phy
.1195	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1198	a6 14		ldx $14				ldx 	temp3
.119a	a4 15		ldy $15				ldy 	temp3+1
.119c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.119f	a9 01		lda #$01			lda 	#1
.11a1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a3	a0 00		ldy #$00			ldy 	#0
.11a5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11a8	7a		ply				ply 								; restore target to YX and call load
.11a9	fa		plx				plx
.11aa	a9 00		lda #$00			lda 	#0 							; load command
.11ac	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11af	b0 03		bcs $11b4			bcs 	_ESLoad
.11b1	7a		ply				ply
.11b2	fa		plx				plx
.11b3	60		rts				rts
.11b4					_ESLoad:
.11b4	20 20 10	jsr $1020			jsr 	ErrorHandler
>11b7	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11bf	4c 45 44 00
.11c3					EXGetLength:
.11c3	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c5	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11c7	d0 02		bne $11cb			bne 	_EXGLExit
.11c9	e6 15		inc $15				inc 	temp3+1
.11cb					_EXGLExit:
.11cb	60		rts				rts
.11cc					EXPrintString:
.11cc	48		pha				pha
.11cd	5a		phy				phy
.11ce	84 11		sty $11				sty 	temp1+1
.11d0	85 10		sta $10				sta 	temp1
.11d2	a0 00		ldy #$00			ldy 	#0
.11d4					_EXPSLoop:
.11d4	b1 10		lda ($10),y			lda 	(temp1),y
.11d6	f0 08		beq $11e0			beq 	_EXPSExit
.11d8	29 7f		and #$7f			and 	#$7F
.11da	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11dd	c8		iny				iny
.11de	80 f4		bra $11d4			bra 	_EXPSLoop
.11e0					_EXPSExit:
.11e0	7a		ply				ply
.11e1	68		pla				pla
.11e2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e3					Add:
.11e3	7a		ply				ply
.11e4	68		pla				pla
.11e5	18		clc				clc
.11e6	65 06		adc $06				adc 	TOS
.11e8	85 06		sta $06				sta 	TOS
.11ea	98		tya				tya
.11eb	65 07		adc $07				adc 	TOS+1
.11ed	85 07		sta $07				sta 	TOS+1
.11ef	4c 00 00	jmp $0000			jmp 	Next
.11f2					Subtract:
.11f2	7a		ply				ply
.11f3	68		pla				pla
.11f4	38		sec				sec
.11f5	49 ff		eor #$ff			eor 	#$FF
.11f7	65 06		adc $06				adc 	TOS
.11f9	85 06		sta $06				sta 	TOS
.11fb	98		tya				tya
.11fc	49 ff		eor #$ff			eor 	#$FF
.11fe	65 07		adc $07				adc 	TOS+1
.1200	85 07		sta $07				sta 	TOS+1
.1202	4c 00 00	jmp $0000			jmp 	Next
.1205					And:
.1205	68		pla				pla
.1206	25 07		and $07				and 	TOS+1
.1208	85 07		sta $07				sta 	TOS+1
.120a	68		pla				pla
.120b	25 06		and $06				and 	TOS
.120d	85 06		sta $06				sta 	TOS
.120f	4c 00 00	jmp $0000			jmp 	Next
.1212					Xor:
.1212	68		pla				pla
.1213	45 07		eor $07				eor 	TOS+1
.1215	85 07		sta $07				sta 	TOS+1
.1217	68		pla				pla
.1218	45 06		eor $06				eor 	TOS
.121a	85 06		sta $06				sta 	TOS
.121c	4c 00 00	jmp $0000			jmp 	Next
.121f					LogOr:
.121f	68		pla				pla
.1220	05 07		ora $07				ora 	TOS+1
.1222	85 07		sta $07				sta 	TOS+1
.1224	68		pla				pla
.1225	05 06		ora $06				ora 	TOS
.1227	85 06		sta $06				sta 	TOS
.1229	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122c					CheckNotEqual:
.122c	38		sec				sec
.122d	80 01		bra $1230			bra 	CECode
.122f					CheckEqual:
.122f	18		clc				clc
.1230					CECode:
.1230	86 10		stx $10				stx 	temp1
.1232	ba		tsx				tsx
.1233	08		php				php
.1234	a5 06		lda $06				lda 	TOS
.1236	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1239	d0 17		bne $1252			bne	 	CompareFalse
.123b	a5 07		lda $07				lda 	TOS+1
.123d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1240	d0 10		bne $1252			bne 	CompareFalse
.1242					CompareTrue:
.1242	a6 10		ldx $10				ldx 	temp1
.1244	28		plp				plp
.1245	b0 10		bcs $1257			bcs		CompareFalse2
.1247					CompareTrue2:
.1247	68		pla				pla
.1248	68		pla				pla
.1249	a9 ff		lda #$ff			lda 	#$FF
.124b	85 06		sta $06				sta 	TOS
.124d	85 07		sta $07				sta 	TOS+1
.124f	4c 00 00	jmp $0000			jmp 	Next
.1252					CompareFalse:
.1252	a6 10		ldx $10				ldx 	temp1
.1254	28		plp				plp
.1255	b0 f0		bcs $1247			bcs		CompareTrue2
.1257					CompareFalse2:
.1257	68		pla				pla
.1258	68		pla				pla
.1259	64 06		stz $06				stz 	TOS
.125b	64 07		stz $07				stz 	TOS+1
.125d	4c 00 00	jmp $0000			jmp 	Next
.1260					CheckGreaterEq:
.1260	38		sec				sec
.1261	80 01		bra $1264			bra		CLCode
.1263					CheckLess:
.1263	18		clc				clc
.1264	86 10		stx $10		CLCode:	stx 	temp1
.1266	ba		tsx				tsx
.1267	08		php				php
.1268	18		clc				clc
.1269	a5 06		lda $06				lda 	TOS
.126b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.126e	a5 07		lda $07				lda 	TOS+1
.1270	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1273	50 02		bvc $1277			bvc 	_CLNoFlip
.1275	49 80		eor #$80			eor 	#$80
.1277					_CLNoFlip:
.1277	0a		asl a				asl 	a
.1278	b0 d8		bcs $1252			bcs 	CompareFalse
.127a	80 c6		bra $1242			bra 	CompareTrue
.127c					CheckLessEq:
.127c	38		sec				sec
.127d	80 01		bra $1280			bra		CGCode
.127f					CheckGreater:
.127f	18		clc				clc
.1280					CGCode:
.1280	86 10		stx $10				stx 	temp1
.1282	ba		tsx				tsx
.1283	08		php				php
.1284	18		clc				clc
.1285	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1288	e5 06		sbc $06				sbc 	TOS
.128a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.128d	e5 07		sbc $07				sbc 	TOS+1
.128f	50 02		bvc $1293			bvc 	_CGNoFlip
.1291	49 80		eor #$80			eor 	#$80
.1293					_CGNoFlip:
.1293	0a		asl a				asl 	a
.1294	b0 bc		bcs $1252			bcs 	CompareFalse
.1296	80 aa		bra $1242			bra 	CompareTrue
.1298					Minimum:
.1298	a9 00		lda #$00			lda 	#0
.129a	80 02		bra $129e			bra 	MinMaxCode
.129c					Maximum:
.129c	a9 80		lda #$80			lda 	#$80
.129e					MinMaxCode:
.129e	85 11		sta $11				sta 	temp1+1
.12a0	86 10		stx $10				stx 	temp1
.12a2	ba		tsx				tsx
.12a3	38		sec				sec
.12a4	a5 06		lda $06				lda 	TOS
.12a6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12a9	a5 07		lda $07				lda 	TOS+1
.12ab	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12ae	50 02		bvc $12b2			bvc 	_MMNoFlip
.12b0	49 80		eor #$80			eor 	#$80
.12b2					_MMNoFlip:
.12b2	45 11		eor $11				eor 	temp1+1
.12b4	30 0a		bmi $12c0			bmi 	_MMNoCopy
.12b6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12b9	85 06		sta $06				sta 	TOS
.12bb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12be	85 07		sta $07				sta 	TOS+1
.12c0					_MMNoCopy:
.12c0	a6 10		ldx $10				ldx 	temp1
.12c2	68		pla				pla
.12c3	68		pla				pla
.12c4	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12c7					Divide16x16:
.12c7	86 12		stx $12				stx 	temp2
.12c9	ba		tsx				tsx
.12ca	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12cd	68		pla				pla
.12ce	85 07		sta $07				sta 	TOS+1
.12d0	68		pla				pla
.12d1	85 06		sta $06				sta 	TOS
.12d3	a6 12		ldx $12				ldx 	temp2
.12d5	4c 00 00	jmp $0000			jmp 	Next
.12d8					Modulus16x16:
.12d8	86 12		stx $12				stx 	temp2
.12da	ba		tsx				tsx
.12db	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12de	a6 12		ldx $12				ldx 	temp2
.12e0	68		pla				pla
.12e1	68		pla				pla
.12e2	a5 10		lda $10				lda 	temp1
.12e4	85 06		sta $06				sta 	TOS
.12e6	a5 11		lda $11				lda 	temp1+1
.12e8	85 07		sta $07				sta 	TOS+1
.12ea	4c 00 00	jmp $0000			jmp 	Next
.12ed					IntegerDivide:
.12ed	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12ef	05 07		ora $07				ora 	TOS+1
.12f1	d0 14		bne $1307			bne 	_BFDOkay
.12f3	20 20 10	jsr $1020			jsr 	ErrorHandler
>12f6	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>12fe	20 42 59 20 5a 45 52 4f 00
.1307					_BFDOkay:
.1307	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.1309	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130b	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.130d	20 48 13	jsr $1348			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1310	20 62 13	jsr $1362			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1313	5a		phy				phy 								; Y is the counter
.1314	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1316					_BFDLoop:
.1316	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1319	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131c	26 10		rol $10				rol 	temp1
.131e	26 11		rol $11				rol 	temp1+1
.1320	38		sec				sec
.1321	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1323	e5 06		sbc $06				sbc 	TOS
.1325	48		pha				pha
.1326	a5 11		lda $11				lda 	temp1+1
.1328	e5 07		sbc $07				sbc 	TOS+1
.132a	90 0f		bcc $133b			bcc 	_BFDNoAdd
.132c	85 11		sta $11				sta 	temp1+1
.132e	68		pla				pla
.132f	85 10		sta $10				sta 	temp1+0
.1331	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1334	09 01		ora #$01			ora 	#1
.1336	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1339	80 01		bra $133c			bra 	_BFDNext
.133b					_BFDNoAdd:
.133b	68		pla				pla 								; Throw away the intermediate calculations
.133c					_BFDNext:
.133c	88		dey				dey
.133d	d0 d7		bne $1316			bne 	_BFDLoop
.133f	7a		ply				ply 								; restore Y
.1340	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1342	90 03		bcc $1347			bcc 	_BFDUnsigned 				; then the result is signed
.1344	20 4e 13	jsr $134e			jsr		IntegerNegateAlways 		; negate the result
.1347					_BFDUnsigned:
.1347	60		rts				rts
.1348					CheckIntegerNegate:
.1348	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134b	30 01		bmi $134e			bmi 	IntegerNegateAlways 		; if so negate it
.134d	60		rts				rts
.134e					IntegerNegateAlways:
.134e	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1350	38		sec				sec 								; negate
.1351	a9 00		lda #$00			lda 	#0
.1353	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1356	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1359	a9 00		lda #$00			lda 	#0
.135b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.135e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1361	60		rts				rts
.1362					CheckTOSNegate:
.1362	a5 07		lda $07				lda 	TOS+1
.1364	10 0f		bpl $1375			bpl		CTNNoChange
.1366	e6 1a		inc $1a				inc 	SignCount
.1368					TOSNegateAlways:
.1368	38		sec				sec
.1369	a9 00		lda #$00			lda 	#0
.136b	e5 06		sbc $06				sbc 	TOS
.136d	85 06		sta $06				sta 	TOS
.136f	a9 00		lda #$00			lda 	#0
.1371	e5 07		sbc $07				sbc 	TOS+1
.1373	85 07		sta $07				sta 	TOS+1
.1375					CTNNoChange:
.1375	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1376					Multiply16x16:
.1376	86 10		stx $10				stx 	temp1
.1378	ba		tsx				tsx
.1379	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137c	85 12		sta $12				sta 	temp2
.137e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1381	85 13		sta $13				sta 	temp2+1
.1383	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1386	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1389					_MultLoop:
.1389	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138b	66 12		ror $12				ror 	temp2
.138d	90 11		bcc $13a0			bcc 	_MultNoAdd
.138f	18		clc				clc 								; add 1st to 2nd
.1390	a5 06		lda $06				lda 	TOS
.1392	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1395	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1398	a5 07		lda $07				lda 	TOS+1
.139a	7d 01 01	adc $0101,x			adc 	Stack2High,x
.139d	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a0					_MultNoAdd:
.13a0	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a2	26 07		rol $07				rol 	TOS+1
.13a4	a5 12		lda $12				lda 	temp2	 					; until zero
.13a6	05 13		ora $13				ora 	temp2+1
.13a8	d0 df		bne $1389			bne 	_MultLoop
.13aa	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ac	68		pla				pla
.13ad	85 07		sta $07				sta 	TOS+1
.13af	68		pla				pla
.13b0	85 06		sta $06				sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b5					Unary1Plus:
.13b5	e6 06		inc $06				inc 	TOS
.13b7	d0 02		bne $13bb			bne 	_U1PSkip
.13b9	e6 07		inc $07				inc 	TOS+1
.13bb					_U1PSkip:
.13bb	4c 00 00	jmp $0000			jmp 	Next
.13be					Unary2Plus:
.13be	18		clc				clc
.13bf	a5 06		lda $06				lda 	TOS
.13c1	69 02		adc #$02			adc 	#2
.13c3	85 06		sta $06				sta 	TOS
.13c5	90 02		bcc $13c9			bcc 	_U1PSkip
.13c7	e6 07		inc $07				inc 	TOS+1
.13c9					_U1PSkip:
.13c9	4c 00 00	jmp $0000			jmp 	Next
.13cc					Unary1Minus:
.13cc	a5 06		lda $06				lda 	TOS
.13ce	d0 02		bne $13d2			bne 	_U1MSkip
.13d0	c6 07		dec $07				dec 	TOS+1
.13d2					_U1MSkip:
.13d2	c6 06		dec $06				dec 	TOS
.13d4	4c 00 00	jmp $0000			jmp 	Next
.13d7					Unary2Minus:
.13d7	38		sec				sec
.13d8	a5 06		lda $06				lda 	TOS
.13da	e9 02		sbc #$02			sbc 	#2
.13dc	85 06		sta $06				sta 	TOS
.13de	b0 02		bcs $13e2			bcs 	_U1PSkip
.13e0	c6 07		dec $07				dec 	TOS+1
.13e2					_U1PSkip:
.13e2	4c 00 00	jmp $0000			jmp 	Next
.13e5					Absolute:
.13e5	a5 07		lda $07				lda 	TOS+1
.13e7	30 03		bmi $13ec			bmi 	Negate
.13e9	4c 00 00	jmp $0000			jmp 	Next
.13ec					Negate:
.13ec	38		sec				sec
.13ed	a9 00		lda #$00			lda 	#0
.13ef	e5 06		sbc $06				sbc 	TOS
.13f1	85 06		sta $06				sta 	TOS
.13f3	a9 00		lda #$00			lda 	#0
.13f5	e5 07		sbc $07				sbc 	TOS+1
.13f7	85 07		sta $07				sta 	TOS+1
.13f9	4c 00 00	jmp $0000			jmp 	Next
.13fc					OneComplement:
.13fc	a5 06		lda $06				lda 	TOS
.13fe	49 ff		eor #$ff			eor 	#$FF
.1400	85 06		sta $06				sta 	TOS
.1402	a5 07		lda $07				lda 	TOS+1
.1404	49 ff		eor #$ff			eor 	#$FF
.1406	85 07		sta $07				sta 	TOS+1
.1408	4c 00 00	jmp $0000			jmp 	Next
.140b					CheckMinus:
.140b	a5 07		lda $07				lda 	TOS+1
.140d	30 07		bmi $1416			bmi 	UnaryTrue
.140f					UnaryFalse:
.140f	64 06		stz $06				stz 	TOS
.1411	64 07		stz $07				stz 	TOS+1
.1413	4c 00 00	jmp $0000			jmp 	Next
.1416					UnaryTrue:
.1416	a9 ff		lda #$ff			lda 	#$FF
.1418	85 06		sta $06				sta 	TOS
.141a	85 07		sta $07				sta 	TOS+1
.141c	4c 00 00	jmp $0000			jmp 	Next
.141f					CheckZero:
.141f	a5 06		lda $06				lda 	TOS
.1421	05 07		ora $07				ora 	TOS+1
.1423	d0 ea		bne $140f			bne 	UnaryFalse
.1425	80 ef		bra $1416			bra 	UnaryTrue
.1427					SignTOS:
.1427	a5 07		lda $07				lda 	TOS+1
.1429	30 eb		bmi $1416			bmi		UnaryTrue
.142b	05 06		ora $06				ora 	TOS
.142d	f0 e0		beq $140f			beq 	UnaryFalse
.142f	a9 01		lda #$01			lda 	#1
.1431	85 06		sta $06				sta 	TOS
.1433	64 07		stz $07				stz		TOS+1
.1435	4c 00 00	jmp $0000			jmp 	Next
.1438					ByteSwap:
.1438	a5 06		lda $06				lda 	TOS
.143a	a4 07		ldy $07				ldy 	TOS+1
.143c	85 07		sta $07				sta 	TOS+1
.143e	84 06		sty $06				sty 	TOS
.1440	4c 00 00	jmp $0000			jmp 	Next
.1443					Times16:
.1443	06 06		asl $06				asl 	TOS
.1445	26 07		rol $07				rol 	TOS+1
.1447					Times8:
.1447	06 06		asl $06				asl 	TOS
.1449	26 07		rol $07				rol 	TOS+1
.144b					Times4:
.144b	06 06		asl $06				asl 	TOS
.144d	26 07		rol $07				rol 	TOS+1
.144f					Times2:
.144f	06 06		asl $06				asl 	TOS
.1451	26 07		rol $07				rol 	TOS+1
.1453	4c 00 00	jmp $0000			jmp 	Next
.1456					Divide16:
.1456	46 07		lsr $07				lsr 	TOS+1
.1458	66 06		ror $06				ror 	TOS
.145a					Divide8:
.145a	46 07		lsr $07				lsr 	TOS+1
.145c	66 06		ror $06				ror 	TOS
.145e					Divide4:
.145e	46 07		lsr $07				lsr 	TOS+1
.1460	66 06		ror $06				ror 	TOS
.1462					Divide2:
.1462	46 07		lsr $07				lsr 	TOS+1
.1464	66 06		ror $06				ror 	TOS
.1466	4c 00 00	jmp $0000			jmp 	Next
.1469					Times256:
.1469	a5 06		lda $06				lda 	TOS
.146b	85 07		sta $07				sta 	TOS+1
.146d	64 06		stz $06				stz 	TOS
.146f	4c 00 00	jmp $0000			jmp 	Next
.1472					Divide256:
.1472	a5 07		lda $07				lda 	TOS+1
.1474	85 06		sta $06				sta 	TOS
.1476	64 07		stz $07				stz 	TOS+1
.1478	4c 00 00	jmp $0000			jmp 	Next
.147b					RandomNumber:
.147b	a5 06		lda $06				lda 	TOS
.147d	48		pha				pha
.147e	a5 07		lda $07				lda 	TOS+1
.1480	48		pha				pha
.1481	a5 1b		lda $1b				lda 	randomSeed
.1483	05 1c		ora $1c				ora 	randomSeed+1
.1485	d0 08		bne $148f			bne 	_RH_NoInit
.1487	a9 7c		lda #$7c			lda 	#$7C
.1489	85 1b		sta $1b				sta 	randomSeed
.148b	a9 a1		lda #$a1			lda 	#$A1
.148d	85 1c		sta $1c				sta 	randomSeed+1
.148f					_RH_NoInit:
.148f	a5 1b		lda $1b				lda 	randomSeed
.1491	4a		lsr a		        lsr		a
.1492	26 1c		rol $1c		        rol 	randomSeed+1
.1494	90 02		bcc $1498	        bcc 	_RH_NoEor
.1496	49 b4		eor #$b4	        eor 	#$B4
.1498					_RH_NoEor:
.1498	85 1b		sta $1b		        sta 	randomSeed
.149a	45 1c		eor $1c		        eor 	randomSeed+1
.149c	85 07		sta $07		        sta 	TOS+1
.149e	a5 1b		lda $1b		        lda 	randomSeed
.14a0	85 06		sta $06		        sta 	TOS
.14a2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a5					Constant0:
.14a5	a5 06		lda $06				lda 	TOS
.14a7	48		pha				pha
.14a8	a5 07		lda $07				lda 	TOS+1
.14aa	48		pha				pha
.14ab	64 06		stz $06				stz 	TOS
.14ad	64 07		stz $07				stz 	TOS+1
.14af	4c 00 00	jmp $0000			jmp 	Next
.14b2					ConstantMinus1:
.14b2	a5 06		lda $06				lda 	TOS
.14b4	48		pha				pha
.14b5	a5 07		lda $07				lda 	TOS+1
.14b7	48		pha				pha
.14b8	a9 ff		lda #$ff			lda 	#$FF
.14ba	85 06		sta $06				sta 	TOS
.14bc	85 07		sta $07				sta 	TOS+1
.14be	4c 00 00	jmp $0000			jmp 	Next
.14c1					C1:
.14c1	a0 01		ldy #$01			ldy 	#1
.14c3	80 24		bra $14e9			bra 	Const1Byte
.14c5					C2:
.14c5	a0 02		ldy #$02			ldy 	#2
.14c7	80 20		bra $14e9			bra 	Const1Byte
.14c9					C3:
.14c9	a0 03		ldy #$03			ldy 	#3
.14cb	80 1c		bra $14e9			bra 	Const1Byte
.14cd					C4:
.14cd	a0 04		ldy #$04			ldy 	#4
.14cf	80 18		bra $14e9			bra 	Const1Byte
.14d1					C5:
.14d1	a0 05		ldy #$05			ldy 	#5
.14d3	80 14		bra $14e9			bra 	Const1Byte
.14d5					C8:
.14d5	a0 08		ldy #$08			ldy 	#8
.14d7	80 10		bra $14e9			bra 	Const1Byte
.14d9					C10:
.14d9	a0 0a		ldy #$0a			ldy 	#10
.14db	80 0c		bra $14e9			bra 	Const1Byte
.14dd					C15:
.14dd	a0 0f		ldy #$0f			ldy 	#15
.14df	80 08		bra $14e9			bra 	Const1Byte
.14e1					C16:
.14e1	a0 10		ldy #$10			ldy 	#16
.14e3	80 04		bra $14e9			bra 	Const1Byte
.14e5					C24:
.14e5	a0 18		ldy #$18			ldy 	#24
.14e7	80 00		bra $14e9			bra 	Const1Byte
.14e9					Const1Byte:
.14e9	a5 06		lda $06				lda 	TOS
.14eb	48		pha				pha
.14ec	a5 07		lda $07				lda 	TOS+1
.14ee	48		pha				pha
.14ef	84 06		sty $06				sty 	TOS
.14f1	64 07		stz $07				stz 	TOS+1
.14f3	4c 00 00	jmp $0000			jmp 	Next
.14f6					C32:
.14f6	a0 20		ldy #$20			ldy 	#32
.14f8	80 ef		bra $14e9			bra 	Const1Byte
.14fa					C63:
.14fa	a0 3f		ldy #$3f			ldy 	#63
.14fc	80 eb		bra $14e9			bra 	Const1Byte
.14fe					C64:
.14fe	a0 40		ldy #$40			ldy 	#64
.1500	80 e7		bra $14e9			bra 	Const1Byte
.1502					C100:
.1502	a0 64		ldy #$64			ldy 	#100
.1504	80 e3		bra $14e9			bra 	Const1Byte
.1506					C127:
.1506	a0 7f		ldy #$7f			ldy 	#127
.1508	80 df		bra $14e9			bra 	Const1Byte
.150a					C128:
.150a	a0 80		ldy #$80			ldy 	#128
.150c	80 db		bra $14e9			bra 	Const1Byte
.150e					C255:
.150e	a0 ff		ldy #$ff			ldy 	#255
.1510	80 d7		bra $14e9			bra 	Const1Byte
.1512					Const2Byte:
.1512	85 06		sta $06				sta 	TOS
.1514	84 07		sty $07				sty 	TOS+1
.1516	4c 00 00	jmp $0000			jmp 	Next
.1519					C256:
.1519	a5 06		lda $06				lda 	TOS
.151b	48		pha				pha
.151c	a5 07		lda $07				lda 	TOS+1
.151e	48		pha				pha
.151f	a9 00		lda #$00			lda 	#(256) & $FF
.1521	a0 01		ldy #$01			ldy 	#(256) >> 8
.1523	80 ed		bra $1512			bra 	Const2Byte
.1525					C512:
.1525	a5 06		lda $06				lda 	TOS
.1527	48		pha				pha
.1528	a5 07		lda $07				lda 	TOS+1
.152a	48		pha				pha
.152b	a9 00		lda #$00			lda 	#(512) & $FF
.152d	a0 02		ldy #$02			ldy 	#(512) >> 8
.152f	80 e1		bra $1512			bra 	Const2Byte
.1531					C1024:
.1531	a5 06		lda $06				lda 	TOS
.1533	48		pha				pha
.1534	a5 07		lda $07				lda 	TOS+1
.1536	48		pha				pha
.1537	a9 00		lda #$00			lda 	#(1024) & $FF
.1539	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153b	80 d5		bra $1512			bra 	Const2Byte
.153d					C4096:
.153d	a5 06		lda $06				lda 	TOS
.153f	48		pha				pha
.1540	a5 07		lda $07				lda 	TOS+1
.1542	48		pha				pha
.1543	a9 00		lda #$00			lda 	#(4096) & $FF
.1545	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1547	80 c9		bra $1512			bra 	Const2Byte
.1549					C32767:
.1549	a5 06		lda $06				lda 	TOS
.154b	48		pha				pha
.154c	a5 07		lda $07				lda 	TOS+1
.154e	48		pha				pha
.154f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1551	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1553	80 bd		bra $1512			bra 	Const2Byte
.1555					C32768:
.1555	a5 06		lda $06				lda 	TOS
.1557	48		pha				pha
.1558	a5 07		lda $07				lda 	TOS+1
.155a	48		pha				pha
.155b	a9 00		lda #$00			lda 	#(32768) & $FF
.155d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.155f	80 b1		bra $1512			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1561					Drop:
.1561	68		pla				pla
.1562	85 07		sta $07				sta 	TOS+1
.1564	68		pla				pla
.1565	85 06		sta $06				sta 	TOS
.1567	4c 00 00	jmp $0000			jmp 	Next
.156a					TestDup:
.156a	a5 06		lda $06				lda 	TOS
.156c	05 07		ora $07				ora 	TOS+1
.156e	d0 03		bne $1573			bne 	Dup
.1570	4c 00 00	jmp $0000			jmp 	Next
.1573					Dup:
.1573	a5 06		lda $06				lda 	TOS
.1575	48		pha				pha
.1576	a5 07		lda $07				lda 	TOS+1
.1578	48		pha				pha
.1579	4c 00 00	jmp $0000			jmp 	Next
.157c					Swap:
.157c	86 10		stx $10				stx 	temp1
.157e	7a		ply				ply
.157f	fa		plx				plx
.1580	a5 06		lda $06				lda 	TOS
.1582	48		pha				pha
.1583	a5 07		lda $07				lda 	TOS+1
.1585	48		pha				pha
.1586	86 06		stx $06				stx 	TOS
.1588	84 07		sty $07				sty 	TOS+1
.158a	a6 10		ldx $10				ldx 	temp1
.158c	4c 00 00	jmp $0000			jmp 	Next
.158f					Over:
.158f	a5 06		lda $06				lda 	TOS
.1591	48		pha				pha
.1592	a5 07		lda $07				lda 	TOS+1
.1594	48		pha				pha
.1595	86 10		stx $10				stx 	temp1
.1597	ba		tsx				tsx
.1598	bd 04 01	lda $0104,x			lda 	stack3low,x
.159b	85 06		sta $06				sta 	TOS
.159d	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a0	85 07		sta $07				sta 	TOS+1
.15a2	a6 10		ldx $10				ldx 	temp1
.15a4	4c 00 00	jmp $0000			jmp 	Next
.15a7					Nip:
.15a7	68		pla				pla
.15a8	68		pla				pla
.15a9	4c 00 00	jmp $0000			jmp 	Next
.15ac					Rot:
.15ac	86 10		stx $10				stx 	temp1
.15ae	ba		tsx				tsx
.15af	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b2	a8		tay				tay
.15b3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15b9	a5 06		lda $06				lda 	TOS
.15bb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15be	84 06		sty $06				sty 	TOS
.15c0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c3	a8		tay				tay
.15c4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15c7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15ca	a5 07		lda $07				lda 	TOS+1
.15cc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15cf	84 07		sty $07				sty 	TOS+1
.15d1	a6 10		ldx $10				ldx 	temp1
.15d3	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d6					ByteRead:
.15d6	b2 06		lda ($06)			lda 	(TOS)
.15d8	85 06		sta $06				sta 	TOS
.15da	64 07		stz $07				stz 	TOS+1
.15dc	4c 00 00	jmp $0000			jmp 	Next
.15df					WordRead:
.15df	a0 01		ldy #$01			ldy 	#1
.15e1	b1 06		lda ($06),y			lda 	(TOS),y
.15e3	a8		tay				tay
.15e4	b2 06		lda ($06)			lda 	(TOS)
.15e6	85 06		sta $06				sta 	TOS
.15e8	84 07		sty $07				sty 	TOS+1
.15ea	4c 00 00	jmp $0000			jmp 	Next
.15ed					ByteWrite:
.15ed	68		pla				pla
.15ee	68		pla				pla
.15ef	92 06		sta ($06)			sta 	(TOS)
.15f1	68		pla				pla
.15f2	85 07		sta $07				sta 	TOS+1
.15f4	68		pla				pla
.15f5	85 06		sta $06				sta 	TOS
.15f7	4c 00 00	jmp $0000			jmp 	Next
.15fa					WordWrite:
.15fa	68		pla				pla
.15fb	a0 01		ldy #$01			ldy 	#1
.15fd	91 06		sta ($06),y			sta 	(TOS),y
.15ff	68		pla				pla
.1600	92 06		sta ($06)			sta 	(TOS)
.1602	68		pla				pla
.1603	85 07		sta $07				sta 	TOS+1
.1605	68		pla				pla
.1606	85 06		sta $06				sta 	TOS
.1608	4c 00 00	jmp $0000			jmp 	Next
.160b					WordAdd:
.160b	7a		ply				ply
.160c	68		pla				pla
.160d	18		clc				clc
.160e	72 06		adc ($06)			adc 	(TOS)
.1610	92 06		sta ($06)			sta 	(TOS)
.1612	98		tya				tya
.1613	a0 01		ldy #$01			ldy 	#1
.1615	71 06		adc ($06),y			adc 	(TOS),y
.1617	91 06		sta ($06),y			sta 	(TOS),y
.1619	68		pla				pla
.161a	85 07		sta $07				sta 	TOS+1
.161c	68		pla				pla
.161d	85 06		sta $06				sta 	TOS
.161f	4c 00 00	jmp $0000			jmp 	Next
.1622					AllocateMemory:
.1622	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1624	48		pha				pha
.1625	a5 07		lda $07				lda 	TOS+1
.1627	48		pha				pha
.1628	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162a	85 06		sta $06				sta 	TOS
.162c	a5 0f		lda $0f				lda 	nextFreeMem+1
.162e	85 07		sta $07				sta 	TOS+1
.1630	7a		ply				ply 								; advance the free ram pointer
.1631	68		pla				pla
.1632	20 65 18	jsr $1865			jsr 	AdvanceFreeMem
.1635	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1638					ForHandler:
.1638	e6 05		inc $05				inc 	rsp 						; bump the RSP
.163a	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.163c	c0 40		cpy #$40			cpy 	#$40 						; overflow
.163e	f0 18		beq $1658			beq 	_FHOverflow
.1640	a5 07		lda $07				lda 	TOS+1
.1642	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1645	a5 06		lda $06				lda 	TOS
.1647	99 00 07	sta $0700,y			sta 	returnStackLow,y
.164a	a9 ff		lda #$ff			lda 	#$FF
.164c	99 80 07	sta $0780,y			sta 	returnStackX,y
.164f	68		pla				pla
.1650	85 07		sta $07				sta 	TOS+1
.1652	68		pla				pla
.1653	85 06		sta $06				sta 	TOS
.1655	4c 00 00	jmp $0000			jmp 	Next
.1658					_FHOverflow:
.1658	20 20 10	jsr $1020			jsr 	ErrorHandler
>165b	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>1663	4b 3f 00
.1666					NextHandler:
.1666	da		phx				phx
.1667	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1669	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.166c	c9 ff		cmp #$ff			cmp 	#$FF
.166e	d0 21		bne $1691			bne 	NHNoFor
.1670	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1673	d0 03		bne $1678			bne 	_NHNoBorrow
.1675	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1678					_NHNoBorrow:
.1678	de 00 07	dec $0700,x			dec 	returnStackLow,x
.167b	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.167e	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.1681	fa		plx				plx 								; restore X and re-test
.1682	09 00		ora #$00			ora 	#0
.1684	f0 05		beq $168b			beq 	_NHComplete 				; if so then complete, else loop.
.1686	e8		inx				inx 								; advance to branch
.1687	e8		inx				inx
.1688	4c e4 16	jmp $16e4			jmp 	BranchAlways
.168b					_NHComplete:
.168b	e8		inx				inx 								; skip over the branch quantity
.168c	c6 05		dec $05				dec 	rsp 						; drop the indx
.168e	4c 00 00	jmp $0000			jmp 	Next
.1691					NHNoFor:
.1691	20 20 10	jsr $1020			jsr 	ErrorHandler
>1694	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.169c					GetIndex:
.169c	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.169e	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.16a1	c9 ff		cmp #$ff			cmp 	#$FF
.16a3	d0 ec		bne $1691			bne 	NHNoFor
.16a5	a5 06		lda $06				lda 	TOS
.16a7	48		pha				pha
.16a8	a5 07		lda $07				lda 	TOS+1
.16aa	48		pha				pha
.16ab	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.16ae	38		sec				sec
.16af	e9 01		sbc #$01			sbc 	#1
.16b1	85 06		sta $06				sta 	TOS
.16b3	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.16b6	e9 00		sbc #$00			sbc 	#0
.16b8	85 07		sta $07				sta 	TOS+1
.16ba	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.16bd					IfHandler:
.16bd	4c cc 16	jmp $16cc			jmp 	BranchIfZero
.16c0					ElseHandler:
.16c0	4c e2 16	jmp $16e2			jmp 	BranchTestSucceedsNoPop
.16c3					EndIfHandler:
.16c3	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.16c6					RepeatHandler:
.16c6	4c 00 00	jmp $0000			jmp 	Next
.16c9					UntilHandler:
.16c9	4c cc 16	jmp $16cc			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.16cc					BranchIfZero:
.16cc	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.16ce	05 07		ora $07				ora 	TOS+1
.16d0	f0 0a		beq $16dc			beq 	BranchTestSucceeds
.16d2					BranchTestFails:
.16d2	68		pla				pla
.16d3	85 07		sta $07				sta 	TOS+1
.16d5	68		pla				pla
.16d6	85 06		sta $06				sta 	TOS
.16d8	e8		inx				inx 								; skip over the relative branch.
.16d9	4c 00 00	jmp $0000			jmp 	Next
.16dc					BranchTestSucceeds:
.16dc	68		pla				pla
.16dd	85 07		sta $07				sta 	TOS+1
.16df	68		pla				pla
.16e0	85 06		sta $06				sta 	TOS
.16e2					BranchTestSucceedsNoPop:
.16e2	e8		inx				inx 								; advance by two, to the offset
.16e3	e8		inx				inx
.16e4					BranchAlways:
.16e4	8a		txa				txa 								; A = Y = position
.16e5	a8		tay				tay 								; (IP),Y now points to the branch target
.16e6	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.16e8	aa		tax				tax 								; position back in this line.
.16e9	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.16ec					CallHandler:
.16ec	e8		inx				inx									; bump X to the call address.
.16ed	e8		inx				inx
.16ee	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.16f0	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.16f2	c0 40		cpy #$40			cpy 	#$40 						; overflow
.16f4	f0 4b		beq $1741			beq 	_CHOverflow
.16f6	a5 04		lda $04				lda 	IP+1
.16f8	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.16fb	a5 03		lda $03				lda 	IP
.16fd	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1700	8a		txa				txa
.1701	99 80 07	sta $0780,y			sta 	returnStackX,y
.1704	8a		txa				txa 								; get the line number into temp1.
.1705	a8		tay				tay
.1706	b1 03		lda ($03),y			lda 	(IP),y
.1708	85 10		sta $10				sta 	temp1
.170a	c8		iny				iny
.170b	b1 03		lda ($03),y			lda 	(IP),y
.170d	85 11		sta $11				sta 	temp1+1
.170f	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1711	85 03		sta $03				sta 	0+(IP)
.1713	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1715	85 04		sta $04				sta 	1+(IP)
.1717	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1719	f0 17		beq $1732			beq 	_CHFail
.171b	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.171d					_CHSearch:
.171d	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.171f	c5 10		cmp $10				cmp 	temp1
.1721	f0 2d		beq $1750			beq 	_CHFoundLSB
.1723					_CHSearchNext:
.1723	18		clc				clc
.1724	a5 03		lda $03				lda 	IP
.1726	72 03		adc ($03)			adc 	(IP)
.1728	85 03		sta $03				sta 	IP
.172a	90 02		bcc $172e			bcc 	_NoCarryAdv
.172c	e6 04		inc $04				inc 	IP+1
.172e					_NoCarryAdv:
.172e	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1730	d0 eb		bne $171d			bne 	_CHSearch
.1732					_CHFail:
.1732	20 20 10	jsr $1020			jsr 	ErrorHandler
>1735	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>173d	4f 4e 3f 00
.1741					_CHOverflow:
.1741	20 20 10	jsr $1020			jsr 	ErrorHandler
>1744	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>174c	54 48 3f 00
.1750					_CHFoundLSB:
.1750	c8		iny				iny 								; get MSB
.1751	b1 03		lda ($03),y			lda 	(IP),y
.1753	88		dey				dey
.1754	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1756	d0 cb		bne $1723			bne 	_CHSearchNext
.1758	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.175a	b1 03		lda ($03),y			lda 	(IP),y
.175c	c9 aa		cmp #$aa			cmp 	#DefineCode & $FF
.175e	d0 d2		bne $1732			bne 	_CHFail
.1760	c8		iny				iny
.1761	b1 03		lda ($03),y			lda 	(IP),y
.1763	c9 1b		cmp #$1b			cmp 	#DefineCode >> 8
.1765	d0 cb		bne $1732			bne 	_CHFail
.1767	c8		iny				iny
.1768	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.176a	18		clc				clc
.176b	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.176d	aa		tax				tax
.176e	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.1771					ReturnHandler:
.1771	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1773	30 15		bmi $178a			bmi 	_RHUnderflow 				; if -ve underflowed
.1775	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1777	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.177a	85 04		sta $04				sta 	IP+1
.177c	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.177f	85 03		sta $03				sta 	IP
.1781	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1784	aa		tax				tax
.1785	f0 0e		beq $1795			beq 	_RHInLoop 					; this means you have done :something for ; next
.1787	4c 00 00	jmp $0000			jmp 	Next
.178a					_RHUnderflow:
.178a	20 20 10	jsr $1020			jsr 	ErrorHandler
>178d	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1795					_RHInLoop:
.1795	20 20 10	jsr $1020			jsr 	ErrorHandler
>1798	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>17a0	4e 20 4c 4f 4f 50 3f 00
.17a8					CallHandlerDecode:
.17a8	a9 03		lda #$03			lda 	#CTH_Call					; space
.17aa	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.17ad	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.17af	aa		tax				tax
.17b0	c8		iny				iny
.17b1	b1 08		lda ($08),y			lda 	(srcPtr),y
.17b3	a8		tay				tay
.17b4	8a		txa				txa
.17b5	20 f2 17	jsr $17f2			jsr 	FindLine 					; try to locate that line.
.17b8	b0 11		bcs $17cb			bcs 	_CHDFound 					; if found .....
.17ba					_CHDLineOnly:
.17ba	48		pha				pha
.17bb	a9 3c		lda #$3c			lda 	#"<"
.17bd	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.17c0	68		pla				pla
.17c1	18		clc				clc 								; output unsigned
.17c2	20 8a 19	jsr $198a			jsr 	DecodeYAToBuffer
.17c5	a9 3e		lda #$3e			lda 	#">"
.17c7	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.17ca	60		rts				rts
.17cb					_CHDFound:
.17cb	48		pha				pha 								; save YA
.17cc	5a		phy				phy
.17cd	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.17cf	b1 10		lda ($10),y			lda 	(temp1),y
.17d1	c9 aa		cmp #$aa			cmp 	#DefineCode & 255
.17d3	d0 07		bne $17dc			bne 	_CHDNoDefine
.17d5	c8		iny				iny
.17d6	b1 10		lda ($10),y			lda 	(temp1),y
.17d8	c9 1b		cmp #$1b			cmp 	#DefineCode >> 8
.17da	f0 04		beq $17e0			beq 	_CHDFoundDefine
.17dc					_CHDNoDefine:
.17dc	7a		ply				ply									; restore the line number and print it in <>
.17dd	68		pla				pla
.17de	80 da		bra $17ba			bra 	_CHDLineOnly
.17e0					_CHDFoundDefine:
.17e0	68		pla				pla 								; throw saved line number.
.17e1	68		pla				pla
.17e2	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.17e4					_CHDOutName:
.17e4	c8		iny				iny 								; next
.17e5	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.17e7	48		pha				pha
.17e8	29 7f		and #$7f			and 	#$7F
.17ea	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.17ed	68		pla				pla
.17ee	0a		asl a				asl 	a 							; bit 7 to carry
.17ef	90 f3		bcc $17e4			bcc 	_CHDOutName
.17f1	60		rts				rts
.17f2					FindLine:
.17f2	48		pha				pha 								; save registers
.17f3	da		phx				phx
.17f4	5a		phy				phy
.17f5	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.17f7	84 13		sty $13				sty 	temp2+1
.17f9	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17fb	85 10		sta $10				sta 	0+(temp1)
.17fd	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17ff	85 11		sta $11				sta 	1+(temp1)
.1801					_FLLoop:
.1801	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1803	18		clc				clc									; if so exit with CC.
.1804	f0 1d		beq $1823			beq 	_FLExit
.1806	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1808	b1 10		lda ($10),y			lda 	(temp1),y
.180a	c5 12		cmp $12				cmp 	temp2
.180c	d0 08		bne $1816			bne 	_FLNext
.180e	c8		iny				iny
.180f	b1 10		lda ($10),y			lda 	(temp1),y
.1811	c5 13		cmp $13				cmp 	temp2+1
.1813	38		sec				sec 								; if so exit with CS
.1814	f0 0d		beq $1823			beq 	_FLExit
.1816					_FLNext:
.1816	18		clc				clc
.1817	a5 10		lda $10				lda 	temp1
.1819	72 10		adc ($10)			adc 	(temp1)
.181b	85 10		sta $10				sta 	temp1
.181d	90 02		bcc $1821			bcc 	_NoCarryAdv
.181f	e6 11		inc $11				inc 	temp1+1
.1821					_NoCarryAdv:
.1821	80 de		bra $1801			bra 	_FLLoop 					; keep looking.
.1823					_FLExit:
.1823	7a		ply				ply
.1824	fa		plx				plx
.1825	68		pla				pla
.1826	60		rts				rts
.1827	18		clc				clc
.1828	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1829					NewHandler:
.1829	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.182c	20 38 18	jsr $1838			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.182f	4c 00 00	jmp $0000			jmp 	Next
.1832					ClrHandler:
.1832	20 38 18	jsr $1838			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1835	4c 00 00	jmp $0000			jmp 	Next
.1838					ClearVariableSpace:
.1838	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.183a	85 05		sta $05				sta 	rsp
.183c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.183e	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1840	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1842	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1844	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1846					_CVSHashClear:
.1846	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1848	99 40 06	sta $0640,y			sta 	hashTable,y
.184b	88		dey				dey
.184c	10 f8		bpl $1846			bpl 	_CVSHashClear
.184e					_CVSFindEnd:
.184e	18		clc				clc
.184f	a5 0e		lda $0e				lda 	nextFreeMem
.1851	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1853	85 0e		sta $0e				sta 	nextFreeMem
.1855	90 02		bcc $1859			bcc 	_NoCarryAdv
.1857	e6 0f		inc $0f				inc 	nextFreeMem+1
.1859					_NoCarryAdv:
.1859	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.185b	d0 f1		bne $184e			bne 	_CVSFindEnd
.185d	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.185f	a0 00		ldy #$00			ldy 	#0
.1861	20 65 18	jsr $1865			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1864	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1865					AdvanceFreeMem:
.1865	18		clc				clc
.1866	65 0e		adc $0e				adc 	nextFreeMem
.1868	85 0e		sta $0e				sta 	nextFreeMem
.186a	98		tya				tya
.186b	65 0f		adc $0f				adc 	nextFreeMem+1
.186d	85 0f		sta $0f				sta 	nextFreeMem+1
.186f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1870					ExitDump:
.1870	ba		tsx				tsx 								; save Data Stack in temp1
.1871	86 10		stx $10				stx 	temp1
.1873	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1876					BreakCmd:
>1876	ff						.byte 	$FF
.1877	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.187a					DecodeLineIntoBufPtr:
.187a	48		pha				pha
.187b	da		phx				phx
.187c	5a		phy				phy
.187d	85 08		sta $08				sta 	srcPtr 						; save the source line.
.187f	84 09		sty $09				sty 	srcPtr+1
.1881	90 1b		bcc $189e			bcc 	_DecodeNoLineNumber
.1883	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1885	b1 08		lda ($08),y			lda 	(srcPtr),y
.1887	aa		tax				tax
.1888	c8		iny				iny
.1889	b1 08		lda ($08),y			lda 	(srcPtr),y
.188b	a8		tay				tay
.188c	8a		txa				txa
.188d	18		clc				clc
.188e	20 8a 19	jsr $198a			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1891	aa		tax				tax 								; count in X
.1892					_DecodeLineSpace:
.1892	e0 05		cpx #$05			cpx 	#5
.1894	f0 08		beq $189e			beq 	_DecodeNoLineNumber
.1896	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1898	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.189b	e8		inx				inx
.189c	80 f4		bra $1892			bra 	_DecodeLineSpace
.189e					_DecodeNoLineNumber:
.189e	a0 03		ldy #$03			ldy 	#3 							; initial position.
.18a0					_DecodeLoop:
.18a0	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.18a2	85 10		sta $10				sta 	temp1 						; must be an execution address.
.18a4	c8		iny				iny
.18a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.18a7	85 11		sta $11				sta 	temp1+1
.18a9	c8		iny				iny 								; y points to the byte after it.
.18aa	a5 10		lda $10				lda 	temp1
.18ac	c9 70		cmp #$70			cmp 	#NextLine & $FF
.18ae	d0 06		bne $18b6			bne 	_DecodeNotEOL
.18b0	a5 11		lda $11				lda 	temp1+1
.18b2	c9 1b		cmp #$1b			cmp 	#NextLine >> 8
.18b4	f0 0b		beq $18c1			beq 	_DecodeEOL
.18b6					_DecodeNotEOL:
.18b6	20 c9 18	jsr $18c9			jsr 	IdentifyCodeWord
.18b9	20 13 19	jsr $1913			jsr 	DecodeFoundWord
.18bc	20 fd 18	jsr $18fd			jsr 	AdvanceToNext 				; advance to next entry in the line.
.18bf	80 df		bra $18a0			bra 	_DecodeLoop 				; and go round again
.18c1					_DecodeEOL:
.18c1	a9 00		lda #$00			lda 	#0
.18c3	92 0a		sta ($0a)			sta 	(bufPtr)
.18c5	7a		ply				ply 								; restore registers and exit
.18c6	fa		plx				plx
.18c7	68		pla				pla
.18c8	60		rts				rts
.18c9					IdentifyCodeWord:
.18c9	5a		phy				phy 								; save current position on the stack.
.18ca	a9 a8		lda #$a8			lda 	#(Dictionary) & $FF
.18cc	85 0c		sta $0c				sta 	0+(matchPtr)
.18ce	a9 1d		lda #$1d			lda 	#(Dictionary) >> 8
.18d0	85 0d		sta $0d				sta 	1+(matchPtr)
.18d2					_DecodeIdentify:
.18d2	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.18d4	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.18d6	c5 10		cmp $10				cmp 	temp1
.18d8	d0 07		bne $18e1			bne 	_DecodeIdNext
.18da	c8		iny				iny
.18db	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.18dd	c5 11		cmp $11				cmp 	temp1+1
.18df	f0 1a		beq $18fb			beq 	_DecodeIdFound
.18e1					_DecodeIdNext:
.18e1	18		clc				clc
.18e2	b2 0c		lda ($0c)			lda 	(matchPtr)
.18e4	f0 0a		beq $18f0			beq 	_DecodeIdIssue
.18e6	65 0c		adc $0c				adc 	matchPtr
.18e8	85 0c		sta $0c				sta 	matchPtr
.18ea	90 e6		bcc $18d2			bcc 	_DecodeIdentify
.18ec	e6 0d		inc $0d				inc 	matchPtr+1
.18ee	80 e2		bra $18d2			bra 	_DecodeIdentify
.18f0					_DecodeIdIssue:
.18f0	20 20 10	jsr $1020			jsr 	ErrorHandler
>18f3	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.18fb					_DecodeIdFound:
.18fb	7a		ply				ply 								; restore position.
.18fc	60		rts				rts
.18fd					AdvanceToNext:
.18fd	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.18fe	a0 01		ldy #$01			ldy 	#1
.1900	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1902	29 03		and #$03			and 	#3 							; bits 0-1.
.1904	7a		ply				ply
.1905	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1907	d0 02		bne $190b			bne 	_ATN012
.1909	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.190b					_ATN012:
.190b	85 12		sta $12				sta 	temp2 						; now add that to Y
.190d	98		tya				tya
.190e	18		clc				clc
.190f	65 12		adc $12				adc 	temp2
.1911	a8		tay				tay
.1912	60		rts				rts
.1913					DecodeFoundWord:
.1913	5a		phy				phy 								; save current position
.1914	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1916	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1918	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.191a	29 10		and #$10			and 	#$10
.191c	d0 0e		bne $192c			bne 	_DFWSpecialDecoder
.191e	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1920	30 08		bmi $192a			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1922	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1924	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1927	20 45 19	jsr $1945			jsr 	DecodeCurrentWord 			; expand that.
.192a					_DFWExit:
.192a	7a		ply				ply 								; restore current position
.192b	60		rts				rts
.192c					_DFWSpecialDecoder:
.192c	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.192e	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1930	85 12		sta $12				sta 	temp2
.1932	c8		iny				iny
.1933	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1935	85 13		sta $13				sta 	temp2+1
.1937	7a		ply				ply 	 							; restore current position into Y
.1938	48		pha				pha 								; save registers
.1939	da		phx				phx
.193a	5a		phy				phy
.193b	20 42 19	jsr $1942			jsr 	_DFWCallDecoder				; call the decoder routine
.193e	7a		ply				ply 								; restore registers and exit
.193f	fa		plx				plx
.1940	68		pla				pla
.1941	60		rts				rts
.1942					_DFWCallDecoder:
.1942	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1945					DecodeCurrentWord:
.1945	5a		phy				phy
.1946	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1948	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.194a	a0 04		ldy #$04			ldy 	#4 							; original offset
.194c	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.194d	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.194e	4a		lsr a				lsr 	a 							; bit set.
.194f	4a		lsr a				lsr 	a
.1950	4a		lsr a				lsr 	a 							; decoder bit
.1951	90 02		bcc $1955			bcc 	_DWBNoDec
.1953	c8		iny				iny
.1954	c8		iny				iny
.1955					_DWBNoDec:
.1955	4a		lsr a				lsr 	a
.1956	90 02		bcc $195a			bcc 	_DWBNoEnc
.1958	c8		iny				iny
.1959	c8		iny				iny
.195a					_DWBNoEnc:
.195a					_DWBWordOut:
.195a	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.195c	48		pha				pha
.195d	29 7f		and #$7f			and 	#$7F
.195f	20 68 19	jsr $1968			jsr		DecodeWriteBuffer
.1962	c8		iny				iny
.1963	68		pla				pla
.1964	10 f4		bpl $195a			bpl 	_DWBWordOut
.1966	7a		ply				ply 								; restore Y and exit
.1967	60		rts				rts
.1968					DecodeWriteBuffer:
.1968	92 0a		sta ($0a)			sta 	(bufPtr)
.196a	e6 0a		inc $0a				inc 	bufPtr
.196c	d0 02		bne $1970			bne 	_DWBNoCarry
.196e	e6 0b		inc $0b				inc 	bufPtr+1
.1970					_DWBNoCarry:
.1970	60		rts				rts
.1971					DecodeOutputData:
.1971	48		pha				pha
.1972	da		phx				phx
.1973	5a		phy				phy
.1974	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1976	aa		tax				tax
.1977					_DODLoop:
.1977	ca		dex				dex 								; done it all ?
.1978	f0 0c		beq $1986			beq		_DODExit
.197a	c8		iny				iny 								; output next character
.197b	b1 08		lda ($08),y			lda 	(srcPtr),y
.197d	29 7f		and #$7f			and 	#$7F
.197f	f0 f6		beq $1977			beq 	_DODLoop 					; don't print NULL
.1981	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1984	80 f1		bra $1977			bra 	_DODLoop
.1986					_DODExit:
.1986	7a		ply				ply
.1987	fa		plx				plx
.1988	68		pla				pla
.1989	60		rts				rts
.198a					DecodeYAToBuffer:
.198a	da		phx				phx
.198b	5a		phy				phy
.198c	48		pha				pha
.198d	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.198f	85 12		sta $12				sta 	temp2
.1991	a5 0b		lda $0b				lda 	bufPtr+1
.1993	85 13		sta $13				sta 	temp2+1
.1995	68		pla				pla
.1996	20 ea 1b	jsr $1bea			jsr 	ConvertToStringMain 		; convert YA to string there
.1999	aa		tax				tax 								; chars output to X
.199a	18		clc				clc
.199b	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.199d	85 0a		sta $0a				sta 	bufPtr
.199f	90 02		bcc $19a3			bcc 	_DYABNoCarry
.19a1	e6 0b		inc $0b				inc 	bufPtr+1
.19a3					_DYABNoCarry:
.19a3	8a		txa				txa 								; count in A
.19a4	7a		ply				ply									; restore and exit.
.19a5	fa		plx				plx
.19a6	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.19a7					ListCode:
.19a7	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.19a9	64 1f		stz $1f				stz 	ListLowest+1
.19ab	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.19ad	85 1d		sta $1d				sta 	ListCount
.19af	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.19b1	85 18		sta $18				sta 	0+(listPtr)
.19b3	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.19b5	85 19		sta $19				sta 	1+(listPtr)
.19b7	86 10		stx $10				stx 	temp1						; S->A
.19b9	ba		tsx				tsx
.19ba	8a		txa				txa
.19bb	a6 10		ldx $10				ldx 	temp1
.19bd	c9 80		cmp #$80			cmp 	#NumberStackBase
.19bf	f0 0e		beq $19cf			beq 	_LCLoop
.19c1	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.19c3	85 1e		sta $1e				sta 	ListLowest
.19c5	a5 07		lda $07				lda 	TOS+1
.19c7	85 1f		sta $1f				sta 	ListLowest+1
.19c9	68		pla				pla
.19ca	85 07		sta $07				sta 	TOS+1
.19cc	68		pla				pla
.19cd	85 06		sta $06				sta 	TOS
.19cf					_LCLoop:
.19cf	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.19d1	f0 4e		beq $1a21			beq 	_LCExit
.19d3	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.19d5	b1 18		lda ($18),y			lda 	(listPtr),y
.19d7	c5 1e		cmp $1e				cmp 	ListLowest
.19d9	c8		iny				iny
.19da	b1 18		lda ($18),y			lda 	(listPtr),y
.19dc	e5 1f		sbc $1f				sbc 	ListLowest+1
.19de	90 34		bcc $1a14			bcc 	_LCNext
.19e0	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.19e2	85 0a		sta $0a				sta 	0+(bufPtr)
.19e4	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.19e6	85 0b		sta $0b				sta 	1+(bufPtr)
.19e8	a5 18		lda $18				lda 	listPtr 					; output the line.
.19ea	a4 19		ldy $19				ldy 	listPtr+1
.19ec	38		sec				sec
.19ed	20 7a 18	jsr $187a			jsr 	DecodeLineIntoBufPtr
.19f0	a9 02		lda #$02			lda 	#CTH_LineNo
.19f2	20 13 11	jsr $1113			jsr 	ExternColour
.19f5	a0 ff		ldy #$ff			ldy 	#255
.19f7					_LCLoop2:
.19f7	c8		iny				iny
.19f8	b9 10 08	lda $0810,y			lda 	textBuffer,y
.19fb	f0 0e		beq $1a0b			beq 	_LCEnd
.19fd	c9 20		cmp #$20			cmp 	#32
.19ff	b0 05		bcs $1a06			bcs 	_LCPrint
.1a01	20 13 11	jsr $1113			jsr 	ExternColour
.1a04	a9 20		lda #$20			lda 	#32
.1a06					_LCPrint:
.1a06	20 09 11	jsr $1109			jsr 	ExternPrint
.1a09	80 ec		bra $19f7			bra 	_LCLoop2
.1a0b	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1a0d	20 09 11	jsr $1109			jsr 	ExternPrint
.1a10	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1a12	f0 0d		beq $1a21			beq 	_LCExit
.1a14					_LCNext:
.1a14	18		clc				clc
.1a15	a5 18		lda $18				lda 	listPtr
.1a17	72 18		adc ($18)			adc 	(listPtr)
.1a19	85 18		sta $18				sta 	listPtr
.1a1b	90 02		bcc $1a1f			bcc 	_NoCarryAdv
.1a1d	e6 19		inc $19				inc 	listPtr+1
.1a1f					_NoCarryAdv:
.1a1f	80 ae		bra $19cf			bra 	_LCLoop 					; go round again.
.1a21					_LCExit:
.1a21	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1a24					RunProgram:
.1a24	a2 80		ldx #$80			ldx 	#NumberStackBase
.1a26	9a		txs				txs
.1a27	20 38 18	jsr $1838			jsr 		ClearVariableSpace 		; clear variables etc.
.1a2a	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1a2c	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1a2e	20 75 10	jsr $1075			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.1a31	4c 00 00	jmp $0000			jmp 		Next
.1a34					Call6502:
.1a34	a5 06		lda $06				lda 	TOS 						; copy call address
.1a36	85 10		sta $10				sta 	temp1
.1a38	a5 07		lda $07				lda 	TOS+1
.1a3a	85 11		sta $11				sta 	temp1+1
.1a3c	68		pla				pla
.1a3d	85 07		sta $07				sta 	TOS+1
.1a3f	68		pla				pla
.1a40	85 06		sta $06				sta 	TOS
.1a42	20 48 1a	jsr $1a48			jsr 	_CallTemp1 					; call it
.1a45	4c 00 00	jmp $0000			jmp 	Next
.1a48					_CallTemp1:
.1a48	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1a4b					AssertCode:
.1a4b	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1a4d	05 07		ora $07				ora 	TOS+1
.1a4f	f0 09		beq $1a5a			beq 	_ASFail 					; if zero fail
.1a51	68		pla				pla
.1a52	85 07		sta $07				sta 	TOS+1
.1a54	68		pla				pla
.1a55	85 06		sta $06				sta 	TOS
.1a57	4c 00 00	jmp $0000			jmp 	Next
.1a5a					_ASFail:
.1a5a	20 20 10	jsr $1020			jsr 	ErrorHandler
>1a5d	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1a64					StopCode:
.1a64	20 20 10	jsr $1020			jsr 	ErrorHandler
>1a67	53 54 4f 50 00					.text 	"STOP",0
.1a6c					EndProgram:
.1a6c	4c 10 10	jmp $1010			jmp 	WarmStart
.1a6f					VlistCode:
.1a6f	a9 a8		lda #$a8			lda 	#(Dictionary) & $FF
.1a71	85 10		sta $10				sta 	0+(temp1)
.1a73	a9 1d		lda #$1d			lda 	#(Dictionary) >> 8
.1a75	85 11		sta $11				sta 	1+(temp1)
.1a77	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1a79	b1 10		lda ($10),y			lda 	(temp1),y
.1a7b	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1a7d	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1a7e	4a		lsr a				lsr 	a
.1a7f	4a		lsr a				lsr		a
.1a80	4a		lsr a				lsr 	a
.1a81	4a		lsr a				lsr 	a 							; add those bits in
.1a82	90 02		bcc $1a86			bcc 	_VLNoDec
.1a84	c8		iny				iny
.1a85	c8		iny				iny
.1a86					_VLNoDec:
.1a86	4a		lsr a				lsr 	a
.1a87	90 02		bcc $1a8b			bcc 	_VLNoEnc
.1a89	c8		iny				iny
.1a8a	c8		iny				iny
.1a8b					_VLNoEnc:
.1a8b	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1a8d	c9 24		cmp #$24			cmp 	#"$"
.1a8f	d0 06		bne $1a97			bne 	_VLPrint
.1a91	c8		iny				iny
.1a92	51 10		eor ($10),y			eor 	(temp1),y
.1a94	f0 13		beq $1aa9			beq 	_VLNext
.1a96	88		dey				dey
.1a97					_VLPrint:
.1a97	b1 10		lda ($10),y			lda 	(temp1),y
.1a99	48		pha				pha
.1a9a	c8		iny				iny
.1a9b	29 7f		and #$7f			and 	#$7F
.1a9d	20 09 11	jsr $1109			jsr 	ExternPrint
.1aa0	68		pla				pla
.1aa1	0a		asl a				asl 	a
.1aa2	90 f3		bcc $1a97			bcc 	_VLPrint
.1aa4	a9 20		lda #$20			lda 	#32
.1aa6	20 09 11	jsr $1109			jsr 	ExternPrint
.1aa9					_VLNext:
.1aa9	18		clc				clc 								; go to next
.1aaa	b2 10		lda ($10)			lda 	(temp1)
.1aac	65 10		adc $10				adc 	temp1
.1aae	85 10		sta $10				sta 	temp1
.1ab0	90 02		bcc $1ab4			bcc 	_VLNoCarry
.1ab2	e6 11		inc $11				inc 	temp1+1
.1ab4					_VLNoCarry:
.1ab4	b2 10		lda ($10)			lda 	(temp1)
.1ab6	d0 bf		bne $1a77			bne 	_VLLoop
.1ab8	a9 0d		lda #$0d			lda 	#13
.1aba	20 09 11	jsr $1109			jsr 	ExternPrint
.1abd	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1ac0					NumToInt:
.1ac0	a5 06		lda $06				lda 	TOS 						; TOS to temp4
.1ac2	85 16		sta $16				sta 	temp4
.1ac4	a5 07		lda $07				lda		TOS+1
.1ac6	85 17		sta $17				sta 	temp4+1
.1ac8	20 e9 1a	jsr $1ae9			jsr 	ConvertToInteger
.1acb	90 0f		bcc $1adc			bcc 	_NTIFail
.1acd	a5 14		lda $14				lda 	temp3
.1acf	48		pha				pha
.1ad0	a5 15		lda $15				lda 	temp3+1
.1ad2	48		pha				pha
.1ad3	a9 ff		lda #$ff			lda 	#$FF 						; TOS = -1
.1ad5	85 06		sta $06				sta 	TOS
.1ad7	85 07		sta $07				sta 	TOS+1
.1ad9	4c 00 00	jmp $0000			jmp 	Next
.1adc					_NTIFail:
.1adc	64 06		stz $06				stz 	TOS 						; zero TOS and push on stack as null answer
.1ade	64 07		stz $07				stz 	TOS+1
.1ae0	a5 06		lda $06				lda 	TOS
.1ae2	48		pha				pha
.1ae3	a5 07		lda $07				lda 	TOS+1
.1ae5	48		pha				pha
.1ae6	4c 00 00	jmp $0000			jmp 	Next
.1ae9					ConvertToInteger:
.1ae9	64 14		stz $14				stz 	temp3 						; reset value
.1aeb	64 15		stz $15				stz 	temp3+1
.1aed	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1aef	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1af1	b1 16		lda ($16),y			lda 	(temp4),y
.1af3	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1af5	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1af7	d0 01		bne $1afa			bne 	_CTINotMinus
.1af9	c8		iny				iny									; skip -
.1afa					_CTINotMinus:
.1afa	b1 16		lda ($16),y			lda 	(temp4),y
.1afc	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1afe	d0 03		bne $1b03			bne 	_CTILoop
.1b00	c6 10		dec $10				dec 	temp1
.1b02	c8		iny				iny
.1b03					_CTILoop:
.1b03	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1b05	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1b07	38		sec				sec
.1b08	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1b0a	90 62		bcc $1b6e			bcc 	_CTIFail 					; out of range.
.1b0c	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1b0e	90 0b		bcc $1b1b			bcc 	_CTILegal
.1b10	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1b12	90 5a		bcc $1b6e			bcc 	_CTIFail
.1b14	38		sec				sec
.1b15	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1b17	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1b19	b0 53		bcs $1b6e			bcs 	_CTIFail
.1b1b					_CTILegal:
.1b1b	48		pha				pha 								; save digit value.
.1b1c	06 14		asl $14				asl 	temp3
.1b1e	26 15		rol $15				rol 	temp3+1
.1b20	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1b22	85 12		sta $12				sta 	temp2
.1b24	a5 15		lda $15				lda 	temp3+1
.1b26	85 13		sta $13				sta 	temp2+1
.1b28	06 14		asl $14				asl 	temp3
.1b2a	26 15		rol $15				rol 	temp3+1
.1b2c	06 14		asl $14				asl 	temp3
.1b2e	26 15		rol $15				rol 	temp3+1
.1b30	24 10		bit $10				bit 	temp1 						; hexadecimal
.1b32	10 07		bpl $1b3b			bpl 	_CTIDecimal
.1b34	06 14		asl $14				asl 	temp3
.1b36	26 15		rol $15				rol 	temp3+1
.1b38	68		pla				pla 								; get digit back
.1b39	80 12		bra $1b4d			bra 	_CTIAddLoop
.1b3b					_CTIDecimal:
.1b3b	18		clc				clc 								; x 8 + x 2 = x 10
.1b3c	a5 14		lda $14				lda 	temp3
.1b3e	65 12		adc $12				adc 	temp2
.1b40	85 14		sta $14				sta 	temp3
.1b42	a5 15		lda $15				lda 	temp3+1
.1b44	65 13		adc $13				adc 	temp2+1
.1b46	85 15		sta $15				sta 	temp3+1
.1b48	68		pla				pla 					; check digit 0-9
.1b49	c9 0a		cmp #$0a			cmp 	#10
.1b4b	b0 21		bcs $1b6e			bcs 	_CTIFail
.1b4d					_CTIAddLoop:
.1b4d	18		clc				clc
.1b4e	65 14		adc $14				adc 	temp3
.1b50	85 14		sta $14				sta 	temp3
.1b52	90 02		bcc $1b56			bcc 	_CTINoCarry
.1b54	e6 15		inc $15				inc 	temp3+1
.1b56					_CTINoCarry:
.1b56	c8		iny				iny
.1b57	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1b59	d0 a8		bne $1b03			bne 	_CTILoop 					; no, go back.
.1b5b	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1b5d	d0 0d		bne $1b6c			bne 	_CTIOkay
.1b5f	38		sec				sec
.1b60	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1b62	e5 14		sbc $14				sbc 	temp3
.1b64	85 14		sta $14				sta 	temp3
.1b66	a9 00		lda #$00			lda 	#0
.1b68	e5 15		sbc $15				sbc 	temp3+1
.1b6a	85 15		sta $15				sta 	temp3+1
.1b6c					_CTIOkay:
.1b6c	38		sec				sec
.1b6d	60		rts				rts
.1b6e					_CTIFail:
.1b6e	18		clc				clc
.1b6f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1b70					NextLine:
.1b70	18		clc				clc
.1b71	a5 03		lda $03				lda 	IP
.1b73	72 03		adc ($03)			adc 	(IP)
.1b75	85 03		sta $03				sta 	IP
.1b77	90 02		bcc $1b7b			bcc 	_NoCarryAdv
.1b79	e6 04		inc $04				inc 	IP+1
.1b7b					_NoCarryAdv:
.1b7b	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1b7d	f0 05		beq $1b84			beq 	_NLGoEnd
.1b7f	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1b81	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1b84					_NLGoEnd:
.1b84	4c 10 10	jmp $1010			jmp 	WarmStart
.1b87					SkipComment:
.1b87	e8		inx				inx									; (IP),X points to the length.
.1b88	e8		inx				inx
.1b89	8a		txa				txa
.1b8a	a8		tay				tay 								; put into Y
.1b8b	18		clc				clc
.1b8c	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1b8e	aa		tax				tax 								; put back in X
.1b8f	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1b92					CommentDecoder:
.1b92	a9 06		lda #$06			lda 	#CTH_Keyword
.1b94	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1b97	a9 27		lda #$27			lda 	#"'"
.1b99	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1b9c	a9 0b		lda #$0b			lda 	#CTH_Comment
.1b9e	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1ba1	20 71 19	jsr $1971			jsr 	DecodeOutputData
.1ba4	a9 20		lda #$20			lda 	#32
.1ba6	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1ba9	60		rts				rts
.1baa					DefineCode:
.1baa	20 20 10	jsr $1020			jsr 	ErrorHandler
>1bad	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1bb5	4f 4e 3f 00
.1bb9					DefineDecoder:
.1bb9	a9 07		lda #$07			lda 	#CTH_Definition
.1bbb	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1bbe	a9 3a		lda #$3a			lda 	#":"
.1bc0	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1bc3	20 71 19	jsr $1971			jsr 	DecodeOutputData
.1bc6	a9 20		lda #$20			lda 	#32
.1bc8	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1bcb	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1bcc					IntToString:
.1bcc	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1bce	85 12		sta $12				sta 	0+(temp2)
.1bd0	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1bd2	85 13		sta $13				sta 	1+(temp2)
.1bd4	a5 06		lda $06				lda 	TOS 						; value in YA
.1bd6	a4 07		ldy $07				ldy 	TOS+1
.1bd8	20 e6 1b	jsr $1be6			jsr 	ConvertToString
.1bdb	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1bdd	85 06		sta $06				sta 	0+(TOS)
.1bdf	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1be1	85 07		sta $07				sta 	1+(TOS)
.1be3	4c 00 00	jmp $0000			jmp 	Next
.1be6					ConvertToString:
.1be6	38		sec				sec
.1be7	80 01		bra $1bea			bra 	ConvertToStringMain
.1be9					ConvertToStringUnsigned:
.1be9	18		clc				clc
.1bea					ConvertToStringMain:
.1bea	da		phx				phx									; save XY
.1beb	5a		phy				phy
.1bec	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1bee	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1bf0	84 11		sty $11				sty 	temp1+1
.1bf2	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1bf4	90 16		bcc $1c0c			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1bf6	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1bf8	10 12		bpl $1c0c			bpl 	_CTSUnsigned
.1bfa	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1bfc	91 12		sta ($12),y			sta 	(temp2),y
.1bfe	c8		iny				iny
.1bff	38		sec				sec 								; negate temp1
.1c00	a9 00		lda #$00			lda 	#0
.1c02	e5 10		sbc $10				sbc 	temp1
.1c04	85 10		sta $10				sta 	temp1
.1c06	a9 00		lda #$00			lda 	#0
.1c08	e5 11		sbc $11				sbc 	temp1+1
.1c0a	85 11		sta $11				sta 	temp1+1
.1c0c					_CTSUnsigned:
.1c0c	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1c0e					_CTSLoop:
.1c0e	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1c10	91 12		sta ($12),y			sta 	(temp2),y
.1c12					_CTSSubLoop:
.1c12	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1c14	1a		inc a				inc 	a
.1c15	91 12		sta ($12),y			sta 	(temp2),y
.1c17	38		sec				sec 								; do subtraction saving interim result
.1c18	a5 10		lda $10				lda 	temp1
.1c1a	fd 4d 1c	sbc $1c4d,x			sbc 	_CTSTable,x
.1c1d	48		pha				pha
.1c1e	a5 11		lda $11				lda 	temp1+1
.1c20	fd 4e 1c	sbc $1c4e,x			sbc 	_CTSTable+1,x
.1c23	90 07		bcc $1c2c			bcc 	_CTSCantSubtract 			; end of subtraction.
.1c25	85 11		sta $11				sta 	temp1+1 					; save result back
.1c27	68		pla				pla
.1c28	85 10		sta $10				sta 	temp1
.1c2a	80 e6		bra $1c12			bra 	_CTSSubLoop
.1c2c					_CTSCantSubtract:
.1c2c	68		pla				pla 								; throw away interim
.1c2d	e8		inx				inx 								; next subtractor
.1c2e	e8		inx				inx
.1c2f	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1c31	49 30		eor #$30			eor 	#"0"
.1c33	05 1a		ora $1a				ora 	SignCount
.1c35	85 1a		sta $1a				sta 	SignCount
.1c37	f0 01		beq $1c3a			beq		_CTSLZ 						; if all zeros so far suppress.
.1c39	c8		iny				iny 								; next character
.1c3a					_CTSLZ:
.1c3a	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1c3c	d0 d0		bne $1c0e			bne 	_CTSLoop
.1c3e					_CTSComplete:
.1c3e	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1c40	09 30		ora #$30			ora 	#48 						; ASCII
.1c42	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1c44	c8		iny				iny
.1c45	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1c47	91 12		sta ($12),y			sta 	(temp2),y
.1c49	98		tya				tya 								; size in A
.1c4a	7a		ply				ply									; pull and exit.
.1c4b	fa		plx				plx
.1c4c	60		rts				rts
.1c4d					_CTSTable:
>1c4d	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1c55					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1c55					VarAddressHandler:
.1c55	18		clc				clc 								; find variable, error if it doesn't exist.
.1c56	20 a7 1c	jsr $1ca7			jsr 	VariableFind
.1c59	a5 06		lda $06				lda 	TOS
.1c5b	48		pha				pha
.1c5c	a5 07		lda $07				lda 	TOS+1
.1c5e	48		pha				pha
.1c5f	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1c61	85 06		sta $06				sta 	TOS
.1c63	a5 11		lda $11				lda		temp1+1
.1c65	85 07		sta $07				sta 	TOS+1
.1c67	4c 00 00	jmp $0000			jmp 	Next
.1c6a					VarAddrHandlerDecode:
.1c6a	a9 26		lda #$26			lda 	#"&"
.1c6c	4c 55 1d	jmp $1d55			jmp 	VarHandlerDecode
.1c6f					VarReadHandler:
.1c6f	18		clc				clc 								; find variable, error if it doesn't exist.
.1c70	20 a7 1c	jsr $1ca7			jsr 	VariableFind
.1c73	a5 06		lda $06				lda 	TOS
.1c75	48		pha				pha
.1c76	a5 07		lda $07				lda 	TOS+1
.1c78	48		pha				pha
.1c79	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1c7b	85 06		sta $06				sta 	TOS
.1c7d	a0 01		ldy #$01			ldy 	#1
.1c7f	b1 10		lda ($10),y			lda 	(temp1),y
.1c81	85 07		sta $07				sta 	TOS+1
.1c83	4c 00 00	jmp $0000			jmp 	Next
.1c86					VarReadHandlerDecode:
.1c86	a9 40		lda #$40			lda 	#"@"
.1c88	4c 55 1d	jmp $1d55			jmp 	VarHandlerDecode
.1c8b					VarWriteHandler:
.1c8b	38		sec				sec 								; find variable, create it if it doesn't exist.
.1c8c	20 a7 1c	jsr $1ca7			jsr 	VariableFind
.1c8f	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1c91	92 10		sta ($10)			sta 	(temp1)
.1c93	a5 07		lda $07				lda 	TOS+1
.1c95	a0 01		ldy #$01			ldy 	#1
.1c97	91 10		sta ($10),y			sta 	(temp1),y
.1c99	68		pla				pla
.1c9a	85 07		sta $07				sta 	TOS+1
.1c9c	68		pla				pla
.1c9d	85 06		sta $06				sta 	TOS
.1c9f	4c 00 00	jmp $0000			jmp 	Next
.1ca2					VarWriteHandlerDecode:
.1ca2	a9 21		lda #$21			lda 	#"!"
.1ca4	4c 55 1d	jmp $1d55			jmp 	VarHandlerDecode
.1ca7					VariableFind:
.1ca7	08		php				php 								; save autocreate flag.
.1ca8	e8		inx				inx 								; advance to/over the variable name.
.1ca9	e8		inx				inx
.1caa	8a		txa				txa 								; put in Y
.1cab	a8		tay				tay
.1cac	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1cae	85 12		sta $12				sta 	temp2
.1cb0	c8		iny				iny
.1cb1	b1 03		lda ($03),y			lda 	(IP),y
.1cb3	85 13		sta $13				sta 	temp2+1
.1cb5	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1cb7	b0 0f		bcs $1cc8			bcs 	_VFLong
.1cb9	a5 13		lda $13				lda 	temp2+1
.1cbb	d0 0b		bne $1cc8			bne 	_VFLong
.1cbd	a5 12		lda $12				lda 	temp2						; this is the index
.1cbf	0a		asl a				asl 	a 							; double it
.1cc0	85 10		sta $10				sta 	temp1
.1cc2	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1cc4	85 11		sta $11				sta 	temp1+1
.1cc6	28		plp				plp 								; throw creation flag, it always exists.
.1cc7	60		rts				rts
.1cc8					_VFLong:
.1cc8	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1cca	6a		ror a				ror 	a
.1ccb	6a		ror a				ror 	a
.1ccc	6a		ror a				ror 	a
.1ccd	6a		ror a				ror 	a
.1cce	45 12		eor $12				eor 	temp2
.1cd0	45 13		eor $13				eor 	temp2+1
.1cd2	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1cd4	0a		asl a				asl 	a
.1cd5	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1cd7	85 10		sta $10				sta 	temp1
.1cd9	85 14		sta $14				sta 	temp3
.1cdb	a9 06		lda #$06			lda 	#hashTable >> 8
.1cdd	85 11		sta $11				sta 	temp1+1
.1cdf	85 15		sta $15				sta 	temp3+1
.1ce1					_VFSearch:
.1ce1	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1ce3	b1 10		lda ($10),y			lda 	(temp1),y
.1ce5	f0 23		beq $1d0a			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1ce7	a8		tay				tay 								; follow the link through.
.1ce8	b2 10		lda ($10)			lda 	(temp1)
.1cea	85 10		sta $10				sta 	temp1
.1cec	84 11		sty $11				sty 	temp1+1
.1cee	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1cf0	b1 10		lda ($10),y			lda 	(temp1),y
.1cf2	c5 12		cmp $12				cmp 	temp2
.1cf4	d0 eb		bne $1ce1			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1cf6	c8		iny				iny 								; same for 2nd byte of name
.1cf7	b1 10		lda ($10),y			lda 	(temp1),y
.1cf9	c5 13		cmp $13				cmp 	temp2+1
.1cfb	d0 e4		bne $1ce1			bne 	_VFSearch
.1cfd	18		clc				clc
.1cfe	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1d00	69 02		adc #$02			adc 	#2
.1d02	85 10		sta $10				sta 	temp1
.1d04	90 02		bcc $1d08			bcc 	_VFNoPage1
.1d06	e6 11		inc $11				inc 	temp1+1
.1d08					_VFNoPage1:
.1d08	28		plp				plp 								; don't need to worry about creation flag
.1d09	60		rts				rts
.1d0a					_VFNotFound:
.1d0a	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1d0b	b0 0d		bcs $1d1a			bcs 	_VFCreate
.1d0d	20 20 10	jsr $1020			jsr 	ErrorHandler
>1d10	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1d18	3f 00
.1d1a					_VFCreate:
.1d1a	a0 01		ldy #$01			ldy 	#1
.1d1c	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1d1e	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1d20	b1 14		lda ($14),y			lda 	(temp3),y
.1d22	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d24	c8		iny				iny
.1d25	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1d27	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d29	c8		iny				iny
.1d2a	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d2c	c8		iny				iny
.1d2d	a5 12		lda $12				lda 	temp2 						; copy the name out
.1d2f	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d31	c8		iny				iny
.1d32	a5 13		lda $13				lda 	temp2+1
.1d34	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1d36	a0 01		ldy #$01			ldy 	#1
.1d38	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1d3a	92 14		sta ($14)			sta 	(temp3)
.1d3c	a5 0f		lda $0f				lda 	nextFreeMem+1
.1d3e	91 14		sta ($14),y			sta 	(temp3),y
.1d40	18		clc				clc
.1d41	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1d43	69 02		adc #$02			adc 	#2
.1d45	85 10		sta $10				sta 	temp1
.1d47	a5 0f		lda $0f				lda 	nextFreeMem+1
.1d49	69 00		adc #$00			adc 	#0
.1d4b	85 11		sta $11				sta 	temp1+1
.1d4d	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1d4f	a0 00		ldy #$00			ldy 	#0
.1d51	20 65 18	jsr $1865			jsr 	AdvanceFreeMem
.1d54	60		rts				rts
.1d55					VarHandlerDecode:
.1d55	48		pha				pha 								; save, leading space
.1d56	a9 20		lda #$20			lda 	#" "
.1d58	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1d5b	68		pla				pla 								; restore and write type
.1d5c	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1d5f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1d61	85 10		sta $10				sta 	temp1
.1d63	c8		iny				iny
.1d64	b1 08		lda ($08),y			lda 	(srcPtr),y
.1d66	85 11		sta $11				sta 	temp1+1
.1d68	a5 10		lda $10				lda 	temp1 						; output the first character
.1d6a	29 1f		and #$1f			and 	#31
.1d6c	20 97 1d	jsr $1d97			jsr 	VHOutVarChar
.1d6f	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1d71					_VHDShift:
.1d71	46 11		lsr $11				lsr 	temp1+1
.1d73	66 10		ror $10				ror 	temp1
.1d75	ca		dex				dex
.1d76	d0 f9		bne $1d71			bne 	_VHDShift
.1d78	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1d7a					_VHDDiv40:
.1d7a	e8		inx				inx
.1d7b	38		sec				sec
.1d7c	a5 10		lda $10				lda 	temp1
.1d7e	e9 28		sbc #$28			sbc 	#40
.1d80	a8		tay				tay
.1d81	a5 11		lda $11				lda 	temp1+1
.1d83	e9 00		sbc #$00			sbc 	#0
.1d85	90 06		bcc $1d8d			bcc 	_VHDivDone
.1d87	85 11		sta $11				sta 	temp1+1
.1d89	84 10		sty $10				sty 	temp1
.1d8b	80 ed		bra $1d7a			bra 	_VHDDiv40
.1d8d					_VHDivDone:
.1d8d	a5 10		lda $10				lda 	temp1 						; remainder
.1d8f	20 97 1d	jsr $1d97			jsr 	VHOutVarChar
.1d92	8a		txa				txa
.1d93	20 97 1d	jsr $1d97			jsr 	VHOutVarChar 				; and result.
.1d96	60		rts				rts
.1d97					VHOutVarChar:
.1d97	c9 00		cmp #$00			cmp 	#0
.1d99	f0 0c		beq $1da7			beq 	_VHOExit
.1d9b	18		clc				clc
.1d9c	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1d9e	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1da0	90 02		bcc $1da4			bcc 	_VHOOut
.1da2	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1da4					_VHOOut:
.1da4	20 68 19	jsr $1968			jsr 	DecodeWriteBuffer
.1da7					_VHOExit:
.1da7	60		rts				rts

;******  Return to file: kernel.asm

.1da8					Dictionary:

;******  Processing file: generated/dictionary.inc

>1da8	05					.byte	_end1-*
>1da9	00					.byte	$00
>1daa	fa 15					.word	WordWrite
>1dac	a1					.byte	$a1
.1dad					_end1:
>1dad	10					.byte	_end2-*
>1dae	52					.byte	$52
>1daf	8b 1c					.word	VarWriteHandler
>1db1	a2 1c					.word	VarWriteHandlerDecode
>1db3	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1dbb	45 d2
.1dbd					_end2:
>1dbd	10					.byte	_end3-*
>1dbe	52					.byte	$52
>1dbf	55 1c					.word	VarAddressHandler
>1dc1	6a 1c					.word	VarAddrHandlerDecode
>1dc3	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1dcb	45 d2
.1dcd					_end3:
>1dcd	10					.byte	_end4-*
>1dce	52					.byte	$52
>1dcf	6f 1c					.word	VarReadHandler
>1dd1	86 1c					.word	VarReadHandlerDecode
>1dd3	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>1ddb	45 d2
.1ddd					_end4:
>1ddd	0c					.byte	_end5-*
>1dde	52					.byte	$52
>1ddf	ec 16					.word	CallHandler
>1de1	a8 17					.word	CallHandlerDecode
>1de3	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1de9					_end5:
>1de9	0f					.byte	_end6-*
>1dea	53					.byte	$53
>1deb	87 1b					.word	SkipComment
>1ded	92 1b					.word	CommentDecoder
>1def	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1df7	d4
.1df8					_end6:
>1df8	0e					.byte	_end7-*
>1df9	53					.byte	$53
>1dfa	aa 1b					.word	DefineCode
>1dfc	b9 1b					.word	DefineDecoder
>1dfe	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.1e06					_end7:
>1e06	0f					.byte	_end8-*
>1e07	52					.byte	$52
>1e08	86 10					.word	Literal2Byte
>1e0a	9c 10					.word	Literal2ByteDecode
>1e0c	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>1e14	cc
.1e15					_end8:
>1e15	0e					.byte	_end9-*
>1e16	80					.byte	$80
>1e17	70 1b					.word	NextLine
>1e19	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>1e21	4e c5
.1e23					_end9:
>1e23	0e					.byte	_end10-*
>1e24	53					.byte	$53
>1e25	ae 10					.word	LiteralString
>1e27	cb 10					.word	LiteralStringDecoder
>1e29	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.1e31					_end10:
>1e31	05					.byte	_end11-*
>1e32	00					.byte	$00
>1e33	76 13					.word	Multiply16x16
>1e35	aa					.byte	$aa
.1e36					_end11:
>1e36	05					.byte	_end12-*
>1e37	00					.byte	$00
>1e38	e3 11					.word	Add
>1e3a	ab					.byte	$ab
.1e3b					_end12:
>1e3b	06					.byte	_end13-*
>1e3c	00					.byte	$00
>1e3d	0b 16					.word	WordAdd
>1e3f	2b a1					.byte	$2b,$a1
.1e41					_end13:
>1e41	05					.byte	_end14-*
>1e42	00					.byte	$00
>1e43	f2 11					.word	Subtract
>1e45	ad					.byte	$ad
.1e46					_end14:
>1e46	06					.byte	_end15-*
>1e47	00					.byte	$00
>1e48	b2 14					.word	ConstantMinus1
>1e4a	2d b1					.byte	$2d,$b1
.1e4c					_end15:
>1e4c	05					.byte	_end16-*
>1e4d	00					.byte	$00
>1e4e	c7 12					.word	Divide16x16
>1e50	af					.byte	$af
.1e51					_end16:
>1e51	05					.byte	_end17-*
>1e52	00					.byte	$00
>1e53	a5 14					.word	Constant0
>1e55	b0					.byte	$b0
.1e56					_end17:
>1e56	06					.byte	_end18-*
>1e57	00					.byte	$00
>1e58	0b 14					.word	CheckMinus
>1e5a	30 bc					.byte	$30,$bc
.1e5c					_end18:
>1e5c	06					.byte	_end19-*
>1e5d	00					.byte	$00
>1e5e	1f 14					.word	CheckZero
>1e60	30 bd					.byte	$30,$bd
.1e62					_end19:
>1e62	05					.byte	_end20-*
>1e63	00					.byte	$00
>1e64	c1 14					.word	C1
>1e66	b1					.byte	$b1
.1e67					_end20:
>1e67	06					.byte	_end21-*
>1e68	00					.byte	$00
>1e69	b5 13					.word	Unary1Plus
>1e6b	31 ab					.byte	$31,$ab
.1e6d					_end21:
>1e6d	06					.byte	_end22-*
>1e6e	00					.byte	$00
>1e6f	cc 13					.word	Unary1Minus
>1e71	31 ad					.byte	$31,$ad
.1e73					_end22:
>1e73	06					.byte	_end23-*
>1e74	00					.byte	$00
>1e75	d9 14					.word	C10
>1e77	31 b0					.byte	$31,$b0
.1e79					_end23:
>1e79	07					.byte	_end24-*
>1e7a	00					.byte	$00
>1e7b	02 15					.word	C100
>1e7d	31 30 b0				.byte	$31,$30,$b0
.1e80					_end24:
>1e80	08					.byte	_end25-*
>1e81	00					.byte	$00
>1e82	31 15					.word	C1024
>1e84	31 30 32 b4				.byte	$31,$30,$32,$b4
.1e88					_end25:
>1e88	07					.byte	_end26-*
>1e89	00					.byte	$00
>1e8a	06 15					.word	C127
>1e8c	31 32 b7				.byte	$31,$32,$b7
.1e8f					_end26:
>1e8f	07					.byte	_end27-*
>1e90	00					.byte	$00
>1e91	0a 15					.word	C128
>1e93	31 32 b8				.byte	$31,$32,$b8
.1e96					_end27:
>1e96	06					.byte	_end28-*
>1e97	00					.byte	$00
>1e98	dd 14					.word	C15
>1e9a	31 b5					.byte	$31,$b5
.1e9c					_end28:
>1e9c	06					.byte	_end29-*
>1e9d	00					.byte	$00
>1e9e	e1 14					.word	C16
>1ea0	31 b6					.byte	$31,$b6
.1ea2					_end29:
>1ea2	07					.byte	_end30-*
>1ea3	00					.byte	$00
>1ea4	43 14					.word	Times16
>1ea6	31 36 aa				.byte	$31,$36,$aa
.1ea9					_end30:
>1ea9	07					.byte	_end31-*
>1eaa	00					.byte	$00
>1eab	56 14					.word	Divide16
>1ead	31 36 af				.byte	$31,$36,$af
.1eb0					_end31:
>1eb0	05					.byte	_end32-*
>1eb1	00					.byte	$00
>1eb2	c5 14					.word	C2
>1eb4	b2					.byte	$b2
.1eb5					_end32:
>1eb5	06					.byte	_end33-*
>1eb6	00					.byte	$00
>1eb7	4f 14					.word	Times2
>1eb9	32 aa					.byte	$32,$aa
.1ebb					_end33:
>1ebb	06					.byte	_end34-*
>1ebc	00					.byte	$00
>1ebd	be 13					.word	Unary2Plus
>1ebf	32 ab					.byte	$32,$ab
.1ec1					_end34:
>1ec1	06					.byte	_end35-*
>1ec2	00					.byte	$00
>1ec3	d7 13					.word	Unary2Minus
>1ec5	32 ad					.byte	$32,$ad
.1ec7					_end35:
>1ec7	06					.byte	_end36-*
>1ec8	00					.byte	$00
>1ec9	62 14					.word	Divide2
>1ecb	32 af					.byte	$32,$af
.1ecd					_end36:
>1ecd	06					.byte	_end37-*
>1ece	00					.byte	$00
>1ecf	e5 14					.word	C24
>1ed1	32 b4					.byte	$32,$b4
.1ed3					_end37:
>1ed3	07					.byte	_end38-*
>1ed4	00					.byte	$00
>1ed5	0e 15					.word	C255
>1ed7	32 35 b5				.byte	$32,$35,$b5
.1eda					_end38:
>1eda	07					.byte	_end39-*
>1edb	00					.byte	$00
>1edc	19 15					.word	C256
>1ede	32 35 b6				.byte	$32,$35,$b6
.1ee1					_end39:
>1ee1	08					.byte	_end40-*
>1ee2	00					.byte	$00
>1ee3	69 14					.word	Times256
>1ee5	32 35 36 aa				.byte	$32,$35,$36,$aa
.1ee9					_end40:
>1ee9	08					.byte	_end41-*
>1eea	00					.byte	$00
>1eeb	72 14					.word	Divide256
>1eed	32 35 36 af				.byte	$32,$35,$36,$af
.1ef1					_end41:
>1ef1	05					.byte	_end42-*
>1ef2	00					.byte	$00
>1ef3	c9 14					.word	C3
>1ef5	b3					.byte	$b3
.1ef6					_end42:
>1ef6	06					.byte	_end43-*
>1ef7	00					.byte	$00
>1ef8	f6 14					.word	C32
>1efa	33 b2					.byte	$33,$b2
.1efc					_end43:
>1efc	09					.byte	_end44-*
>1efd	00					.byte	$00
>1efe	49 15					.word	C32767
>1f00	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.1f05					_end44:
>1f05	09					.byte	_end45-*
>1f06	00					.byte	$00
>1f07	55 15					.word	C32768
>1f09	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.1f0e					_end45:
>1f0e	05					.byte	_end46-*
>1f0f	00					.byte	$00
>1f10	cd 14					.word	C4
>1f12	b4					.byte	$b4
.1f13					_end46:
>1f13	06					.byte	_end47-*
>1f14	00					.byte	$00
>1f15	4b 14					.word	Times4
>1f17	34 aa					.byte	$34,$aa
.1f19					_end47:
>1f19	06					.byte	_end48-*
>1f1a	00					.byte	$00
>1f1b	5e 14					.word	Divide4
>1f1d	34 af					.byte	$34,$af
.1f1f					_end48:
>1f1f	08					.byte	_end49-*
>1f20	00					.byte	$00
>1f21	3d 15					.word	C4096
>1f23	34 30 39 b6				.byte	$34,$30,$39,$b6
.1f27					_end49:
>1f27	05					.byte	_end50-*
>1f28	00					.byte	$00
>1f29	d1 14					.word	C5
>1f2b	b5					.byte	$b5
.1f2c					_end50:
>1f2c	07					.byte	_end51-*
>1f2d	00					.byte	$00
>1f2e	25 15					.word	C512
>1f30	35 31 b2				.byte	$35,$31,$b2
.1f33					_end51:
>1f33	06					.byte	_end52-*
>1f34	00					.byte	$00
>1f35	fa 14					.word	C63
>1f37	36 b3					.byte	$36,$b3
.1f39					_end52:
>1f39	06					.byte	_end53-*
>1f3a	00					.byte	$00
>1f3b	fe 14					.word	C64
>1f3d	36 b4					.byte	$36,$b4
.1f3f					_end53:
>1f3f	05					.byte	_end54-*
>1f40	00					.byte	$00
>1f41	d5 14					.word	C8
>1f43	b8					.byte	$b8
.1f44					_end54:
>1f44	06					.byte	_end55-*
>1f45	00					.byte	$00
>1f46	47 14					.word	Times8
>1f48	38 aa					.byte	$38,$aa
.1f4a					_end55:
>1f4a	06					.byte	_end56-*
>1f4b	00					.byte	$00
>1f4c	5a 14					.word	Divide8
>1f4e	38 af					.byte	$38,$af
.1f50					_end56:
>1f50	05					.byte	_end57-*
>1f51	40					.byte	$40
>1f52	71 17					.word	ReturnHandler
>1f54	bb					.byte	$bb
.1f55					_end57:
>1f55	05					.byte	_end58-*
>1f56	00					.byte	$00
>1f57	63 12					.word	CheckLess
>1f59	bc					.byte	$bc
.1f5a					_end58:
>1f5a	06					.byte	_end59-*
>1f5b	00					.byte	$00
>1f5c	7c 12					.word	CheckLessEq
>1f5e	3c bd					.byte	$3c,$bd
.1f60					_end59:
>1f60	06					.byte	_end60-*
>1f61	00					.byte	$00
>1f62	2c 12					.word	CheckNotEqual
>1f64	3c be					.byte	$3c,$be
.1f66					_end60:
>1f66	05					.byte	_end61-*
>1f67	00					.byte	$00
>1f68	2f 12					.word	CheckEqual
>1f6a	bd					.byte	$bd
.1f6b					_end61:
>1f6b	05					.byte	_end62-*
>1f6c	00					.byte	$00
>1f6d	7f 12					.word	CheckGreater
>1f6f	be					.byte	$be
.1f70					_end62:
>1f70	06					.byte	_end63-*
>1f71	00					.byte	$00
>1f72	60 12					.word	CheckGreaterEq
>1f74	3e bd					.byte	$3e,$bd
.1f76					_end63:
>1f76	08					.byte	_end64-*
>1f77	00					.byte	$00
>1f78	6a 15					.word	TestDup
>1f7a	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.1f7e					_end64:
>1f7e	05					.byte	_end65-*
>1f7f	00					.byte	$00
>1f80	df 15					.word	WordRead
>1f82	c0					.byte	$c0
.1f83					_end65:
>1f83	07					.byte	_end66-*
>1f84	00					.byte	$00
>1f85	e5 13					.word	Absolute
>1f87	41 42 d3				.byte	$41,$42,$d3
.1f8a					_end66:
>1f8a	09					.byte	_end67-*
>1f8b	00					.byte	$00
>1f8c	22 16					.word	AllocateMemory
>1f8e	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.1f93					_end67:
>1f93	07					.byte	_end68-*
>1f94	00					.byte	$00
>1f95	05 12					.word	And
>1f97	41 4e c4				.byte	$41,$4e,$c4
.1f9a					_end68:
>1f9a	0a					.byte	_end69-*
>1f9b	00					.byte	$00
>1f9c	4b 1a					.word	AssertCode
>1f9e	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.1fa4					_end69:
>1fa4	09					.byte	_end70-*
>1fa5	00					.byte	$00
>1fa6	38 14					.word	ByteSwap
>1fa8	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.1fad					_end70:
>1fad	06					.byte	_end71-*
>1fae	00					.byte	$00
>1faf	ed 15					.word	ByteWrite
>1fb1	43 a1					.byte	$43,$a1
.1fb3					_end71:
>1fb3	06					.byte	_end72-*
>1fb4	00					.byte	$00
>1fb5	d6 15					.word	ByteRead
>1fb7	43 c0					.byte	$43,$c0
.1fb9					_end72:
>1fb9	07					.byte	_end73-*
>1fba	00					.byte	$00
>1fbb	32 18					.word	ClrHandler
>1fbd	43 4c d2				.byte	$43,$4c,$d2
.1fc0					_end73:
>1fc0	08					.byte	_end74-*
>1fc1	00					.byte	$00
>1fc2	61 15					.word	Drop
>1fc4	44 52 4f d0				.byte	$44,$52,$4f,$d0
.1fc8					_end74:
>1fc8	07					.byte	_end75-*
>1fc9	00					.byte	$00
>1fca	73 15					.word	Dup
>1fcc	44 55 d0				.byte	$44,$55,$d0
.1fcf					_end75:
>1fcf	08					.byte	_end76-*
>1fd0	01					.byte	$01
>1fd1	c0 16					.word	ElseHandler
>1fd3	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.1fd7					_end76:
>1fd7	07					.byte	_end77-*
>1fd8	00					.byte	$00
>1fd9	6c 1a					.word	EndProgram
>1fdb	45 4e c4				.byte	$45,$4e,$c4
.1fde					_end77:
>1fde	09					.byte	_end78-*
>1fdf	00					.byte	$00
>1fe0	c3 16					.word	EndIfHandler
>1fe2	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.1fe7					_end78:
>1fe7	07					.byte	_end79-*
>1fe8	00					.byte	$00
>1fe9	38 16					.word	ForHandler
>1feb	46 4f d2				.byte	$46,$4f,$d2
.1fee					_end79:
>1fee	06					.byte	_end80-*
>1fef	01					.byte	$01
>1ff0	bd 16					.word	IfHandler
>1ff2	49 c6					.byte	$49,$c6
.1ff4					_end80:
>1ff4	09					.byte	_end81-*
>1ff5	00					.byte	$00
>1ff6	9c 16					.word	GetIndex
>1ff8	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.1ffd					_end81:
>1ffd	08					.byte	_end82-*
>1ffe	00					.byte	$00
>1fff	a7 19					.word	ListCode
>2001	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2005					_end82:
>2005	07					.byte	_end83-*
>2006	00					.byte	$00
>2007	9c 12					.word	Maximum
>2009	4d 41 d8				.byte	$4d,$41,$d8
.200c					_end83:
>200c	07					.byte	_end84-*
>200d	00					.byte	$00
>200e	98 12					.word	Minimum
>2010	4d 49 ce				.byte	$4d,$49,$ce
.2013					_end84:
>2013	07					.byte	_end85-*
>2014	00					.byte	$00
>2015	d8 12					.word	Modulus16x16
>2017	4d 4f c4				.byte	$4d,$4f,$c4
.201a					_end85:
>201a	0a					.byte	_end86-*
>201b	00					.byte	$00
>201c	ec 13					.word	Negate
>201e	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2024					_end86:
>2024	07					.byte	_end87-*
>2025	00					.byte	$00
>2026	29 18					.word	NewHandler
>2028	4e 45 d7				.byte	$4e,$45,$d7
.202b					_end87:
>202b	08					.byte	_end88-*
>202c	01					.byte	$01
>202d	66 16					.word	NextHandler
>202f	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2033					_end88:
>2033	07					.byte	_end89-*
>2034	00					.byte	$00
>2035	a7 15					.word	Nip
>2037	4e 49 d0				.byte	$4e,$49,$d0
.203a					_end89:
>203a	07					.byte	_end90-*
>203b	00					.byte	$00
>203c	fc 13					.word	OneComplement
>203e	4e 4f d4				.byte	$4e,$4f,$d4
.2041					_end90:
>2041	06					.byte	_end91-*
>2042	00					.byte	$00
>2043	1f 12					.word	LogOr
>2045	4f d2					.byte	$4f,$d2
.2047					_end91:
>2047	08					.byte	_end92-*
>2048	00					.byte	$00
>2049	8f 15					.word	Over
>204b	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.204f					_end92:
>204f	0a					.byte	_end93-*
>2050	00					.byte	$00
>2051	c6 16					.word	RepeatHandler
>2053	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.2059					_end93:
>2059	07					.byte	_end94-*
>205a	00					.byte	$00
>205b	7b 14					.word	RandomNumber
>205d	52 4e c4				.byte	$52,$4e,$c4
.2060					_end94:
>2060	07					.byte	_end95-*
>2061	00					.byte	$00
>2062	ac 15					.word	Rot
>2064	52 4f d4				.byte	$52,$4f,$d4
.2067					_end95:
>2067	07					.byte	_end96-*
>2068	00					.byte	$00
>2069	24 1a					.word	RunProgram
>206b	52 55 ce				.byte	$52,$55,$ce
.206e					_end96:
>206e	07					.byte	_end97-*
>206f	00					.byte	$00
>2070	27 14					.word	SignTOS
>2072	53 47 ce				.byte	$53,$47,$ce
.2075					_end97:
>2075	08					.byte	_end98-*
>2076	00					.byte	$00
>2077	64 1a					.word	StopCode
>2079	53 54 4f d0				.byte	$53,$54,$4f,$d0
.207d					_end98:
>207d	08					.byte	_end99-*
>207e	00					.byte	$00
>207f	7c 15					.word	Swap
>2081	53 57 41 d0				.byte	$53,$57,$41,$d0
.2085					_end99:
>2085	07					.byte	_end100-*
>2086	00					.byte	$00
>2087	34 1a					.word	Call6502
>2089	53 59 d3				.byte	$53,$59,$d3
.208c					_end100:
>208c	0e					.byte	_end101-*
>208d	00					.byte	$00
>208e	c0 1a					.word	NumToInt
>2090	54 4f 2e 49 4e 54 45 47			.byte	$54,$4f,$2e,$49,$4e,$54,$45,$47,$45,$d2
>2098	45 d2
.209a					_end101:
>209a	0d					.byte	_end102-*
>209b	00					.byte	$00
>209c	cc 1b					.word	IntToString
>209e	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>20a6	c7
.20a7					_end102:
>20a7	09					.byte	_end103-*
>20a8	01					.byte	$01
>20a9	c9 16					.word	UntilHandler
>20ab	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.20b0					_end103:
>20b0	09					.byte	_end104-*
>20b1	00					.byte	$00
>20b2	6f 1a					.word	VlistCode
>20b4	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.20b9					_end104:
>20b9	0a					.byte	_end105-*
>20ba	40					.byte	$40
>20bb	76 18					.word	BreakCmd
>20bd	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.20c3					_end105:
>20c3	09					.byte	_end106-*
>20c4	00					.byte	$00
>20c5	70 18					.word	ExitDump
>20c7	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.20cc					_end106:
>20cc	07					.byte	_end107-*
>20cd	00					.byte	$00
>20ce	12 12					.word	Xor
>20d0	58 4f d2				.byte	$58,$4f,$d2
.20d3					_end107:
>20d3	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
