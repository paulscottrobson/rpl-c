
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sun Jan 12 18:47:11 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 de 10	jsr $10de			jsr 	ExternInitialise
.1006	a9 23		lda #$23			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 ce 11	jsr $11ce			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010					WarmStart:
.1010	a9 03		lda #$03			lda 	#COL_Yellow
.1012	20 15 11	jsr $1115			jsr 	ExternColour
.1015	20 38 11	jsr $1138			jsr 	ExternInput
.1018	a9 06		lda #$06			lda 	#COL_Cyan
.101a	20 15 11	jsr $1115			jsr 	ExternColour
.101d	4c 34 1c	jmp $1c34			jmp 	RunProgram
.1020					ErrorHandler:
>1020	ff						.byte 	$FF
.1021	a2 5e		ldx #$5e			ldx 	#$5E
.1023					BootMsg:
>1023	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103b	2a 0d 0d
>103e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1046	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1056	30 32 30 0d 0d
>105b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1062	5b 32 30 2d 30 31 2d 31			.text	"[20-01-12 18:47]"
>106a	32 20 31 38 3a 34 37 5d

;******  Return to file: kernel.asm

>1072	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1075					InitialiseCoreCode:
.1075	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1077	85 00		sta $00				sta 	NextCode
.1079	85 01		sta $01				sta 	NextCode+1
.107b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.107d	85 02		sta $02				sta 	NextCode+2
.107f	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.1081	84 04		sty $04				sty 	NextCode+4
.1083	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1085	60		rts				rts								; (2 INX skip offset and line#)
.1086					Literal2Byte:
.1086	a5 06		lda $06				lda 	TOS
.1088	48		pha				pha
.1089	a5 07		lda $07				lda 	TOS+1
.108b	48		pha				pha
.108c	e8		inx				inx  							; point X to the word
.108d	e8		inx				inx
.108e	8a		txa				txa 							; copy into Y
.108f	a8		tay				tay
.1090	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1092	85 06		sta $06				sta 	TOS
.1094	c8		iny				iny 							; read and push the MSB
.1095	b1 03		lda ($03),y			lda 	(IP),y
.1097	85 07		sta $07				sta 	TOS+1
.1099	4c 00 00	jmp $0000			jmp 	NextCode
.109c					Literal2ByteDecode:
.109c	a9 06		lda #$06			lda 	#CTH_Keyword
.109e	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.10a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a3	aa		tax				tax
.10a4	c8		iny				iny
.10a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a7	a8		tay				tay
.10a8	8a		txa				txa
.10a9	38		sec				sec 							; output signed
.10aa	20 9a 1b	jsr $1b9a			jsr 	DecodeYAToBuffer
.10ad	60		rts				rts
.10ae					LiteralString:
.10ae	a5 06		lda $06				lda 	TOS
.10b0	48		pha				pha
.10b1	a5 07		lda $07				lda 	TOS+1
.10b3	48		pha				pha
.10b4	e8		inx				inx
.10b5	e8		inx				inx 							; skip over current word
.10b6	8a		txa				txa 							; add to IP + 1 to give string address
.10b7	a8		tay				tay 							; put in Y
.10b8	38		sec				sec 							; make that TOS
.10b9	65 03		adc $03				adc 	IP
.10bb	85 06		sta $06				sta 	TOS
.10bd	a5 04		lda $04				lda 	IP+1
.10bf	69 00		adc #$00			adc 	#0
.10c1	85 07		sta $07				sta 	TOS+1
.10c3	8a		txa				txa 							; add data length to X
.10c4	18		clc				clc
.10c5	71 03		adc ($03),y			adc 	(IP),y
.10c7	aa		tax				tax
.10c8	ca		dex				dex
.10c9	ca		dex				dex
.10ca	4c 00 00	jmp $0000			jmp 	NextCode
.10cd					LiteralStringDecoder:
.10cd	a9 05		lda #$05			lda 	#CTH_String
.10cf	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.10d2	a9 22		lda #$22			lda 	#'"'
.10d4	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.10d7	20 81 1b	jsr $1b81			jsr 	DecodeOutputData
.10da	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.10dd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10de					ExternInitialise:
.10de	a9 90		lda #$90			lda 	#144 						; set colour
.10e0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e3	a9 01		lda #$01			lda 	#$01
.10e5	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e8	a9 0e		lda #$0e			lda 	#14							; lower case
.10ea	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10ed	a9 93		lda #$93			lda 	#147 						; clear screen
.10ef	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f2	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f4	4c 15 11	jmp $1115			jmp 	ExternColour
.10f7					ExternCheckBreak:
.10f7	da		phx				phx 								; make sure we keep XY
.10f8	5a		phy				phy
.10f9	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fc	f0 03		beq $1101			beq		_ECBExit 					; stopped
.10fe	7a		ply				ply 								; restore and exit.
.10ff	fa		plx				plx
.1100	60		rts				rts
.1101					_ECBExit:
.1101	20 20 10	jsr $1020			jsr 	ErrorHandler
>1104	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.110b					ExternPrint:
.110b	48		pha				pha
.110c	da		phx				phx
.110d	5a		phy				phy
.110e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1111	7a		ply				ply
.1112	fa		plx				plx
.1113	68		pla				pla
.1114	60		rts				rts
.1115					ExternColour:
.1115	48		pha				pha
.1116	da		phx				phx
.1117	48		pha				pha
.1118	29 08		and #$08			and 	#8
.111a	0a		asl a				asl 	a
.111b	0a		asl a				asl 	a
.111c	0a		asl a				asl 	a
.111d	0a		asl a				asl 	a
.111e	49 92		eor #$92			eor 	#$92
.1120	20 0b 11	jsr $110b			jsr 	ExternPrint
.1123	68		pla				pla
.1124	29 07		and #$07			and 	#7
.1126	aa		tax				tax
.1127	bd 30 11	lda $1130,x			lda 	_ECTable,x
.112a	20 0b 11	jsr $110b			jsr 	ExternPrint
.112d	fa		plx				plx
.112e	68		pla				pla
.112f	60		rts				rts
.1130					_ECTable:
>1130	90						.byte 	144
>1131	1c						.byte 	28
>1132	1e						.byte 	30
>1133	9e						.byte 	158
>1134	1f						.byte 	31
>1135	9c						.byte 	156
>1136	9f						.byte 	159
>1137	05						.byte 	5
.1138					ExternInput:
.1138	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.113a	85 14		sta $14				sta 	temp3
.113c	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113e	85 15		sta $15				sta 	temp3+1
.1140	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1143	29 7f		and #$7f			and 	#$7F
.1145	c9 0d		cmp #$0d			cmp 	#13
.1147	f0 0a		beq $1153			beq 	_EIExit
.1149	92 14		sta ($14)			sta 	(temp3)
.114b	e6 14		inc $14				inc 	temp3
.114d	d0 f1		bne $1140			bne 	_EIRead
.114f	e6 15		inc $15				inc 	temp3+1
.1151	80 ed		bra $1140			bra 	_EIRead
.1153	a9 00		lda #$00	_EIExit:lda 	#0
.1155	92 14		sta ($14)			sta 	(temp3)
.1157	a9 0d		lda #$0d			lda 	#13
.1159	20 0b 11	jsr $110b			jsr 	ExternPrint
.115c	60		rts				rts
.115d					ExternSave:
.115d	da		phx				phx
.115e	5a		phy				phy
.115f	85 12		sta $12				sta 	temp2 						; save start
.1161	84 13		sty $13				sty 	temp2+1
.1163	20 c5 11	jsr $11c5			jsr 	EXGetLength 				; get length of file into A
.1166	a6 14		ldx $14				ldx 	temp3
.1168	a4 15		ldy $15				ldy 	temp3+1
.116a	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116d	a9 01		lda #$01			lda 	#1
.116f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1171	a0 00		ldy #$00			ldy 	#0
.1173	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1176	a6 10		ldx $10				ldx 	temp1 						; end address
.1178	a4 11		ldy $11				ldy 	temp1+1
.117a	a9 12		lda #$12			lda 	#temp2
.117c	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.117f	b0 03		bcs $1184			bcs 	_ESSave
.1181	7a		ply				ply
.1182	fa		plx				plx
.1183	60		rts				rts
.1184					_ESSave:
.1184	20 20 10	jsr $1020			jsr 	ErrorHandler
>1187	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>118f	4c 45 44 00
.1193					ExternLoad:
.1193	da		phx				phx 								; save XY
.1194	5a		phy				phy
.1195	48		pha				pha 								; save target
.1196	5a		phy				phy
.1197	20 c5 11	jsr $11c5			jsr 	EXGetLength 				; get length of file into A
.119a	a6 14		ldx $14				ldx 	temp3
.119c	a4 15		ldy $15				ldy 	temp3+1
.119e	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11a1	a9 01		lda #$01			lda 	#1
.11a3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a5	a0 00		ldy #$00			ldy 	#0
.11a7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11aa	7a		ply				ply 								; restore target to YX and call load
.11ab	fa		plx				plx
.11ac	a9 00		lda #$00			lda 	#0 							; load command
.11ae	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11b1	b0 03		bcs $11b6			bcs 	_ESLoad
.11b3	7a		ply				ply
.11b4	fa		plx				plx
.11b5	60		rts				rts
.11b6					_ESLoad:
.11b6	20 20 10	jsr $1020			jsr 	ErrorHandler
>11b9	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11c1	4c 45 44 00
.11c5					EXGetLength:
.11c5	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c7	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11c9	d0 02		bne $11cd			bne 	_EXGLExit
.11cb	e6 15		inc $15				inc 	temp3+1
.11cd					_EXGLExit:
.11cd	60		rts				rts
.11ce					EXPrintString:
.11ce	48		pha				pha
.11cf	5a		phy				phy
.11d0	84 11		sty $11				sty 	temp1+1
.11d2	85 10		sta $10				sta 	temp1
.11d4	a0 00		ldy #$00			ldy 	#0
.11d6					_EXPSLoop:
.11d6	b1 10		lda ($10),y			lda 	(temp1),y
.11d8	f0 08		beq $11e2			beq 	_EXPSExit
.11da	29 7f		and #$7f			and 	#$7F
.11dc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11df	c8		iny				iny
.11e0	80 f4		bra $11d6			bra 	_EXPSLoop
.11e2					_EXPSExit:
.11e2	7a		ply				ply
.11e3	68		pla				pla
.11e4	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e5					Add:
.11e5	7a		ply				ply
.11e6	68		pla				pla
.11e7	18		clc				clc
.11e8	65 06		adc $06				adc 	TOS
.11ea	85 06		sta $06				sta 	TOS
.11ec	98		tya				tya
.11ed	65 07		adc $07				adc 	TOS+1
.11ef	85 07		sta $07				sta 	TOS+1
.11f1	4c 00 00	jmp $0000			jmp 	NextCode
.11f4					Subtract:
.11f4	7a		ply				ply
.11f5	68		pla				pla
.11f6	38		sec				sec
.11f7	49 ff		eor #$ff			eor 	#$FF
.11f9	65 06		adc $06				adc 	TOS
.11fb	85 06		sta $06				sta 	TOS
.11fd	98		tya				tya
.11fe	49 ff		eor #$ff			eor 	#$FF
.1200	65 07		adc $07				adc 	TOS+1
.1202	85 07		sta $07				sta 	TOS+1
.1204	4c 00 00	jmp $0000			jmp 	NextCode
.1207					And:
.1207	68		pla				pla
.1208	25 07		and $07				and 	TOS+1
.120a	85 07		sta $07				sta 	TOS+1
.120c	68		pla				pla
.120d	25 06		and $06				and 	TOS
.120f	85 06		sta $06				sta 	TOS
.1211	4c 00 00	jmp $0000			jmp 	NextCode
.1214					Xor:
.1214	68		pla				pla
.1215	45 07		eor $07				eor 	TOS+1
.1217	85 07		sta $07				sta 	TOS+1
.1219	68		pla				pla
.121a	45 06		eor $06				eor 	TOS
.121c	85 06		sta $06				sta 	TOS
.121e	4c 00 00	jmp $0000			jmp 	NextCode
.1221					LogOr:
.1221	68		pla				pla
.1222	05 07		ora $07				ora 	TOS+1
.1224	85 07		sta $07				sta 	TOS+1
.1226	68		pla				pla
.1227	05 06		ora $06				ora 	TOS
.1229	85 06		sta $06				sta 	TOS
.122b	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122e					CheckNotEqual:
.122e	38		sec				sec
.122f	80 01		bra $1232			bra 	CECode
.1231					CheckEqual:
.1231	18		clc				clc
.1232					CECode:
.1232	86 10		stx $10				stx 	temp1
.1234	ba		tsx				tsx
.1235	08		php				php
.1236	a5 06		lda $06				lda 	TOS
.1238	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.123b	d0 17		bne $1254			bne	 	CompareFalse
.123d	a5 07		lda $07				lda 	TOS+1
.123f	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1242	d0 10		bne $1254			bne 	CompareFalse
.1244					CompareTrue:
.1244	a6 10		ldx $10				ldx 	temp1
.1246	28		plp				plp
.1247	b0 10		bcs $1259			bcs		CompareFalse2
.1249					CompareTrue2:
.1249	68		pla				pla
.124a	68		pla				pla
.124b	a9 ff		lda #$ff			lda 	#$FF
.124d	85 06		sta $06				sta 	TOS
.124f	85 07		sta $07				sta 	TOS+1
.1251	4c 00 00	jmp $0000			jmp 	NextCode
.1254					CompareFalse:
.1254	a6 10		ldx $10				ldx 	temp1
.1256	28		plp				plp
.1257	b0 f0		bcs $1249			bcs		CompareTrue2
.1259					CompareFalse2:
.1259	68		pla				pla
.125a	68		pla				pla
.125b	64 06		stz $06				stz 	TOS
.125d	64 07		stz $07				stz 	TOS+1
.125f	4c 00 00	jmp $0000			jmp 	NextCode
.1262					CheckGreaterEq:
.1262	38		sec				sec
.1263	80 01		bra $1266			bra		CLCode
.1265					CheckLess:
.1265	18		clc				clc
.1266	86 10		stx $10		CLCode:	stx 	temp1
.1268	ba		tsx				tsx
.1269	08		php				php
.126a	18		clc				clc
.126b	a5 06		lda $06				lda 	TOS
.126d	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1270	a5 07		lda $07				lda 	TOS+1
.1272	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1275	50 02		bvc $1279			bvc 	_CLNoFlip
.1277	49 80		eor #$80			eor 	#$80
.1279					_CLNoFlip:
.1279	0a		asl a				asl 	a
.127a	b0 d8		bcs $1254			bcs 	CompareFalse
.127c	80 c6		bra $1244			bra 	CompareTrue
.127e					CheckLessEq:
.127e	38		sec				sec
.127f	80 01		bra $1282			bra		CGCode
.1281					CheckGreater:
.1281	18		clc				clc
.1282					CGCode:
.1282	86 10		stx $10				stx 	temp1
.1284	ba		tsx				tsx
.1285	08		php				php
.1286	18		clc				clc
.1287	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.128a	e5 06		sbc $06				sbc 	TOS
.128c	bd 01 01	lda $0101,x			lda 	Stack2High,x
.128f	e5 07		sbc $07				sbc 	TOS+1
.1291	50 02		bvc $1295			bvc 	_CGNoFlip
.1293	49 80		eor #$80			eor 	#$80
.1295					_CGNoFlip:
.1295	0a		asl a				asl 	a
.1296	b0 bc		bcs $1254			bcs 	CompareFalse
.1298	80 aa		bra $1244			bra 	CompareTrue
.129a					Minimum:
.129a	a9 00		lda #$00			lda 	#0
.129c	80 02		bra $12a0			bra 	MinMaxCode
.129e					Maximum:
.129e	a9 80		lda #$80			lda 	#$80
.12a0					MinMaxCode:
.12a0	85 11		sta $11				sta 	temp1+1
.12a2	86 10		stx $10				stx 	temp1
.12a4	ba		tsx				tsx
.12a5	38		sec				sec
.12a6	a5 06		lda $06				lda 	TOS
.12a8	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12ab	a5 07		lda $07				lda 	TOS+1
.12ad	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12b0	50 02		bvc $12b4			bvc 	_MMNoFlip
.12b2	49 80		eor #$80			eor 	#$80
.12b4					_MMNoFlip:
.12b4	45 11		eor $11				eor 	temp1+1
.12b6	30 0a		bmi $12c2			bmi 	_MMNoCopy
.12b8	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12bb	85 06		sta $06				sta 	TOS
.12bd	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12c0	85 07		sta $07				sta 	TOS+1
.12c2					_MMNoCopy:
.12c2	a6 10		ldx $10				ldx 	temp1
.12c4	68		pla				pla
.12c5	68		pla				pla
.12c6	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12c9					Divide16x16:
.12c9	86 12		stx $12				stx 	temp2
.12cb	ba		tsx				tsx
.12cc	20 ef 12	jsr $12ef			jsr 	IntegerDivide
.12cf	68		pla				pla
.12d0	85 07		sta $07				sta 	TOS+1
.12d2	68		pla				pla
.12d3	85 06		sta $06				sta 	TOS
.12d5	a6 12		ldx $12				ldx 	temp2
.12d7	4c 00 00	jmp $0000			jmp 	NextCode
.12da					Modulus16x16:
.12da	86 12		stx $12				stx 	temp2
.12dc	ba		tsx				tsx
.12dd	20 ef 12	jsr $12ef			jsr 	IntegerDivide
.12e0	a6 12		ldx $12				ldx 	temp2
.12e2	68		pla				pla
.12e3	68		pla				pla
.12e4	a5 10		lda $10				lda 	temp1
.12e6	85 06		sta $06				sta 	TOS
.12e8	a5 11		lda $11				lda 	temp1+1
.12ea	85 07		sta $07				sta 	TOS+1
.12ec	4c 00 00	jmp $0000			jmp 	NextCode
.12ef					IntegerDivide:
.12ef	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12f1	05 07		ora $07				ora 	TOS+1
.12f3	d0 14		bne $1309			bne 	_BFDOkay
.12f5	20 20 10	jsr $1020			jsr 	ErrorHandler
>12f8	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1300	20 42 59 20 5a 45 52 4f 00
.1309					_BFDOkay:
.1309	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.130b	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130d	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.130f	20 4a 13	jsr $134a			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1312	20 64 13	jsr $1364			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1315	5a		phy				phy 								; Y is the counter
.1316	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1318					_BFDLoop:
.1318	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.131b	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131e	26 10		rol $10				rol 	temp1
.1320	26 11		rol $11				rol 	temp1+1
.1322	38		sec				sec
.1323	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1325	e5 06		sbc $06				sbc 	TOS
.1327	48		pha				pha
.1328	a5 11		lda $11				lda 	temp1+1
.132a	e5 07		sbc $07				sbc 	TOS+1
.132c	90 0f		bcc $133d			bcc 	_BFDNoAdd
.132e	85 11		sta $11				sta 	temp1+1
.1330	68		pla				pla
.1331	85 10		sta $10				sta 	temp1+0
.1333	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1336	09 01		ora #$01			ora 	#1
.1338	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.133b	80 01		bra $133e			bra 	_BFDNext
.133d					_BFDNoAdd:
.133d	68		pla				pla 								; Throw away the intermediate calculations
.133e					_BFDNext:
.133e	88		dey				dey
.133f	d0 d7		bne $1318			bne 	_BFDLoop
.1341	7a		ply				ply 								; restore Y
.1342	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1344	90 03		bcc $1349			bcc 	_BFDUnsigned 				; then the result is signed
.1346	20 50 13	jsr $1350			jsr		IntegerNegateAlways 		; negate the result
.1349					_BFDUnsigned:
.1349	60		rts				rts
.134a					CheckIntegerNegate:
.134a	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134d	30 01		bmi $1350			bmi 	IntegerNegateAlways 		; if so negate it
.134f	60		rts				rts
.1350					IntegerNegateAlways:
.1350	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1352	38		sec				sec 								; negate
.1353	a9 00		lda #$00			lda 	#0
.1355	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1358	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.135b	a9 00		lda #$00			lda 	#0
.135d	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1360	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1363	60		rts				rts
.1364					CheckTOSNegate:
.1364	a5 07		lda $07				lda 	TOS+1
.1366	10 0f		bpl $1377			bpl		CTNNoChange
.1368	e6 1a		inc $1a				inc 	SignCount
.136a					TOSNegateAlways:
.136a	38		sec				sec
.136b	a9 00		lda #$00			lda 	#0
.136d	e5 06		sbc $06				sbc 	TOS
.136f	85 06		sta $06				sta 	TOS
.1371	a9 00		lda #$00			lda 	#0
.1373	e5 07		sbc $07				sbc 	TOS+1
.1375	85 07		sta $07				sta 	TOS+1
.1377					CTNNoChange:
.1377	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1378					Multiply16x16:
.1378	86 10		stx $10				stx 	temp1
.137a	ba		tsx				tsx
.137b	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137e	85 12		sta $12				sta 	temp2
.1380	bd 01 01	lda $0101,x			lda		Stack2High,x
.1383	85 13		sta $13				sta 	temp2+1
.1385	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1388	9e 01 01	stz $0101,x			stz 	Stack2High,x
.138b					_MultLoop:
.138b	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138d	66 12		ror $12				ror 	temp2
.138f	90 11		bcc $13a2			bcc 	_MultNoAdd
.1391	18		clc				clc 								; add 1st to 2nd
.1392	a5 06		lda $06				lda 	TOS
.1394	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1397	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.139a	a5 07		lda $07				lda 	TOS+1
.139c	7d 01 01	adc $0101,x			adc 	Stack2High,x
.139f	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a2					_MultNoAdd:
.13a2	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a4	26 07		rol $07				rol 	TOS+1
.13a6	a5 12		lda $12				lda 	temp2	 					; until zero
.13a8	05 13		ora $13				ora 	temp2+1
.13aa	d0 df		bne $138b			bne 	_MultLoop
.13ac	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ae	68		pla				pla
.13af	85 07		sta $07				sta 	TOS+1
.13b1	68		pla				pla
.13b2	85 06		sta $06				sta 	TOS
.13b4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b7					Unary1Plus:
.13b7	e6 06		inc $06				inc 	TOS
.13b9	d0 02		bne $13bd			bne 	_U1PSkip
.13bb	e6 07		inc $07				inc 	TOS+1
.13bd					_U1PSkip:
.13bd	4c 00 00	jmp $0000			jmp 	NextCode
.13c0					Unary2Plus:
.13c0	18		clc				clc
.13c1	a5 06		lda $06				lda 	TOS
.13c3	69 02		adc #$02			adc 	#2
.13c5	85 06		sta $06				sta 	TOS
.13c7	90 02		bcc $13cb			bcc 	_U1PSkip
.13c9	e6 07		inc $07				inc 	TOS+1
.13cb					_U1PSkip:
.13cb	4c 00 00	jmp $0000			jmp 	NextCode
.13ce					Unary1Minus:
.13ce	a5 06		lda $06				lda 	TOS
.13d0	d0 02		bne $13d4			bne 	_U1MSkip
.13d2	c6 07		dec $07				dec 	TOS+1
.13d4					_U1MSkip:
.13d4	c6 06		dec $06				dec 	TOS
.13d6	4c 00 00	jmp $0000			jmp 	NextCode
.13d9					Unary2Minus:
.13d9	38		sec				sec
.13da	a5 06		lda $06				lda 	TOS
.13dc	e9 02		sbc #$02			sbc 	#2
.13de	85 06		sta $06				sta 	TOS
.13e0	b0 02		bcs $13e4			bcs 	_U1PSkip
.13e2	c6 07		dec $07				dec 	TOS+1
.13e4					_U1PSkip:
.13e4	4c 00 00	jmp $0000			jmp 	NextCode
.13e7					Absolute:
.13e7	a5 07		lda $07				lda 	TOS+1
.13e9	30 03		bmi $13ee			bmi 	Negate
.13eb	4c 00 00	jmp $0000			jmp 	NextCode
.13ee					Negate:
.13ee	38		sec				sec
.13ef	a9 00		lda #$00			lda 	#0
.13f1	e5 06		sbc $06				sbc 	TOS
.13f3	85 06		sta $06				sta 	TOS
.13f5	a9 00		lda #$00			lda 	#0
.13f7	e5 07		sbc $07				sbc 	TOS+1
.13f9	85 07		sta $07				sta 	TOS+1
.13fb	4c 00 00	jmp $0000			jmp 	NextCode
.13fe					OneComplement:
.13fe	a5 06		lda $06				lda 	TOS
.1400	49 ff		eor #$ff			eor 	#$FF
.1402	85 06		sta $06				sta 	TOS
.1404	a5 07		lda $07				lda 	TOS+1
.1406	49 ff		eor #$ff			eor 	#$FF
.1408	85 07		sta $07				sta 	TOS+1
.140a	4c 00 00	jmp $0000			jmp 	NextCode
.140d					CheckMinus:
.140d	a5 07		lda $07				lda 	TOS+1
.140f	30 07		bmi $1418			bmi 	UnaryTrue
.1411					UnaryFalse:
.1411	64 06		stz $06				stz 	TOS
.1413	64 07		stz $07				stz 	TOS+1
.1415	4c 00 00	jmp $0000			jmp 	NextCode
.1418					UnaryTrue:
.1418	a9 ff		lda #$ff			lda 	#$FF
.141a	85 06		sta $06				sta 	TOS
.141c	85 07		sta $07				sta 	TOS+1
.141e	4c 00 00	jmp $0000			jmp 	NextCode
.1421					CheckZero:
.1421	a5 06		lda $06				lda 	TOS
.1423	05 07		ora $07				ora 	TOS+1
.1425	d0 ea		bne $1411			bne 	UnaryFalse
.1427	80 ef		bra $1418			bra 	UnaryTrue
.1429					SignTOS:
.1429	a5 07		lda $07				lda 	TOS+1
.142b	30 eb		bmi $1418			bmi		UnaryTrue
.142d	05 06		ora $06				ora 	TOS
.142f	f0 e0		beq $1411			beq 	UnaryFalse
.1431	a9 01		lda #$01			lda 	#1
.1433	85 06		sta $06				sta 	TOS
.1435	64 07		stz $07				stz		TOS+1
.1437	4c 00 00	jmp $0000			jmp 	NextCode
.143a					ByteSwap:
.143a	a5 06		lda $06				lda 	TOS
.143c	a4 07		ldy $07				ldy 	TOS+1
.143e	85 07		sta $07				sta 	TOS+1
.1440	84 06		sty $06				sty 	TOS
.1442	4c 00 00	jmp $0000			jmp 	NextCode
.1445					Times16:
.1445	06 06		asl $06				asl 	TOS
.1447	26 07		rol $07				rol 	TOS+1
.1449					Times8:
.1449	06 06		asl $06				asl 	TOS
.144b	26 07		rol $07				rol 	TOS+1
.144d					Times4:
.144d	06 06		asl $06				asl 	TOS
.144f	26 07		rol $07				rol 	TOS+1
.1451					Times2:
.1451	06 06		asl $06				asl 	TOS
.1453	26 07		rol $07				rol 	TOS+1
.1455	4c 00 00	jmp $0000			jmp 	NextCode
.1458					Divide16:
.1458	46 07		lsr $07				lsr 	TOS+1
.145a	66 06		ror $06				ror 	TOS
.145c					Divide8:
.145c	46 07		lsr $07				lsr 	TOS+1
.145e	66 06		ror $06				ror 	TOS
.1460					Divide4:
.1460	46 07		lsr $07				lsr 	TOS+1
.1462	66 06		ror $06				ror 	TOS
.1464					Divide2:
.1464	46 07		lsr $07				lsr 	TOS+1
.1466	66 06		ror $06				ror 	TOS
.1468	4c 00 00	jmp $0000			jmp 	NextCode
.146b					Times256:
.146b	a5 06		lda $06				lda 	TOS
.146d	85 07		sta $07				sta 	TOS+1
.146f	64 06		stz $06				stz 	TOS
.1471	4c 00 00	jmp $0000			jmp 	NextCode
.1474					Divide256:
.1474	a5 07		lda $07				lda 	TOS+1
.1476	85 06		sta $06				sta 	TOS
.1478	64 07		stz $07				stz 	TOS+1
.147a	4c 00 00	jmp $0000			jmp 	NextCode
.147d					RandomNumber:
.147d	a5 06		lda $06				lda 	TOS
.147f	48		pha				pha
.1480	a5 07		lda $07				lda 	TOS+1
.1482	48		pha				pha
.1483	a5 1b		lda $1b				lda 	randomSeed
.1485	05 1c		ora $1c				ora 	randomSeed+1
.1487	d0 08		bne $1491			bne 	_RH_NoInit
.1489	a9 7c		lda #$7c			lda 	#$7C
.148b	85 1b		sta $1b				sta 	randomSeed
.148d	a9 a1		lda #$a1			lda 	#$A1
.148f	85 1c		sta $1c				sta 	randomSeed+1
.1491					_RH_NoInit:
.1491	a5 1b		lda $1b				lda 	randomSeed
.1493	4a		lsr a		        lsr		a
.1494	26 1c		rol $1c		        rol 	randomSeed+1
.1496	90 02		bcc $149a	        bcc 	_RH_NoEor
.1498	49 b4		eor #$b4	        eor 	#$B4
.149a					_RH_NoEor:
.149a	85 1b		sta $1b		        sta 	randomSeed
.149c	45 1c		eor $1c		        eor 	randomSeed+1
.149e	85 07		sta $07		        sta 	TOS+1
.14a0	a5 1b		lda $1b		        lda 	randomSeed
.14a2	85 06		sta $06		        sta 	TOS
.14a4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a7					Constant0:
.14a7	a5 06		lda $06				lda 	TOS
.14a9	48		pha				pha
.14aa	a5 07		lda $07				lda 	TOS+1
.14ac	48		pha				pha
.14ad	64 06		stz $06				stz 	TOS
.14af	64 07		stz $07				stz 	TOS+1
.14b1	4c 00 00	jmp $0000			jmp 	NextCode
.14b4					ConstantMinus1:
.14b4	a5 06		lda $06				lda 	TOS
.14b6	48		pha				pha
.14b7	a5 07		lda $07				lda 	TOS+1
.14b9	48		pha				pha
.14ba	a9 ff		lda #$ff			lda 	#$FF
.14bc	85 06		sta $06				sta 	TOS
.14be	85 07		sta $07				sta 	TOS+1
.14c0	4c 00 00	jmp $0000			jmp 	NextCode
.14c3					C1:
.14c3	a0 01		ldy #$01			ldy 	#1
.14c5	80 24		bra $14eb			bra 	Const1Byte
.14c7					C2:
.14c7	a0 02		ldy #$02			ldy 	#2
.14c9	80 20		bra $14eb			bra 	Const1Byte
.14cb					C3:
.14cb	a0 03		ldy #$03			ldy 	#3
.14cd	80 1c		bra $14eb			bra 	Const1Byte
.14cf					C4:
.14cf	a0 04		ldy #$04			ldy 	#4
.14d1	80 18		bra $14eb			bra 	Const1Byte
.14d3					C5:
.14d3	a0 05		ldy #$05			ldy 	#5
.14d5	80 14		bra $14eb			bra 	Const1Byte
.14d7					C8:
.14d7	a0 08		ldy #$08			ldy 	#8
.14d9	80 10		bra $14eb			bra 	Const1Byte
.14db					C10:
.14db	a0 0a		ldy #$0a			ldy 	#10
.14dd	80 0c		bra $14eb			bra 	Const1Byte
.14df					C15:
.14df	a0 0f		ldy #$0f			ldy 	#15
.14e1	80 08		bra $14eb			bra 	Const1Byte
.14e3					C16:
.14e3	a0 10		ldy #$10			ldy 	#16
.14e5	80 04		bra $14eb			bra 	Const1Byte
.14e7					C24:
.14e7	a0 18		ldy #$18			ldy 	#24
.14e9	80 00		bra $14eb			bra 	Const1Byte
.14eb					Const1Byte:
.14eb	a5 06		lda $06				lda 	TOS
.14ed	48		pha				pha
.14ee	a5 07		lda $07				lda 	TOS+1
.14f0	48		pha				pha
.14f1	84 06		sty $06				sty 	TOS
.14f3	64 07		stz $07				stz 	TOS+1
.14f5	4c 00 00	jmp $0000			jmp 	NextCode
.14f8					C32:
.14f8	a0 20		ldy #$20			ldy 	#32
.14fa	80 ef		bra $14eb			bra 	Const1Byte
.14fc					C63:
.14fc	a0 3f		ldy #$3f			ldy 	#63
.14fe	80 eb		bra $14eb			bra 	Const1Byte
.1500					C64:
.1500	a0 40		ldy #$40			ldy 	#64
.1502	80 e7		bra $14eb			bra 	Const1Byte
.1504					C100:
.1504	a0 64		ldy #$64			ldy 	#100
.1506	80 e3		bra $14eb			bra 	Const1Byte
.1508					C127:
.1508	a0 7f		ldy #$7f			ldy 	#127
.150a	80 df		bra $14eb			bra 	Const1Byte
.150c					C128:
.150c	a0 80		ldy #$80			ldy 	#128
.150e	80 db		bra $14eb			bra 	Const1Byte
.1510					C255:
.1510	a0 ff		ldy #$ff			ldy 	#255
.1512	80 d7		bra $14eb			bra 	Const1Byte
.1514					Const2Byte:
.1514	85 06		sta $06				sta 	TOS
.1516	84 07		sty $07				sty 	TOS+1
.1518	4c 00 00	jmp $0000			jmp 	NextCode
.151b					C256:
.151b	a5 06		lda $06				lda 	TOS
.151d	48		pha				pha
.151e	a5 07		lda $07				lda 	TOS+1
.1520	48		pha				pha
.1521	a9 00		lda #$00			lda 	#(256) & $FF
.1523	a0 01		ldy #$01			ldy 	#(256) >> 8
.1525	80 ed		bra $1514			bra 	Const2Byte
.1527					C512:
.1527	a5 06		lda $06				lda 	TOS
.1529	48		pha				pha
.152a	a5 07		lda $07				lda 	TOS+1
.152c	48		pha				pha
.152d	a9 00		lda #$00			lda 	#(512) & $FF
.152f	a0 02		ldy #$02			ldy 	#(512) >> 8
.1531	80 e1		bra $1514			bra 	Const2Byte
.1533					C1024:
.1533	a5 06		lda $06				lda 	TOS
.1535	48		pha				pha
.1536	a5 07		lda $07				lda 	TOS+1
.1538	48		pha				pha
.1539	a9 00		lda #$00			lda 	#(1024) & $FF
.153b	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153d	80 d5		bra $1514			bra 	Const2Byte
.153f					C4096:
.153f	a5 06		lda $06				lda 	TOS
.1541	48		pha				pha
.1542	a5 07		lda $07				lda 	TOS+1
.1544	48		pha				pha
.1545	a9 00		lda #$00			lda 	#(4096) & $FF
.1547	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1549	80 c9		bra $1514			bra 	Const2Byte
.154b					C32767:
.154b	a5 06		lda $06				lda 	TOS
.154d	48		pha				pha
.154e	a5 07		lda $07				lda 	TOS+1
.1550	48		pha				pha
.1551	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1553	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1555	80 bd		bra $1514			bra 	Const2Byte
.1557					C32768:
.1557	a5 06		lda $06				lda 	TOS
.1559	48		pha				pha
.155a	a5 07		lda $07				lda 	TOS+1
.155c	48		pha				pha
.155d	a9 00		lda #$00			lda 	#(32768) & $FF
.155f	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1561	80 b1		bra $1514			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1563					Drop:
.1563	68		pla				pla
.1564	85 07		sta $07				sta 	TOS+1
.1566	68		pla				pla
.1567	85 06		sta $06				sta 	TOS
.1569	4c 00 00	jmp $0000			jmp 	NextCode
.156c					TestDup:
.156c	a5 06		lda $06				lda 	TOS
.156e	05 07		ora $07				ora 	TOS+1
.1570	d0 03		bne $1575			bne 	Dup
.1572	4c 00 00	jmp $0000			jmp 	NextCode
.1575					Dup:
.1575	a5 06		lda $06				lda 	TOS
.1577	48		pha				pha
.1578	a5 07		lda $07				lda 	TOS+1
.157a	48		pha				pha
.157b	4c 00 00	jmp $0000			jmp 	NextCode
.157e					Swap:
.157e	86 10		stx $10				stx 	temp1
.1580	7a		ply				ply
.1581	fa		plx				plx
.1582	a5 06		lda $06				lda 	TOS
.1584	48		pha				pha
.1585	a5 07		lda $07				lda 	TOS+1
.1587	48		pha				pha
.1588	86 06		stx $06				stx 	TOS
.158a	84 07		sty $07				sty 	TOS+1
.158c	a6 10		ldx $10				ldx 	temp1
.158e	4c 00 00	jmp $0000			jmp 	NextCode
.1591					Over:
.1591	a5 06		lda $06				lda 	TOS
.1593	48		pha				pha
.1594	a5 07		lda $07				lda 	TOS+1
.1596	48		pha				pha
.1597	86 10		stx $10				stx 	temp1
.1599	ba		tsx				tsx
.159a	bd 04 01	lda $0104,x			lda 	stack3low,x
.159d	85 06		sta $06				sta 	TOS
.159f	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a2	85 07		sta $07				sta 	TOS+1
.15a4	a6 10		ldx $10				ldx 	temp1
.15a6	4c 00 00	jmp $0000			jmp 	NextCode
.15a9					Nip:
.15a9	68		pla				pla
.15aa	68		pla				pla
.15ab	4c 00 00	jmp $0000			jmp 	NextCode
.15ae					Rot:
.15ae	86 10		stx $10				stx 	temp1
.15b0	ba		tsx				tsx
.15b1	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b4	a8		tay				tay
.15b5	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b8	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15bb	a5 06		lda $06				lda 	TOS
.15bd	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15c0	84 06		sty $06				sty 	TOS
.15c2	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c5	a8		tay				tay
.15c6	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15c9	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15cc	a5 07		lda $07				lda 	TOS+1
.15ce	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15d1	84 07		sty $07				sty 	TOS+1
.15d3	a6 10		ldx $10				ldx 	temp1
.15d5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d8					ByteRead:
.15d8	b2 06		lda ($06)			lda 	(TOS)
.15da	85 06		sta $06				sta 	TOS
.15dc	64 07		stz $07				stz 	TOS+1
.15de	4c 00 00	jmp $0000			jmp 	NextCode
.15e1					WordRead:
.15e1	a0 01		ldy #$01			ldy 	#1
.15e3	b1 06		lda ($06),y			lda 	(TOS),y
.15e5	a8		tay				tay
.15e6	b2 06		lda ($06)			lda 	(TOS)
.15e8	85 06		sta $06				sta 	TOS
.15ea	84 07		sty $07				sty 	TOS+1
.15ec	4c 00 00	jmp $0000			jmp 	NextCode
.15ef					ByteWrite:
.15ef	68		pla				pla
.15f0	68		pla				pla
.15f1	92 06		sta ($06)			sta 	(TOS)
.15f3	68		pla				pla
.15f4	85 07		sta $07				sta 	TOS+1
.15f6	68		pla				pla
.15f7	85 06		sta $06				sta 	TOS
.15f9	4c 00 00	jmp $0000			jmp 	NextCode
.15fc					WordWrite:
.15fc	68		pla				pla
.15fd	a0 01		ldy #$01			ldy 	#1
.15ff	91 06		sta ($06),y			sta 	(TOS),y
.1601	68		pla				pla
.1602	92 06		sta ($06)			sta 	(TOS)
.1604	68		pla				pla
.1605	85 07		sta $07				sta 	TOS+1
.1607	68		pla				pla
.1608	85 06		sta $06				sta 	TOS
.160a	4c 00 00	jmp $0000			jmp 	NextCode
.160d					WordAdd:
.160d	7a		ply				ply
.160e	68		pla				pla
.160f	18		clc				clc
.1610	72 06		adc ($06)			adc 	(TOS)
.1612	92 06		sta ($06)			sta 	(TOS)
.1614	98		tya				tya
.1615	a0 01		ldy #$01			ldy 	#1
.1617	71 06		adc ($06),y			adc 	(TOS),y
.1619	91 06		sta ($06),y			sta 	(TOS),y
.161b	68		pla				pla
.161c	85 07		sta $07				sta 	TOS+1
.161e	68		pla				pla
.161f	85 06		sta $06				sta 	TOS
.1621	4c 00 00	jmp $0000			jmp 	NextCode
.1624					AllocateMemory:
.1624	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1626	48		pha				pha
.1627	a5 07		lda $07				lda 	TOS+1
.1629	48		pha				pha
.162a	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162c	85 06		sta $06				sta 	TOS
.162e	a5 0f		lda $0f				lda 	nextFreeMem+1
.1630	85 07		sta $07				sta 	TOS+1
.1632	7a		ply				ply 								; advance the free ram pointer
.1633	68		pla				pla
.1634	20 75 1a	jsr $1a75			jsr 	AdvanceFreeMem
.1637	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.163a					EncodeProgram:
.163a	48		pha				pha 								; save registers.
.163b	da		phx				phx
.163c	5a		phy				phy
.163d	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.163f	85 08		sta $08				sta		srcPtr
.1641	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1643	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1646	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.1649	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.164c	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.164e	20 ac 17	jsr $17ac			jsr 	CheckIsDigit
.1651	90 09		bcc $165c			bcc 	_EPNoLineNumber 			; if so there is a line number
.1653	20 ce 17	jsr $17ce			jsr 	EncodeGetConstant 			; extract that constant from the source
.1656	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.1659	8c 12 09	sty $0912			sty 	encodeBuffer+2
.165c					_EPNoLineNumber:
.165c					EncodeLoop:
.165c	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.165e	f0 0b		beq $166b			beq 	_EPEndEncode
.1660	c9 20		cmp #$20			cmp 	#32
.1662	d0 12		bne $1676			bne 	_EPNotSpace
.1664	a9 01		lda #$01			lda 	#1
.1666	20 c4 17	jsr $17c4			jsr 	EncodeAddSrcPtr
.1669	80 f1		bra $165c			bra	 	EncodeLoop
.166b					_EPEndEncode:
.166b	a9 5e		lda #$5e			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.166d	a0 1d		ldy #$1d			ldy 	#NextLine >> 8
.166f	20 93 17	jsr $1793			jsr 	EncodeWriteWord
.1672	7a		ply				ply									; restore and exit.
.1673	fa		plx				plx
.1674	68		pla				pla
.1675	60		rts				rts
.1676					_EPNotSpace:
.1676	b2 08		lda ($08)			lda 	(srcPtr)
.1678	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.167a	f0 04		beq $1680			beq 	_EPIsComStr
.167c	c9 27		cmp #$27			cmp 	#"'"
.167e	d0 05		bne $1685			bne 	_EPNotComStr
.1680					_EPIsComStr:
.1680	20 f0 16	jsr $16f0			jsr 	EncodeCommentString
.1683	80 d7		bra $165c			bra 	EncodeLoop
.1685					_EPNotComStr:
.1685	38		sec				sec
.1686	20 df 17	jsr $17df			jsr 	EncSetBit7Word
.1689	20 f2 17	jsr $17f2			jsr 	EncodeSearchDictionary		; look it up
.168c	90 44		bcc $16d2			bcc 	_EPNotInDictionary
.168e	85 10		sta $10				sta 	temp1 						; save dictionary record address
.1690	84 11		sty $11				sty 	temp1+1
.1692	a0 01		ldy #$01			ldy 	#1
.1694	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.1696	29 20		and #$20			and 	#$20
.1698	d0 12		bne $16ac			bne 	_EPEncodeRoutine 			; if so, do special routine.
.169a	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.169c	b1 10		lda ($10),y			lda 	(temp1),y
.169e	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.16a1	c8		iny				iny
.16a2	b1 10		lda ($10),y			lda 	(temp1),y
.16a4	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.16a7	20 b8 17	jsr $17b8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16aa	80 b0		bra $165c			bra 	EncodeLoop
.16ac					_EPEncodeRoutine:
.16ac	a0 01		ldy #$01			ldy 	#1							; get type bit
.16ae	b1 10		lda ($10),y			lda 	(temp1),y
.16b0	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.16b2	29 10		and #$10			and 	#$10 						; but decoder comes first
.16b4	f0 02		beq $16b8			beq 	_EPENoDecoder
.16b6	c8		iny				iny 								; so if it exists, adjust for it.
.16b7	c8		iny				iny
.16b8					_EPENoDecoder:
.16b8	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.16ba	85 12		sta $12				sta 	temp2
.16bc	c8		iny				iny
.16bd	b1 10		lda ($10),y			lda 	(temp1),y
.16bf	85 13		sta $13				sta 	temp2+1
.16c1	48		pha				pha 								; call routine preserving state
.16c2	da		phx				phx
.16c3	5a		phy				phy
.16c4	20 cf 16	jsr $16cf			jsr 	_EPECallTemp2
.16c7	7a		ply				ply
.16c8	fa		plx				plx
.16c9	68		pla				pla
.16ca	20 b8 17	jsr $17b8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16cd	80 8d		bra $165c			bra 	EncodeLoop
.16cf					_EPECallTemp2:
.16cf	6c 12 00	jmp ($0012)			jmp 	(temp2)
.16d2					_EPNotInDictionary:
.16d2	20 45 17	jsr $1745			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.16d5	90 19		bcc $16f0			bcc 	_EPNotDefined
.16d7	48		pha				pha
.16d8	a9 fc		lda #$fc			lda	 	#CallHandler & $FF 			; write code call handler
.16da	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.16dd	a9 18		lda #$18			lda	 	#CallHandler >> 8
.16df	20 9d 17	jsr $179d			jsr 	EncodeWriteByte 			; write line number
.16e2	68		pla				pla
.16e3	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.16e6	98		tya				tya
.16e7	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.16ea	20 b8 17	jsr $17b8			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16ed	4c 5c 16	jmp $165c			jmp 	EncodeLoop
.16f0					_EPNotDefined:

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.16f0					EncodeCommentString:
.16f0	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.16f2	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.16f4	aa		tax				tax 								; save in X
.16f5	a9 75		lda #$75			lda 	#(SkipComment & $FF)		; get the routine to use
.16f7	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.16f9	e0 27		cpx #$27			cpx 	#"'"
.16fb	f0 06		beq $1703			beq 	_ECSGotCmd
.16fd	86 10		stx $10				stx		temp1 						; other terminator = "
.16ff	a9 ae		lda #$ae			lda 	#(LiteralString & $FF)
.1701	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.1703					_ECSGotCmd:
.1703	20 93 17	jsr $1793			jsr 	EncodeWriteWord 			; write word out.
.1706	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1709	a9 01		lda #$01			lda 	#1
.170b	20 9d 17	jsr $179d			jsr 	EncodeWriteByte 			; write total length, so far 1.
.170e	a0 01		ldy #$01			ldy 	#1 							; for reading the actual text
.1710					_ECSCopyText:
.1710	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.1712	f0 18		beq $172c			beq 	_ECSEndOfLine 				; end of line ?
.1714	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.1716	f0 09		beq $1721			beq 	_ECSEndOfString 			; if so must be closing quote.
.1718	20 9d 17	jsr $179d			jsr 	EncodeWriteByte 			; write the byte out
.171b	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.171e	c8		iny				iny 								; next character
.171f	80 ef		bra $1710			bra 	_ECSCopyText
.1721					_ECSEndOfString:
.1721	c8		iny				iny 								; skip closing quote.
.1722	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.1724	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.1727	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.172a	80 0e		bra $173a			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.172c					_ECSEndOfLine:
.172c	a5 10		lda $10				lda 	temp1 						; missing closing quote
.172e	f0 0a		beq $173a			beq 	_ECSComplete 				; if we were doing a string.
.1730	20 20 10	jsr $1020			jsr 	ErrorHandler
>1733	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.173a					_ECSComplete:
.173a	98		tya				tya
.173b	18		clc				clc
.173c	65 08		adc $08				adc 	srcPtr
.173e	85 08		sta $08				sta 	srcPtr
.1740	90 02		bcc $1744			bcc 	_ECSExit
.1742	e6 09		inc $09				inc 	srcPtr+1
.1744					_ECSExit:
.1744	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.1745					EncodeSearchUserDefined:
.1745	38		sec				sec 								; temp1 = srcPtr-6 because the
.1746	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.1748	e9 06		sbc #$06			sbc		#6
.174a	85 10		sta $10				sta 	temp1
.174c	a5 09		lda $09				lda 	srcPtr+1
.174e	e9 00		sbc #$00			sbc 	#0
.1750	85 11		sta $11				sta 	temp1+1
.1752	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1754	85 12		sta $12				sta 	0+(temp2)
.1756	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1758	85 13		sta $13				sta 	1+(temp2)
.175a					_ESULoop:
.175a	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.175c	f0 33		beq $1791			beq 	_ESUFail
.175e	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.1760	b1 12		lda ($12),y			lda 	(temp2),y
.1762	c9 9a		cmp #$9a			cmp 	#DefineCode & $FF
.1764	d0 1e		bne $1784			bne 	_ESUNext
.1766	c8		iny				iny
.1767	b1 12		lda ($12),y			lda 	(temp2),y
.1769	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.176b	d0 17		bne $1784			bne 	_ESUNext
.176d	c8		iny				iny 								; skip length byte.
.176e					_ESUCompare:
.176e	c8		iny				iny
.176f	b1 12		lda ($12),y			lda 	(temp2),y
.1771	d1 10		cmp ($10),y			cmp 	(temp1),y
.1773	d0 0f		bne $1784			bne 	_ESUNext
.1775	0a		asl a				asl 	a 							; bit 7 set => found it.
.1776	90 f6		bcc $176e			bcc 	_ESUCompare
.1778	a0 01		ldy #$01			ldy 	#1
.177a	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.177c	aa		tax				tax
.177d	c8		iny				iny
.177e	b1 12		lda ($12),y			lda 	(temp2),y
.1780	a8		tay				tay
.1781	8a		txa				txa
.1782	38		sec				sec 								; return with carry set as found
.1783	60		rts				rts
.1784					_ESUNext:
.1784	18		clc				clc
.1785	a5 12		lda $12				lda 	temp2
.1787	72 12		adc ($12)			adc 	(temp2)
.1789	85 12		sta $12				sta 	temp2
.178b	90 02		bcc $178f			bcc 	_NoCarryAdv
.178d	e6 13		inc $13				inc 	temp2+1
.178f					_NoCarryAdv:
.178f	80 c9		bra $175a			bra 	_ESULoop 					; and loop round
.1791					_ESUFail:
.1791	18		clc				clc
.1792	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.1793					EncodeWriteWord:
.1793	48		pha				pha
.1794	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.1797	98		tya				tya
.1798	20 9d 17	jsr $179d			jsr 	EncodeWriteByte
.179b	68		pla				pla
.179c	60		rts				rts
.179d					EncodeWriteByte:
.179d	da		phx				phx
.179e	ae 10 09	ldx $0910			ldx 	encodeBuffer
.17a1	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.17a4	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.17a7	ee 10 09	inc $0910			inc 	encodeBuffer
.17aa	fa		plx				plx
.17ab	60		rts				rts
.17ac					CheckIsDigit:
.17ac	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.17ae	90 06		bcc $17b6			bcc 	_CIDFail
.17b0	c9 3a		cmp #$3a			cmp 	#"9"+1
.17b2	b0 02		bcs $17b6			bcs 	_CIDFail
.17b4	38		sec				sec
.17b5	60		rts				rts
.17b6					_CIDFail:
.17b6	18		clc				clc
.17b7	60		rts				rts
.17b8					EncodeMoveNextWord:
.17b8	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.17ba					_EPNWLoop:
.17ba	c8		iny				iny
.17bb	b1 08		lda ($08),y			lda 	(srcPtr),y
.17bd	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.17bf	b0 f9		bcs $17ba			bcs 	_EPNWLoop
.17c1	98		tya				tya
.17c2	80 00		bra $17c4			bra 	EncodeAddSrcPtr
.17c4					EncodeAddSrcPtr:
.17c4	18		clc				clc 								; add offset
.17c5	65 08		adc $08				adc 	srcPtr
.17c7	85 08		sta $08				sta 	srcPtr
.17c9	90 02		bcc $17cd			bcc 	_EASPNoCarry
.17cb	e6 09		inc $09				inc 	srcPtr+1					; carry through
.17cd					_EASPNoCarry:
.17cd	60		rts				rts
.17ce					EncodeGetConstant:
.17ce	a5 08		lda $08				lda 	srcPtr 						; get source
.17d0	a4 09		ldy $09				ldy 	srcPtr+1
.17d2	20 d0 1c	jsr $1cd0			jsr 	ConvertToInteger 			; call converter
.17d5	90 07		bcc $17de			bcc 	_EGCExit
.17d7	20 c4 17	jsr $17c4			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.17da	a5 14		lda $14				lda 	temp3 						; get result into YA
.17dc	a4 15		ldy $15				ldy 	temp3+1
.17de					_EGCExit:
.17de	60		rts				rts
.17df					EncSetBit7Word:
.17df	08		php				php 								; save carry
.17e0	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.17e2					_ESB7Loop:
.17e2	c8		iny				iny
.17e3	b1 08		lda ($08),y			lda 	(srcPtr),y
.17e5	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.17e7	b0 f9		bcs $17e2			bcs 	_ESB7Loop
.17e9	88		dey				dey									; previous character
.17ea	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.17ec	0a		asl a				asl 	a 							; shift bit 7 out
.17ed	28		plp				plp 								; restore carry
.17ee	6a		ror a				ror 	a 							; shift it in
.17ef	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.17f1	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.17f2					EncodeSearchDictionary:
.17f2	a9 98		lda #$98			lda 	#(Dictionary) & $FF
.17f4	85 10		sta $10				sta 	0+(temp1)
.17f6	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.17f8	85 11		sta $11				sta 	1+(temp1)
.17fa					_ESDLoop:
.17fa	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.17fc	18		clc				clc
.17fd	f0 46		beq $1845			beq 	_ESDExit
.17ff	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.1801	b1 10		lda ($10),y			lda 	(temp1),y
.1803	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.1804	4a		lsr a				lsr 	a
.1805	4a		lsr a				lsr 	a
.1806	4a		lsr a				lsr 	a
.1807	c8		iny				iny 								; Y = 2
.1808	4a		lsr a				lsr 	a
.1809	90 01		bcc $180c			bcc 	_ESDNotDec
.180b	c8		iny				iny
.180c					_ESDNotDec:
.180c	4a		lsr a				lsr 	a
.180d	90 01		bcc $1810			bcc 	_ESDNotInc
.180f	c8		iny				iny
.1810					_ESDNotInc:
.1810	98		tya				tya
.1811	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1812	a8		tay				tay
.1813	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.1815	d2 08		cmp ($08)			cmp 	(srcPtr)
.1817	d0 1f		bne $1838			bne 	_ESDNext 					; do not match, go to next
.1819	98		tya				tya 								; make temp2 point to the name in
.181a	18		clc				clc 								; the dictionary.
.181b	65 10		adc $10				adc 	temp1
.181d	85 12		sta $12				sta 	temp2
.181f	a5 11		lda $11				lda 	temp1+1
.1821	69 00		adc #$00			adc 	#0
.1823	85 13		sta $13				sta 	temp2+1
.1825	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.1827					_ESDCompare:
.1827	c8		iny				iny
.1828	b1 08		lda ($08),y			lda 	(srcPtr),y
.182a	d1 12		cmp ($12),y			cmp 	(temp2),y
.182c	d0 0a		bne $1838			bne 	_ESDNext
.182e	0a		asl a				asl 	a
.182f	90 f6		bcc $1827			bcc 	_ESDCompare
.1831	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.1833	a4 11		ldy $11				ldy 	temp1+1
.1835	38		sec				sec
.1836	80 0d		bra $1845			bra 	_ESDExit
.1838					_ESDNext:
.1838	18		clc				clc
.1839	a5 10		lda $10				lda 	temp1
.183b	72 10		adc ($10)			adc 	(temp1)
.183d	85 10		sta $10				sta 	temp1
.183f	90 b9		bcc $17fa			bcc 	_ESDLoop
.1841	e6 11		inc $11				inc 	temp1+1
.1843	80 b5		bra $17fa			bra 	_ESDLoop
.1845					_ESDExit:
.1845	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1846					ForHandler:
.1846	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1848	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.184a	c0 40		cpy #$40			cpy 	#$40 						; overflow
.184c	f0 18		beq $1866			beq 	_FHOverflow
.184e	a5 07		lda $07				lda 	TOS+1
.1850	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1853	a5 06		lda $06				lda 	TOS
.1855	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1858	a9 ff		lda #$ff			lda 	#$FF
.185a	99 80 07	sta $0780,y			sta 	returnStackX,y
.185d	68		pla				pla
.185e	85 07		sta $07				sta 	TOS+1
.1860	68		pla				pla
.1861	85 06		sta $06				sta 	TOS
.1863	4c 00 00	jmp $0000			jmp 	NextCode
.1866					_FHOverflow:
.1866	20 20 10	jsr $1020			jsr 	ErrorHandler
>1869	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>1871	4b 3f 00
.1874					NextHandler:
.1874	da		phx				phx
.1875	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1877	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.187a	c9 ff		cmp #$ff			cmp 	#$FF
.187c	d0 21		bne $189f			bne 	NHNoFor
.187e	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1881	d0 03		bne $1886			bne 	_NHNoBorrow
.1883	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1886					_NHNoBorrow:
.1886	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1889	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.188c	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.188f	fa		plx				plx 								; restore X and re-test
.1890	09 00		ora #$00			ora 	#0
.1892	f0 05		beq $1899			beq 	_NHComplete 				; if so then complete, else loop.
.1894	e8		inx				inx 								; advance to branch
.1895	e8		inx				inx
.1896	4c f2 18	jmp $18f2			jmp 	BranchAlways
.1899					_NHComplete:
.1899	e8		inx				inx 								; skip over the branch quantity
.189a	c6 05		dec $05				dec 	rsp 						; drop the indx
.189c	4c 00 00	jmp $0000			jmp 	NextCode
.189f					NHNoFor:
.189f	20 20 10	jsr $1020			jsr 	ErrorHandler
>18a2	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.18aa					GetIndex:
.18aa	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.18ac	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.18af	c9 ff		cmp #$ff			cmp 	#$FF
.18b1	d0 ec		bne $189f			bne 	NHNoFor
.18b3	a5 06		lda $06				lda 	TOS
.18b5	48		pha				pha
.18b6	a5 07		lda $07				lda 	TOS+1
.18b8	48		pha				pha
.18b9	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.18bc	38		sec				sec
.18bd	e9 01		sbc #$01			sbc 	#1
.18bf	85 06		sta $06				sta 	TOS
.18c1	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.18c4	e9 00		sbc #$00			sbc 	#0
.18c6	85 07		sta $07				sta 	TOS+1
.18c8	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.18cb					IfHandler:
.18cb	4c da 18	jmp $18da			jmp 	BranchIfZero
.18ce					ElseHandler:
.18ce	4c f0 18	jmp $18f0			jmp 	BranchTestSucceedsNoPop
.18d1					EndIfHandler:
.18d1	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.18d4					RepeatHandler:
.18d4	4c 00 00	jmp $0000			jmp 	NextCode
.18d7					UntilHandler:
.18d7	4c da 18	jmp $18da			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.18da					BranchIfZero:
.18da	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.18dc	05 07		ora $07				ora 	TOS+1
.18de	f0 0a		beq $18ea			beq 	BranchTestSucceeds
.18e0					BranchTestFails:
.18e0	68		pla				pla
.18e1	85 07		sta $07				sta 	TOS+1
.18e3	68		pla				pla
.18e4	85 06		sta $06				sta 	TOS
.18e6	e8		inx				inx 								; skip over the relative branch.
.18e7	4c 00 00	jmp $0000			jmp 	NextCode
.18ea					BranchTestSucceeds:
.18ea	68		pla				pla
.18eb	85 07		sta $07				sta 	TOS+1
.18ed	68		pla				pla
.18ee	85 06		sta $06				sta 	TOS
.18f0					BranchTestSucceedsNoPop:
.18f0	e8		inx				inx 								; advance by two, to the offset
.18f1	e8		inx				inx
.18f2					BranchAlways:
.18f2	8a		txa				txa 								; A = Y = position
.18f3	a8		tay				tay 								; (IP),Y now points to the branch target
.18f4	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.18f6	aa		tax				tax 								; position back in this line.
.18f7	ca		dex				dex
.18f8	ca		dex				dex
.18f9	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.18fc					CallHandler:
.18fc	e8		inx				inx									; bump X to the call address.
.18fd	e8		inx				inx
.18fe	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1900	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1902	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1904	f0 4b		beq $1951			beq 	_CHOverflow
.1906	a5 04		lda $04				lda 	IP+1
.1908	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.190b	a5 03		lda $03				lda 	IP
.190d	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1910	8a		txa				txa
.1911	99 80 07	sta $0780,y			sta 	returnStackX,y
.1914	8a		txa				txa 								; get the line number into temp1.
.1915	a8		tay				tay
.1916	b1 03		lda ($03),y			lda 	(IP),y
.1918	85 10		sta $10				sta 	temp1
.191a	c8		iny				iny
.191b	b1 03		lda ($03),y			lda 	(IP),y
.191d	85 11		sta $11				sta 	temp1+1
.191f	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1921	85 03		sta $03				sta 	0+(IP)
.1923	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1925	85 04		sta $04				sta 	1+(IP)
.1927	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1929	f0 17		beq $1942			beq 	_CHFail
.192b	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.192d					_CHSearch:
.192d	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.192f	c5 10		cmp $10				cmp 	temp1
.1931	f0 2d		beq $1960			beq 	_CHFoundLSB
.1933					_CHSearchNext:
.1933	18		clc				clc
.1934	a5 03		lda $03				lda 	IP
.1936	72 03		adc ($03)			adc 	(IP)
.1938	85 03		sta $03				sta 	IP
.193a	90 02		bcc $193e			bcc 	_NoCarryAdv
.193c	e6 04		inc $04				inc 	IP+1
.193e					_NoCarryAdv:
.193e	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.1940	d0 eb		bne $192d			bne 	_CHSearch
.1942					_CHFail:
.1942	20 20 10	jsr $1020			jsr 	ErrorHandler
>1945	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>194d	4f 4e 3f 00
.1951					_CHOverflow:
.1951	20 20 10	jsr $1020			jsr 	ErrorHandler
>1954	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>195c	54 48 3f 00
.1960					_CHFoundLSB:
.1960	c8		iny				iny 								; get MSB
.1961	b1 03		lda ($03),y			lda 	(IP),y
.1963	88		dey				dey
.1964	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1966	d0 cb		bne $1933			bne 	_CHSearchNext
.1968	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.196a	b1 03		lda ($03),y			lda 	(IP),y
.196c	c9 9a		cmp #$9a			cmp 	#DefineCode & $FF
.196e	d0 d2		bne $1942			bne 	_CHFail
.1970	c8		iny				iny
.1971	b1 03		lda ($03),y			lda 	(IP),y
.1973	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1975	d0 cb		bne $1942			bne 	_CHFail
.1977	c8		iny				iny
.1978	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.197a	18		clc				clc
.197b	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.197d	aa		tax				tax
.197e	4c 00 00	jmp $0000			jmp 	NextCode
.1981					ReturnHandler:
.1981	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1983	30 15		bmi $199a			bmi 	_RHUnderflow 				; if -ve underflowed
.1985	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1987	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.198a	85 04		sta $04				sta 	IP+1
.198c	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.198f	85 03		sta $03				sta 	IP
.1991	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1994	aa		tax				tax
.1995	f0 0e		beq $19a5			beq 	_RHInLoop 					; this means you have done :something for ; next
.1997	4c 00 00	jmp $0000			jmp 	NextCode
.199a					_RHUnderflow:
.199a	20 20 10	jsr $1020			jsr 	ErrorHandler
>199d	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.19a5					_RHInLoop:
.19a5	20 20 10	jsr $1020			jsr 	ErrorHandler
>19a8	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>19b0	4e 20 4c 4f 4f 50 3f 00
.19b8					CallHandlerDecode:
.19b8	a9 03		lda #$03			lda 	#CTH_Call					; space
.19ba	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.19bd	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.19bf	aa		tax				tax
.19c0	c8		iny				iny
.19c1	b1 08		lda ($08),y			lda 	(srcPtr),y
.19c3	a8		tay				tay
.19c4	8a		txa				txa
.19c5	20 02 1a	jsr $1a02			jsr 	FindLine 					; try to locate that line.
.19c8	b0 11		bcs $19db			bcs 	_CHDFound 					; if found .....
.19ca					_CHDLineOnly:
.19ca	48		pha				pha
.19cb	a9 3c		lda #$3c			lda 	#"<"
.19cd	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.19d0	68		pla				pla
.19d1	18		clc				clc 								; output unsigned
.19d2	20 9a 1b	jsr $1b9a			jsr 	DecodeYAToBuffer
.19d5	a9 3e		lda #$3e			lda 	#">"
.19d7	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.19da	60		rts				rts
.19db					_CHDFound:
.19db	48		pha				pha 								; save YA
.19dc	5a		phy				phy
.19dd	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.19df	b1 10		lda ($10),y			lda 	(temp1),y
.19e1	c9 9a		cmp #$9a			cmp 	#DefineCode & 255
.19e3	d0 07		bne $19ec			bne 	_CHDNoDefine
.19e5	c8		iny				iny
.19e6	b1 10		lda ($10),y			lda 	(temp1),y
.19e8	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.19ea	f0 04		beq $19f0			beq 	_CHDFoundDefine
.19ec					_CHDNoDefine:
.19ec	7a		ply				ply									; restore the line number and print it in <>
.19ed	68		pla				pla
.19ee	80 da		bra $19ca			bra 	_CHDLineOnly
.19f0					_CHDFoundDefine:
.19f0	68		pla				pla 								; throw saved line number.
.19f1	68		pla				pla
.19f2	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.19f4					_CHDOutName:
.19f4	c8		iny				iny 								; next
.19f5	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.19f7	48		pha				pha
.19f8	29 7f		and #$7f			and 	#$7F
.19fa	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.19fd	68		pla				pla
.19fe	0a		asl a				asl 	a 							; bit 7 to carry
.19ff	90 f3		bcc $19f4			bcc 	_CHDOutName
.1a01	60		rts				rts
.1a02					FindLine:
.1a02	48		pha				pha 								; save registers
.1a03	da		phx				phx
.1a04	5a		phy				phy
.1a05	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1a07	84 13		sty $13				sty 	temp2+1
.1a09	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a0b	85 10		sta $10				sta 	0+(temp1)
.1a0d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a0f	85 11		sta $11				sta 	1+(temp1)
.1a11					_FLLoop:
.1a11	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1a13	18		clc				clc									; if so exit with CC.
.1a14	f0 1d		beq $1a33			beq 	_FLExit
.1a16	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1a18	b1 10		lda ($10),y			lda 	(temp1),y
.1a1a	c5 12		cmp $12				cmp 	temp2
.1a1c	d0 08		bne $1a26			bne 	_FLNext
.1a1e	c8		iny				iny
.1a1f	b1 10		lda ($10),y			lda 	(temp1),y
.1a21	c5 13		cmp $13				cmp 	temp2+1
.1a23	38		sec				sec 								; if so exit with CS
.1a24	f0 0d		beq $1a33			beq 	_FLExit
.1a26					_FLNext:
.1a26	18		clc				clc
.1a27	a5 10		lda $10				lda 	temp1
.1a29	72 10		adc ($10)			adc 	(temp1)
.1a2b	85 10		sta $10				sta 	temp1
.1a2d	90 02		bcc $1a31			bcc 	_NoCarryAdv
.1a2f	e6 11		inc $11				inc 	temp1+1
.1a31					_NoCarryAdv:
.1a31	80 de		bra $1a11			bra 	_FLLoop 					; keep looking.
.1a33					_FLExit:
.1a33	7a		ply				ply
.1a34	fa		plx				plx
.1a35	68		pla				pla
.1a36	60		rts				rts
.1a37	18		clc				clc
.1a38	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1a39					NewHandler:
.1a39	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1a3c	20 48 1a	jsr $1a48			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1a3f	4c 00 00	jmp $0000			jmp 	NextCode
.1a42					ClrHandler:
.1a42	20 48 1a	jsr $1a48			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1a45	4c 00 00	jmp $0000			jmp 	NextCode
.1a48					ClearVariableSpace:
.1a48	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1a4a	85 05		sta $05				sta 	rsp
.1a4c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a4e	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1a50	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a52	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1a54	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1a56					_CVSHashClear:
.1a56	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1a58	99 40 06	sta $0640,y			sta 	hashTable,y
.1a5b	88		dey				dey
.1a5c	10 f8		bpl $1a56			bpl 	_CVSHashClear
.1a5e					_CVSFindEnd:
.1a5e	18		clc				clc
.1a5f	a5 0e		lda $0e				lda 	nextFreeMem
.1a61	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1a63	85 0e		sta $0e				sta 	nextFreeMem
.1a65	90 02		bcc $1a69			bcc 	_NoCarryAdv
.1a67	e6 0f		inc $0f				inc 	nextFreeMem+1
.1a69					_NoCarryAdv:
.1a69	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1a6b	d0 f1		bne $1a5e			bne 	_CVSFindEnd
.1a6d	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1a6f	a0 00		ldy #$00			ldy 	#0
.1a71	20 75 1a	jsr $1a75			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1a74	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1a75					AdvanceFreeMem:
.1a75	18		clc				clc
.1a76	65 0e		adc $0e				adc 	nextFreeMem
.1a78	85 0e		sta $0e				sta 	nextFreeMem
.1a7a	98		tya				tya
.1a7b	65 0f		adc $0f				adc 	nextFreeMem+1
.1a7d	85 0f		sta $0f				sta 	nextFreeMem+1
.1a7f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1a80					ExitDump:
.1a80	ba		tsx				tsx 								; save Data Stack in temp1
.1a81	86 10		stx $10				stx 	temp1
.1a83	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1a86					BreakCmd:
>1a86	ff						.byte 	$FF
.1a87	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1a8a					DecodeLineIntoBufPtr:
.1a8a	48		pha				pha
.1a8b	da		phx				phx
.1a8c	5a		phy				phy
.1a8d	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1a8f	84 09		sty $09				sty 	srcPtr+1
.1a91	90 1b		bcc $1aae			bcc 	_DecodeNoLineNumber
.1a93	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1a95	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a97	aa		tax				tax
.1a98	c8		iny				iny
.1a99	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a9b	a8		tay				tay
.1a9c	8a		txa				txa
.1a9d	18		clc				clc
.1a9e	20 9a 1b	jsr $1b9a			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1aa1	aa		tax				tax 								; count in X
.1aa2					_DecodeLineSpace:
.1aa2	e0 05		cpx #$05			cpx 	#5
.1aa4	f0 08		beq $1aae			beq 	_DecodeNoLineNumber
.1aa6	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1aa8	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1aab	e8		inx				inx
.1aac	80 f4		bra $1aa2			bra 	_DecodeLineSpace
.1aae					_DecodeNoLineNumber:
.1aae	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1ab0					_DecodeLoop:
.1ab0	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1ab2	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1ab4	c8		iny				iny
.1ab5	b1 08		lda ($08),y			lda 	(srcPtr),y
.1ab7	85 11		sta $11				sta 	temp1+1
.1ab9	c8		iny				iny 								; y points to the byte after it.
.1aba	a5 10		lda $10				lda 	temp1
.1abc	c9 5e		cmp #$5e			cmp 	#NextLine & $FF
.1abe	d0 06		bne $1ac6			bne 	_DecodeNotEOL
.1ac0	a5 11		lda $11				lda 	temp1+1
.1ac2	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.1ac4	f0 0b		beq $1ad1			beq 	_DecodeEOL
.1ac6					_DecodeNotEOL:
.1ac6	20 d9 1a	jsr $1ad9			jsr 	IdentifyCodeWord
.1ac9	20 23 1b	jsr $1b23			jsr 	DecodeFoundWord
.1acc	20 0d 1b	jsr $1b0d			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1acf	80 df		bra $1ab0			bra 	_DecodeLoop 				; and go round again
.1ad1					_DecodeEOL:
.1ad1	a9 00		lda #$00			lda 	#0
.1ad3	92 0a		sta ($0a)			sta 	(bufPtr)
.1ad5	7a		ply				ply 								; restore registers and exit
.1ad6	fa		plx				plx
.1ad7	68		pla				pla
.1ad8	60		rts				rts
.1ad9					IdentifyCodeWord:
.1ad9	5a		phy				phy 								; save current position on the stack.
.1ada	a9 98		lda #$98			lda 	#(Dictionary) & $FF
.1adc	85 0c		sta $0c				sta 	0+(matchPtr)
.1ade	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1ae0	85 0d		sta $0d				sta 	1+(matchPtr)
.1ae2					_DecodeIdentify:
.1ae2	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1ae4	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1ae6	c5 10		cmp $10				cmp 	temp1
.1ae8	d0 07		bne $1af1			bne 	_DecodeIdNext
.1aea	c8		iny				iny
.1aeb	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1aed	c5 11		cmp $11				cmp 	temp1+1
.1aef	f0 1a		beq $1b0b			beq 	_DecodeIdFound
.1af1					_DecodeIdNext:
.1af1	18		clc				clc
.1af2	b2 0c		lda ($0c)			lda 	(matchPtr)
.1af4	f0 0a		beq $1b00			beq 	_DecodeIdIssue
.1af6	65 0c		adc $0c				adc 	matchPtr
.1af8	85 0c		sta $0c				sta 	matchPtr
.1afa	90 e6		bcc $1ae2			bcc 	_DecodeIdentify
.1afc	e6 0d		inc $0d				inc 	matchPtr+1
.1afe	80 e2		bra $1ae2			bra 	_DecodeIdentify
.1b00					_DecodeIdIssue:
.1b00	20 20 10	jsr $1020			jsr 	ErrorHandler
>1b03	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.1b0b					_DecodeIdFound:
.1b0b	7a		ply				ply 								; restore position.
.1b0c	60		rts				rts
.1b0d					AdvanceToNext:
.1b0d	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1b0e	a0 01		ldy #$01			ldy 	#1
.1b10	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b12	29 03		and #$03			and 	#3 							; bits 0-1.
.1b14	7a		ply				ply
.1b15	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1b17	d0 02		bne $1b1b			bne 	_ATN012
.1b19	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1b1b					_ATN012:
.1b1b	85 12		sta $12				sta 	temp2 						; now add that to Y
.1b1d	98		tya				tya
.1b1e	18		clc				clc
.1b1f	65 12		adc $12				adc 	temp2
.1b21	a8		tay				tay
.1b22	60		rts				rts
.1b23					DecodeFoundWord:
.1b23	5a		phy				phy 								; save current position
.1b24	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1b26	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1b28	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1b2a	29 10		and #$10			and 	#$10
.1b2c	d0 0e		bne $1b3c			bne 	_DFWSpecialDecoder
.1b2e	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1b30	30 08		bmi $1b3a			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1b32	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1b34	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1b37	20 55 1b	jsr $1b55			jsr 	DecodeCurrentWord 			; expand that.
.1b3a					_DFWExit:
.1b3a	7a		ply				ply 								; restore current position
.1b3b	60		rts				rts
.1b3c					_DFWSpecialDecoder:
.1b3c	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1b3e	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1b40	85 12		sta $12				sta 	temp2
.1b42	c8		iny				iny
.1b43	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b45	85 13		sta $13				sta 	temp2+1
.1b47	7a		ply				ply 	 							; restore current position into Y
.1b48	48		pha				pha 								; save registers
.1b49	da		phx				phx
.1b4a	5a		phy				phy
.1b4b	20 52 1b	jsr $1b52			jsr 	_DFWCallDecoder				; call the decoder routine
.1b4e	7a		ply				ply 								; restore registers and exit
.1b4f	fa		plx				plx
.1b50	68		pla				pla
.1b51	60		rts				rts
.1b52					_DFWCallDecoder:
.1b52	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1b55					DecodeCurrentWord:
.1b55	5a		phy				phy
.1b56	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1b58	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b5a	a0 04		ldy #$04			ldy 	#4 							; original offset
.1b5c	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1b5d	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1b5e	4a		lsr a				lsr 	a 							; bit set.
.1b5f	4a		lsr a				lsr 	a
.1b60	4a		lsr a				lsr 	a 							; decoder bit
.1b61	90 02		bcc $1b65			bcc 	_DWBNoDec
.1b63	c8		iny				iny
.1b64	c8		iny				iny
.1b65					_DWBNoDec:
.1b65	4a		lsr a				lsr 	a
.1b66	90 02		bcc $1b6a			bcc 	_DWBNoEnc
.1b68	c8		iny				iny
.1b69	c8		iny				iny
.1b6a					_DWBNoEnc:
.1b6a					_DWBWordOut:
.1b6a	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1b6c	48		pha				pha
.1b6d	29 7f		and #$7f			and 	#$7F
.1b6f	20 78 1b	jsr $1b78			jsr		DecodeWriteBuffer
.1b72	c8		iny				iny
.1b73	68		pla				pla
.1b74	10 f4		bpl $1b6a			bpl 	_DWBWordOut
.1b76	7a		ply				ply 								; restore Y and exit
.1b77	60		rts				rts
.1b78					DecodeWriteBuffer:
.1b78	92 0a		sta ($0a)			sta 	(bufPtr)
.1b7a	e6 0a		inc $0a				inc 	bufPtr
.1b7c	d0 02		bne $1b80			bne 	_DWBNoCarry
.1b7e	e6 0b		inc $0b				inc 	bufPtr+1
.1b80					_DWBNoCarry:
.1b80	60		rts				rts
.1b81					DecodeOutputData:
.1b81	48		pha				pha
.1b82	da		phx				phx
.1b83	5a		phy				phy
.1b84	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1b86	aa		tax				tax
.1b87					_DODLoop:
.1b87	ca		dex				dex 								; done it all ?
.1b88	f0 0c		beq $1b96			beq		_DODExit
.1b8a	c8		iny				iny 								; output next character
.1b8b	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b8d	29 7f		and #$7f			and 	#$7F
.1b8f	f0 f6		beq $1b87			beq 	_DODLoop 					; don't print NULL
.1b91	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1b94	80 f1		bra $1b87			bra 	_DODLoop
.1b96					_DODExit:
.1b96	7a		ply				ply
.1b97	fa		plx				plx
.1b98	68		pla				pla
.1b99	60		rts				rts
.1b9a					DecodeYAToBuffer:
.1b9a	da		phx				phx
.1b9b	5a		phy				phy
.1b9c	48		pha				pha
.1b9d	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1b9f	85 12		sta $12				sta 	temp2
.1ba1	a5 0b		lda $0b				lda 	bufPtr+1
.1ba3	85 13		sta $13				sta 	temp2+1
.1ba5	68		pla				pla
.1ba6	20 da 1d	jsr $1dda			jsr 	ConvertToStringMain 		; convert YA to string there
.1ba9	aa		tax				tax 								; chars output to X
.1baa	18		clc				clc
.1bab	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1bad	85 0a		sta $0a				sta 	bufPtr
.1baf	90 02		bcc $1bb3			bcc 	_DYABNoCarry
.1bb1	e6 0b		inc $0b				inc 	bufPtr+1
.1bb3					_DYABNoCarry:
.1bb3	8a		txa				txa 								; count in A
.1bb4	7a		ply				ply									; restore and exit.
.1bb5	fa		plx				plx
.1bb6	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1bb7					ListCode:
.1bb7	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1bb9	64 1f		stz $1f				stz 	ListLowest+1
.1bbb	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1bbd	85 1d		sta $1d				sta 	ListCount
.1bbf	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1bc1	85 18		sta $18				sta 	0+(listPtr)
.1bc3	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1bc5	85 19		sta $19				sta 	1+(listPtr)
.1bc7	86 10		stx $10				stx 	temp1						; S->A
.1bc9	ba		tsx				tsx
.1bca	8a		txa				txa
.1bcb	a6 10		ldx $10				ldx 	temp1
.1bcd	c9 80		cmp #$80			cmp 	#NumberStackBase
.1bcf	f0 0e		beq $1bdf			beq 	_LCLoop
.1bd1	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1bd3	85 1e		sta $1e				sta 	ListLowest
.1bd5	a5 07		lda $07				lda 	TOS+1
.1bd7	85 1f		sta $1f				sta 	ListLowest+1
.1bd9	68		pla				pla
.1bda	85 07		sta $07				sta 	TOS+1
.1bdc	68		pla				pla
.1bdd	85 06		sta $06				sta 	TOS
.1bdf					_LCLoop:
.1bdf	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1be1	f0 4e		beq $1c31			beq 	_LCExit
.1be3	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1be5	b1 18		lda ($18),y			lda 	(listPtr),y
.1be7	c5 1e		cmp $1e				cmp 	ListLowest
.1be9	c8		iny				iny
.1bea	b1 18		lda ($18),y			lda 	(listPtr),y
.1bec	e5 1f		sbc $1f				sbc 	ListLowest+1
.1bee	90 34		bcc $1c24			bcc 	_LCNext
.1bf0	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1bf2	85 0a		sta $0a				sta 	0+(bufPtr)
.1bf4	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1bf6	85 0b		sta $0b				sta 	1+(bufPtr)
.1bf8	a5 18		lda $18				lda 	listPtr 					; output the line.
.1bfa	a4 19		ldy $19				ldy 	listPtr+1
.1bfc	38		sec				sec
.1bfd	20 8a 1a	jsr $1a8a			jsr 	DecodeLineIntoBufPtr
.1c00	a9 02		lda #$02			lda 	#CTH_LineNo
.1c02	20 15 11	jsr $1115			jsr 	ExternColour
.1c05	a0 ff		ldy #$ff			ldy 	#255
.1c07					_LCLoop2:
.1c07	c8		iny				iny
.1c08	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c0b	f0 0e		beq $1c1b			beq 	_LCEnd
.1c0d	c9 20		cmp #$20			cmp 	#32
.1c0f	b0 05		bcs $1c16			bcs 	_LCPrint
.1c11	20 15 11	jsr $1115			jsr 	ExternColour
.1c14	a9 20		lda #$20			lda 	#32
.1c16					_LCPrint:
.1c16	20 0b 11	jsr $110b			jsr 	ExternPrint
.1c19	80 ec		bra $1c07			bra 	_LCLoop2
.1c1b	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1c1d	20 0b 11	jsr $110b			jsr 	ExternPrint
.1c20	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1c22	f0 0d		beq $1c31			beq 	_LCExit
.1c24					_LCNext:
.1c24	18		clc				clc
.1c25	a5 18		lda $18				lda 	listPtr
.1c27	72 18		adc ($18)			adc 	(listPtr)
.1c29	85 18		sta $18				sta 	listPtr
.1c2b	90 02		bcc $1c2f			bcc 	_NoCarryAdv
.1c2d	e6 19		inc $19				inc 	listPtr+1
.1c2f					_NoCarryAdv:
.1c2f	80 ae		bra $1bdf			bra 	_LCLoop 					; go round again.
.1c31					_LCExit:
.1c31	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1c34					RunProgram:
.1c34	a2 80		ldx #$80			ldx 	#NumberStackBase
.1c36	9a		txs				txs
.1c37	20 48 1a	jsr $1a48			jsr 	ClearVariableSpace 			; clear variables etc.
.1c3a	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1c3c	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1c3e	20 75 10	jsr $1075			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1c41	4c 00 00	jmp $0000			jmp 	NextCode
.1c44					Call6502:
.1c44	a5 06		lda $06				lda 	TOS 						; copy call address
.1c46	85 10		sta $10				sta 	temp1
.1c48	a5 07		lda $07				lda 	TOS+1
.1c4a	85 11		sta $11				sta 	temp1+1
.1c4c	68		pla				pla
.1c4d	85 07		sta $07				sta 	TOS+1
.1c4f	68		pla				pla
.1c50	85 06		sta $06				sta 	TOS
.1c52	20 58 1c	jsr $1c58			jsr 	_CallTemp1 					; call it
.1c55	4c 00 00	jmp $0000			jmp 	NextCode
.1c58					_CallTemp1:
.1c58	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1c5b					AssertCode:
.1c5b	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1c5d	05 07		ora $07				ora 	TOS+1
.1c5f	f0 09		beq $1c6a			beq 	_ASFail 					; if zero fail
.1c61	68		pla				pla
.1c62	85 07		sta $07				sta 	TOS+1
.1c64	68		pla				pla
.1c65	85 06		sta $06				sta 	TOS
.1c67	4c 00 00	jmp $0000			jmp 	NextCode
.1c6a					_ASFail:
.1c6a	20 20 10	jsr $1020			jsr 	ErrorHandler
>1c6d	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1c74					StopCode:
.1c74	20 20 10	jsr $1020			jsr 	ErrorHandler
>1c77	53 54 4f 50 00					.text 	"STOP",0
.1c7c					EndProgram:
.1c7c	4c 10 10	jmp $1010			jmp 	WarmStart
.1c7f					VlistCode:
.1c7f	a9 98		lda #$98			lda 	#(Dictionary) & $FF
.1c81	85 10		sta $10				sta 	0+(temp1)
.1c83	a9 1f		lda #$1f			lda 	#(Dictionary) >> 8
.1c85	85 11		sta $11				sta 	1+(temp1)
.1c87	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1c89	b1 10		lda ($10),y			lda 	(temp1),y
.1c8b	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1c8d	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1c8e	4a		lsr a				lsr 	a
.1c8f	4a		lsr a				lsr		a
.1c90	4a		lsr a				lsr 	a
.1c91	4a		lsr a				lsr 	a 							; add those bits in
.1c92	90 02		bcc $1c96			bcc 	_VLNoDec
.1c94	c8		iny				iny
.1c95	c8		iny				iny
.1c96					_VLNoDec:
.1c96	4a		lsr a				lsr 	a
.1c97	90 02		bcc $1c9b			bcc 	_VLNoEnc
.1c99	c8		iny				iny
.1c9a	c8		iny				iny
.1c9b					_VLNoEnc:
.1c9b	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1c9d	c9 24		cmp #$24			cmp 	#"$"
.1c9f	d0 06		bne $1ca7			bne 	_VLPrint
.1ca1	c8		iny				iny
.1ca2	51 10		eor ($10),y			eor 	(temp1),y
.1ca4	f0 13		beq $1cb9			beq 	_VLNext
.1ca6	88		dey				dey
.1ca7					_VLPrint:
.1ca7	b1 10		lda ($10),y			lda 	(temp1),y
.1ca9	48		pha				pha
.1caa	c8		iny				iny
.1cab	29 7f		and #$7f			and 	#$7F
.1cad	20 0b 11	jsr $110b			jsr 	ExternPrint
.1cb0	68		pla				pla
.1cb1	0a		asl a				asl 	a
.1cb2	90 f3		bcc $1ca7			bcc 	_VLPrint
.1cb4	a9 20		lda #$20			lda 	#32
.1cb6	20 0b 11	jsr $110b			jsr 	ExternPrint
.1cb9					_VLNext:
.1cb9	18		clc				clc 								; go to next
.1cba	b2 10		lda ($10)			lda 	(temp1)
.1cbc	65 10		adc $10				adc 	temp1
.1cbe	85 10		sta $10				sta 	temp1
.1cc0	90 02		bcc $1cc4			bcc 	_VLNoCarry
.1cc2	e6 11		inc $11				inc 	temp1+1
.1cc4					_VLNoCarry:
.1cc4	b2 10		lda ($10)			lda 	(temp1)
.1cc6	d0 bf		bne $1c87			bne 	_VLLoop
.1cc8	a9 0d		lda #$0d			lda 	#13
.1cca	20 0b 11	jsr $110b			jsr 	ExternPrint
.1ccd	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1cd0					ConvertToInteger:
.1cd0	84 17		sty $17				sty 	temp4+1
.1cd2	85 16		sta $16				sta 	temp4
.1cd4	64 14		stz $14				stz 	temp3 						; reset value
.1cd6	64 15		stz $15				stz 	temp3+1
.1cd8	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1cda	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1cdc	b1 16		lda ($16),y			lda 	(temp4),y
.1cde	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1ce0	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1ce2	d0 01		bne $1ce5			bne 	_CTINotMinus
.1ce4	c8		iny				iny									; skip -
.1ce5					_CTINotMinus:
.1ce5	b1 16		lda ($16),y			lda 	(temp4),y
.1ce7	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1ce9	d0 03		bne $1cee			bne 	_CTILoop
.1ceb	c6 10		dec $10				dec 	temp1
.1ced	c8		iny				iny
.1cee					_CTILoop:
.1cee	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1cf0	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1cf2	38		sec				sec
.1cf3	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1cf5	90 65		bcc $1d5c			bcc 	_CTIFail 					; out of range.
.1cf7	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1cf9	90 0b		bcc $1d06			bcc 	_CTILegal
.1cfb	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1cfd	90 5d		bcc $1d5c			bcc 	_CTIFail
.1cff	38		sec				sec
.1d00	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d02	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d04	b0 56		bcs $1d5c			bcs 	_CTIFail
.1d06					_CTILegal:
.1d06	48		pha				pha 								; save digit value.
.1d07	06 14		asl $14				asl 	temp3
.1d09	26 15		rol $15				rol 	temp3+1
.1d0b	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1d0d	85 12		sta $12				sta 	temp2
.1d0f	a5 15		lda $15				lda 	temp3+1
.1d11	85 13		sta $13				sta 	temp2+1
.1d13	06 14		asl $14				asl 	temp3
.1d15	26 15		rol $15				rol 	temp3+1
.1d17	06 14		asl $14				asl 	temp3
.1d19	26 15		rol $15				rol 	temp3+1
.1d1b	24 10		bit $10				bit 	temp1 						; hexadecimal
.1d1d	10 07		bpl $1d26			bpl 	_CTIDecimal
.1d1f	06 14		asl $14				asl 	temp3
.1d21	26 15		rol $15				rol 	temp3+1
.1d23	68		pla				pla 								; get digit back
.1d24	80 12		bra $1d38			bra 	_CTIAddLoop
.1d26					_CTIDecimal:
.1d26	18		clc				clc 								; x 8 + x 2 = x 10
.1d27	a5 14		lda $14				lda 	temp3
.1d29	65 12		adc $12				adc 	temp2
.1d2b	85 14		sta $14				sta 	temp3
.1d2d	a5 15		lda $15				lda 	temp3+1
.1d2f	65 13		adc $13				adc 	temp2+1
.1d31	85 15		sta $15				sta 	temp3+1
.1d33	68		pla				pla 								; check digit 0-9
.1d34	c9 0a		cmp #$0a			cmp 	#10
.1d36	b0 24		bcs $1d5c			bcs 	_CTIFail
.1d38					_CTIAddLoop:
.1d38	18		clc				clc
.1d39	65 14		adc $14				adc 	temp3
.1d3b	85 14		sta $14				sta 	temp3
.1d3d	90 02		bcc $1d41			bcc 	_CTINoCarry
.1d3f	e6 15		inc $15				inc 	temp3+1
.1d41					_CTINoCarry:
.1d41	c8		iny				iny
.1d42	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1d44	c9 21		cmp #$21			cmp 	#32+1
.1d46	b0 a6		bcs $1cee			bcs 	_CTILoop 					; no, go back.
.1d48	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1d4a	d0 0d		bne $1d59			bne 	_CTIOkay
.1d4c	38		sec				sec
.1d4d	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1d4f	e5 14		sbc $14				sbc 	temp3
.1d51	85 14		sta $14				sta 	temp3
.1d53	a9 00		lda #$00			lda 	#0
.1d55	e5 15		sbc $15				sbc 	temp3+1
.1d57	85 15		sta $15				sta 	temp3+1
.1d59					_CTIOkay:
.1d59	98		tya				tya
.1d5a	38		sec				sec
.1d5b	60		rts				rts
.1d5c					_CTIFail:
.1d5c	18		clc				clc
.1d5d	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1d5e					NextLine:
.1d5e	18		clc				clc
.1d5f	a5 03		lda $03				lda 	IP
.1d61	72 03		adc ($03)			adc 	(IP)
.1d63	85 03		sta $03				sta 	IP
.1d65	90 02		bcc $1d69			bcc 	_NoCarryAdv
.1d67	e6 04		inc $04				inc 	IP+1
.1d69					_NoCarryAdv:
.1d69	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1d6b	f0 05		beq $1d72			beq 	_NLGoEnd
.1d6d	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1d6f	4c 00 00	jmp $0000			jmp 	NextCode
.1d72					_NLGoEnd:
.1d72	4c 10 10	jmp $1010			jmp 	WarmStart
.1d75					SkipComment:
.1d75	e8		inx				inx									; (IP),X points to the length.
.1d76	e8		inx				inx
.1d77	8a		txa				txa
.1d78	a8		tay				tay 								; put into Y
.1d79	18		clc				clc
.1d7a	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1d7c	aa		tax				tax 								; put back in X
.1d7d	ca		dex				dex
.1d7e	ca		dex				dex
.1d7f	4c 00 00	jmp $0000			jmp 	NextCode
.1d82					CommentDecoder:
.1d82	a9 06		lda #$06			lda 	#CTH_Keyword
.1d84	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1d87	a9 27		lda #$27			lda 	#"'"
.1d89	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1d8c	a9 0b		lda #$0b			lda 	#CTH_Comment
.1d8e	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1d91	20 81 1b	jsr $1b81			jsr 	DecodeOutputData
.1d94	a9 20		lda #$20			lda 	#32
.1d96	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1d99	60		rts				rts
.1d9a					DefineCode:
.1d9a	20 20 10	jsr $1020			jsr 	ErrorHandler
>1d9d	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1da5	4f 4e 3f 00
.1da9					DefineDecoder:
.1da9	a9 07		lda #$07			lda 	#CTH_Definition
.1dab	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1dae	a9 3a		lda #$3a			lda 	#":"
.1db0	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1db3	20 81 1b	jsr $1b81			jsr 	DecodeOutputData
.1db6	a9 20		lda #$20			lda 	#32
.1db8	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1dbb	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1dbc					IntToString:
.1dbc	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1dbe	85 12		sta $12				sta 	0+(temp2)
.1dc0	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1dc2	85 13		sta $13				sta 	1+(temp2)
.1dc4	a5 06		lda $06				lda 	TOS 						; value in YA
.1dc6	a4 07		ldy $07				ldy 	TOS+1
.1dc8	20 d6 1d	jsr $1dd6			jsr 	ConvertToString
.1dcb	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1dcd	85 06		sta $06				sta 	0+(TOS)
.1dcf	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1dd1	85 07		sta $07				sta 	1+(TOS)
.1dd3	4c 00 00	jmp $0000			jmp 	NextCode
.1dd6					ConvertToString:
.1dd6	38		sec				sec
.1dd7	80 01		bra $1dda			bra 	ConvertToStringMain
.1dd9					ConvertToStringUnsigned:
.1dd9	18		clc				clc
.1dda					ConvertToStringMain:
.1dda	da		phx				phx									; save XY
.1ddb	5a		phy				phy
.1ddc	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1dde	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1de0	84 11		sty $11				sty 	temp1+1
.1de2	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1de4	90 16		bcc $1dfc			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1de6	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1de8	10 12		bpl $1dfc			bpl 	_CTSUnsigned
.1dea	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1dec	91 12		sta ($12),y			sta 	(temp2),y
.1dee	c8		iny				iny
.1def	38		sec				sec 								; negate temp1
.1df0	a9 00		lda #$00			lda 	#0
.1df2	e5 10		sbc $10				sbc 	temp1
.1df4	85 10		sta $10				sta 	temp1
.1df6	a9 00		lda #$00			lda 	#0
.1df8	e5 11		sbc $11				sbc 	temp1+1
.1dfa	85 11		sta $11				sta 	temp1+1
.1dfc					_CTSUnsigned:
.1dfc	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1dfe					_CTSLoop:
.1dfe	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e00	91 12		sta ($12),y			sta 	(temp2),y
.1e02					_CTSSubLoop:
.1e02	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1e04	1a		inc a				inc 	a
.1e05	91 12		sta ($12),y			sta 	(temp2),y
.1e07	38		sec				sec 								; do subtraction saving interim result
.1e08	a5 10		lda $10				lda 	temp1
.1e0a	fd 3d 1e	sbc $1e3d,x			sbc 	_CTSTable,x
.1e0d	48		pha				pha
.1e0e	a5 11		lda $11				lda 	temp1+1
.1e10	fd 3e 1e	sbc $1e3e,x			sbc 	_CTSTable+1,x
.1e13	90 07		bcc $1e1c			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e15	85 11		sta $11				sta 	temp1+1 					; save result back
.1e17	68		pla				pla
.1e18	85 10		sta $10				sta 	temp1
.1e1a	80 e6		bra $1e02			bra 	_CTSSubLoop
.1e1c					_CTSCantSubtract:
.1e1c	68		pla				pla 								; throw away interim
.1e1d	e8		inx				inx 								; next subtractor
.1e1e	e8		inx				inx
.1e1f	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1e21	49 30		eor #$30			eor 	#"0"
.1e23	05 1a		ora $1a				ora 	SignCount
.1e25	85 1a		sta $1a				sta 	SignCount
.1e27	f0 01		beq $1e2a			beq		_CTSLZ 						; if all zeros so far suppress.
.1e29	c8		iny				iny 								; next character
.1e2a					_CTSLZ:
.1e2a	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1e2c	d0 d0		bne $1dfe			bne 	_CTSLoop
.1e2e					_CTSComplete:
.1e2e	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1e30	09 30		ora #$30			ora 	#48 						; ASCII
.1e32	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1e34	c8		iny				iny
.1e35	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e37	91 12		sta ($12),y			sta 	(temp2),y
.1e39	98		tya				tya 								; size in A
.1e3a	7a		ply				ply									; pull and exit.
.1e3b	fa		plx				plx
.1e3c	60		rts				rts
.1e3d					_CTSTable:
>1e3d	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e45					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1e45					VarAddressHandler:
.1e45	18		clc				clc 								; find variable, error if it doesn't exist.
.1e46	20 97 1e	jsr $1e97			jsr 	VariableFind
.1e49	a5 06		lda $06				lda 	TOS
.1e4b	48		pha				pha
.1e4c	a5 07		lda $07				lda 	TOS+1
.1e4e	48		pha				pha
.1e4f	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1e51	85 06		sta $06				sta 	TOS
.1e53	a5 11		lda $11				lda		temp1+1
.1e55	85 07		sta $07				sta 	TOS+1
.1e57	4c 00 00	jmp $0000			jmp 	NextCode
.1e5a					VarAddrHandlerDecode:
.1e5a	a9 26		lda #$26			lda 	#"&"
.1e5c	4c 45 1f	jmp $1f45			jmp 	VarHandlerDecode
.1e5f					VarReadHandler:
.1e5f	18		clc				clc 								; find variable, error if it doesn't exist.
.1e60	20 97 1e	jsr $1e97			jsr 	VariableFind
.1e63	a5 06		lda $06				lda 	TOS
.1e65	48		pha				pha
.1e66	a5 07		lda $07				lda 	TOS+1
.1e68	48		pha				pha
.1e69	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1e6b	85 06		sta $06				sta 	TOS
.1e6d	a0 01		ldy #$01			ldy 	#1
.1e6f	b1 10		lda ($10),y			lda 	(temp1),y
.1e71	85 07		sta $07				sta 	TOS+1
.1e73	4c 00 00	jmp $0000			jmp 	NextCode
.1e76					VarReadHandlerDecode:
.1e76	a9 40		lda #$40			lda 	#"@"
.1e78	4c 45 1f	jmp $1f45			jmp 	VarHandlerDecode
.1e7b					VarWriteHandler:
.1e7b	38		sec				sec 								; find variable, create it if it doesn't exist.
.1e7c	20 97 1e	jsr $1e97			jsr 	VariableFind
.1e7f	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1e81	92 10		sta ($10)			sta 	(temp1)
.1e83	a5 07		lda $07				lda 	TOS+1
.1e85	a0 01		ldy #$01			ldy 	#1
.1e87	91 10		sta ($10),y			sta 	(temp1),y
.1e89	68		pla				pla
.1e8a	85 07		sta $07				sta 	TOS+1
.1e8c	68		pla				pla
.1e8d	85 06		sta $06				sta 	TOS
.1e8f	4c 00 00	jmp $0000			jmp 	NextCode
.1e92					VarWriteHandlerDecode:
.1e92	a9 21		lda #$21			lda 	#"!"
.1e94	4c 45 1f	jmp $1f45			jmp 	VarHandlerDecode
.1e97					VariableFind:
.1e97	08		php				php 								; save autocreate flag.
.1e98	e8		inx				inx 								; advance to/over the variable name.
.1e99	e8		inx				inx
.1e9a	8a		txa				txa 								; put in Y
.1e9b	a8		tay				tay
.1e9c	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1e9e	85 12		sta $12				sta 	temp2
.1ea0	c8		iny				iny
.1ea1	b1 03		lda ($03),y			lda 	(IP),y
.1ea3	85 13		sta $13				sta 	temp2+1
.1ea5	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1ea7	b0 0f		bcs $1eb8			bcs 	_VFLong
.1ea9	a5 13		lda $13				lda 	temp2+1
.1eab	d0 0b		bne $1eb8			bne 	_VFLong
.1ead	a5 12		lda $12				lda 	temp2						; this is the index
.1eaf	0a		asl a				asl 	a 							; double it
.1eb0	85 10		sta $10				sta 	temp1
.1eb2	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1eb4	85 11		sta $11				sta 	temp1+1
.1eb6	28		plp				plp 								; throw creation flag, it always exists.
.1eb7	60		rts				rts
.1eb8					_VFLong:
.1eb8	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1eba	6a		ror a				ror 	a
.1ebb	6a		ror a				ror 	a
.1ebc	6a		ror a				ror 	a
.1ebd	6a		ror a				ror 	a
.1ebe	45 12		eor $12				eor 	temp2
.1ec0	45 13		eor $13				eor 	temp2+1
.1ec2	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1ec4	0a		asl a				asl 	a
.1ec5	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1ec7	85 10		sta $10				sta 	temp1
.1ec9	85 14		sta $14				sta 	temp3
.1ecb	a9 06		lda #$06			lda 	#hashTable >> 8
.1ecd	85 11		sta $11				sta 	temp1+1
.1ecf	85 15		sta $15				sta 	temp3+1
.1ed1					_VFSearch:
.1ed1	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1ed3	b1 10		lda ($10),y			lda 	(temp1),y
.1ed5	f0 23		beq $1efa			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1ed7	a8		tay				tay 								; follow the link through.
.1ed8	b2 10		lda ($10)			lda 	(temp1)
.1eda	85 10		sta $10				sta 	temp1
.1edc	84 11		sty $11				sty 	temp1+1
.1ede	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1ee0	b1 10		lda ($10),y			lda 	(temp1),y
.1ee2	c5 12		cmp $12				cmp 	temp2
.1ee4	d0 eb		bne $1ed1			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1ee6	c8		iny				iny 								; same for 2nd byte of name
.1ee7	b1 10		lda ($10),y			lda 	(temp1),y
.1ee9	c5 13		cmp $13				cmp 	temp2+1
.1eeb	d0 e4		bne $1ed1			bne 	_VFSearch
.1eed	18		clc				clc
.1eee	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1ef0	69 02		adc #$02			adc 	#2
.1ef2	85 10		sta $10				sta 	temp1
.1ef4	90 02		bcc $1ef8			bcc 	_VFNoPage1
.1ef6	e6 11		inc $11				inc 	temp1+1
.1ef8					_VFNoPage1:
.1ef8	28		plp				plp 								; don't need to worry about creation flag
.1ef9	60		rts				rts
.1efa					_VFNotFound:
.1efa	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1efb	b0 0d		bcs $1f0a			bcs 	_VFCreate
.1efd	20 20 10	jsr $1020			jsr 	ErrorHandler
>1f00	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1f08	3f 00
.1f0a					_VFCreate:
.1f0a	a0 01		ldy #$01			ldy 	#1
.1f0c	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1f0e	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1f10	b1 14		lda ($14),y			lda 	(temp3),y
.1f12	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f14	c8		iny				iny
.1f15	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1f17	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f19	c8		iny				iny
.1f1a	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f1c	c8		iny				iny
.1f1d	a5 12		lda $12				lda 	temp2 						; copy the name out
.1f1f	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f21	c8		iny				iny
.1f22	a5 13		lda $13				lda 	temp2+1
.1f24	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f26	a0 01		ldy #$01			ldy 	#1
.1f28	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1f2a	92 14		sta ($14)			sta 	(temp3)
.1f2c	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f2e	91 14		sta ($14),y			sta 	(temp3),y
.1f30	18		clc				clc
.1f31	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1f33	69 02		adc #$02			adc 	#2
.1f35	85 10		sta $10				sta 	temp1
.1f37	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f39	69 00		adc #$00			adc 	#0
.1f3b	85 11		sta $11				sta 	temp1+1
.1f3d	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1f3f	a0 00		ldy #$00			ldy 	#0
.1f41	20 75 1a	jsr $1a75			jsr 	AdvanceFreeMem
.1f44	60		rts				rts
.1f45					VarHandlerDecode:
.1f45	48		pha				pha 								; save, leading space
.1f46	a9 20		lda #$20			lda 	#" "
.1f48	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1f4b	68		pla				pla 								; restore and write type
.1f4c	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1f4f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1f51	85 10		sta $10				sta 	temp1
.1f53	c8		iny				iny
.1f54	b1 08		lda ($08),y			lda 	(srcPtr),y
.1f56	85 11		sta $11				sta 	temp1+1
.1f58	a5 10		lda $10				lda 	temp1 						; output the first character
.1f5a	29 1f		and #$1f			and 	#31
.1f5c	20 87 1f	jsr $1f87			jsr 	VHOutVarChar
.1f5f	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1f61					_VHDShift:
.1f61	46 11		lsr $11				lsr 	temp1+1
.1f63	66 10		ror $10				ror 	temp1
.1f65	ca		dex				dex
.1f66	d0 f9		bne $1f61			bne 	_VHDShift
.1f68	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1f6a					_VHDDiv40:
.1f6a	e8		inx				inx
.1f6b	38		sec				sec
.1f6c	a5 10		lda $10				lda 	temp1
.1f6e	e9 28		sbc #$28			sbc 	#40
.1f70	a8		tay				tay
.1f71	a5 11		lda $11				lda 	temp1+1
.1f73	e9 00		sbc #$00			sbc 	#0
.1f75	90 06		bcc $1f7d			bcc 	_VHDivDone
.1f77	85 11		sta $11				sta 	temp1+1
.1f79	84 10		sty $10				sty 	temp1
.1f7b	80 ed		bra $1f6a			bra 	_VHDDiv40
.1f7d					_VHDivDone:
.1f7d	a5 10		lda $10				lda 	temp1 						; remainder
.1f7f	20 87 1f	jsr $1f87			jsr 	VHOutVarChar
.1f82	8a		txa				txa
.1f83	20 87 1f	jsr $1f87			jsr 	VHOutVarChar 				; and result.
.1f86	60		rts				rts
.1f87					VHOutVarChar:
.1f87	c9 00		cmp #$00			cmp 	#0
.1f89	f0 0c		beq $1f97			beq 	_VHOExit
.1f8b	18		clc				clc
.1f8c	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1f8e	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1f90	90 02		bcc $1f94			bcc 	_VHOOut
.1f92	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1f94					_VHOOut:
.1f94	20 78 1b	jsr $1b78			jsr 	DecodeWriteBuffer
.1f97					_VHOExit:
.1f97	60		rts				rts

;******  Return to file: kernel.asm

.1f98					Dictionary:

;******  Processing file: generated/dictionary.inc

>1f98	05					.byte	_end1-*
>1f99	00					.byte	$00
>1f9a	fc 15					.word	WordWrite
>1f9c	a1					.byte	$a1
.1f9d					_end1:
>1f9d	10					.byte	_end2-*
>1f9e	52					.byte	$52
>1f9f	7b 1e					.word	VarWriteHandler
>1fa1	92 1e					.word	VarWriteHandlerDecode
>1fa3	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1fab	45 d2
.1fad					_end2:
>1fad	10					.byte	_end3-*
>1fae	52					.byte	$52
>1faf	45 1e					.word	VarAddressHandler
>1fb1	5a 1e					.word	VarAddrHandlerDecode
>1fb3	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1fbb	45 d2
.1fbd					_end3:
>1fbd	10					.byte	_end4-*
>1fbe	52					.byte	$52
>1fbf	5f 1e					.word	VarReadHandler
>1fc1	76 1e					.word	VarReadHandlerDecode
>1fc3	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>1fcb	45 d2
.1fcd					_end4:
>1fcd	0c					.byte	_end5-*
>1fce	52					.byte	$52
>1fcf	fc 18					.word	CallHandler
>1fd1	b8 19					.word	CallHandlerDecode
>1fd3	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1fd9					_end5:
>1fd9	0f					.byte	_end6-*
>1fda	53					.byte	$53
>1fdb	75 1d					.word	SkipComment
>1fdd	82 1d					.word	CommentDecoder
>1fdf	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1fe7	d4
.1fe8					_end6:
>1fe8	0e					.byte	_end7-*
>1fe9	53					.byte	$53
>1fea	9a 1d					.word	DefineCode
>1fec	a9 1d					.word	DefineDecoder
>1fee	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.1ff6					_end7:
>1ff6	0f					.byte	_end8-*
>1ff7	52					.byte	$52
>1ff8	86 10					.word	Literal2Byte
>1ffa	9c 10					.word	Literal2ByteDecode
>1ffc	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2004	cc
.2005					_end8:
>2005	0e					.byte	_end9-*
>2006	80					.byte	$80
>2007	5e 1d					.word	NextLine
>2009	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2011	4e c5
.2013					_end9:
>2013	0e					.byte	_end10-*
>2014	53					.byte	$53
>2015	ae 10					.word	LiteralString
>2017	cd 10					.word	LiteralStringDecoder
>2019	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2021					_end10:
>2021	05					.byte	_end11-*
>2022	00					.byte	$00
>2023	78 13					.word	Multiply16x16
>2025	aa					.byte	$aa
.2026					_end11:
>2026	05					.byte	_end12-*
>2027	00					.byte	$00
>2028	e5 11					.word	Add
>202a	ab					.byte	$ab
.202b					_end12:
>202b	06					.byte	_end13-*
>202c	00					.byte	$00
>202d	0d 16					.word	WordAdd
>202f	2b a1					.byte	$2b,$a1
.2031					_end13:
>2031	05					.byte	_end14-*
>2032	00					.byte	$00
>2033	f4 11					.word	Subtract
>2035	ad					.byte	$ad
.2036					_end14:
>2036	06					.byte	_end15-*
>2037	00					.byte	$00
>2038	b4 14					.word	ConstantMinus1
>203a	2d b1					.byte	$2d,$b1
.203c					_end15:
>203c	05					.byte	_end16-*
>203d	00					.byte	$00
>203e	c9 12					.word	Divide16x16
>2040	af					.byte	$af
.2041					_end16:
>2041	05					.byte	_end17-*
>2042	00					.byte	$00
>2043	a7 14					.word	Constant0
>2045	b0					.byte	$b0
.2046					_end17:
>2046	06					.byte	_end18-*
>2047	00					.byte	$00
>2048	0d 14					.word	CheckMinus
>204a	30 bc					.byte	$30,$bc
.204c					_end18:
>204c	06					.byte	_end19-*
>204d	00					.byte	$00
>204e	21 14					.word	CheckZero
>2050	30 bd					.byte	$30,$bd
.2052					_end19:
>2052	05					.byte	_end20-*
>2053	00					.byte	$00
>2054	c3 14					.word	C1
>2056	b1					.byte	$b1
.2057					_end20:
>2057	06					.byte	_end21-*
>2058	00					.byte	$00
>2059	b7 13					.word	Unary1Plus
>205b	31 ab					.byte	$31,$ab
.205d					_end21:
>205d	06					.byte	_end22-*
>205e	00					.byte	$00
>205f	ce 13					.word	Unary1Minus
>2061	31 ad					.byte	$31,$ad
.2063					_end22:
>2063	06					.byte	_end23-*
>2064	00					.byte	$00
>2065	db 14					.word	C10
>2067	31 b0					.byte	$31,$b0
.2069					_end23:
>2069	07					.byte	_end24-*
>206a	00					.byte	$00
>206b	04 15					.word	C100
>206d	31 30 b0				.byte	$31,$30,$b0
.2070					_end24:
>2070	08					.byte	_end25-*
>2071	00					.byte	$00
>2072	33 15					.word	C1024
>2074	31 30 32 b4				.byte	$31,$30,$32,$b4
.2078					_end25:
>2078	07					.byte	_end26-*
>2079	00					.byte	$00
>207a	08 15					.word	C127
>207c	31 32 b7				.byte	$31,$32,$b7
.207f					_end26:
>207f	07					.byte	_end27-*
>2080	00					.byte	$00
>2081	0c 15					.word	C128
>2083	31 32 b8				.byte	$31,$32,$b8
.2086					_end27:
>2086	06					.byte	_end28-*
>2087	00					.byte	$00
>2088	df 14					.word	C15
>208a	31 b5					.byte	$31,$b5
.208c					_end28:
>208c	06					.byte	_end29-*
>208d	00					.byte	$00
>208e	e3 14					.word	C16
>2090	31 b6					.byte	$31,$b6
.2092					_end29:
>2092	07					.byte	_end30-*
>2093	00					.byte	$00
>2094	45 14					.word	Times16
>2096	31 36 aa				.byte	$31,$36,$aa
.2099					_end30:
>2099	07					.byte	_end31-*
>209a	00					.byte	$00
>209b	58 14					.word	Divide16
>209d	31 36 af				.byte	$31,$36,$af
.20a0					_end31:
>20a0	05					.byte	_end32-*
>20a1	00					.byte	$00
>20a2	c7 14					.word	C2
>20a4	b2					.byte	$b2
.20a5					_end32:
>20a5	06					.byte	_end33-*
>20a6	00					.byte	$00
>20a7	51 14					.word	Times2
>20a9	32 aa					.byte	$32,$aa
.20ab					_end33:
>20ab	06					.byte	_end34-*
>20ac	00					.byte	$00
>20ad	c0 13					.word	Unary2Plus
>20af	32 ab					.byte	$32,$ab
.20b1					_end34:
>20b1	06					.byte	_end35-*
>20b2	00					.byte	$00
>20b3	d9 13					.word	Unary2Minus
>20b5	32 ad					.byte	$32,$ad
.20b7					_end35:
>20b7	06					.byte	_end36-*
>20b8	00					.byte	$00
>20b9	64 14					.word	Divide2
>20bb	32 af					.byte	$32,$af
.20bd					_end36:
>20bd	06					.byte	_end37-*
>20be	00					.byte	$00
>20bf	e7 14					.word	C24
>20c1	32 b4					.byte	$32,$b4
.20c3					_end37:
>20c3	07					.byte	_end38-*
>20c4	00					.byte	$00
>20c5	10 15					.word	C255
>20c7	32 35 b5				.byte	$32,$35,$b5
.20ca					_end38:
>20ca	07					.byte	_end39-*
>20cb	00					.byte	$00
>20cc	1b 15					.word	C256
>20ce	32 35 b6				.byte	$32,$35,$b6
.20d1					_end39:
>20d1	08					.byte	_end40-*
>20d2	00					.byte	$00
>20d3	6b 14					.word	Times256
>20d5	32 35 36 aa				.byte	$32,$35,$36,$aa
.20d9					_end40:
>20d9	08					.byte	_end41-*
>20da	00					.byte	$00
>20db	74 14					.word	Divide256
>20dd	32 35 36 af				.byte	$32,$35,$36,$af
.20e1					_end41:
>20e1	05					.byte	_end42-*
>20e2	00					.byte	$00
>20e3	cb 14					.word	C3
>20e5	b3					.byte	$b3
.20e6					_end42:
>20e6	06					.byte	_end43-*
>20e7	00					.byte	$00
>20e8	f8 14					.word	C32
>20ea	33 b2					.byte	$33,$b2
.20ec					_end43:
>20ec	09					.byte	_end44-*
>20ed	00					.byte	$00
>20ee	4b 15					.word	C32767
>20f0	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.20f5					_end44:
>20f5	09					.byte	_end45-*
>20f6	00					.byte	$00
>20f7	57 15					.word	C32768
>20f9	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.20fe					_end45:
>20fe	05					.byte	_end46-*
>20ff	00					.byte	$00
>2100	cf 14					.word	C4
>2102	b4					.byte	$b4
.2103					_end46:
>2103	06					.byte	_end47-*
>2104	00					.byte	$00
>2105	4d 14					.word	Times4
>2107	34 aa					.byte	$34,$aa
.2109					_end47:
>2109	06					.byte	_end48-*
>210a	00					.byte	$00
>210b	60 14					.word	Divide4
>210d	34 af					.byte	$34,$af
.210f					_end48:
>210f	08					.byte	_end49-*
>2110	00					.byte	$00
>2111	3f 15					.word	C4096
>2113	34 30 39 b6				.byte	$34,$30,$39,$b6
.2117					_end49:
>2117	05					.byte	_end50-*
>2118	00					.byte	$00
>2119	d3 14					.word	C5
>211b	b5					.byte	$b5
.211c					_end50:
>211c	07					.byte	_end51-*
>211d	00					.byte	$00
>211e	27 15					.word	C512
>2120	35 31 b2				.byte	$35,$31,$b2
.2123					_end51:
>2123	06					.byte	_end52-*
>2124	00					.byte	$00
>2125	fc 14					.word	C63
>2127	36 b3					.byte	$36,$b3
.2129					_end52:
>2129	06					.byte	_end53-*
>212a	00					.byte	$00
>212b	00 15					.word	C64
>212d	36 b4					.byte	$36,$b4
.212f					_end53:
>212f	05					.byte	_end54-*
>2130	00					.byte	$00
>2131	d7 14					.word	C8
>2133	b8					.byte	$b8
.2134					_end54:
>2134	06					.byte	_end55-*
>2135	00					.byte	$00
>2136	49 14					.word	Times8
>2138	38 aa					.byte	$38,$aa
.213a					_end55:
>213a	06					.byte	_end56-*
>213b	00					.byte	$00
>213c	5c 14					.word	Divide8
>213e	38 af					.byte	$38,$af
.2140					_end56:
>2140	05					.byte	_end57-*
>2141	40					.byte	$40
>2142	81 19					.word	ReturnHandler
>2144	bb					.byte	$bb
.2145					_end57:
>2145	05					.byte	_end58-*
>2146	00					.byte	$00
>2147	65 12					.word	CheckLess
>2149	bc					.byte	$bc
.214a					_end58:
>214a	06					.byte	_end59-*
>214b	00					.byte	$00
>214c	7e 12					.word	CheckLessEq
>214e	3c bd					.byte	$3c,$bd
.2150					_end59:
>2150	06					.byte	_end60-*
>2151	00					.byte	$00
>2152	2e 12					.word	CheckNotEqual
>2154	3c be					.byte	$3c,$be
.2156					_end60:
>2156	05					.byte	_end61-*
>2157	00					.byte	$00
>2158	31 12					.word	CheckEqual
>215a	bd					.byte	$bd
.215b					_end61:
>215b	05					.byte	_end62-*
>215c	00					.byte	$00
>215d	81 12					.word	CheckGreater
>215f	be					.byte	$be
.2160					_end62:
>2160	06					.byte	_end63-*
>2161	00					.byte	$00
>2162	62 12					.word	CheckGreaterEq
>2164	3e bd					.byte	$3e,$bd
.2166					_end63:
>2166	08					.byte	_end64-*
>2167	00					.byte	$00
>2168	6c 15					.word	TestDup
>216a	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.216e					_end64:
>216e	05					.byte	_end65-*
>216f	00					.byte	$00
>2170	e1 15					.word	WordRead
>2172	c0					.byte	$c0
.2173					_end65:
>2173	07					.byte	_end66-*
>2174	00					.byte	$00
>2175	e7 13					.word	Absolute
>2177	41 42 d3				.byte	$41,$42,$d3
.217a					_end66:
>217a	09					.byte	_end67-*
>217b	00					.byte	$00
>217c	24 16					.word	AllocateMemory
>217e	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.2183					_end67:
>2183	07					.byte	_end68-*
>2184	00					.byte	$00
>2185	07 12					.word	And
>2187	41 4e c4				.byte	$41,$4e,$c4
.218a					_end68:
>218a	0a					.byte	_end69-*
>218b	00					.byte	$00
>218c	5b 1c					.word	AssertCode
>218e	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.2194					_end69:
>2194	09					.byte	_end70-*
>2195	00					.byte	$00
>2196	3a 14					.word	ByteSwap
>2198	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.219d					_end70:
>219d	06					.byte	_end71-*
>219e	00					.byte	$00
>219f	ef 15					.word	ByteWrite
>21a1	43 a1					.byte	$43,$a1
.21a3					_end71:
>21a3	06					.byte	_end72-*
>21a4	00					.byte	$00
>21a5	d8 15					.word	ByteRead
>21a7	43 c0					.byte	$43,$c0
.21a9					_end72:
>21a9	07					.byte	_end73-*
>21aa	00					.byte	$00
>21ab	42 1a					.word	ClrHandler
>21ad	43 4c d2				.byte	$43,$4c,$d2
.21b0					_end73:
>21b0	08					.byte	_end74-*
>21b1	00					.byte	$00
>21b2	63 15					.word	Drop
>21b4	44 52 4f d0				.byte	$44,$52,$4f,$d0
.21b8					_end74:
>21b8	07					.byte	_end75-*
>21b9	00					.byte	$00
>21ba	75 15					.word	Dup
>21bc	44 55 d0				.byte	$44,$55,$d0
.21bf					_end75:
>21bf	08					.byte	_end76-*
>21c0	01					.byte	$01
>21c1	ce 18					.word	ElseHandler
>21c3	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.21c7					_end76:
>21c7	07					.byte	_end77-*
>21c8	00					.byte	$00
>21c9	7c 1c					.word	EndProgram
>21cb	45 4e c4				.byte	$45,$4e,$c4
.21ce					_end77:
>21ce	09					.byte	_end78-*
>21cf	00					.byte	$00
>21d0	d1 18					.word	EndIfHandler
>21d2	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.21d7					_end78:
>21d7	07					.byte	_end79-*
>21d8	00					.byte	$00
>21d9	46 18					.word	ForHandler
>21db	46 4f d2				.byte	$46,$4f,$d2
.21de					_end79:
>21de	06					.byte	_end80-*
>21df	01					.byte	$01
>21e0	cb 18					.word	IfHandler
>21e2	49 c6					.byte	$49,$c6
.21e4					_end80:
>21e4	09					.byte	_end81-*
>21e5	00					.byte	$00
>21e6	aa 18					.word	GetIndex
>21e8	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.21ed					_end81:
>21ed	08					.byte	_end82-*
>21ee	00					.byte	$00
>21ef	b7 1b					.word	ListCode
>21f1	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.21f5					_end82:
>21f5	07					.byte	_end83-*
>21f6	00					.byte	$00
>21f7	9e 12					.word	Maximum
>21f9	4d 41 d8				.byte	$4d,$41,$d8
.21fc					_end83:
>21fc	07					.byte	_end84-*
>21fd	00					.byte	$00
>21fe	9a 12					.word	Minimum
>2200	4d 49 ce				.byte	$4d,$49,$ce
.2203					_end84:
>2203	07					.byte	_end85-*
>2204	00					.byte	$00
>2205	da 12					.word	Modulus16x16
>2207	4d 4f c4				.byte	$4d,$4f,$c4
.220a					_end85:
>220a	0a					.byte	_end86-*
>220b	00					.byte	$00
>220c	ee 13					.word	Negate
>220e	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2214					_end86:
>2214	07					.byte	_end87-*
>2215	00					.byte	$00
>2216	39 1a					.word	NewHandler
>2218	4e 45 d7				.byte	$4e,$45,$d7
.221b					_end87:
>221b	08					.byte	_end88-*
>221c	01					.byte	$01
>221d	74 18					.word	NextHandler
>221f	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2223					_end88:
>2223	07					.byte	_end89-*
>2224	00					.byte	$00
>2225	a9 15					.word	Nip
>2227	4e 49 d0				.byte	$4e,$49,$d0
.222a					_end89:
>222a	07					.byte	_end90-*
>222b	00					.byte	$00
>222c	fe 13					.word	OneComplement
>222e	4e 4f d4				.byte	$4e,$4f,$d4
.2231					_end90:
>2231	06					.byte	_end91-*
>2232	00					.byte	$00
>2233	21 12					.word	LogOr
>2235	4f d2					.byte	$4f,$d2
.2237					_end91:
>2237	08					.byte	_end92-*
>2238	00					.byte	$00
>2239	91 15					.word	Over
>223b	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.223f					_end92:
>223f	0a					.byte	_end93-*
>2240	00					.byte	$00
>2241	d4 18					.word	RepeatHandler
>2243	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.2249					_end93:
>2249	07					.byte	_end94-*
>224a	00					.byte	$00
>224b	7d 14					.word	RandomNumber
>224d	52 4e c4				.byte	$52,$4e,$c4
.2250					_end94:
>2250	07					.byte	_end95-*
>2251	00					.byte	$00
>2252	ae 15					.word	Rot
>2254	52 4f d4				.byte	$52,$4f,$d4
.2257					_end95:
>2257	07					.byte	_end96-*
>2258	00					.byte	$00
>2259	34 1c					.word	RunProgram
>225b	52 55 ce				.byte	$52,$55,$ce
.225e					_end96:
>225e	07					.byte	_end97-*
>225f	00					.byte	$00
>2260	29 14					.word	SignTOS
>2262	53 47 ce				.byte	$53,$47,$ce
.2265					_end97:
>2265	08					.byte	_end98-*
>2266	00					.byte	$00
>2267	74 1c					.word	StopCode
>2269	53 54 4f d0				.byte	$53,$54,$4f,$d0
.226d					_end98:
>226d	08					.byte	_end99-*
>226e	00					.byte	$00
>226f	7e 15					.word	Swap
>2271	53 57 41 d0				.byte	$53,$57,$41,$d0
.2275					_end99:
>2275	07					.byte	_end100-*
>2276	00					.byte	$00
>2277	44 1c					.word	Call6502
>2279	53 59 d3				.byte	$53,$59,$d3
.227c					_end100:
>227c	0d					.byte	_end101-*
>227d	00					.byte	$00
>227e	bc 1d					.word	IntToString
>2280	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2288	c7
.2289					_end101:
>2289	09					.byte	_end102-*
>228a	01					.byte	$01
>228b	d7 18					.word	UntilHandler
>228d	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2292					_end102:
>2292	09					.byte	_end103-*
>2293	00					.byte	$00
>2294	7f 1c					.word	VlistCode
>2296	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.229b					_end103:
>229b	0a					.byte	_end104-*
>229c	40					.byte	$40
>229d	86 1a					.word	BreakCmd
>229f	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.22a5					_end104:
>22a5	09					.byte	_end105-*
>22a6	00					.byte	$00
>22a7	80 1a					.word	ExitDump
>22a9	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.22ae					_end105:
>22ae	07					.byte	_end106-*
>22af	00					.byte	$00
>22b0	14 12					.word	Xor
>22b2	58 4f d2				.byte	$58,$4f,$d2
.22b5					_end106:
>22b5	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
