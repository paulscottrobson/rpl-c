
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Mon Jan 13 09:59:13 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.1002	9a		txs				txs
.1003	20 de 10	jsr $10de			jsr 	ExternInitialise
.1006	a9 23		lda #$23			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 ce 11	jsr $11ce			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010					WarmStart:
.1010	a9 03		lda #$03			lda 	#COL_Yellow
.1012	20 15 11	jsr $1115			jsr 	ExternColour
.1015	20 38 11	jsr $1138			jsr 	ExternInput
.1018	a9 06		lda #$06			lda 	#COL_Cyan
.101a	20 15 11	jsr $1115			jsr 	ExternColour
.101d	4c b4 1c	jmp $1cb4			jmp 	RunProgram
.1020					ErrorHandler:
>1020	ff						.byte 	$FF
.1021	a2 5e		ldx #$5e			ldx 	#$5E
.1023					BootMsg:
>1023	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103b	2a 0d 0d
>103e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1046	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1056	30 32 30 0d 0d
>105b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1062	5b 32 30 2d 30 31 2d 31			.text	"[20-01-13 09:59]"
>106a	33 20 30 39 3a 35 39 5d

;******  Return to file: kernel.asm

>1072	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1075					InitialiseCoreCode:
.1075	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1077	85 00		sta $00				sta 	NextCode
.1079	85 01		sta $01				sta 	NextCode+1
.107b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.107d	85 02		sta $02				sta 	NextCode+2
.107f	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.1081	84 04		sty $04				sty 	NextCode+4
.1083	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1085	60		rts				rts								; (2 INX skip offset and line#)
.1086					Literal2Byte:
.1086	a5 06		lda $06				lda 	TOS
.1088	48		pha				pha
.1089	a5 07		lda $07				lda 	TOS+1
.108b	48		pha				pha
.108c	e8		inx				inx  							; point X to the word
.108d	e8		inx				inx
.108e	8a		txa				txa 							; copy into Y
.108f	a8		tay				tay
.1090	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1092	85 06		sta $06				sta 	TOS
.1094	c8		iny				iny 							; read and push the MSB
.1095	b1 03		lda ($03),y			lda 	(IP),y
.1097	85 07		sta $07				sta 	TOS+1
.1099	4c 00 00	jmp $0000			jmp 	NextCode
.109c					Literal2ByteDecode:
.109c	a9 06		lda #$06			lda 	#CTH_Keyword
.109e	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.10a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a3	aa		tax				tax
.10a4	c8		iny				iny
.10a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a7	a8		tay				tay
.10a8	8a		txa				txa
.10a9	38		sec				sec 							; output signed
.10aa	20 1a 1c	jsr $1c1a			jsr 	DecodeYAToBuffer
.10ad	60		rts				rts
.10ae					LiteralString:
.10ae	a5 06		lda $06				lda 	TOS
.10b0	48		pha				pha
.10b1	a5 07		lda $07				lda 	TOS+1
.10b3	48		pha				pha
.10b4	e8		inx				inx
.10b5	e8		inx				inx 							; skip over current word
.10b6	8a		txa				txa 							; add to IP + 1 to give string address
.10b7	a8		tay				tay 							; put in Y
.10b8	38		sec				sec 							; make that TOS
.10b9	65 03		adc $03				adc 	IP
.10bb	85 06		sta $06				sta 	TOS
.10bd	a5 04		lda $04				lda 	IP+1
.10bf	69 00		adc #$00			adc 	#0
.10c1	85 07		sta $07				sta 	TOS+1
.10c3	8a		txa				txa 							; add data length to X
.10c4	18		clc				clc
.10c5	71 03		adc ($03),y			adc 	(IP),y
.10c7	aa		tax				tax
.10c8	ca		dex				dex
.10c9	ca		dex				dex
.10ca	4c 00 00	jmp $0000			jmp 	NextCode
.10cd					LiteralStringDecoder:
.10cd	a9 05		lda #$05			lda 	#CTH_String
.10cf	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.10d2	a9 22		lda #$22			lda 	#'"'
.10d4	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.10d7	20 01 1c	jsr $1c01			jsr 	DecodeOutputData
.10da	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.10dd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10de					ExternInitialise:
.10de	a9 90		lda #$90			lda 	#144 						; set colour
.10e0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e3	a9 01		lda #$01			lda 	#$01
.10e5	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e8	a9 0e		lda #$0e			lda 	#14							; lower case
.10ea	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10ed	a9 93		lda #$93			lda 	#147 						; clear screen
.10ef	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f2	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f4	4c 15 11	jmp $1115			jmp 	ExternColour
.10f7					ExternCheckBreak:
.10f7	da		phx				phx 								; make sure we keep XY
.10f8	5a		phy				phy
.10f9	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fc	f0 03		beq $1101			beq		_ECBExit 					; stopped
.10fe	7a		ply				ply 								; restore and exit.
.10ff	fa		plx				plx
.1100	60		rts				rts
.1101					_ECBExit:
.1101	20 20 10	jsr $1020			jsr 	ErrorHandler
>1104	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.110b					ExternPrint:
.110b	48		pha				pha
.110c	da		phx				phx
.110d	5a		phy				phy
.110e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1111	7a		ply				ply
.1112	fa		plx				plx
.1113	68		pla				pla
.1114	60		rts				rts
.1115					ExternColour:
.1115	48		pha				pha
.1116	da		phx				phx
.1117	48		pha				pha
.1118	29 08		and #$08			and 	#8
.111a	0a		asl a				asl 	a
.111b	0a		asl a				asl 	a
.111c	0a		asl a				asl 	a
.111d	0a		asl a				asl 	a
.111e	49 92		eor #$92			eor 	#$92
.1120	20 0b 11	jsr $110b			jsr 	ExternPrint
.1123	68		pla				pla
.1124	29 07		and #$07			and 	#7
.1126	aa		tax				tax
.1127	bd 30 11	lda $1130,x			lda 	_ECTable,x
.112a	20 0b 11	jsr $110b			jsr 	ExternPrint
.112d	fa		plx				plx
.112e	68		pla				pla
.112f	60		rts				rts
.1130					_ECTable:
>1130	90						.byte 	144
>1131	1c						.byte 	28
>1132	1e						.byte 	30
>1133	9e						.byte 	158
>1134	1f						.byte 	31
>1135	9c						.byte 	156
>1136	9f						.byte 	159
>1137	05						.byte 	5
.1138					ExternInput:
.1138	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.113a	85 14		sta $14				sta 	temp3
.113c	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113e	85 15		sta $15				sta 	temp3+1
.1140	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1143	29 7f		and #$7f			and 	#$7F
.1145	c9 0d		cmp #$0d			cmp 	#13
.1147	f0 0a		beq $1153			beq 	_EIExit
.1149	92 14		sta ($14)			sta 	(temp3)
.114b	e6 14		inc $14				inc 	temp3
.114d	d0 f1		bne $1140			bne 	_EIRead
.114f	e6 15		inc $15				inc 	temp3+1
.1151	80 ed		bra $1140			bra 	_EIRead
.1153	a9 00		lda #$00	_EIExit:lda 	#0
.1155	92 14		sta ($14)			sta 	(temp3)
.1157	a9 0d		lda #$0d			lda 	#13
.1159	20 0b 11	jsr $110b			jsr 	ExternPrint
.115c	60		rts				rts
.115d					ExternSave:
.115d	da		phx				phx
.115e	5a		phy				phy
.115f	85 12		sta $12				sta 	temp2 						; save start
.1161	84 13		sty $13				sty 	temp2+1
.1163	20 c5 11	jsr $11c5			jsr 	EXGetLength 				; get length of file into A
.1166	a6 14		ldx $14				ldx 	temp3
.1168	a4 15		ldy $15				ldy 	temp3+1
.116a	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116d	a9 01		lda #$01			lda 	#1
.116f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1171	a0 00		ldy #$00			ldy 	#0
.1173	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1176	a6 10		ldx $10				ldx 	temp1 						; end address
.1178	a4 11		ldy $11				ldy 	temp1+1
.117a	a9 12		lda #$12			lda 	#temp2
.117c	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.117f	b0 03		bcs $1184			bcs 	_ESSave
.1181	7a		ply				ply
.1182	fa		plx				plx
.1183	60		rts				rts
.1184					_ESSave:
.1184	20 20 10	jsr $1020			jsr 	ErrorHandler
>1187	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>118f	4c 45 44 00
.1193					ExternLoad:
.1193	da		phx				phx 								; save XY
.1194	5a		phy				phy
.1195	48		pha				pha 								; save target
.1196	5a		phy				phy
.1197	20 c5 11	jsr $11c5			jsr 	EXGetLength 				; get length of file into A
.119a	a6 14		ldx $14				ldx 	temp3
.119c	a4 15		ldy $15				ldy 	temp3+1
.119e	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.11a1	a9 01		lda #$01			lda 	#1
.11a3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a5	a0 00		ldy #$00			ldy 	#0
.11a7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11aa	7a		ply				ply 								; restore target to YX and call load
.11ab	fa		plx				plx
.11ac	a9 00		lda #$00			lda 	#0 							; load command
.11ae	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11b1	b0 03		bcs $11b6			bcs 	_ESLoad
.11b3	7a		ply				ply
.11b4	fa		plx				plx
.11b5	60		rts				rts
.11b6					_ESLoad:
.11b6	20 20 10	jsr $1020			jsr 	ErrorHandler
>11b9	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11c1	4c 45 44 00
.11c5					EXGetLength:
.11c5	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c7	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11c9	d0 02		bne $11cd			bne 	_EXGLExit
.11cb	e6 15		inc $15				inc 	temp3+1
.11cd					_EXGLExit:
.11cd	60		rts				rts
.11ce					EXPrintString:
.11ce	48		pha				pha
.11cf	5a		phy				phy
.11d0	84 11		sty $11				sty 	temp1+1
.11d2	85 10		sta $10				sta 	temp1
.11d4	a0 00		ldy #$00			ldy 	#0
.11d6					_EXPSLoop:
.11d6	b1 10		lda ($10),y			lda 	(temp1),y
.11d8	f0 08		beq $11e2			beq 	_EXPSExit
.11da	29 7f		and #$7f			and 	#$7F
.11dc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11df	c8		iny				iny
.11e0	80 f4		bra $11d6			bra 	_EXPSLoop
.11e2					_EXPSExit:
.11e2	7a		ply				ply
.11e3	68		pla				pla
.11e4	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e5					Add:
.11e5	7a		ply				ply
.11e6	68		pla				pla
.11e7	18		clc				clc
.11e8	65 06		adc $06				adc 	TOS
.11ea	85 06		sta $06				sta 	TOS
.11ec	98		tya				tya
.11ed	65 07		adc $07				adc 	TOS+1
.11ef	85 07		sta $07				sta 	TOS+1
.11f1	4c 00 00	jmp $0000			jmp 	NextCode
.11f4					Subtract:
.11f4	7a		ply				ply
.11f5	68		pla				pla
.11f6	38		sec				sec
.11f7	49 ff		eor #$ff			eor 	#$FF
.11f9	65 06		adc $06				adc 	TOS
.11fb	85 06		sta $06				sta 	TOS
.11fd	98		tya				tya
.11fe	49 ff		eor #$ff			eor 	#$FF
.1200	65 07		adc $07				adc 	TOS+1
.1202	85 07		sta $07				sta 	TOS+1
.1204	4c 00 00	jmp $0000			jmp 	NextCode
.1207					And:
.1207	68		pla				pla
.1208	25 07		and $07				and 	TOS+1
.120a	85 07		sta $07				sta 	TOS+1
.120c	68		pla				pla
.120d	25 06		and $06				and 	TOS
.120f	85 06		sta $06				sta 	TOS
.1211	4c 00 00	jmp $0000			jmp 	NextCode
.1214					Xor:
.1214	68		pla				pla
.1215	45 07		eor $07				eor 	TOS+1
.1217	85 07		sta $07				sta 	TOS+1
.1219	68		pla				pla
.121a	45 06		eor $06				eor 	TOS
.121c	85 06		sta $06				sta 	TOS
.121e	4c 00 00	jmp $0000			jmp 	NextCode
.1221					LogOr:
.1221	68		pla				pla
.1222	05 07		ora $07				ora 	TOS+1
.1224	85 07		sta $07				sta 	TOS+1
.1226	68		pla				pla
.1227	05 06		ora $06				ora 	TOS
.1229	85 06		sta $06				sta 	TOS
.122b	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122e					CheckNotEqual:
.122e	38		sec				sec
.122f	80 01		bra $1232			bra 	CECode
.1231					CheckEqual:
.1231	18		clc				clc
.1232					CECode:
.1232	86 10		stx $10				stx 	temp1
.1234	ba		tsx				tsx
.1235	08		php				php
.1236	a5 06		lda $06				lda 	TOS
.1238	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.123b	d0 17		bne $1254			bne	 	CompareFalse
.123d	a5 07		lda $07				lda 	TOS+1
.123f	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1242	d0 10		bne $1254			bne 	CompareFalse
.1244					CompareTrue:
.1244	a6 10		ldx $10				ldx 	temp1
.1246	28		plp				plp
.1247	b0 10		bcs $1259			bcs		CompareFalse2
.1249					CompareTrue2:
.1249	68		pla				pla
.124a	68		pla				pla
.124b	a9 ff		lda #$ff			lda 	#$FF
.124d	85 06		sta $06				sta 	TOS
.124f	85 07		sta $07				sta 	TOS+1
.1251	4c 00 00	jmp $0000			jmp 	NextCode
.1254					CompareFalse:
.1254	a6 10		ldx $10				ldx 	temp1
.1256	28		plp				plp
.1257	b0 f0		bcs $1249			bcs		CompareTrue2
.1259					CompareFalse2:
.1259	68		pla				pla
.125a	68		pla				pla
.125b	64 06		stz $06				stz 	TOS
.125d	64 07		stz $07				stz 	TOS+1
.125f	4c 00 00	jmp $0000			jmp 	NextCode
.1262					CheckGreaterEq:
.1262	38		sec				sec
.1263	80 01		bra $1266			bra		CLCode
.1265					CheckLess:
.1265	18		clc				clc
.1266	86 10		stx $10		CLCode:	stx 	temp1
.1268	ba		tsx				tsx
.1269	08		php				php
.126a	18		clc				clc
.126b	a5 06		lda $06				lda 	TOS
.126d	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1270	a5 07		lda $07				lda 	TOS+1
.1272	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1275	50 02		bvc $1279			bvc 	_CLNoFlip
.1277	49 80		eor #$80			eor 	#$80
.1279					_CLNoFlip:
.1279	0a		asl a				asl 	a
.127a	b0 d8		bcs $1254			bcs 	CompareFalse
.127c	80 c6		bra $1244			bra 	CompareTrue
.127e					CheckLessEq:
.127e	38		sec				sec
.127f	80 01		bra $1282			bra		CGCode
.1281					CheckGreater:
.1281	18		clc				clc
.1282					CGCode:
.1282	86 10		stx $10				stx 	temp1
.1284	ba		tsx				tsx
.1285	08		php				php
.1286	18		clc				clc
.1287	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.128a	e5 06		sbc $06				sbc 	TOS
.128c	bd 01 01	lda $0101,x			lda 	Stack2High,x
.128f	e5 07		sbc $07				sbc 	TOS+1
.1291	50 02		bvc $1295			bvc 	_CGNoFlip
.1293	49 80		eor #$80			eor 	#$80
.1295					_CGNoFlip:
.1295	0a		asl a				asl 	a
.1296	b0 bc		bcs $1254			bcs 	CompareFalse
.1298	80 aa		bra $1244			bra 	CompareTrue
.129a					Minimum:
.129a	a9 00		lda #$00			lda 	#0
.129c	80 02		bra $12a0			bra 	MinMaxCode
.129e					Maximum:
.129e	a9 80		lda #$80			lda 	#$80
.12a0					MinMaxCode:
.12a0	85 11		sta $11				sta 	temp1+1
.12a2	86 10		stx $10				stx 	temp1
.12a4	ba		tsx				tsx
.12a5	38		sec				sec
.12a6	a5 06		lda $06				lda 	TOS
.12a8	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12ab	a5 07		lda $07				lda 	TOS+1
.12ad	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12b0	50 02		bvc $12b4			bvc 	_MMNoFlip
.12b2	49 80		eor #$80			eor 	#$80
.12b4					_MMNoFlip:
.12b4	45 11		eor $11				eor 	temp1+1
.12b6	30 0a		bmi $12c2			bmi 	_MMNoCopy
.12b8	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12bb	85 06		sta $06				sta 	TOS
.12bd	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12c0	85 07		sta $07				sta 	TOS+1
.12c2					_MMNoCopy:
.12c2	a6 10		ldx $10				ldx 	temp1
.12c4	68		pla				pla
.12c5	68		pla				pla
.12c6	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12c9					Divide16x16:
.12c9	86 12		stx $12				stx 	temp2
.12cb	ba		tsx				tsx
.12cc	20 ef 12	jsr $12ef			jsr 	IntegerDivide
.12cf	68		pla				pla
.12d0	85 07		sta $07				sta 	TOS+1
.12d2	68		pla				pla
.12d3	85 06		sta $06				sta 	TOS
.12d5	a6 12		ldx $12				ldx 	temp2
.12d7	4c 00 00	jmp $0000			jmp 	NextCode
.12da					Modulus16x16:
.12da	86 12		stx $12				stx 	temp2
.12dc	ba		tsx				tsx
.12dd	20 ef 12	jsr $12ef			jsr 	IntegerDivide
.12e0	a6 12		ldx $12				ldx 	temp2
.12e2	68		pla				pla
.12e3	68		pla				pla
.12e4	a5 10		lda $10				lda 	temp1
.12e6	85 06		sta $06				sta 	TOS
.12e8	a5 11		lda $11				lda 	temp1+1
.12ea	85 07		sta $07				sta 	TOS+1
.12ec	4c 00 00	jmp $0000			jmp 	NextCode
.12ef					IntegerDivide:
.12ef	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12f1	05 07		ora $07				ora 	TOS+1
.12f3	d0 14		bne $1309			bne 	_BFDOkay
.12f5	20 20 10	jsr $1020			jsr 	ErrorHandler
>12f8	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>1300	20 42 59 20 5a 45 52 4f 00
.1309					_BFDOkay:
.1309	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.130b	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130d	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.130f	20 4a 13	jsr $134a			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1312	20 64 13	jsr $1364			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1315	5a		phy				phy 								; Y is the counter
.1316	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1318					_BFDLoop:
.1318	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.131b	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131e	26 10		rol $10				rol 	temp1
.1320	26 11		rol $11				rol 	temp1+1
.1322	38		sec				sec
.1323	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1325	e5 06		sbc $06				sbc 	TOS
.1327	48		pha				pha
.1328	a5 11		lda $11				lda 	temp1+1
.132a	e5 07		sbc $07				sbc 	TOS+1
.132c	90 0f		bcc $133d			bcc 	_BFDNoAdd
.132e	85 11		sta $11				sta 	temp1+1
.1330	68		pla				pla
.1331	85 10		sta $10				sta 	temp1+0
.1333	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1336	09 01		ora #$01			ora 	#1
.1338	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.133b	80 01		bra $133e			bra 	_BFDNext
.133d					_BFDNoAdd:
.133d	68		pla				pla 								; Throw away the intermediate calculations
.133e					_BFDNext:
.133e	88		dey				dey
.133f	d0 d7		bne $1318			bne 	_BFDLoop
.1341	7a		ply				ply 								; restore Y
.1342	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1344	90 03		bcc $1349			bcc 	_BFDUnsigned 				; then the result is signed
.1346	20 50 13	jsr $1350			jsr		IntegerNegateAlways 		; negate the result
.1349					_BFDUnsigned:
.1349	60		rts				rts
.134a					CheckIntegerNegate:
.134a	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134d	30 01		bmi $1350			bmi 	IntegerNegateAlways 		; if so negate it
.134f	60		rts				rts
.1350					IntegerNegateAlways:
.1350	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1352	38		sec				sec 								; negate
.1353	a9 00		lda #$00			lda 	#0
.1355	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1358	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.135b	a9 00		lda #$00			lda 	#0
.135d	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1360	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1363	60		rts				rts
.1364					CheckTOSNegate:
.1364	a5 07		lda $07				lda 	TOS+1
.1366	10 0f		bpl $1377			bpl		CTNNoChange
.1368	e6 1a		inc $1a				inc 	SignCount
.136a					TOSNegateAlways:
.136a	38		sec				sec
.136b	a9 00		lda #$00			lda 	#0
.136d	e5 06		sbc $06				sbc 	TOS
.136f	85 06		sta $06				sta 	TOS
.1371	a9 00		lda #$00			lda 	#0
.1373	e5 07		sbc $07				sbc 	TOS+1
.1375	85 07		sta $07				sta 	TOS+1
.1377					CTNNoChange:
.1377	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1378					Multiply16x16:
.1378	86 10		stx $10				stx 	temp1
.137a	ba		tsx				tsx
.137b	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137e	85 12		sta $12				sta 	temp2
.1380	bd 01 01	lda $0101,x			lda		Stack2High,x
.1383	85 13		sta $13				sta 	temp2+1
.1385	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1388	9e 01 01	stz $0101,x			stz 	Stack2High,x
.138b					_MultLoop:
.138b	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138d	66 12		ror $12				ror 	temp2
.138f	90 11		bcc $13a2			bcc 	_MultNoAdd
.1391	18		clc				clc 								; add 1st to 2nd
.1392	a5 06		lda $06				lda 	TOS
.1394	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1397	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.139a	a5 07		lda $07				lda 	TOS+1
.139c	7d 01 01	adc $0101,x			adc 	Stack2High,x
.139f	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a2					_MultNoAdd:
.13a2	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a4	26 07		rol $07				rol 	TOS+1
.13a6	a5 12		lda $12				lda 	temp2	 					; until zero
.13a8	05 13		ora $13				ora 	temp2+1
.13aa	d0 df		bne $138b			bne 	_MultLoop
.13ac	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ae	68		pla				pla
.13af	85 07		sta $07				sta 	TOS+1
.13b1	68		pla				pla
.13b2	85 06		sta $06				sta 	TOS
.13b4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b7					Unary1Plus:
.13b7	e6 06		inc $06				inc 	TOS
.13b9	d0 02		bne $13bd			bne 	_U1PSkip
.13bb	e6 07		inc $07				inc 	TOS+1
.13bd					_U1PSkip:
.13bd	4c 00 00	jmp $0000			jmp 	NextCode
.13c0					Unary2Plus:
.13c0	18		clc				clc
.13c1	a5 06		lda $06				lda 	TOS
.13c3	69 02		adc #$02			adc 	#2
.13c5	85 06		sta $06				sta 	TOS
.13c7	90 02		bcc $13cb			bcc 	_U1PSkip
.13c9	e6 07		inc $07				inc 	TOS+1
.13cb					_U1PSkip:
.13cb	4c 00 00	jmp $0000			jmp 	NextCode
.13ce					Unary1Minus:
.13ce	a5 06		lda $06				lda 	TOS
.13d0	d0 02		bne $13d4			bne 	_U1MSkip
.13d2	c6 07		dec $07				dec 	TOS+1
.13d4					_U1MSkip:
.13d4	c6 06		dec $06				dec 	TOS
.13d6	4c 00 00	jmp $0000			jmp 	NextCode
.13d9					Unary2Minus:
.13d9	38		sec				sec
.13da	a5 06		lda $06				lda 	TOS
.13dc	e9 02		sbc #$02			sbc 	#2
.13de	85 06		sta $06				sta 	TOS
.13e0	b0 02		bcs $13e4			bcs 	_U1PSkip
.13e2	c6 07		dec $07				dec 	TOS+1
.13e4					_U1PSkip:
.13e4	4c 00 00	jmp $0000			jmp 	NextCode
.13e7					Absolute:
.13e7	a5 07		lda $07				lda 	TOS+1
.13e9	30 03		bmi $13ee			bmi 	Negate
.13eb	4c 00 00	jmp $0000			jmp 	NextCode
.13ee					Negate:
.13ee	38		sec				sec
.13ef	a9 00		lda #$00			lda 	#0
.13f1	e5 06		sbc $06				sbc 	TOS
.13f3	85 06		sta $06				sta 	TOS
.13f5	a9 00		lda #$00			lda 	#0
.13f7	e5 07		sbc $07				sbc 	TOS+1
.13f9	85 07		sta $07				sta 	TOS+1
.13fb	4c 00 00	jmp $0000			jmp 	NextCode
.13fe					OneComplement:
.13fe	a5 06		lda $06				lda 	TOS
.1400	49 ff		eor #$ff			eor 	#$FF
.1402	85 06		sta $06				sta 	TOS
.1404	a5 07		lda $07				lda 	TOS+1
.1406	49 ff		eor #$ff			eor 	#$FF
.1408	85 07		sta $07				sta 	TOS+1
.140a	4c 00 00	jmp $0000			jmp 	NextCode
.140d					CheckMinus:
.140d	a5 07		lda $07				lda 	TOS+1
.140f	30 07		bmi $1418			bmi 	UnaryTrue
.1411					UnaryFalse:
.1411	64 06		stz $06				stz 	TOS
.1413	64 07		stz $07				stz 	TOS+1
.1415	4c 00 00	jmp $0000			jmp 	NextCode
.1418					UnaryTrue:
.1418	a9 ff		lda #$ff			lda 	#$FF
.141a	85 06		sta $06				sta 	TOS
.141c	85 07		sta $07				sta 	TOS+1
.141e	4c 00 00	jmp $0000			jmp 	NextCode
.1421					CheckZero:
.1421	a5 06		lda $06				lda 	TOS
.1423	05 07		ora $07				ora 	TOS+1
.1425	d0 ea		bne $1411			bne 	UnaryFalse
.1427	80 ef		bra $1418			bra 	UnaryTrue
.1429					SignTOS:
.1429	a5 07		lda $07				lda 	TOS+1
.142b	30 eb		bmi $1418			bmi		UnaryTrue
.142d	05 06		ora $06				ora 	TOS
.142f	f0 e0		beq $1411			beq 	UnaryFalse
.1431	a9 01		lda #$01			lda 	#1
.1433	85 06		sta $06				sta 	TOS
.1435	64 07		stz $07				stz		TOS+1
.1437	4c 00 00	jmp $0000			jmp 	NextCode
.143a					ByteSwap:
.143a	a5 06		lda $06				lda 	TOS
.143c	a4 07		ldy $07				ldy 	TOS+1
.143e	85 07		sta $07				sta 	TOS+1
.1440	84 06		sty $06				sty 	TOS
.1442	4c 00 00	jmp $0000			jmp 	NextCode
.1445					Times16:
.1445	06 06		asl $06				asl 	TOS
.1447	26 07		rol $07				rol 	TOS+1
.1449					Times8:
.1449	06 06		asl $06				asl 	TOS
.144b	26 07		rol $07				rol 	TOS+1
.144d					Times4:
.144d	06 06		asl $06				asl 	TOS
.144f	26 07		rol $07				rol 	TOS+1
.1451					Times2:
.1451	06 06		asl $06				asl 	TOS
.1453	26 07		rol $07				rol 	TOS+1
.1455	4c 00 00	jmp $0000			jmp 	NextCode
.1458					Divide16:
.1458	46 07		lsr $07				lsr 	TOS+1
.145a	66 06		ror $06				ror 	TOS
.145c					Divide8:
.145c	46 07		lsr $07				lsr 	TOS+1
.145e	66 06		ror $06				ror 	TOS
.1460					Divide4:
.1460	46 07		lsr $07				lsr 	TOS+1
.1462	66 06		ror $06				ror 	TOS
.1464					Divide2:
.1464	46 07		lsr $07				lsr 	TOS+1
.1466	66 06		ror $06				ror 	TOS
.1468	4c 00 00	jmp $0000			jmp 	NextCode
.146b					Times256:
.146b	a5 06		lda $06				lda 	TOS
.146d	85 07		sta $07				sta 	TOS+1
.146f	64 06		stz $06				stz 	TOS
.1471	4c 00 00	jmp $0000			jmp 	NextCode
.1474					Divide256:
.1474	a5 07		lda $07				lda 	TOS+1
.1476	85 06		sta $06				sta 	TOS
.1478	64 07		stz $07				stz 	TOS+1
.147a	4c 00 00	jmp $0000			jmp 	NextCode
.147d					RandomNumber:
.147d	a5 06		lda $06				lda 	TOS
.147f	48		pha				pha
.1480	a5 07		lda $07				lda 	TOS+1
.1482	48		pha				pha
.1483	a5 1b		lda $1b				lda 	randomSeed
.1485	05 1c		ora $1c				ora 	randomSeed+1
.1487	d0 08		bne $1491			bne 	_RH_NoInit
.1489	a9 7c		lda #$7c			lda 	#$7C
.148b	85 1b		sta $1b				sta 	randomSeed
.148d	a9 a1		lda #$a1			lda 	#$A1
.148f	85 1c		sta $1c				sta 	randomSeed+1
.1491					_RH_NoInit:
.1491	a5 1b		lda $1b				lda 	randomSeed
.1493	4a		lsr a		        lsr		a
.1494	26 1c		rol $1c		        rol 	randomSeed+1
.1496	90 02		bcc $149a	        bcc 	_RH_NoEor
.1498	49 b4		eor #$b4	        eor 	#$B4
.149a					_RH_NoEor:
.149a	85 1b		sta $1b		        sta 	randomSeed
.149c	45 1c		eor $1c		        eor 	randomSeed+1
.149e	85 07		sta $07		        sta 	TOS+1
.14a0	a5 1b		lda $1b		        lda 	randomSeed
.14a2	85 06		sta $06		        sta 	TOS
.14a4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a7					Constant0:
.14a7	a5 06		lda $06				lda 	TOS
.14a9	48		pha				pha
.14aa	a5 07		lda $07				lda 	TOS+1
.14ac	48		pha				pha
.14ad	64 06		stz $06				stz 	TOS
.14af	64 07		stz $07				stz 	TOS+1
.14b1	4c 00 00	jmp $0000			jmp 	NextCode
.14b4					ConstantMinus1:
.14b4	a5 06		lda $06				lda 	TOS
.14b6	48		pha				pha
.14b7	a5 07		lda $07				lda 	TOS+1
.14b9	48		pha				pha
.14ba	a9 ff		lda #$ff			lda 	#$FF
.14bc	85 06		sta $06				sta 	TOS
.14be	85 07		sta $07				sta 	TOS+1
.14c0	4c 00 00	jmp $0000			jmp 	NextCode
.14c3					C1:
.14c3	a0 01		ldy #$01			ldy 	#1
.14c5	80 24		bra $14eb			bra 	Const1Byte
.14c7					C2:
.14c7	a0 02		ldy #$02			ldy 	#2
.14c9	80 20		bra $14eb			bra 	Const1Byte
.14cb					C3:
.14cb	a0 03		ldy #$03			ldy 	#3
.14cd	80 1c		bra $14eb			bra 	Const1Byte
.14cf					C4:
.14cf	a0 04		ldy #$04			ldy 	#4
.14d1	80 18		bra $14eb			bra 	Const1Byte
.14d3					C5:
.14d3	a0 05		ldy #$05			ldy 	#5
.14d5	80 14		bra $14eb			bra 	Const1Byte
.14d7					C8:
.14d7	a0 08		ldy #$08			ldy 	#8
.14d9	80 10		bra $14eb			bra 	Const1Byte
.14db					C10:
.14db	a0 0a		ldy #$0a			ldy 	#10
.14dd	80 0c		bra $14eb			bra 	Const1Byte
.14df					C15:
.14df	a0 0f		ldy #$0f			ldy 	#15
.14e1	80 08		bra $14eb			bra 	Const1Byte
.14e3					C16:
.14e3	a0 10		ldy #$10			ldy 	#16
.14e5	80 04		bra $14eb			bra 	Const1Byte
.14e7					C24:
.14e7	a0 18		ldy #$18			ldy 	#24
.14e9	80 00		bra $14eb			bra 	Const1Byte
.14eb					Const1Byte:
.14eb	a5 06		lda $06				lda 	TOS
.14ed	48		pha				pha
.14ee	a5 07		lda $07				lda 	TOS+1
.14f0	48		pha				pha
.14f1	84 06		sty $06				sty 	TOS
.14f3	64 07		stz $07				stz 	TOS+1
.14f5	4c 00 00	jmp $0000			jmp 	NextCode
.14f8					C32:
.14f8	a0 20		ldy #$20			ldy 	#32
.14fa	80 ef		bra $14eb			bra 	Const1Byte
.14fc					C63:
.14fc	a0 3f		ldy #$3f			ldy 	#63
.14fe	80 eb		bra $14eb			bra 	Const1Byte
.1500					C64:
.1500	a0 40		ldy #$40			ldy 	#64
.1502	80 e7		bra $14eb			bra 	Const1Byte
.1504					C100:
.1504	a0 64		ldy #$64			ldy 	#100
.1506	80 e3		bra $14eb			bra 	Const1Byte
.1508					C127:
.1508	a0 7f		ldy #$7f			ldy 	#127
.150a	80 df		bra $14eb			bra 	Const1Byte
.150c					C128:
.150c	a0 80		ldy #$80			ldy 	#128
.150e	80 db		bra $14eb			bra 	Const1Byte
.1510					C255:
.1510	a0 ff		ldy #$ff			ldy 	#255
.1512	80 d7		bra $14eb			bra 	Const1Byte
.1514					Const2Byte:
.1514	85 06		sta $06				sta 	TOS
.1516	84 07		sty $07				sty 	TOS+1
.1518	4c 00 00	jmp $0000			jmp 	NextCode
.151b					C256:
.151b	a5 06		lda $06				lda 	TOS
.151d	48		pha				pha
.151e	a5 07		lda $07				lda 	TOS+1
.1520	48		pha				pha
.1521	a9 00		lda #$00			lda 	#(256) & $FF
.1523	a0 01		ldy #$01			ldy 	#(256) >> 8
.1525	80 ed		bra $1514			bra 	Const2Byte
.1527					C512:
.1527	a5 06		lda $06				lda 	TOS
.1529	48		pha				pha
.152a	a5 07		lda $07				lda 	TOS+1
.152c	48		pha				pha
.152d	a9 00		lda #$00			lda 	#(512) & $FF
.152f	a0 02		ldy #$02			ldy 	#(512) >> 8
.1531	80 e1		bra $1514			bra 	Const2Byte
.1533					C1024:
.1533	a5 06		lda $06				lda 	TOS
.1535	48		pha				pha
.1536	a5 07		lda $07				lda 	TOS+1
.1538	48		pha				pha
.1539	a9 00		lda #$00			lda 	#(1024) & $FF
.153b	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153d	80 d5		bra $1514			bra 	Const2Byte
.153f					C4096:
.153f	a5 06		lda $06				lda 	TOS
.1541	48		pha				pha
.1542	a5 07		lda $07				lda 	TOS+1
.1544	48		pha				pha
.1545	a9 00		lda #$00			lda 	#(4096) & $FF
.1547	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1549	80 c9		bra $1514			bra 	Const2Byte
.154b					C32767:
.154b	a5 06		lda $06				lda 	TOS
.154d	48		pha				pha
.154e	a5 07		lda $07				lda 	TOS+1
.1550	48		pha				pha
.1551	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1553	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1555	80 bd		bra $1514			bra 	Const2Byte
.1557					C32768:
.1557	a5 06		lda $06				lda 	TOS
.1559	48		pha				pha
.155a	a5 07		lda $07				lda 	TOS+1
.155c	48		pha				pha
.155d	a9 00		lda #$00			lda 	#(32768) & $FF
.155f	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1561	80 b1		bra $1514			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1563					Drop:
.1563	68		pla				pla
.1564	85 07		sta $07				sta 	TOS+1
.1566	68		pla				pla
.1567	85 06		sta $06				sta 	TOS
.1569	4c 00 00	jmp $0000			jmp 	NextCode
.156c					TestDup:
.156c	a5 06		lda $06				lda 	TOS
.156e	05 07		ora $07				ora 	TOS+1
.1570	d0 03		bne $1575			bne 	Dup
.1572	4c 00 00	jmp $0000			jmp 	NextCode
.1575					Dup:
.1575	a5 06		lda $06				lda 	TOS
.1577	48		pha				pha
.1578	a5 07		lda $07				lda 	TOS+1
.157a	48		pha				pha
.157b	4c 00 00	jmp $0000			jmp 	NextCode
.157e					Swap:
.157e	86 10		stx $10				stx 	temp1
.1580	7a		ply				ply
.1581	fa		plx				plx
.1582	a5 06		lda $06				lda 	TOS
.1584	48		pha				pha
.1585	a5 07		lda $07				lda 	TOS+1
.1587	48		pha				pha
.1588	86 06		stx $06				stx 	TOS
.158a	84 07		sty $07				sty 	TOS+1
.158c	a6 10		ldx $10				ldx 	temp1
.158e	4c 00 00	jmp $0000			jmp 	NextCode
.1591					Over:
.1591	a5 06		lda $06				lda 	TOS
.1593	48		pha				pha
.1594	a5 07		lda $07				lda 	TOS+1
.1596	48		pha				pha
.1597	86 10		stx $10				stx 	temp1
.1599	ba		tsx				tsx
.159a	bd 04 01	lda $0104,x			lda 	stack3low,x
.159d	85 06		sta $06				sta 	TOS
.159f	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a2	85 07		sta $07				sta 	TOS+1
.15a4	a6 10		ldx $10				ldx 	temp1
.15a6	4c 00 00	jmp $0000			jmp 	NextCode
.15a9					Nip:
.15a9	68		pla				pla
.15aa	68		pla				pla
.15ab	4c 00 00	jmp $0000			jmp 	NextCode
.15ae					Rot:
.15ae	86 10		stx $10				stx 	temp1
.15b0	ba		tsx				tsx
.15b1	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b4	a8		tay				tay
.15b5	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b8	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15bb	a5 06		lda $06				lda 	TOS
.15bd	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15c0	84 06		sty $06				sty 	TOS
.15c2	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c5	a8		tay				tay
.15c6	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15c9	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15cc	a5 07		lda $07				lda 	TOS+1
.15ce	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15d1	84 07		sty $07				sty 	TOS+1
.15d3	a6 10		ldx $10				ldx 	temp1
.15d5	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d8					ByteRead:
.15d8	b2 06		lda ($06)			lda 	(TOS)
.15da	85 06		sta $06				sta 	TOS
.15dc	64 07		stz $07				stz 	TOS+1
.15de	4c 00 00	jmp $0000			jmp 	NextCode
.15e1					WordRead:
.15e1	a0 01		ldy #$01			ldy 	#1
.15e3	b1 06		lda ($06),y			lda 	(TOS),y
.15e5	a8		tay				tay
.15e6	b2 06		lda ($06)			lda 	(TOS)
.15e8	85 06		sta $06				sta 	TOS
.15ea	84 07		sty $07				sty 	TOS+1
.15ec	4c 00 00	jmp $0000			jmp 	NextCode
.15ef					ByteWrite:
.15ef	68		pla				pla
.15f0	68		pla				pla
.15f1	92 06		sta ($06)			sta 	(TOS)
.15f3	68		pla				pla
.15f4	85 07		sta $07				sta 	TOS+1
.15f6	68		pla				pla
.15f7	85 06		sta $06				sta 	TOS
.15f9	4c 00 00	jmp $0000			jmp 	NextCode
.15fc					WordWrite:
.15fc	68		pla				pla
.15fd	a0 01		ldy #$01			ldy 	#1
.15ff	91 06		sta ($06),y			sta 	(TOS),y
.1601	68		pla				pla
.1602	92 06		sta ($06)			sta 	(TOS)
.1604	68		pla				pla
.1605	85 07		sta $07				sta 	TOS+1
.1607	68		pla				pla
.1608	85 06		sta $06				sta 	TOS
.160a	4c 00 00	jmp $0000			jmp 	NextCode
.160d					WordAdd:
.160d	7a		ply				ply
.160e	68		pla				pla
.160f	18		clc				clc
.1610	72 06		adc ($06)			adc 	(TOS)
.1612	92 06		sta ($06)			sta 	(TOS)
.1614	98		tya				tya
.1615	a0 01		ldy #$01			ldy 	#1
.1617	71 06		adc ($06),y			adc 	(TOS),y
.1619	91 06		sta ($06),y			sta 	(TOS),y
.161b	68		pla				pla
.161c	85 07		sta $07				sta 	TOS+1
.161e	68		pla				pla
.161f	85 06		sta $06				sta 	TOS
.1621	4c 00 00	jmp $0000			jmp 	NextCode
.1624					AllocateMemory:
.1624	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1626	48		pha				pha
.1627	a5 07		lda $07				lda 	TOS+1
.1629	48		pha				pha
.162a	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162c	85 06		sta $06				sta 	TOS
.162e	a5 0f		lda $0f				lda 	nextFreeMem+1
.1630	85 07		sta $07				sta 	TOS+1
.1632	7a		ply				ply 								; advance the free ram pointer
.1633	68		pla				pla
.1634	20 f5 1a	jsr $1af5			jsr 	AdvanceFreeMem
.1637	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.163a					EncodeProgram:
.163a	48		pha				pha 								; save registers.
.163b	da		phx				phx
.163c	5a		phy				phy
.163d	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.163f	85 08		sta $08				sta		srcPtr
.1641	20 57 18	jsr $1857			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.1644	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1646	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1649	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.164c	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.164f	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.1651	20 02 18	jsr $1802			jsr 	CheckIsDigit
.1654	90 09		bcc $165f			bcc 	_EPNoLineNumber 			; if so there is a line number
.1656	20 24 18	jsr $1824			jsr 	EncodeGetConstant 			; extract that constant from the source
.1659	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.165c	8c 12 09	sty $0912			sty 	encodeBuffer+2
.165f					_EPNoLineNumber:
.165f					EncodeLoop:
.165f	20 49 18	jsr $1849			jsr 	EncSkipSpaces 				; skip over spaces
.1662	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.1664	d0 0b		bne $1671			bne 	_EPNotEnd
.1666					_EPEndEncode:
.1666	a9 de		lda #$de			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.1668	a0 1d		ldy #$1d			ldy 	#NextLine >> 8
.166a	20 e9 17	jsr $17e9			jsr 	EncodeWriteWord
.166d	7a		ply				ply									; restore and exit.
.166e	fa		plx				plx
.166f	68		pla				pla
.1670	60		rts				rts
.1671					_EPNotEnd:
.1671	b2 08		lda ($08)			lda 	(srcPtr)
.1673	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.1675	f0 04		beq $167b			beq 	_EPIsComStr
.1677	c9 27		cmp #$27			cmp 	#"'"
.1679	d0 05		bne $1680			bne 	_EPNotComStr
.167b					_EPIsComStr:
.167b	20 40 17	jsr $1740			jsr 	EncodeCommentString
.167e	80 df		bra $165f			bra 	EncodeLoop
.1680					_EPNotComStr:
.1680	38		sec				sec
.1681	20 36 18	jsr $1836			jsr 	EncSetBit7Word
.1684	20 70 18	jsr $1870			jsr 	EncodeSearchDictionary		; look it up
.1687	90 44		bcc $16cd			bcc 	_EPNotInDictionary
.1689	85 10		sta $10				sta 	temp1 						; save dictionary record address
.168b	84 11		sty $11				sty 	temp1+1
.168d	a0 01		ldy #$01			ldy 	#1
.168f	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.1691	29 20		and #$20			and 	#$20
.1693	d0 12		bne $16a7			bne 	_EPEncodeRoutine 			; if so, do special routine.
.1695	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.1697	b1 10		lda ($10),y			lda 	(temp1),y
.1699	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.169c	c8		iny				iny
.169d	b1 10		lda ($10),y			lda 	(temp1),y
.169f	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.16a2	20 0e 18	jsr $180e			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16a5	80 b8		bra $165f			bra 	EncodeLoop
.16a7					_EPEncodeRoutine:
.16a7	a0 01		ldy #$01			ldy 	#1							; get type bit
.16a9	b1 10		lda ($10),y			lda 	(temp1),y
.16ab	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.16ad	29 10		and #$10			and 	#$10 						; but decoder comes first
.16af	f0 02		beq $16b3			beq 	_EPENoDecoder
.16b1	c8		iny				iny 								; so if it exists, adjust for it.
.16b2	c8		iny				iny
.16b3					_EPENoDecoder:
.16b3	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.16b5	85 12		sta $12				sta 	temp2
.16b7	c8		iny				iny
.16b8	b1 10		lda ($10),y			lda 	(temp1),y
.16ba	85 13		sta $13				sta 	temp2+1
.16bc	48		pha				pha 								; call routine preserving state
.16bd	da		phx				phx
.16be	5a		phy				phy
.16bf	20 ca 16	jsr $16ca			jsr 	_EPECallTemp2
.16c2	7a		ply				ply
.16c3	fa		plx				plx
.16c4	68		pla				pla
.16c5	20 0e 18	jsr $180e			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16c8	80 95		bra $165f			bra 	EncodeLoop
.16ca					_EPECallTemp2:
.16ca	6c 12 00	jmp ($0012)			jmp 	(temp2)
.16cd					_EPNotInDictionary:
.16cd	20 9b 17	jsr $179b			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.16d0	90 19		bcc $16eb			bcc 	_EPNotDefined
.16d2	48		pha				pha
.16d3	a9 7c		lda #$7c			lda	 	#CallHandler & $FF 			; write code call handler
.16d5	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.16d8	a9 19		lda #$19			lda	 	#CallHandler >> 8
.16da	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.16dd	68		pla				pla 								; write line number
.16de	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.16e1	98		tya				tya
.16e2	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.16e5	20 0e 18	jsr $180e			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.16e8	4c 5f 16	jmp $165f			jmp 	EncodeLoop
.16eb					_EPNotDefined:
.16eb	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.16ed	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.16ef	f0 29		beq $171a			beq 	_EPCallDirect
.16f1	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.16f3	f0 42		beq $1737			beq 	_EPVariable
.16f5	c9 40		cmp #$40			cmp 	#"@"
.16f7	f0 3e		beq $1737			beq 	_EPVariable
.16f9	c9 26		cmp #$26			cmp 	#"&"
.16fb	f0 3a		beq $1737			beq 	_EPVariable
.16fd	a9 86		lda #$86			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.16ff	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.1701	20 e9 17	jsr $17e9			jsr 	EncodeWriteWord
.1704					_EPOutputConstant:
.1704	20 24 18	jsr $1824			jsr 	EncodeGetConstant 			; extract that constant from the source
.1707	90 06		bcc $170f			bcc 	_EPFail 					; if can't find one, that's us done.
.1709	20 e9 17	jsr $17e9			jsr 	EncodeWriteWord 			; write out the encoded value.
.170c	4c 5f 16	jmp $165f			jmp 	EncodeLoop 					; and go round again.
.170f					_EPFail:
.170f	20 20 10	jsr $1020			jsr 	ErrorHandler
>1712	53 59 4e 54 41 58 3f 00				.text 	"SYNTAX?",0
.171a					_EPCallDirect:
.171a	a9 7c		lda #$7c			lda	 	#CallHandler & $FF 			; write code call handler
.171c	a0 19		ldy #$19			ldy	 	#CallHandler >> 8
.171e	20 e9 17	jsr $17e9			jsr 	EncodeWriteWord
.1721	a9 01		lda #$01			lda 	#1
.1723	20 1a 18	jsr $181a			jsr 	EncodeAddSrcPtr 			; skip over the <
.1726	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.1728					_EPToLast:
.1728	c8		iny				iny
.1729	b1 08		lda ($08),y			lda 	(srcPtr),y
.172b	10 fb		bpl $1728			bpl	 	_EPToLast
.172d	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.172f	d0 de		bne $170f			bne 	_EPFail
.1731	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.1733	91 08		sta ($08),y			sta 	(srcPtr),y
.1735	80 cd		bra $1704			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.1737					_EPVariable:
.1737	20 c4 18	jsr $18c4			jsr 	EncodeVariableReference
.173a	20 0e 18	jsr $180e			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.173d	4c 5f 16	jmp $165f			jmp 	EncodeLoop

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.1740					EncodeCommentString:
.1740	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.1742	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.1744	aa		tax				tax 								; save in X
.1745	a9 f5		lda #$f5			lda 	#(SkipComment & $FF)		; get the routine to use
.1747	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.1749	e0 27		cpx #$27			cpx 	#"'"
.174b	f0 06		beq $1753			beq 	_ECSGotCmd
.174d	86 10		stx $10				stx		temp1 						; other terminator = "
.174f	a9 ae		lda #$ae			lda 	#(LiteralString & $FF)
.1751	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.1753					_ECSGotCmd:
.1753	20 e9 17	jsr $17e9			jsr 	EncodeWriteWord 			; write word out.
.1756	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.1758	20 1a 18	jsr $181a			jsr 	EncodeAddSrcPtr
.175b	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.175d	d0 03		bne $1762			bne 	_ECNoSkipSpaces
.175f	20 49 18	jsr $1849			jsr 	EncSkipSpaces
.1762					_ECNoSkipSpaces:
.1762	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.1765	a9 01		lda #$01			lda 	#1
.1767	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte 			; write total length, so far 1.
.176a	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.176c					_ECSCopyText:
.176c	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.176e	f0 18		beq $1788			beq 	_ECSEndOfLine 				; end of line ?
.1770	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.1772	f0 09		beq $177d			beq 	_ECSEndOfString 			; if so must be closing quote.
.1774	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte 			; write the byte out
.1777	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.177a	c8		iny				iny 								; next character
.177b	80 ef		bra $176c			bra 	_ECSCopyText
.177d					_ECSEndOfString:
.177d	c8		iny				iny 								; skip closing quote.
.177e	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.1780	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.1783	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.1786	80 0e		bra $1796			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.1788					_ECSEndOfLine:
.1788	a5 10		lda $10				lda 	temp1 						; missing closing quote
.178a	f0 0a		beq $1796			beq 	_ECSComplete 				; if we were doing a string.
.178c	20 20 10	jsr $1020			jsr 	ErrorHandler
>178f	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.1796					_ECSComplete:
.1796	98		tya				tya									; skip over.
.1797	20 1a 18	jsr $181a			jsr 	EncodeAddSrcPtr
.179a	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encdef.src

.179b					EncodeSearchUserDefined:
.179b	38		sec				sec 								; temp1 = srcPtr-6 because the
.179c	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.179e	e9 06		sbc #$06			sbc		#6
.17a0	85 10		sta $10				sta 	temp1
.17a2	a5 09		lda $09				lda 	srcPtr+1
.17a4	e9 00		sbc #$00			sbc 	#0
.17a6	85 11		sta $11				sta 	temp1+1
.17a8	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17aa	85 12		sta $12				sta 	0+(temp2)
.17ac	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17ae	85 13		sta $13				sta 	1+(temp2)
.17b0					_ESULoop:
.17b0	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.17b2	f0 33		beq $17e7			beq 	_ESUFail
.17b4	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.17b6	b1 12		lda ($12),y			lda 	(temp2),y
.17b8	c9 1a		cmp #$1a			cmp 	#DefineCode & $FF
.17ba	d0 1e		bne $17da			bne 	_ESUNext
.17bc	c8		iny				iny
.17bd	b1 12		lda ($12),y			lda 	(temp2),y
.17bf	c9 1e		cmp #$1e			cmp 	#DefineCode >> 8
.17c1	d0 17		bne $17da			bne 	_ESUNext
.17c3	c8		iny				iny 								; skip length byte.
.17c4					_ESUCompare:
.17c4	c8		iny				iny
.17c5	b1 12		lda ($12),y			lda 	(temp2),y
.17c7	d1 10		cmp ($10),y			cmp 	(temp1),y
.17c9	d0 0f		bne $17da			bne 	_ESUNext
.17cb	0a		asl a				asl 	a 							; bit 7 set => found it.
.17cc	90 f6		bcc $17c4			bcc 	_ESUCompare
.17ce	a0 01		ldy #$01			ldy 	#1
.17d0	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.17d2	aa		tax				tax
.17d3	c8		iny				iny
.17d4	b1 12		lda ($12),y			lda 	(temp2),y
.17d6	a8		tay				tay
.17d7	8a		txa				txa
.17d8	38		sec				sec 								; return with carry set as found
.17d9	60		rts				rts
.17da					_ESUNext:
.17da	18		clc				clc
.17db	a5 12		lda $12				lda 	temp2
.17dd	72 12		adc ($12)			adc 	(temp2)
.17df	85 12		sta $12				sta 	temp2
.17e1	90 02		bcc $17e5			bcc 	_NoCarryAdv
.17e3	e6 13		inc $13				inc 	temp2+1
.17e5					_NoCarryAdv:
.17e5	80 c9		bra $17b0			bra 	_ESULoop 					; and loop round
.17e7					_ESUFail:
.17e7	18		clc				clc
.17e8	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.17e9					EncodeWriteWord:
.17e9	48		pha				pha
.17ea	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.17ed	98		tya				tya
.17ee	20 f3 17	jsr $17f3			jsr 	EncodeWriteByte
.17f1	68		pla				pla
.17f2	60		rts				rts
.17f3					EncodeWriteByte:
.17f3	da		phx				phx
.17f4	ae 10 09	ldx $0910			ldx 	encodeBuffer
.17f7	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.17fa	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.17fd	ee 10 09	inc $0910			inc 	encodeBuffer
.1800	fa		plx				plx
.1801	60		rts				rts
.1802					CheckIsDigit:
.1802	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.1804	90 06		bcc $180c			bcc 	_CIDFail
.1806	c9 3a		cmp #$3a			cmp 	#"9"+1
.1808	b0 02		bcs $180c			bcs 	_CIDFail
.180a	38		sec				sec
.180b	60		rts				rts
.180c					_CIDFail:
.180c	18		clc				clc
.180d	60		rts				rts
.180e					EncodeMoveNextWord:
.180e	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.1810					_EPNWLoop:
.1810	c8		iny				iny
.1811	b1 08		lda ($08),y			lda 	(srcPtr),y
.1813	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.1815	b0 f9		bcs $1810			bcs 	_EPNWLoop
.1817	98		tya				tya
.1818	80 00		bra $181a			bra 	EncodeAddSrcPtr
.181a					EncodeAddSrcPtr:
.181a	18		clc				clc 								; add offset
.181b	65 08		adc $08				adc 	srcPtr
.181d	85 08		sta $08				sta 	srcPtr
.181f	90 02		bcc $1823			bcc 	_EASPNoCarry
.1821	e6 09		inc $09				inc 	srcPtr+1					; carry through
.1823					_EASPNoCarry:
.1823	60		rts				rts
.1824					EncodeGetConstant:
.1824	a5 08		lda $08				lda 	srcPtr 						; get source
.1826	a4 09		ldy $09				ldy 	srcPtr+1
.1828	20 50 1d	jsr $1d50			jsr 	ConvertToInteger 			; call converter
.182b	90 08		bcc $1835			bcc 	_EGCExit
.182d	20 1a 18	jsr $181a			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.1830	a5 14		lda $14				lda 	temp3 						; get result into YA
.1832	a4 15		ldy $15				ldy 	temp3+1
.1834	38		sec				sec 								; return CS
.1835					_EGCExit:
.1835	60		rts				rts
.1836					EncSetBit7Word:
.1836	08		php				php 								; save carry
.1837	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.1839					_ESB7Loop:
.1839	c8		iny				iny
.183a	b1 08		lda ($08),y			lda 	(srcPtr),y
.183c	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.183e	b0 f9		bcs $1839			bcs 	_ESB7Loop
.1840	88		dey				dey									; previous character
.1841	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.1843	0a		asl a				asl 	a 							; shift bit 7 out
.1844	28		plp				plp 								; restore carry
.1845	6a		ror a				ror 	a 							; shift it in
.1846	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.1848	60		rts				rts
.1849					EncSkipSpaces:
.1849	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.184b	c9 20		cmp #$20			cmp 	#32
.184d	d0 07		bne $1856			bne 	_ESNotSpace
.184f	a9 01		lda #$01			lda 	#1
.1851	20 1a 18	jsr $181a			jsr 	EncodeAddSrcPtr
.1854	80 f3		bra $1849			bra	 	EncSkipSpaces
.1856					_ESNotSpace:
.1856	60		rts				rts
.1857					EncodeTrimTrailingSpaces:
.1857	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.1859					_ETTFindEnd:
.1859	c8		iny				iny
.185a	b1 08		lda ($08),y			lda 	(srcPtr),y
.185c	d0 fb		bne $1859			bne 	_ETTFindEnd
.185e					_ETTRemoveSpace:
.185e	c0 00		cpy #$00			cpy 	#0 							; start of string
.1860	f0 0d		beq $186f			beq 	_ETTExit
.1862	88		dey				dey 								; previous character 1..32
.1863	b1 08		lda ($08),y			lda 	(srcPtr),y
.1865	c9 21		cmp #$21			cmp 	#32+1
.1867	b0 06		bcs $186f			bcs 	_ETTExit
.1869	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.186b	91 08		sta ($08),y			sta 	(srcPtr),y
.186d	80 ef		bra $185e			bra 	_ETTRemoveSpace
.186f					_ETTExit:
.186f	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encsearch.src

.1870					EncodeSearchDictionary:
.1870	a9 18		lda #$18			lda 	#(Dictionary) & $FF
.1872	85 10		sta $10				sta 	0+(temp1)
.1874	a9 20		lda #$20			lda 	#(Dictionary) >> 8
.1876	85 11		sta $11				sta 	1+(temp1)
.1878					_ESDLoop:
.1878	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.187a	18		clc				clc
.187b	f0 46		beq $18c3			beq 	_ESDExit
.187d	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.187f	b1 10		lda ($10),y			lda 	(temp1),y
.1881	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.1882	4a		lsr a				lsr 	a
.1883	4a		lsr a				lsr 	a
.1884	4a		lsr a				lsr 	a
.1885	c8		iny				iny 								; Y = 2
.1886	4a		lsr a				lsr 	a
.1887	90 01		bcc $188a			bcc 	_ESDNotDec
.1889	c8		iny				iny
.188a					_ESDNotDec:
.188a	4a		lsr a				lsr 	a
.188b	90 01		bcc $188e			bcc 	_ESDNotInc
.188d	c8		iny				iny
.188e					_ESDNotInc:
.188e	98		tya				tya
.188f	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.1890	a8		tay				tay
.1891	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.1893	d2 08		cmp ($08)			cmp 	(srcPtr)
.1895	d0 1f		bne $18b6			bne 	_ESDNext 					; do not match, go to next
.1897	98		tya				tya 								; make temp2 point to the name in
.1898	18		clc				clc 								; the dictionary.
.1899	65 10		adc $10				adc 	temp1
.189b	85 12		sta $12				sta 	temp2
.189d	a5 11		lda $11				lda 	temp1+1
.189f	69 00		adc #$00			adc 	#0
.18a1	85 13		sta $13				sta 	temp2+1
.18a3	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.18a5					_ESDCompare:
.18a5	c8		iny				iny
.18a6	b1 08		lda ($08),y			lda 	(srcPtr),y
.18a8	d1 12		cmp ($12),y			cmp 	(temp2),y
.18aa	d0 0a		bne $18b6			bne 	_ESDNext
.18ac	0a		asl a				asl 	a
.18ad	90 f6		bcc $18a5			bcc 	_ESDCompare
.18af	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.18b1	a4 11		ldy $11				ldy 	temp1+1
.18b3	38		sec				sec
.18b4	80 0d		bra $18c3			bra 	_ESDExit
.18b6					_ESDNext:
.18b6	18		clc				clc
.18b7	a5 10		lda $10				lda 	temp1
.18b9	72 10		adc ($10)			adc 	(temp1)
.18bb	85 10		sta $10				sta 	temp1
.18bd	90 b9		bcc $1878			bcc 	_ESDLoop
.18bf	e6 11		inc $11				inc 	temp1+1
.18c1	80 b5		bra $1878			bra 	_ESDLoop
.18c3					_ESDExit:
.18c3	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encvar.src

.18c4					EncodeVariableReference:
>18c4	ff						.byte 	$FF
.18c5	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.18c6					ForHandler:
.18c6	e6 05		inc $05				inc 	rsp 						; bump the RSP
.18c8	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.18ca	c0 40		cpy #$40			cpy 	#$40 						; overflow
.18cc	f0 18		beq $18e6			beq 	_FHOverflow
.18ce	a5 07		lda $07				lda 	TOS+1
.18d0	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.18d3	a5 06		lda $06				lda 	TOS
.18d5	99 00 07	sta $0700,y			sta 	returnStackLow,y
.18d8	a9 ff		lda #$ff			lda 	#$FF
.18da	99 80 07	sta $0780,y			sta 	returnStackX,y
.18dd	68		pla				pla
.18de	85 07		sta $07				sta 	TOS+1
.18e0	68		pla				pla
.18e1	85 06		sta $06				sta 	TOS
.18e3	4c 00 00	jmp $0000			jmp 	NextCode
.18e6					_FHOverflow:
.18e6	20 20 10	jsr $1020			jsr 	ErrorHandler
>18e9	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>18f1	4b 3f 00
.18f4					NextHandler:
.18f4	da		phx				phx
.18f5	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.18f7	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.18fa	c9 ff		cmp #$ff			cmp 	#$FF
.18fc	d0 21		bne $191f			bne 	NHNoFor
.18fe	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1901	d0 03		bne $1906			bne 	_NHNoBorrow
.1903	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1906					_NHNoBorrow:
.1906	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1909	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.190c	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.190f	fa		plx				plx 								; restore X and re-test
.1910	09 00		ora #$00			ora 	#0
.1912	f0 05		beq $1919			beq 	_NHComplete 				; if so then complete, else loop.
.1914	e8		inx				inx 								; advance to branch
.1915	e8		inx				inx
.1916	4c 72 19	jmp $1972			jmp 	BranchAlways
.1919					_NHComplete:
.1919	e8		inx				inx 								; skip over the branch quantity
.191a	c6 05		dec $05				dec 	rsp 						; drop the indx
.191c	4c 00 00	jmp $0000			jmp 	NextCode
.191f					NHNoFor:
.191f	20 20 10	jsr $1020			jsr 	ErrorHandler
>1922	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.192a					GetIndex:
.192a	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.192c	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.192f	c9 ff		cmp #$ff			cmp 	#$FF
.1931	d0 ec		bne $191f			bne 	NHNoFor
.1933	a5 06		lda $06				lda 	TOS
.1935	48		pha				pha
.1936	a5 07		lda $07				lda 	TOS+1
.1938	48		pha				pha
.1939	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.193c	38		sec				sec
.193d	e9 01		sbc #$01			sbc 	#1
.193f	85 06		sta $06				sta 	TOS
.1941	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.1944	e9 00		sbc #$00			sbc 	#0
.1946	85 07		sta $07				sta 	TOS+1
.1948	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.194b					IfHandler:
.194b	4c 5a 19	jmp $195a			jmp 	BranchIfZero
.194e					ElseHandler:
.194e	4c 70 19	jmp $1970			jmp 	BranchTestSucceedsNoPop
.1951					EndIfHandler:
.1951	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.1954					RepeatHandler:
.1954	4c 00 00	jmp $0000			jmp 	NextCode
.1957					UntilHandler:
.1957	4c 5a 19	jmp $195a			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.195a					BranchIfZero:
.195a	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.195c	05 07		ora $07				ora 	TOS+1
.195e	f0 0a		beq $196a			beq 	BranchTestSucceeds
.1960					BranchTestFails:
.1960	68		pla				pla
.1961	85 07		sta $07				sta 	TOS+1
.1963	68		pla				pla
.1964	85 06		sta $06				sta 	TOS
.1966	e8		inx				inx 								; skip over the relative branch.
.1967	4c 00 00	jmp $0000			jmp 	NextCode
.196a					BranchTestSucceeds:
.196a	68		pla				pla
.196b	85 07		sta $07				sta 	TOS+1
.196d	68		pla				pla
.196e	85 06		sta $06				sta 	TOS
.1970					BranchTestSucceedsNoPop:
.1970	e8		inx				inx 								; advance by two, to the offset
.1971	e8		inx				inx
.1972					BranchAlways:
.1972	8a		txa				txa 								; A = Y = position
.1973	a8		tay				tay 								; (IP),Y now points to the branch target
.1974	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.1976	aa		tax				tax 								; position back in this line.
.1977	ca		dex				dex
.1978	ca		dex				dex
.1979	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.197c					CallHandler:
.197c	e8		inx				inx									; bump X to the call address.
.197d	e8		inx				inx
.197e	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1980	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.1982	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1984	f0 4b		beq $19d1			beq 	_CHOverflow
.1986	a5 04		lda $04				lda 	IP+1
.1988	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.198b	a5 03		lda $03				lda 	IP
.198d	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1990	8a		txa				txa
.1991	99 80 07	sta $0780,y			sta 	returnStackX,y
.1994	8a		txa				txa 								; get the line number into temp1.
.1995	a8		tay				tay
.1996	b1 03		lda ($03),y			lda 	(IP),y
.1998	85 10		sta $10				sta 	temp1
.199a	c8		iny				iny
.199b	b1 03		lda ($03),y			lda 	(IP),y
.199d	85 11		sta $11				sta 	temp1+1
.199f	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.19a1	85 03		sta $03				sta 	0+(IP)
.19a3	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.19a5	85 04		sta $04				sta 	1+(IP)
.19a7	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.19a9	f0 17		beq $19c2			beq 	_CHFail
.19ab	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.19ad					_CHSearch:
.19ad	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.19af	c5 10		cmp $10				cmp 	temp1
.19b1	f0 2d		beq $19e0			beq 	_CHFoundLSB
.19b3					_CHSearchNext:
.19b3	18		clc				clc
.19b4	a5 03		lda $03				lda 	IP
.19b6	72 03		adc ($03)			adc 	(IP)
.19b8	85 03		sta $03				sta 	IP
.19ba	90 02		bcc $19be			bcc 	_NoCarryAdv
.19bc	e6 04		inc $04				inc 	IP+1
.19be					_NoCarryAdv:
.19be	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.19c0	d0 eb		bne $19ad			bne 	_CHSearch
.19c2					_CHFail:
.19c2	20 20 10	jsr $1020			jsr 	ErrorHandler
>19c5	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>19cd	4f 4e 3f 00
.19d1					_CHOverflow:
.19d1	20 20 10	jsr $1020			jsr 	ErrorHandler
>19d4	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>19dc	54 48 3f 00
.19e0					_CHFoundLSB:
.19e0	c8		iny				iny 								; get MSB
.19e1	b1 03		lda ($03),y			lda 	(IP),y
.19e3	88		dey				dey
.19e4	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.19e6	d0 cb		bne $19b3			bne 	_CHSearchNext
.19e8	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.19ea	b1 03		lda ($03),y			lda 	(IP),y
.19ec	c9 1a		cmp #$1a			cmp 	#DefineCode & $FF
.19ee	d0 d2		bne $19c2			bne 	_CHFail
.19f0	c8		iny				iny
.19f1	b1 03		lda ($03),y			lda 	(IP),y
.19f3	c9 1e		cmp #$1e			cmp 	#DefineCode >> 8
.19f5	d0 cb		bne $19c2			bne 	_CHFail
.19f7	c8		iny				iny
.19f8	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.19fa	18		clc				clc
.19fb	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.19fd	aa		tax				tax
.19fe	4c 00 00	jmp $0000			jmp 	NextCode
.1a01					ReturnHandler:
.1a01	a4 05		ldy $05				ldy 	rsp 						; get rsp
.1a03	30 15		bmi $1a1a			bmi 	_RHUnderflow 				; if -ve underflowed
.1a05	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1a07	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1a0a	85 04		sta $04				sta 	IP+1
.1a0c	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1a0f	85 03		sta $03				sta 	IP
.1a11	b9 80 07	lda $0780,y			lda 	returnStackX,y
.1a14	aa		tax				tax
.1a15	f0 0e		beq $1a25			beq 	_RHInLoop 					; this means you have done :something for ; next
.1a17	4c 00 00	jmp $0000			jmp 	NextCode
.1a1a					_RHUnderflow:
.1a1a	20 20 10	jsr $1020			jsr 	ErrorHandler
>1a1d	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1a25					_RHInLoop:
.1a25	20 20 10	jsr $1020			jsr 	ErrorHandler
>1a28	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>1a30	4e 20 4c 4f 4f 50 3f 00
.1a38					CallHandlerDecode:
.1a38	a9 03		lda #$03			lda 	#CTH_Call					; space
.1a3a	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1a3d	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1a3f	aa		tax				tax
.1a40	c8		iny				iny
.1a41	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a43	a8		tay				tay
.1a44	8a		txa				txa
.1a45	20 82 1a	jsr $1a82			jsr 	FindLine 					; try to locate that line.
.1a48	b0 11		bcs $1a5b			bcs 	_CHDFound 					; if found .....
.1a4a					_CHDLineOnly:
.1a4a	48		pha				pha
.1a4b	a9 3c		lda #$3c			lda 	#"<"
.1a4d	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1a50	68		pla				pla
.1a51	18		clc				clc 								; output unsigned
.1a52	20 1a 1c	jsr $1c1a			jsr 	DecodeYAToBuffer
.1a55	a9 3e		lda #$3e			lda 	#">"
.1a57	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1a5a	60		rts				rts
.1a5b					_CHDFound:
.1a5b	48		pha				pha 								; save YA
.1a5c	5a		phy				phy
.1a5d	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1a5f	b1 10		lda ($10),y			lda 	(temp1),y
.1a61	c9 1a		cmp #$1a			cmp 	#DefineCode & 255
.1a63	d0 07		bne $1a6c			bne 	_CHDNoDefine
.1a65	c8		iny				iny
.1a66	b1 10		lda ($10),y			lda 	(temp1),y
.1a68	c9 1e		cmp #$1e			cmp 	#DefineCode >> 8
.1a6a	f0 04		beq $1a70			beq 	_CHDFoundDefine
.1a6c					_CHDNoDefine:
.1a6c	7a		ply				ply									; restore the line number and print it in <>
.1a6d	68		pla				pla
.1a6e	80 da		bra $1a4a			bra 	_CHDLineOnly
.1a70					_CHDFoundDefine:
.1a70	68		pla				pla 								; throw saved line number.
.1a71	68		pla				pla
.1a72	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1a74					_CHDOutName:
.1a74	c8		iny				iny 								; next
.1a75	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.1a77	48		pha				pha
.1a78	29 7f		and #$7f			and 	#$7F
.1a7a	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1a7d	68		pla				pla
.1a7e	0a		asl a				asl 	a 							; bit 7 to carry
.1a7f	90 f3		bcc $1a74			bcc 	_CHDOutName
.1a81	60		rts				rts
.1a82					FindLine:
.1a82	48		pha				pha 								; save registers
.1a83	da		phx				phx
.1a84	5a		phy				phy
.1a85	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.1a87	84 13		sty $13				sty 	temp2+1
.1a89	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a8b	85 10		sta $10				sta 	0+(temp1)
.1a8d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a8f	85 11		sta $11				sta 	1+(temp1)
.1a91					_FLLoop:
.1a91	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.1a93	18		clc				clc									; if so exit with CC.
.1a94	f0 1d		beq $1ab3			beq 	_FLExit
.1a96	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1a98	b1 10		lda ($10),y			lda 	(temp1),y
.1a9a	c5 12		cmp $12				cmp 	temp2
.1a9c	d0 08		bne $1aa6			bne 	_FLNext
.1a9e	c8		iny				iny
.1a9f	b1 10		lda ($10),y			lda 	(temp1),y
.1aa1	c5 13		cmp $13				cmp 	temp2+1
.1aa3	38		sec				sec 								; if so exit with CS
.1aa4	f0 0d		beq $1ab3			beq 	_FLExit
.1aa6					_FLNext:
.1aa6	18		clc				clc
.1aa7	a5 10		lda $10				lda 	temp1
.1aa9	72 10		adc ($10)			adc 	(temp1)
.1aab	85 10		sta $10				sta 	temp1
.1aad	90 02		bcc $1ab1			bcc 	_NoCarryAdv
.1aaf	e6 11		inc $11				inc 	temp1+1
.1ab1					_NoCarryAdv:
.1ab1	80 de		bra $1a91			bra 	_FLLoop 					; keep looking.
.1ab3					_FLExit:
.1ab3	7a		ply				ply
.1ab4	fa		plx				plx
.1ab5	68		pla				pla
.1ab6	60		rts				rts
.1ab7	18		clc				clc
.1ab8	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1ab9					NewHandler:
.1ab9	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1abc	20 c8 1a	jsr $1ac8			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1abf	4c 00 00	jmp $0000			jmp 	NextCode
.1ac2					ClrHandler:
.1ac2	20 c8 1a	jsr $1ac8			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1ac5	4c 00 00	jmp $0000			jmp 	NextCode
.1ac8					ClearVariableSpace:
.1ac8	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1aca	85 05		sta $05				sta 	rsp
.1acc	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1ace	85 0e		sta $0e				sta 	0+(nextFreeMem)
.1ad0	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1ad2	85 0f		sta $0f				sta 	1+(nextFreeMem)
.1ad4	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1ad6					_CVSHashClear:
.1ad6	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1ad8	99 40 06	sta $0640,y			sta 	hashTable,y
.1adb	88		dey				dey
.1adc	10 f8		bpl $1ad6			bpl 	_CVSHashClear
.1ade					_CVSFindEnd:
.1ade	18		clc				clc
.1adf	a5 0e		lda $0e				lda 	nextFreeMem
.1ae1	72 0e		adc ($0e)			adc 	(nextFreeMem)
.1ae3	85 0e		sta $0e				sta 	nextFreeMem
.1ae5	90 02		bcc $1ae9			bcc 	_NoCarryAdv
.1ae7	e6 0f		inc $0f				inc 	nextFreeMem+1
.1ae9					_NoCarryAdv:
.1ae9	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1aeb	d0 f1		bne $1ade			bne 	_CVSFindEnd
.1aed	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1aef	a0 00		ldy #$00			ldy 	#0
.1af1	20 f5 1a	jsr $1af5			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1af4	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1af5					AdvanceFreeMem:
.1af5	18		clc				clc
.1af6	65 0e		adc $0e				adc 	nextFreeMem
.1af8	85 0e		sta $0e				sta 	nextFreeMem
.1afa	98		tya				tya
.1afb	65 0f		adc $0f				adc 	nextFreeMem+1
.1afd	85 0f		sta $0f				sta 	nextFreeMem+1
.1aff	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.1b00					ExitDump:
.1b00	ba		tsx				tsx 								; save Data Stack in temp1
.1b01	86 10		stx $10				stx 	temp1
.1b03	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1b06					BreakCmd:
>1b06	ff						.byte 	$FF
.1b07	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1b0a					DecodeLineIntoBufPtr:
.1b0a	48		pha				pha
.1b0b	da		phx				phx
.1b0c	5a		phy				phy
.1b0d	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1b0f	84 09		sty $09				sty 	srcPtr+1
.1b11	90 1b		bcc $1b2e			bcc 	_DecodeNoLineNumber
.1b13	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1b15	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b17	aa		tax				tax
.1b18	c8		iny				iny
.1b19	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b1b	a8		tay				tay
.1b1c	8a		txa				txa
.1b1d	18		clc				clc
.1b1e	20 1a 1c	jsr $1c1a			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.1b21	aa		tax				tax 								; count in X
.1b22					_DecodeLineSpace:
.1b22	e0 05		cpx #$05			cpx 	#5
.1b24	f0 08		beq $1b2e			beq 	_DecodeNoLineNumber
.1b26	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1b28	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1b2b	e8		inx				inx
.1b2c	80 f4		bra $1b22			bra 	_DecodeLineSpace
.1b2e					_DecodeNoLineNumber:
.1b2e	a0 03		ldy #$03			ldy 	#3 							; initial position.
.1b30					_DecodeLoop:
.1b30	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1b32	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1b34	c8		iny				iny
.1b35	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b37	85 11		sta $11				sta 	temp1+1
.1b39	c8		iny				iny 								; y points to the byte after it.
.1b3a	a5 10		lda $10				lda 	temp1
.1b3c	c9 de		cmp #$de			cmp 	#NextLine & $FF
.1b3e	d0 06		bne $1b46			bne 	_DecodeNotEOL
.1b40	a5 11		lda $11				lda 	temp1+1
.1b42	c9 1d		cmp #$1d			cmp 	#NextLine >> 8
.1b44	f0 0b		beq $1b51			beq 	_DecodeEOL
.1b46					_DecodeNotEOL:
.1b46	20 59 1b	jsr $1b59			jsr 	IdentifyCodeWord
.1b49	20 a3 1b	jsr $1ba3			jsr 	DecodeFoundWord
.1b4c	20 8d 1b	jsr $1b8d			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1b4f	80 df		bra $1b30			bra 	_DecodeLoop 				; and go round again
.1b51					_DecodeEOL:
.1b51	a9 00		lda #$00			lda 	#0
.1b53	92 0a		sta ($0a)			sta 	(bufPtr)
.1b55	7a		ply				ply 								; restore registers and exit
.1b56	fa		plx				plx
.1b57	68		pla				pla
.1b58	60		rts				rts
.1b59					IdentifyCodeWord:
.1b59	5a		phy				phy 								; save current position on the stack.
.1b5a	a9 18		lda #$18			lda 	#(Dictionary) & $FF
.1b5c	85 0c		sta $0c				sta 	0+(matchPtr)
.1b5e	a9 20		lda #$20			lda 	#(Dictionary) >> 8
.1b60	85 0d		sta $0d				sta 	1+(matchPtr)
.1b62					_DecodeIdentify:
.1b62	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.1b64	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b66	c5 10		cmp $10				cmp 	temp1
.1b68	d0 07		bne $1b71			bne 	_DecodeIdNext
.1b6a	c8		iny				iny
.1b6b	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b6d	c5 11		cmp $11				cmp 	temp1+1
.1b6f	f0 1a		beq $1b8b			beq 	_DecodeIdFound
.1b71					_DecodeIdNext:
.1b71	18		clc				clc
.1b72	b2 0c		lda ($0c)			lda 	(matchPtr)
.1b74	f0 0a		beq $1b80			beq 	_DecodeIdIssue
.1b76	65 0c		adc $0c				adc 	matchPtr
.1b78	85 0c		sta $0c				sta 	matchPtr
.1b7a	90 e6		bcc $1b62			bcc 	_DecodeIdentify
.1b7c	e6 0d		inc $0d				inc 	matchPtr+1
.1b7e	80 e2		bra $1b62			bra 	_DecodeIdentify
.1b80					_DecodeIdIssue:
.1b80	20 20 10	jsr $1020			jsr 	ErrorHandler
>1b83	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.1b8b					_DecodeIdFound:
.1b8b	7a		ply				ply 								; restore position.
.1b8c	60		rts				rts
.1b8d					AdvanceToNext:
.1b8d	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1b8e	a0 01		ldy #$01			ldy 	#1
.1b90	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1b92	29 03		and #$03			and 	#3 							; bits 0-1.
.1b94	7a		ply				ply
.1b95	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1b97	d0 02		bne $1b9b			bne 	_ATN012
.1b99	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1b9b					_ATN012:
.1b9b	85 12		sta $12				sta 	temp2 						; now add that to Y
.1b9d	98		tya				tya
.1b9e	18		clc				clc
.1b9f	65 12		adc $12				adc 	temp2
.1ba1	a8		tay				tay
.1ba2	60		rts				rts
.1ba3					DecodeFoundWord:
.1ba3	5a		phy				phy 								; save current position
.1ba4	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1ba6	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1ba8	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1baa	29 10		and #$10			and 	#$10
.1bac	d0 0e		bne $1bbc			bne 	_DFWSpecialDecoder
.1bae	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1bb0	30 08		bmi $1bba			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1bb2	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1bb4	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1bb7	20 d5 1b	jsr $1bd5			jsr 	DecodeCurrentWord 			; expand that.
.1bba					_DFWExit:
.1bba	7a		ply				ply 								; restore current position
.1bbb	60		rts				rts
.1bbc					_DFWSpecialDecoder:
.1bbc	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1bbe	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1bc0	85 12		sta $12				sta 	temp2
.1bc2	c8		iny				iny
.1bc3	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1bc5	85 13		sta $13				sta 	temp2+1
.1bc7	7a		ply				ply 	 							; restore current position into Y
.1bc8	48		pha				pha 								; save registers
.1bc9	da		phx				phx
.1bca	5a		phy				phy
.1bcb	20 d2 1b	jsr $1bd2			jsr 	_DFWCallDecoder				; call the decoder routine
.1bce	7a		ply				ply 								; restore registers and exit
.1bcf	fa		plx				plx
.1bd0	68		pla				pla
.1bd1	60		rts				rts
.1bd2					_DFWCallDecoder:
.1bd2	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1bd5					DecodeCurrentWord:
.1bd5	5a		phy				phy
.1bd6	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1bd8	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1bda	a0 04		ldy #$04			ldy 	#4 							; original offset
.1bdc	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1bdd	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1bde	4a		lsr a				lsr 	a 							; bit set.
.1bdf	4a		lsr a				lsr 	a
.1be0	4a		lsr a				lsr 	a 							; decoder bit
.1be1	90 02		bcc $1be5			bcc 	_DWBNoDec
.1be3	c8		iny				iny
.1be4	c8		iny				iny
.1be5					_DWBNoDec:
.1be5	4a		lsr a				lsr 	a
.1be6	90 02		bcc $1bea			bcc 	_DWBNoEnc
.1be8	c8		iny				iny
.1be9	c8		iny				iny
.1bea					_DWBNoEnc:
.1bea					_DWBWordOut:
.1bea	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1bec	48		pha				pha
.1bed	29 7f		and #$7f			and 	#$7F
.1bef	20 f8 1b	jsr $1bf8			jsr		DecodeWriteBuffer
.1bf2	c8		iny				iny
.1bf3	68		pla				pla
.1bf4	10 f4		bpl $1bea			bpl 	_DWBWordOut
.1bf6	7a		ply				ply 								; restore Y and exit
.1bf7	60		rts				rts
.1bf8					DecodeWriteBuffer:
.1bf8	92 0a		sta ($0a)			sta 	(bufPtr)
.1bfa	e6 0a		inc $0a				inc 	bufPtr
.1bfc	d0 02		bne $1c00			bne 	_DWBNoCarry
.1bfe	e6 0b		inc $0b				inc 	bufPtr+1
.1c00					_DWBNoCarry:
.1c00	60		rts				rts
.1c01					DecodeOutputData:
.1c01	48		pha				pha
.1c02	da		phx				phx
.1c03	5a		phy				phy
.1c04	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1c06	aa		tax				tax
.1c07					_DODLoop:
.1c07	ca		dex				dex 								; done it all ?
.1c08	f0 0c		beq $1c16			beq		_DODExit
.1c0a	c8		iny				iny 								; output next character
.1c0b	b1 08		lda ($08),y			lda 	(srcPtr),y
.1c0d	29 7f		and #$7f			and 	#$7F
.1c0f	f0 f6		beq $1c07			beq 	_DODLoop 					; don't print NULL
.1c11	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1c14	80 f1		bra $1c07			bra 	_DODLoop
.1c16					_DODExit:
.1c16	7a		ply				ply
.1c17	fa		plx				plx
.1c18	68		pla				pla
.1c19	60		rts				rts
.1c1a					DecodeYAToBuffer:
.1c1a	da		phx				phx
.1c1b	5a		phy				phy
.1c1c	48		pha				pha
.1c1d	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1c1f	85 12		sta $12				sta 	temp2
.1c21	a5 0b		lda $0b				lda 	bufPtr+1
.1c23	85 13		sta $13				sta 	temp2+1
.1c25	68		pla				pla
.1c26	20 5a 1e	jsr $1e5a			jsr 	ConvertToStringMain 		; convert YA to string there
.1c29	aa		tax				tax 								; chars output to X
.1c2a	18		clc				clc
.1c2b	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1c2d	85 0a		sta $0a				sta 	bufPtr
.1c2f	90 02		bcc $1c33			bcc 	_DYABNoCarry
.1c31	e6 0b		inc $0b				inc 	bufPtr+1
.1c33					_DYABNoCarry:
.1c33	8a		txa				txa 								; count in A
.1c34	7a		ply				ply									; restore and exit.
.1c35	fa		plx				plx
.1c36	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1c37					ListCode:
.1c37	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1c39	64 1f		stz $1f				stz 	ListLowest+1
.1c3b	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1c3d	85 1d		sta $1d				sta 	ListCount
.1c3f	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c41	85 18		sta $18				sta 	0+(listPtr)
.1c43	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c45	85 19		sta $19				sta 	1+(listPtr)
.1c47	86 10		stx $10				stx 	temp1						; S->A
.1c49	ba		tsx				tsx
.1c4a	8a		txa				txa
.1c4b	a6 10		ldx $10				ldx 	temp1
.1c4d	c9 80		cmp #$80			cmp 	#NumberStackBase
.1c4f	f0 0e		beq $1c5f			beq 	_LCLoop
.1c51	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1c53	85 1e		sta $1e				sta 	ListLowest
.1c55	a5 07		lda $07				lda 	TOS+1
.1c57	85 1f		sta $1f				sta 	ListLowest+1
.1c59	68		pla				pla
.1c5a	85 07		sta $07				sta 	TOS+1
.1c5c	68		pla				pla
.1c5d	85 06		sta $06				sta 	TOS
.1c5f					_LCLoop:
.1c5f	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1c61	f0 4e		beq $1cb1			beq 	_LCExit
.1c63	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1c65	b1 18		lda ($18),y			lda 	(listPtr),y
.1c67	c5 1e		cmp $1e				cmp 	ListLowest
.1c69	c8		iny				iny
.1c6a	b1 18		lda ($18),y			lda 	(listPtr),y
.1c6c	e5 1f		sbc $1f				sbc 	ListLowest+1
.1c6e	90 34		bcc $1ca4			bcc 	_LCNext
.1c70	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1c72	85 0a		sta $0a				sta 	0+(bufPtr)
.1c74	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1c76	85 0b		sta $0b				sta 	1+(bufPtr)
.1c78	a5 18		lda $18				lda 	listPtr 					; output the line.
.1c7a	a4 19		ldy $19				ldy 	listPtr+1
.1c7c	38		sec				sec
.1c7d	20 0a 1b	jsr $1b0a			jsr 	DecodeLineIntoBufPtr
.1c80	a9 02		lda #$02			lda 	#CTH_LineNo
.1c82	20 15 11	jsr $1115			jsr 	ExternColour
.1c85	a0 ff		ldy #$ff			ldy 	#255
.1c87					_LCLoop2:
.1c87	c8		iny				iny
.1c88	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c8b	f0 0e		beq $1c9b			beq 	_LCEnd
.1c8d	c9 20		cmp #$20			cmp 	#32
.1c8f	b0 05		bcs $1c96			bcs 	_LCPrint
.1c91	20 15 11	jsr $1115			jsr 	ExternColour
.1c94	a9 20		lda #$20			lda 	#32
.1c96					_LCPrint:
.1c96	20 0b 11	jsr $110b			jsr 	ExternPrint
.1c99	80 ec		bra $1c87			bra 	_LCLoop2
.1c9b	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1c9d	20 0b 11	jsr $110b			jsr 	ExternPrint
.1ca0	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1ca2	f0 0d		beq $1cb1			beq 	_LCExit
.1ca4					_LCNext:
.1ca4	18		clc				clc
.1ca5	a5 18		lda $18				lda 	listPtr
.1ca7	72 18		adc ($18)			adc 	(listPtr)
.1ca9	85 18		sta $18				sta 	listPtr
.1cab	90 02		bcc $1caf			bcc 	_NoCarryAdv
.1cad	e6 19		inc $19				inc 	listPtr+1
.1caf					_NoCarryAdv:
.1caf	80 ae		bra $1c5f			bra 	_LCLoop 					; go round again.
.1cb1					_LCExit:
.1cb1	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1cb4					RunProgram:
.1cb4	a2 80		ldx #$80			ldx 	#NumberStackBase
.1cb6	9a		txs				txs
.1cb7	20 c8 1a	jsr $1ac8			jsr 	ClearVariableSpace 			; clear variables etc.
.1cba	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1cbc	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1cbe	20 75 10	jsr $1075			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1cc1	4c 00 00	jmp $0000			jmp 	NextCode
.1cc4					Call6502:
.1cc4	a5 06		lda $06				lda 	TOS 						; copy call address
.1cc6	85 10		sta $10				sta 	temp1
.1cc8	a5 07		lda $07				lda 	TOS+1
.1cca	85 11		sta $11				sta 	temp1+1
.1ccc	68		pla				pla
.1ccd	85 07		sta $07				sta 	TOS+1
.1ccf	68		pla				pla
.1cd0	85 06		sta $06				sta 	TOS
.1cd2	20 d8 1c	jsr $1cd8			jsr 	_CallTemp1 					; call it
.1cd5	4c 00 00	jmp $0000			jmp 	NextCode
.1cd8					_CallTemp1:
.1cd8	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1cdb					AssertCode:
.1cdb	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1cdd	05 07		ora $07				ora 	TOS+1
.1cdf	f0 09		beq $1cea			beq 	_ASFail 					; if zero fail
.1ce1	68		pla				pla
.1ce2	85 07		sta $07				sta 	TOS+1
.1ce4	68		pla				pla
.1ce5	85 06		sta $06				sta 	TOS
.1ce7	4c 00 00	jmp $0000			jmp 	NextCode
.1cea					_ASFail:
.1cea	20 20 10	jsr $1020			jsr 	ErrorHandler
>1ced	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1cf4					StopCode:
.1cf4	20 20 10	jsr $1020			jsr 	ErrorHandler
>1cf7	53 54 4f 50 00					.text 	"STOP",0
.1cfc					EndProgram:
.1cfc	4c 10 10	jmp $1010			jmp 	WarmStart
.1cff					VlistCode:
.1cff	a9 18		lda #$18			lda 	#(Dictionary) & $FF
.1d01	85 10		sta $10				sta 	0+(temp1)
.1d03	a9 20		lda #$20			lda 	#(Dictionary) >> 8
.1d05	85 11		sta $11				sta 	1+(temp1)
.1d07	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1d09	b1 10		lda ($10),y			lda 	(temp1),y
.1d0b	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1d0d	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1d0e	4a		lsr a				lsr 	a
.1d0f	4a		lsr a				lsr		a
.1d10	4a		lsr a				lsr 	a
.1d11	4a		lsr a				lsr 	a 							; add those bits in
.1d12	90 02		bcc $1d16			bcc 	_VLNoDec
.1d14	c8		iny				iny
.1d15	c8		iny				iny
.1d16					_VLNoDec:
.1d16	4a		lsr a				lsr 	a
.1d17	90 02		bcc $1d1b			bcc 	_VLNoEnc
.1d19	c8		iny				iny
.1d1a	c8		iny				iny
.1d1b					_VLNoEnc:
.1d1b	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1d1d	c9 24		cmp #$24			cmp 	#"$"
.1d1f	d0 06		bne $1d27			bne 	_VLPrint
.1d21	c8		iny				iny
.1d22	51 10		eor ($10),y			eor 	(temp1),y
.1d24	f0 13		beq $1d39			beq 	_VLNext
.1d26	88		dey				dey
.1d27					_VLPrint:
.1d27	b1 10		lda ($10),y			lda 	(temp1),y
.1d29	48		pha				pha
.1d2a	c8		iny				iny
.1d2b	29 7f		and #$7f			and 	#$7F
.1d2d	20 0b 11	jsr $110b			jsr 	ExternPrint
.1d30	68		pla				pla
.1d31	0a		asl a				asl 	a
.1d32	90 f3		bcc $1d27			bcc 	_VLPrint
.1d34	a9 20		lda #$20			lda 	#32
.1d36	20 0b 11	jsr $110b			jsr 	ExternPrint
.1d39					_VLNext:
.1d39	18		clc				clc 								; go to next
.1d3a	b2 10		lda ($10)			lda 	(temp1)
.1d3c	65 10		adc $10				adc 	temp1
.1d3e	85 10		sta $10				sta 	temp1
.1d40	90 02		bcc $1d44			bcc 	_VLNoCarry
.1d42	e6 11		inc $11				inc 	temp1+1
.1d44					_VLNoCarry:
.1d44	b2 10		lda ($10)			lda 	(temp1)
.1d46	d0 bf		bne $1d07			bne 	_VLLoop
.1d48	a9 0d		lda #$0d			lda 	#13
.1d4a	20 0b 11	jsr $110b			jsr 	ExternPrint
.1d4d	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1d50					ConvertToInteger:
.1d50	84 17		sty $17				sty 	temp4+1
.1d52	85 16		sta $16				sta 	temp4
.1d54	64 14		stz $14				stz 	temp3 						; reset value
.1d56	64 15		stz $15				stz 	temp3+1
.1d58	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1d5a	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1d5c	b1 16		lda ($16),y			lda 	(temp4),y
.1d5e	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1d60	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1d62	d0 01		bne $1d65			bne 	_CTINotMinus
.1d64	c8		iny				iny									; skip -
.1d65					_CTINotMinus:
.1d65	b1 16		lda ($16),y			lda 	(temp4),y
.1d67	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1d69	d0 03		bne $1d6e			bne 	_CTILoop
.1d6b	c6 10		dec $10				dec 	temp1
.1d6d	c8		iny				iny
.1d6e					_CTILoop:
.1d6e	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1d70	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1d72	38		sec				sec
.1d73	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1d75	90 65		bcc $1ddc			bcc 	_CTIFail 					; out of range.
.1d77	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1d79	90 0b		bcc $1d86			bcc 	_CTILegal
.1d7b	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d7d	90 5d		bcc $1ddc			bcc 	_CTIFail
.1d7f	38		sec				sec
.1d80	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d82	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d84	b0 56		bcs $1ddc			bcs 	_CTIFail
.1d86					_CTILegal:
.1d86	48		pha				pha 								; save digit value.
.1d87	06 14		asl $14				asl 	temp3
.1d89	26 15		rol $15				rol 	temp3+1
.1d8b	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1d8d	85 12		sta $12				sta 	temp2
.1d8f	a5 15		lda $15				lda 	temp3+1
.1d91	85 13		sta $13				sta 	temp2+1
.1d93	06 14		asl $14				asl 	temp3
.1d95	26 15		rol $15				rol 	temp3+1
.1d97	06 14		asl $14				asl 	temp3
.1d99	26 15		rol $15				rol 	temp3+1
.1d9b	24 10		bit $10				bit 	temp1 						; hexadecimal
.1d9d	10 07		bpl $1da6			bpl 	_CTIDecimal
.1d9f	06 14		asl $14				asl 	temp3
.1da1	26 15		rol $15				rol 	temp3+1
.1da3	68		pla				pla 								; get digit back
.1da4	80 12		bra $1db8			bra 	_CTIAddLoop
.1da6					_CTIDecimal:
.1da6	18		clc				clc 								; x 8 + x 2 = x 10
.1da7	a5 14		lda $14				lda 	temp3
.1da9	65 12		adc $12				adc 	temp2
.1dab	85 14		sta $14				sta 	temp3
.1dad	a5 15		lda $15				lda 	temp3+1
.1daf	65 13		adc $13				adc 	temp2+1
.1db1	85 15		sta $15				sta 	temp3+1
.1db3	68		pla				pla 								; check digit 0-9
.1db4	c9 0a		cmp #$0a			cmp 	#10
.1db6	b0 24		bcs $1ddc			bcs 	_CTIFail
.1db8					_CTIAddLoop:
.1db8	18		clc				clc
.1db9	65 14		adc $14				adc 	temp3
.1dbb	85 14		sta $14				sta 	temp3
.1dbd	90 02		bcc $1dc1			bcc 	_CTINoCarry
.1dbf	e6 15		inc $15				inc 	temp3+1
.1dc1					_CTINoCarry:
.1dc1	c8		iny				iny
.1dc2	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1dc4	c9 21		cmp #$21			cmp 	#32+1
.1dc6	b0 a6		bcs $1d6e			bcs 	_CTILoop 					; no, go back.
.1dc8	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1dca	d0 0d		bne $1dd9			bne 	_CTIOkay
.1dcc	38		sec				sec
.1dcd	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1dcf	e5 14		sbc $14				sbc 	temp3
.1dd1	85 14		sta $14				sta 	temp3
.1dd3	a9 00		lda #$00			lda 	#0
.1dd5	e5 15		sbc $15				sbc 	temp3+1
.1dd7	85 15		sta $15				sta 	temp3+1
.1dd9					_CTIOkay:
.1dd9	98		tya				tya
.1dda	38		sec				sec
.1ddb	60		rts				rts
.1ddc					_CTIFail:
.1ddc	18		clc				clc
.1ddd	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1dde					NextLine:
.1dde	18		clc				clc
.1ddf	a5 03		lda $03				lda 	IP
.1de1	72 03		adc ($03)			adc 	(IP)
.1de3	85 03		sta $03				sta 	IP
.1de5	90 02		bcc $1de9			bcc 	_NoCarryAdv
.1de7	e6 04		inc $04				inc 	IP+1
.1de9					_NoCarryAdv:
.1de9	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1deb	f0 05		beq $1df2			beq 	_NLGoEnd
.1ded	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1def	4c 00 00	jmp $0000			jmp 	NextCode
.1df2					_NLGoEnd:
.1df2	4c 10 10	jmp $1010			jmp 	WarmStart
.1df5					SkipComment:
.1df5	e8		inx				inx									; (IP),X points to the length.
.1df6	e8		inx				inx
.1df7	8a		txa				txa
.1df8	a8		tay				tay 								; put into Y
.1df9	18		clc				clc
.1dfa	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1dfc	aa		tax				tax 								; put back in X
.1dfd	ca		dex				dex
.1dfe	ca		dex				dex
.1dff	4c 00 00	jmp $0000			jmp 	NextCode
.1e02					CommentDecoder:
.1e02	a9 06		lda #$06			lda 	#CTH_Keyword
.1e04	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e07	a9 27		lda #$27			lda 	#"'"
.1e09	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e0c	a9 0b		lda #$0b			lda 	#CTH_Comment
.1e0e	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e11	20 01 1c	jsr $1c01			jsr 	DecodeOutputData
.1e14	a9 20		lda #$20			lda 	#32
.1e16	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e19	60		rts				rts
.1e1a					DefineCode:
.1e1a	20 20 10	jsr $1020			jsr 	ErrorHandler
>1e1d	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1e25	4f 4e 3f 00
.1e29					DefineDecoder:
.1e29	a9 07		lda #$07			lda 	#CTH_Definition
.1e2b	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e2e	a9 3a		lda #$3a			lda 	#":"
.1e30	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e33	20 01 1c	jsr $1c01			jsr 	DecodeOutputData
.1e36	a9 20		lda #$20			lda 	#32
.1e38	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1e3b	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1e3c					IntToString:
.1e3c	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e3e	85 12		sta $12				sta 	0+(temp2)
.1e40	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e42	85 13		sta $13				sta 	1+(temp2)
.1e44	a5 06		lda $06				lda 	TOS 						; value in YA
.1e46	a4 07		ldy $07				ldy 	TOS+1
.1e48	20 56 1e	jsr $1e56			jsr 	ConvertToString
.1e4b	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e4d	85 06		sta $06				sta 	0+(TOS)
.1e4f	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e51	85 07		sta $07				sta 	1+(TOS)
.1e53	4c 00 00	jmp $0000			jmp 	NextCode
.1e56					ConvertToString:
.1e56	38		sec				sec
.1e57	80 01		bra $1e5a			bra 	ConvertToStringMain
.1e59					ConvertToStringUnsigned:
.1e59	18		clc				clc
.1e5a					ConvertToStringMain:
.1e5a	da		phx				phx									; save XY
.1e5b	5a		phy				phy
.1e5c	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1e5e	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1e60	84 11		sty $11				sty 	temp1+1
.1e62	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1e64	90 16		bcc $1e7c			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1e66	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1e68	10 12		bpl $1e7c			bpl 	_CTSUnsigned
.1e6a	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1e6c	91 12		sta ($12),y			sta 	(temp2),y
.1e6e	c8		iny				iny
.1e6f	38		sec				sec 								; negate temp1
.1e70	a9 00		lda #$00			lda 	#0
.1e72	e5 10		sbc $10				sbc 	temp1
.1e74	85 10		sta $10				sta 	temp1
.1e76	a9 00		lda #$00			lda 	#0
.1e78	e5 11		sbc $11				sbc 	temp1+1
.1e7a	85 11		sta $11				sta 	temp1+1
.1e7c					_CTSUnsigned:
.1e7c	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1e7e					_CTSLoop:
.1e7e	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e80	91 12		sta ($12),y			sta 	(temp2),y
.1e82					_CTSSubLoop:
.1e82	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1e84	1a		inc a				inc 	a
.1e85	91 12		sta ($12),y			sta 	(temp2),y
.1e87	38		sec				sec 								; do subtraction saving interim result
.1e88	a5 10		lda $10				lda 	temp1
.1e8a	fd bd 1e	sbc $1ebd,x			sbc 	_CTSTable,x
.1e8d	48		pha				pha
.1e8e	a5 11		lda $11				lda 	temp1+1
.1e90	fd be 1e	sbc $1ebe,x			sbc 	_CTSTable+1,x
.1e93	90 07		bcc $1e9c			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e95	85 11		sta $11				sta 	temp1+1 					; save result back
.1e97	68		pla				pla
.1e98	85 10		sta $10				sta 	temp1
.1e9a	80 e6		bra $1e82			bra 	_CTSSubLoop
.1e9c					_CTSCantSubtract:
.1e9c	68		pla				pla 								; throw away interim
.1e9d	e8		inx				inx 								; next subtractor
.1e9e	e8		inx				inx
.1e9f	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1ea1	49 30		eor #$30			eor 	#"0"
.1ea3	05 1a		ora $1a				ora 	SignCount
.1ea5	85 1a		sta $1a				sta 	SignCount
.1ea7	f0 01		beq $1eaa			beq		_CTSLZ 						; if all zeros so far suppress.
.1ea9	c8		iny				iny 								; next character
.1eaa					_CTSLZ:
.1eaa	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1eac	d0 d0		bne $1e7e			bne 	_CTSLoop
.1eae					_CTSComplete:
.1eae	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1eb0	09 30		ora #$30			ora 	#48 						; ASCII
.1eb2	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1eb4	c8		iny				iny
.1eb5	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1eb7	91 12		sta ($12),y			sta 	(temp2),y
.1eb9	98		tya				tya 								; size in A
.1eba	7a		ply				ply									; pull and exit.
.1ebb	fa		plx				plx
.1ebc	60		rts				rts
.1ebd					_CTSTable:
>1ebd	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1ec5					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1ec5					VarAddressHandler:
.1ec5	18		clc				clc 								; find variable, error if it doesn't exist.
.1ec6	20 17 1f	jsr $1f17			jsr 	VariableFind
.1ec9	a5 06		lda $06				lda 	TOS
.1ecb	48		pha				pha
.1ecc	a5 07		lda $07				lda 	TOS+1
.1ece	48		pha				pha
.1ecf	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1ed1	85 06		sta $06				sta 	TOS
.1ed3	a5 11		lda $11				lda		temp1+1
.1ed5	85 07		sta $07				sta 	TOS+1
.1ed7	4c 00 00	jmp $0000			jmp 	NextCode
.1eda					VarAddrHandlerDecode:
.1eda	a9 26		lda #$26			lda 	#"&"
.1edc	4c c5 1f	jmp $1fc5			jmp 	VarHandlerDecode
.1edf					VarReadHandler:
.1edf	18		clc				clc 								; find variable, error if it doesn't exist.
.1ee0	20 17 1f	jsr $1f17			jsr 	VariableFind
.1ee3	a5 06		lda $06				lda 	TOS
.1ee5	48		pha				pha
.1ee6	a5 07		lda $07				lda 	TOS+1
.1ee8	48		pha				pha
.1ee9	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1eeb	85 06		sta $06				sta 	TOS
.1eed	a0 01		ldy #$01			ldy 	#1
.1eef	b1 10		lda ($10),y			lda 	(temp1),y
.1ef1	85 07		sta $07				sta 	TOS+1
.1ef3	4c 00 00	jmp $0000			jmp 	NextCode
.1ef6					VarReadHandlerDecode:
.1ef6	a9 40		lda #$40			lda 	#"@"
.1ef8	4c c5 1f	jmp $1fc5			jmp 	VarHandlerDecode
.1efb					VarWriteHandler:
.1efb	38		sec				sec 								; find variable, create it if it doesn't exist.
.1efc	20 17 1f	jsr $1f17			jsr 	VariableFind
.1eff	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1f01	92 10		sta ($10)			sta 	(temp1)
.1f03	a5 07		lda $07				lda 	TOS+1
.1f05	a0 01		ldy #$01			ldy 	#1
.1f07	91 10		sta ($10),y			sta 	(temp1),y
.1f09	68		pla				pla
.1f0a	85 07		sta $07				sta 	TOS+1
.1f0c	68		pla				pla
.1f0d	85 06		sta $06				sta 	TOS
.1f0f	4c 00 00	jmp $0000			jmp 	NextCode
.1f12					VarWriteHandlerDecode:
.1f12	a9 21		lda #$21			lda 	#"!"
.1f14	4c c5 1f	jmp $1fc5			jmp 	VarHandlerDecode
.1f17					VariableFind:
.1f17	08		php				php 								; save autocreate flag.
.1f18	e8		inx				inx 								; advance to/over the variable name.
.1f19	e8		inx				inx
.1f1a	8a		txa				txa 								; put in Y
.1f1b	a8		tay				tay
.1f1c	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1f1e	85 12		sta $12				sta 	temp2
.1f20	c8		iny				iny
.1f21	b1 03		lda ($03),y			lda 	(IP),y
.1f23	85 13		sta $13				sta 	temp2+1
.1f25	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1f27	b0 0f		bcs $1f38			bcs 	_VFLong
.1f29	a5 13		lda $13				lda 	temp2+1
.1f2b	d0 0b		bne $1f38			bne 	_VFLong
.1f2d	a5 12		lda $12				lda 	temp2						; this is the index
.1f2f	0a		asl a				asl 	a 							; double it
.1f30	85 10		sta $10				sta 	temp1
.1f32	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1f34	85 11		sta $11				sta 	temp1+1
.1f36	28		plp				plp 								; throw creation flag, it always exists.
.1f37	60		rts				rts
.1f38					_VFLong:
.1f38	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1f3a	6a		ror a				ror 	a
.1f3b	6a		ror a				ror 	a
.1f3c	6a		ror a				ror 	a
.1f3d	6a		ror a				ror 	a
.1f3e	45 12		eor $12				eor 	temp2
.1f40	45 13		eor $13				eor 	temp2+1
.1f42	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1f44	0a		asl a				asl 	a
.1f45	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1f47	85 10		sta $10				sta 	temp1
.1f49	85 14		sta $14				sta 	temp3
.1f4b	a9 06		lda #$06			lda 	#hashTable >> 8
.1f4d	85 11		sta $11				sta 	temp1+1
.1f4f	85 15		sta $15				sta 	temp3+1
.1f51					_VFSearch:
.1f51	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1f53	b1 10		lda ($10),y			lda 	(temp1),y
.1f55	f0 23		beq $1f7a			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1f57	a8		tay				tay 								; follow the link through.
.1f58	b2 10		lda ($10)			lda 	(temp1)
.1f5a	85 10		sta $10				sta 	temp1
.1f5c	84 11		sty $11				sty 	temp1+1
.1f5e	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1f60	b1 10		lda ($10),y			lda 	(temp1),y
.1f62	c5 12		cmp $12				cmp 	temp2
.1f64	d0 eb		bne $1f51			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f66	c8		iny				iny 								; same for 2nd byte of name
.1f67	b1 10		lda ($10),y			lda 	(temp1),y
.1f69	c5 13		cmp $13				cmp 	temp2+1
.1f6b	d0 e4		bne $1f51			bne 	_VFSearch
.1f6d	18		clc				clc
.1f6e	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1f70	69 02		adc #$02			adc 	#2
.1f72	85 10		sta $10				sta 	temp1
.1f74	90 02		bcc $1f78			bcc 	_VFNoPage1
.1f76	e6 11		inc $11				inc 	temp1+1
.1f78					_VFNoPage1:
.1f78	28		plp				plp 								; don't need to worry about creation flag
.1f79	60		rts				rts
.1f7a					_VFNotFound:
.1f7a	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1f7b	b0 0d		bcs $1f8a			bcs 	_VFCreate
.1f7d	20 20 10	jsr $1020			jsr 	ErrorHandler
>1f80	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1f88	3f 00
.1f8a					_VFCreate:
.1f8a	a0 01		ldy #$01			ldy 	#1
.1f8c	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1f8e	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1f90	b1 14		lda ($14),y			lda 	(temp3),y
.1f92	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f94	c8		iny				iny
.1f95	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1f97	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f99	c8		iny				iny
.1f9a	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f9c	c8		iny				iny
.1f9d	a5 12		lda $12				lda 	temp2 						; copy the name out
.1f9f	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1fa1	c8		iny				iny
.1fa2	a5 13		lda $13				lda 	temp2+1
.1fa4	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1fa6	a0 01		ldy #$01			ldy 	#1
.1fa8	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1faa	92 14		sta ($14)			sta 	(temp3)
.1fac	a5 0f		lda $0f				lda 	nextFreeMem+1
.1fae	91 14		sta ($14),y			sta 	(temp3),y
.1fb0	18		clc				clc
.1fb1	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1fb3	69 02		adc #$02			adc 	#2
.1fb5	85 10		sta $10				sta 	temp1
.1fb7	a5 0f		lda $0f				lda 	nextFreeMem+1
.1fb9	69 00		adc #$00			adc 	#0
.1fbb	85 11		sta $11				sta 	temp1+1
.1fbd	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1fbf	a0 00		ldy #$00			ldy 	#0
.1fc1	20 f5 1a	jsr $1af5			jsr 	AdvanceFreeMem
.1fc4	60		rts				rts
.1fc5					VarHandlerDecode:
.1fc5	48		pha				pha 								; save, leading space
.1fc6	a9 20		lda #$20			lda 	#" "
.1fc8	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1fcb	68		pla				pla 								; restore and write type
.1fcc	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.1fcf	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1fd1	85 10		sta $10				sta 	temp1
.1fd3	c8		iny				iny
.1fd4	b1 08		lda ($08),y			lda 	(srcPtr),y
.1fd6	85 11		sta $11				sta 	temp1+1
.1fd8	a5 10		lda $10				lda 	temp1 						; output the first character
.1fda	29 1f		and #$1f			and 	#31
.1fdc	20 07 20	jsr $2007			jsr 	VHOutVarChar
.1fdf	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1fe1					_VHDShift:
.1fe1	46 11		lsr $11				lsr 	temp1+1
.1fe3	66 10		ror $10				ror 	temp1
.1fe5	ca		dex				dex
.1fe6	d0 f9		bne $1fe1			bne 	_VHDShift
.1fe8	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1fea					_VHDDiv40:
.1fea	e8		inx				inx
.1feb	38		sec				sec
.1fec	a5 10		lda $10				lda 	temp1
.1fee	e9 28		sbc #$28			sbc 	#40
.1ff0	a8		tay				tay
.1ff1	a5 11		lda $11				lda 	temp1+1
.1ff3	e9 00		sbc #$00			sbc 	#0
.1ff5	90 06		bcc $1ffd			bcc 	_VHDivDone
.1ff7	85 11		sta $11				sta 	temp1+1
.1ff9	84 10		sty $10				sty 	temp1
.1ffb	80 ed		bra $1fea			bra 	_VHDDiv40
.1ffd					_VHDivDone:
.1ffd	a5 10		lda $10				lda 	temp1 						; remainder
.1fff	20 07 20	jsr $2007			jsr 	VHOutVarChar
.2002	8a		txa				txa
.2003	20 07 20	jsr $2007			jsr 	VHOutVarChar 				; and result.
.2006	60		rts				rts
.2007					VHOutVarChar:
.2007	c9 00		cmp #$00			cmp 	#0
.2009	f0 0c		beq $2017			beq 	_VHOExit
.200b	18		clc				clc
.200c	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.200e	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.2010	90 02		bcc $2014			bcc 	_VHOOut
.2012	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.2014					_VHOOut:
.2014	20 f8 1b	jsr $1bf8			jsr 	DecodeWriteBuffer
.2017					_VHOExit:
.2017	60		rts				rts

;******  Return to file: kernel.asm

.2018					Dictionary:

;******  Processing file: generated/dictionary.inc

>2018	05					.byte	_end1-*
>2019	00					.byte	$00
>201a	fc 15					.word	WordWrite
>201c	a1					.byte	$a1
.201d					_end1:
>201d	10					.byte	_end2-*
>201e	52					.byte	$52
>201f	fb 1e					.word	VarWriteHandler
>2021	12 1f					.word	VarWriteHandlerDecode
>2023	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>202b	45 d2
.202d					_end2:
>202d	10					.byte	_end3-*
>202e	52					.byte	$52
>202f	c5 1e					.word	VarAddressHandler
>2031	da 1e					.word	VarAddrHandlerDecode
>2033	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>203b	45 d2
.203d					_end3:
>203d	10					.byte	_end4-*
>203e	52					.byte	$52
>203f	df 1e					.word	VarReadHandler
>2041	f6 1e					.word	VarReadHandlerDecode
>2043	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>204b	45 d2
.204d					_end4:
>204d	0c					.byte	_end5-*
>204e	52					.byte	$52
>204f	7c 19					.word	CallHandler
>2051	38 1a					.word	CallHandlerDecode
>2053	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.2059					_end5:
>2059	0f					.byte	_end6-*
>205a	53					.byte	$53
>205b	f5 1d					.word	SkipComment
>205d	02 1e					.word	CommentDecoder
>205f	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>2067	d4
.2068					_end6:
>2068	0e					.byte	_end7-*
>2069	53					.byte	$53
>206a	1a 1e					.word	DefineCode
>206c	29 1e					.word	DefineDecoder
>206e	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.2076					_end7:
>2076	0f					.byte	_end8-*
>2077	52					.byte	$52
>2078	86 10					.word	Literal2Byte
>207a	9c 10					.word	Literal2ByteDecode
>207c	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>2084	cc
.2085					_end8:
>2085	0e					.byte	_end9-*
>2086	80					.byte	$80
>2087	de 1d					.word	NextLine
>2089	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2091	4e c5
.2093					_end9:
>2093	0e					.byte	_end10-*
>2094	53					.byte	$53
>2095	ae 10					.word	LiteralString
>2097	cd 10					.word	LiteralStringDecoder
>2099	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.20a1					_end10:
>20a1	05					.byte	_end11-*
>20a2	00					.byte	$00
>20a3	78 13					.word	Multiply16x16
>20a5	aa					.byte	$aa
.20a6					_end11:
>20a6	05					.byte	_end12-*
>20a7	00					.byte	$00
>20a8	e5 11					.word	Add
>20aa	ab					.byte	$ab
.20ab					_end12:
>20ab	06					.byte	_end13-*
>20ac	00					.byte	$00
>20ad	0d 16					.word	WordAdd
>20af	2b a1					.byte	$2b,$a1
.20b1					_end13:
>20b1	05					.byte	_end14-*
>20b2	00					.byte	$00
>20b3	f4 11					.word	Subtract
>20b5	ad					.byte	$ad
.20b6					_end14:
>20b6	06					.byte	_end15-*
>20b7	00					.byte	$00
>20b8	b4 14					.word	ConstantMinus1
>20ba	2d b1					.byte	$2d,$b1
.20bc					_end15:
>20bc	05					.byte	_end16-*
>20bd	00					.byte	$00
>20be	c9 12					.word	Divide16x16
>20c0	af					.byte	$af
.20c1					_end16:
>20c1	05					.byte	_end17-*
>20c2	00					.byte	$00
>20c3	a7 14					.word	Constant0
>20c5	b0					.byte	$b0
.20c6					_end17:
>20c6	06					.byte	_end18-*
>20c7	00					.byte	$00
>20c8	0d 14					.word	CheckMinus
>20ca	30 bc					.byte	$30,$bc
.20cc					_end18:
>20cc	06					.byte	_end19-*
>20cd	00					.byte	$00
>20ce	21 14					.word	CheckZero
>20d0	30 bd					.byte	$30,$bd
.20d2					_end19:
>20d2	05					.byte	_end20-*
>20d3	00					.byte	$00
>20d4	c3 14					.word	C1
>20d6	b1					.byte	$b1
.20d7					_end20:
>20d7	06					.byte	_end21-*
>20d8	00					.byte	$00
>20d9	b7 13					.word	Unary1Plus
>20db	31 ab					.byte	$31,$ab
.20dd					_end21:
>20dd	06					.byte	_end22-*
>20de	00					.byte	$00
>20df	ce 13					.word	Unary1Minus
>20e1	31 ad					.byte	$31,$ad
.20e3					_end22:
>20e3	06					.byte	_end23-*
>20e4	00					.byte	$00
>20e5	db 14					.word	C10
>20e7	31 b0					.byte	$31,$b0
.20e9					_end23:
>20e9	07					.byte	_end24-*
>20ea	00					.byte	$00
>20eb	04 15					.word	C100
>20ed	31 30 b0				.byte	$31,$30,$b0
.20f0					_end24:
>20f0	08					.byte	_end25-*
>20f1	00					.byte	$00
>20f2	33 15					.word	C1024
>20f4	31 30 32 b4				.byte	$31,$30,$32,$b4
.20f8					_end25:
>20f8	07					.byte	_end26-*
>20f9	00					.byte	$00
>20fa	08 15					.word	C127
>20fc	31 32 b7				.byte	$31,$32,$b7
.20ff					_end26:
>20ff	07					.byte	_end27-*
>2100	00					.byte	$00
>2101	0c 15					.word	C128
>2103	31 32 b8				.byte	$31,$32,$b8
.2106					_end27:
>2106	06					.byte	_end28-*
>2107	00					.byte	$00
>2108	df 14					.word	C15
>210a	31 b5					.byte	$31,$b5
.210c					_end28:
>210c	06					.byte	_end29-*
>210d	00					.byte	$00
>210e	e3 14					.word	C16
>2110	31 b6					.byte	$31,$b6
.2112					_end29:
>2112	07					.byte	_end30-*
>2113	00					.byte	$00
>2114	45 14					.word	Times16
>2116	31 36 aa				.byte	$31,$36,$aa
.2119					_end30:
>2119	07					.byte	_end31-*
>211a	00					.byte	$00
>211b	58 14					.word	Divide16
>211d	31 36 af				.byte	$31,$36,$af
.2120					_end31:
>2120	05					.byte	_end32-*
>2121	00					.byte	$00
>2122	c7 14					.word	C2
>2124	b2					.byte	$b2
.2125					_end32:
>2125	06					.byte	_end33-*
>2126	00					.byte	$00
>2127	51 14					.word	Times2
>2129	32 aa					.byte	$32,$aa
.212b					_end33:
>212b	06					.byte	_end34-*
>212c	00					.byte	$00
>212d	c0 13					.word	Unary2Plus
>212f	32 ab					.byte	$32,$ab
.2131					_end34:
>2131	06					.byte	_end35-*
>2132	00					.byte	$00
>2133	d9 13					.word	Unary2Minus
>2135	32 ad					.byte	$32,$ad
.2137					_end35:
>2137	06					.byte	_end36-*
>2138	00					.byte	$00
>2139	64 14					.word	Divide2
>213b	32 af					.byte	$32,$af
.213d					_end36:
>213d	06					.byte	_end37-*
>213e	00					.byte	$00
>213f	e7 14					.word	C24
>2141	32 b4					.byte	$32,$b4
.2143					_end37:
>2143	07					.byte	_end38-*
>2144	00					.byte	$00
>2145	10 15					.word	C255
>2147	32 35 b5				.byte	$32,$35,$b5
.214a					_end38:
>214a	07					.byte	_end39-*
>214b	00					.byte	$00
>214c	1b 15					.word	C256
>214e	32 35 b6				.byte	$32,$35,$b6
.2151					_end39:
>2151	08					.byte	_end40-*
>2152	00					.byte	$00
>2153	6b 14					.word	Times256
>2155	32 35 36 aa				.byte	$32,$35,$36,$aa
.2159					_end40:
>2159	08					.byte	_end41-*
>215a	00					.byte	$00
>215b	74 14					.word	Divide256
>215d	32 35 36 af				.byte	$32,$35,$36,$af
.2161					_end41:
>2161	05					.byte	_end42-*
>2162	00					.byte	$00
>2163	cb 14					.word	C3
>2165	b3					.byte	$b3
.2166					_end42:
>2166	06					.byte	_end43-*
>2167	00					.byte	$00
>2168	f8 14					.word	C32
>216a	33 b2					.byte	$33,$b2
.216c					_end43:
>216c	09					.byte	_end44-*
>216d	00					.byte	$00
>216e	4b 15					.word	C32767
>2170	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.2175					_end44:
>2175	09					.byte	_end45-*
>2176	00					.byte	$00
>2177	57 15					.word	C32768
>2179	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.217e					_end45:
>217e	05					.byte	_end46-*
>217f	00					.byte	$00
>2180	cf 14					.word	C4
>2182	b4					.byte	$b4
.2183					_end46:
>2183	06					.byte	_end47-*
>2184	00					.byte	$00
>2185	4d 14					.word	Times4
>2187	34 aa					.byte	$34,$aa
.2189					_end47:
>2189	06					.byte	_end48-*
>218a	00					.byte	$00
>218b	60 14					.word	Divide4
>218d	34 af					.byte	$34,$af
.218f					_end48:
>218f	08					.byte	_end49-*
>2190	00					.byte	$00
>2191	3f 15					.word	C4096
>2193	34 30 39 b6				.byte	$34,$30,$39,$b6
.2197					_end49:
>2197	05					.byte	_end50-*
>2198	00					.byte	$00
>2199	d3 14					.word	C5
>219b	b5					.byte	$b5
.219c					_end50:
>219c	07					.byte	_end51-*
>219d	00					.byte	$00
>219e	27 15					.word	C512
>21a0	35 31 b2				.byte	$35,$31,$b2
.21a3					_end51:
>21a3	06					.byte	_end52-*
>21a4	00					.byte	$00
>21a5	fc 14					.word	C63
>21a7	36 b3					.byte	$36,$b3
.21a9					_end52:
>21a9	06					.byte	_end53-*
>21aa	00					.byte	$00
>21ab	00 15					.word	C64
>21ad	36 b4					.byte	$36,$b4
.21af					_end53:
>21af	05					.byte	_end54-*
>21b0	00					.byte	$00
>21b1	d7 14					.word	C8
>21b3	b8					.byte	$b8
.21b4					_end54:
>21b4	06					.byte	_end55-*
>21b5	00					.byte	$00
>21b6	49 14					.word	Times8
>21b8	38 aa					.byte	$38,$aa
.21ba					_end55:
>21ba	06					.byte	_end56-*
>21bb	00					.byte	$00
>21bc	5c 14					.word	Divide8
>21be	38 af					.byte	$38,$af
.21c0					_end56:
>21c0	05					.byte	_end57-*
>21c1	40					.byte	$40
>21c2	01 1a					.word	ReturnHandler
>21c4	bb					.byte	$bb
.21c5					_end57:
>21c5	05					.byte	_end58-*
>21c6	00					.byte	$00
>21c7	65 12					.word	CheckLess
>21c9	bc					.byte	$bc
.21ca					_end58:
>21ca	06					.byte	_end59-*
>21cb	00					.byte	$00
>21cc	7e 12					.word	CheckLessEq
>21ce	3c bd					.byte	$3c,$bd
.21d0					_end59:
>21d0	06					.byte	_end60-*
>21d1	00					.byte	$00
>21d2	2e 12					.word	CheckNotEqual
>21d4	3c be					.byte	$3c,$be
.21d6					_end60:
>21d6	05					.byte	_end61-*
>21d7	00					.byte	$00
>21d8	31 12					.word	CheckEqual
>21da	bd					.byte	$bd
.21db					_end61:
>21db	05					.byte	_end62-*
>21dc	00					.byte	$00
>21dd	81 12					.word	CheckGreater
>21df	be					.byte	$be
.21e0					_end62:
>21e0	06					.byte	_end63-*
>21e1	00					.byte	$00
>21e2	62 12					.word	CheckGreaterEq
>21e4	3e bd					.byte	$3e,$bd
.21e6					_end63:
>21e6	08					.byte	_end64-*
>21e7	00					.byte	$00
>21e8	6c 15					.word	TestDup
>21ea	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.21ee					_end64:
>21ee	05					.byte	_end65-*
>21ef	00					.byte	$00
>21f0	e1 15					.word	WordRead
>21f2	c0					.byte	$c0
.21f3					_end65:
>21f3	07					.byte	_end66-*
>21f4	00					.byte	$00
>21f5	e7 13					.word	Absolute
>21f7	41 42 d3				.byte	$41,$42,$d3
.21fa					_end66:
>21fa	09					.byte	_end67-*
>21fb	00					.byte	$00
>21fc	24 16					.word	AllocateMemory
>21fe	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.2203					_end67:
>2203	07					.byte	_end68-*
>2204	00					.byte	$00
>2205	07 12					.word	And
>2207	41 4e c4				.byte	$41,$4e,$c4
.220a					_end68:
>220a	0a					.byte	_end69-*
>220b	00					.byte	$00
>220c	db 1c					.word	AssertCode
>220e	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.2214					_end69:
>2214	09					.byte	_end70-*
>2215	00					.byte	$00
>2216	3a 14					.word	ByteSwap
>2218	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.221d					_end70:
>221d	06					.byte	_end71-*
>221e	00					.byte	$00
>221f	ef 15					.word	ByteWrite
>2221	43 a1					.byte	$43,$a1
.2223					_end71:
>2223	06					.byte	_end72-*
>2224	00					.byte	$00
>2225	d8 15					.word	ByteRead
>2227	43 c0					.byte	$43,$c0
.2229					_end72:
>2229	07					.byte	_end73-*
>222a	00					.byte	$00
>222b	c2 1a					.word	ClrHandler
>222d	43 4c d2				.byte	$43,$4c,$d2
.2230					_end73:
>2230	08					.byte	_end74-*
>2231	00					.byte	$00
>2232	63 15					.word	Drop
>2234	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2238					_end74:
>2238	07					.byte	_end75-*
>2239	00					.byte	$00
>223a	75 15					.word	Dup
>223c	44 55 d0				.byte	$44,$55,$d0
.223f					_end75:
>223f	08					.byte	_end76-*
>2240	01					.byte	$01
>2241	4e 19					.word	ElseHandler
>2243	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2247					_end76:
>2247	07					.byte	_end77-*
>2248	00					.byte	$00
>2249	fc 1c					.word	EndProgram
>224b	45 4e c4				.byte	$45,$4e,$c4
.224e					_end77:
>224e	09					.byte	_end78-*
>224f	00					.byte	$00
>2250	51 19					.word	EndIfHandler
>2252	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2257					_end78:
>2257	07					.byte	_end79-*
>2258	00					.byte	$00
>2259	c6 18					.word	ForHandler
>225b	46 4f d2				.byte	$46,$4f,$d2
.225e					_end79:
>225e	06					.byte	_end80-*
>225f	01					.byte	$01
>2260	4b 19					.word	IfHandler
>2262	49 c6					.byte	$49,$c6
.2264					_end80:
>2264	09					.byte	_end81-*
>2265	00					.byte	$00
>2266	2a 19					.word	GetIndex
>2268	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.226d					_end81:
>226d	08					.byte	_end82-*
>226e	00					.byte	$00
>226f	37 1c					.word	ListCode
>2271	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.2275					_end82:
>2275	07					.byte	_end83-*
>2276	00					.byte	$00
>2277	9e 12					.word	Maximum
>2279	4d 41 d8				.byte	$4d,$41,$d8
.227c					_end83:
>227c	07					.byte	_end84-*
>227d	00					.byte	$00
>227e	9a 12					.word	Minimum
>2280	4d 49 ce				.byte	$4d,$49,$ce
.2283					_end84:
>2283	07					.byte	_end85-*
>2284	00					.byte	$00
>2285	da 12					.word	Modulus16x16
>2287	4d 4f c4				.byte	$4d,$4f,$c4
.228a					_end85:
>228a	0a					.byte	_end86-*
>228b	00					.byte	$00
>228c	ee 13					.word	Negate
>228e	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2294					_end86:
>2294	07					.byte	_end87-*
>2295	00					.byte	$00
>2296	b9 1a					.word	NewHandler
>2298	4e 45 d7				.byte	$4e,$45,$d7
.229b					_end87:
>229b	08					.byte	_end88-*
>229c	01					.byte	$01
>229d	f4 18					.word	NextHandler
>229f	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.22a3					_end88:
>22a3	07					.byte	_end89-*
>22a4	00					.byte	$00
>22a5	a9 15					.word	Nip
>22a7	4e 49 d0				.byte	$4e,$49,$d0
.22aa					_end89:
>22aa	07					.byte	_end90-*
>22ab	00					.byte	$00
>22ac	fe 13					.word	OneComplement
>22ae	4e 4f d4				.byte	$4e,$4f,$d4
.22b1					_end90:
>22b1	06					.byte	_end91-*
>22b2	00					.byte	$00
>22b3	21 12					.word	LogOr
>22b5	4f d2					.byte	$4f,$d2
.22b7					_end91:
>22b7	08					.byte	_end92-*
>22b8	00					.byte	$00
>22b9	91 15					.word	Over
>22bb	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.22bf					_end92:
>22bf	0a					.byte	_end93-*
>22c0	00					.byte	$00
>22c1	54 19					.word	RepeatHandler
>22c3	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.22c9					_end93:
>22c9	07					.byte	_end94-*
>22ca	00					.byte	$00
>22cb	7d 14					.word	RandomNumber
>22cd	52 4e c4				.byte	$52,$4e,$c4
.22d0					_end94:
>22d0	07					.byte	_end95-*
>22d1	00					.byte	$00
>22d2	ae 15					.word	Rot
>22d4	52 4f d4				.byte	$52,$4f,$d4
.22d7					_end95:
>22d7	07					.byte	_end96-*
>22d8	00					.byte	$00
>22d9	b4 1c					.word	RunProgram
>22db	52 55 ce				.byte	$52,$55,$ce
.22de					_end96:
>22de	07					.byte	_end97-*
>22df	00					.byte	$00
>22e0	29 14					.word	SignTOS
>22e2	53 47 ce				.byte	$53,$47,$ce
.22e5					_end97:
>22e5	08					.byte	_end98-*
>22e6	00					.byte	$00
>22e7	f4 1c					.word	StopCode
>22e9	53 54 4f d0				.byte	$53,$54,$4f,$d0
.22ed					_end98:
>22ed	08					.byte	_end99-*
>22ee	00					.byte	$00
>22ef	7e 15					.word	Swap
>22f1	53 57 41 d0				.byte	$53,$57,$41,$d0
.22f5					_end99:
>22f5	07					.byte	_end100-*
>22f6	00					.byte	$00
>22f7	c4 1c					.word	Call6502
>22f9	53 59 d3				.byte	$53,$59,$d3
.22fc					_end100:
>22fc	0d					.byte	_end101-*
>22fd	00					.byte	$00
>22fe	3c 1e					.word	IntToString
>2300	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2308	c7
.2309					_end101:
>2309	09					.byte	_end102-*
>230a	01					.byte	$01
>230b	57 19					.word	UntilHandler
>230d	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2312					_end102:
>2312	09					.byte	_end103-*
>2313	00					.byte	$00
>2314	ff 1c					.word	VlistCode
>2316	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.231b					_end103:
>231b	0a					.byte	_end104-*
>231c	40					.byte	$40
>231d	06 1b					.word	BreakCmd
>231f	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2325					_end104:
>2325	09					.byte	_end105-*
>2326	00					.byte	$00
>2327	00 1b					.word	ExitDump
>2329	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.232e					_end105:
>232e	07					.byte	_end106-*
>232f	00					.byte	$00
>2330	14 12					.word	Xor
>2332	58 4f d2				.byte	$58,$4f,$d2
.2335					_end106:
>2335	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
