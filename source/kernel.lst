
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Fri Jan 17 07:56:20 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	5
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	4c 99 23	jmp $2399			jmp 	ColdStart

;******  Processing file: files.asm


;******  Processing file: code/core.src

.1003					InitialiseCoreCode:
.1003	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1005	85 00		sta $00				sta 	NextCode
.1007	85 01		sta $01				sta 	NextCode+1
.1009	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.100b	85 02		sta $02				sta 	NextCode+2
.100d	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.100f	84 04		sty $04				sty 	NextCode+4
.1011	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1013	60		rts				rts								; (2 INX skip offset and line#)
.1014					HexLiteral2Byte:
.1014	ea		nop				nop 							; must have different address for decoding.
.1015					Literal2Byte:
.1015	a5 06		lda $06				lda 	TOS
.1017	48		pha				pha
.1018	a5 07		lda $07				lda 	TOS+1
.101a	48		pha				pha
.101b	e8		inx				inx  							; point X to the word
.101c	e8		inx				inx
.101d	8a		txa				txa 							; copy into Y
.101e	a8		tay				tay
.101f	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1021	85 06		sta $06				sta 	TOS
.1023	c8		iny				iny 							; read and push the MSB
.1024	b1 03		lda ($03),y			lda 	(IP),y
.1026	85 07		sta $07				sta 	TOS+1
.1028	4c 00 00	jmp $0000			jmp 	NextCode
.102b					HexLiteral2ByteDecode:
.102b	a9 06		lda #$06			lda 	#CTH_Keyword
.102d	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1030	a9 24		lda #$24			lda 	#"$"
.1032	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1035	b1 08		lda ($08),y			lda 	(srcPtr),y
.1037	48		pha				pha
.1038	c8		iny				iny
.1039	b1 08		lda ($08),y			lda 	(srcPtr),y
.103b	c8		iny				iny
.103c	20 44 10	jsr $1044			jsr 	HL2BDWrite
.103f	68		pla				pla
.1040	20 44 10	jsr $1044			jsr 	HL2BDWrite
.1043	60		rts				rts
.1044					HL2BDWrite:
.1044	48		pha				pha
.1045	4a		lsr a				lsr 	a
.1046	4a		lsr a				lsr 	a
.1047	4a		lsr a				lsr 	a
.1048	4a		lsr a				lsr 	a
.1049	20 4d 10	jsr $104d			jsr 	_HLNibble
.104c	68		pla				pla
.104d					_HLNibble:
.104d	29 0f		and #$0f			and 	#$0F
.104f	c9 0a		cmp #$0a			cmp 	#$0A
.1051	90 03		bcc $1056			bcc 	_HLNoAdjust
.1053	18		clc				clc
.1054	69 07		adc #$07			adc 	#7
.1056					_HLNoAdjust:
.1056	18		clc				clc
.1057	69 30		adc #$30			adc 	#48
.1059	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.105c	60		rts				rts
.105d					Literal2ByteDecode:
.105d	a9 06		lda #$06			lda 	#CTH_Keyword
.105f	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1062	b1 08		lda ($08),y			lda 	(srcPtr),y
.1064	aa		tax				tax
.1065	c8		iny				iny
.1066	b1 08		lda ($08),y			lda 	(srcPtr),y
.1068	a8		tay				tay
.1069	8a		txa				txa
.106a	38		sec				sec 							; output signed
.106b	20 48 19	jsr $1948			jsr 	DecodeYAToBuffer
.106e	60		rts				rts
.106f					LiteralString:
.106f	a5 06		lda $06				lda 	TOS
.1071	48		pha				pha
.1072	a5 07		lda $07				lda 	TOS+1
.1074	48		pha				pha
.1075	e8		inx				inx
.1076	e8		inx				inx 							; skip over current word
.1077	8a		txa				txa 							; add to IP + 1 to give string address
.1078	a8		tay				tay 							; put in Y
.1079	38		sec				sec 							; make that TOS
.107a	65 03		adc $03				adc 	IP
.107c	85 06		sta $06				sta 	TOS
.107e	a5 04		lda $04				lda 	IP+1
.1080	69 00		adc #$00			adc 	#0
.1082	85 07		sta $07				sta 	TOS+1
.1084	8a		txa				txa 							; add data length to X
.1085	18		clc				clc
.1086	71 03		adc ($03),y			adc 	(IP),y
.1088	aa		tax				tax
.1089	ca		dex				dex
.108a	ca		dex				dex
.108b	4c 00 00	jmp $0000			jmp 	NextCode
.108e					LiteralStringDecoder:
.108e	a9 05		lda #$05			lda 	#CTH_String
.1090	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1093	a9 22		lda #$22			lda 	#'"'
.1095	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1098	20 2f 19	jsr $192f			jsr 	DecodeOutputData
.109b	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.109e	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/binary.src

.109f					Add:
.109f	7a		ply				ply
.10a0	68		pla				pla
.10a1	18		clc				clc
.10a2	65 06		adc $06				adc 	TOS
.10a4	85 06		sta $06				sta 	TOS
.10a6	98		tya				tya
.10a7	65 07		adc $07				adc 	TOS+1
.10a9	85 07		sta $07				sta 	TOS+1
.10ab	4c 00 00	jmp $0000			jmp 	NextCode
.10ae					Subtract:
.10ae	7a		ply				ply
.10af	68		pla				pla
.10b0	38		sec				sec
.10b1	e5 06		sbc $06				sbc 	TOS
.10b3	85 06		sta $06				sta 	TOS
.10b5	98		tya				tya
.10b6	e5 07		sbc $07				sbc 	TOS+1
.10b8	85 07		sta $07				sta 	TOS+1
.10ba	4c 00 00	jmp $0000			jmp 	NextCode
.10bd					And:
.10bd	68		pla				pla
.10be	25 07		and $07				and 	TOS+1
.10c0	85 07		sta $07				sta 	TOS+1
.10c2	68		pla				pla
.10c3	25 06		and $06				and 	TOS
.10c5	85 06		sta $06				sta 	TOS
.10c7	4c 00 00	jmp $0000			jmp 	NextCode
.10ca					Xor:
.10ca	68		pla				pla
.10cb	45 07		eor $07				eor 	TOS+1
.10cd	85 07		sta $07				sta 	TOS+1
.10cf	68		pla				pla
.10d0	45 06		eor $06				eor 	TOS
.10d2	85 06		sta $06				sta 	TOS
.10d4	4c 00 00	jmp $0000			jmp 	NextCode
.10d7					LogOr:
.10d7	68		pla				pla
.10d8	05 07		ora $07				ora 	TOS+1
.10da	85 07		sta $07				sta 	TOS+1
.10dc	68		pla				pla
.10dd	05 06		ora $06				ora 	TOS
.10df	85 06		sta $06				sta 	TOS
.10e1	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/compare.src

.10e4					CheckNotEqual:
.10e4	38		sec				sec
.10e5	80 01		bra $10e8			bra 	CECode
.10e7					CheckEqual:
.10e7	18		clc				clc
.10e8					CECode:
.10e8	86 10		stx $10				stx 	temp1
.10ea	ba		tsx				tsx
.10eb	08		php				php
.10ec	a5 06		lda $06				lda 	TOS
.10ee	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.10f1	d0 17		bne $110a			bne	 	CompareFalse
.10f3	a5 07		lda $07				lda 	TOS+1
.10f5	5d 01 01	eor $0101,x			eor 	Stack2High,x
.10f8	d0 10		bne $110a			bne 	CompareFalse
.10fa					CompareTrue:
.10fa	a6 10		ldx $10				ldx 	temp1
.10fc	28		plp				plp
.10fd	b0 10		bcs $110f			bcs		CompareFalse2
.10ff					CompareTrue2:
.10ff	68		pla				pla
.1100	68		pla				pla
.1101	a9 ff		lda #$ff			lda 	#$FF
.1103	85 06		sta $06				sta 	TOS
.1105	85 07		sta $07				sta 	TOS+1
.1107	4c 00 00	jmp $0000			jmp 	NextCode
.110a					CompareFalse:
.110a	a6 10		ldx $10				ldx 	temp1
.110c	28		plp				plp
.110d	b0 f0		bcs $10ff			bcs		CompareTrue2
.110f					CompareFalse2:
.110f	68		pla				pla
.1110	68		pla				pla
.1111	64 06		stz $06				stz 	TOS
.1113	64 07		stz $07				stz 	TOS+1
.1115	4c 00 00	jmp $0000			jmp 	NextCode
.1118					CheckGreaterEq:
.1118	38		sec				sec
.1119	80 01		bra $111c			bra		CLCode
.111b					CheckLess:
.111b	18		clc				clc
.111c	86 10		stx $10		CLCode:	stx 	temp1
.111e	ba		tsx				tsx
.111f	08		php				php
.1120	18		clc				clc
.1121	a5 06		lda $06				lda 	TOS
.1123	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1126	a5 07		lda $07				lda 	TOS+1
.1128	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.112b	50 02		bvc $112f			bvc 	_CLNoFlip
.112d	49 80		eor #$80			eor 	#$80
.112f					_CLNoFlip:
.112f	0a		asl a				asl 	a
.1130	b0 d8		bcs $110a			bcs 	CompareFalse
.1132	80 c6		bra $10fa			bra 	CompareTrue
.1134					CheckLessEq:
.1134	38		sec				sec
.1135	80 01		bra $1138			bra		CGCode
.1137					CheckGreater:
.1137	18		clc				clc
.1138					CGCode:
.1138	86 10		stx $10				stx 	temp1
.113a	ba		tsx				tsx
.113b	08		php				php
.113c	18		clc				clc
.113d	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1140	e5 06		sbc $06				sbc 	TOS
.1142	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1145	e5 07		sbc $07				sbc 	TOS+1
.1147	50 02		bvc $114b			bvc 	_CGNoFlip
.1149	49 80		eor #$80			eor 	#$80
.114b					_CGNoFlip:
.114b	0a		asl a				asl 	a
.114c	b0 bc		bcs $110a			bcs 	CompareFalse
.114e	80 aa		bra $10fa			bra 	CompareTrue
.1150					Minimum:
.1150	a9 00		lda #$00			lda 	#0
.1152	80 02		bra $1156			bra 	MinMaxCode
.1154					Maximum:
.1154	a9 80		lda #$80			lda 	#$80
.1156					MinMaxCode:
.1156	85 11		sta $11				sta 	temp1+1
.1158	86 10		stx $10				stx 	temp1
.115a	ba		tsx				tsx
.115b	38		sec				sec
.115c	a5 06		lda $06				lda 	TOS
.115e	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1161	a5 07		lda $07				lda 	TOS+1
.1163	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1166	50 02		bvc $116a			bvc 	_MMNoFlip
.1168	49 80		eor #$80			eor 	#$80
.116a					_MMNoFlip:
.116a	45 11		eor $11				eor 	temp1+1
.116c	30 0a		bmi $1178			bmi 	_MMNoCopy
.116e	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1171	85 06		sta $06				sta 	TOS
.1173	bd 01 01	lda $0101,x			lda 	Stack2High,x
.1176	85 07		sta $07				sta 	TOS+1
.1178					_MMNoCopy:
.1178	a6 10		ldx $10				ldx 	temp1
.117a	68		pla				pla
.117b	68		pla				pla
.117c	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/divide.src

.117f					Divide16x16:
.117f	86 12		stx $12				stx 	temp2
.1181	ba		tsx				tsx
.1182	20 a5 11	jsr $11a5			jsr 	IntegerDivide
.1185	68		pla				pla
.1186	85 07		sta $07				sta 	TOS+1
.1188	68		pla				pla
.1189	85 06		sta $06				sta 	TOS
.118b	a6 12		ldx $12				ldx 	temp2
.118d	4c 00 00	jmp $0000			jmp 	NextCode
.1190					Modulus16x16:
.1190	86 12		stx $12				stx 	temp2
.1192	ba		tsx				tsx
.1193	20 a5 11	jsr $11a5			jsr 	IntegerDivide
.1196	a6 12		ldx $12				ldx 	temp2
.1198	68		pla				pla
.1199	68		pla				pla
.119a	a5 10		lda $10				lda 	temp1
.119c	85 06		sta $06				sta 	TOS
.119e	a5 11		lda $11				lda 	temp1+1
.11a0	85 07		sta $07				sta 	TOS+1
.11a2	4c 00 00	jmp $0000			jmp 	NextCode
.11a5					IntegerDivide:
.11a5	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.11a7	05 07		ora $07				ora 	TOS+1
.11a9	d0 14		bne $11bf			bne 	_BFDOkay
.11ab	20 2c 24	jsr $242c			jsr 	ErrorHandler
>11ae	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>11b6	20 42 59 20 5a 45 52 4f 00
.11bf					_BFDOkay:
.11bf	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.11c1	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.11c3	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.11c5	20 00 12	jsr $1200			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.11c8	20 1a 12	jsr $121a			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.11cb	5a		phy				phy 								; Y is the counter
.11cc	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.11ce					_BFDLoop:
.11ce	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.11d1	3e 01 01	rol $0101,x			rol 	Stack2High,x
.11d4	26 10		rol $10				rol 	temp1
.11d6	26 11		rol $11				rol 	temp1+1
.11d8	38		sec				sec
.11d9	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.11db	e5 06		sbc $06				sbc 	TOS
.11dd	48		pha				pha
.11de	a5 11		lda $11				lda 	temp1+1
.11e0	e5 07		sbc $07				sbc 	TOS+1
.11e2	90 0f		bcc $11f3			bcc 	_BFDNoAdd
.11e4	85 11		sta $11				sta 	temp1+1
.11e6	68		pla				pla
.11e7	85 10		sta $10				sta 	temp1+0
.11e9	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.11ec	09 01		ora #$01			ora 	#1
.11ee	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.11f1	80 01		bra $11f4			bra 	_BFDNext
.11f3					_BFDNoAdd:
.11f3	68		pla				pla 								; Throw away the intermediate calculations
.11f4					_BFDNext:
.11f4	88		dey				dey
.11f5	d0 d7		bne $11ce			bne 	_BFDLoop
.11f7	7a		ply				ply 								; restore Y
.11f8	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.11fa	90 03		bcc $11ff			bcc 	_BFDUnsigned 				; then the result is signed
.11fc	20 06 12	jsr $1206			jsr		IntegerNegateAlways 		; negate the result
.11ff					_BFDUnsigned:
.11ff	60		rts				rts
.1200					CheckIntegerNegate:
.1200	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.1203	30 01		bmi $1206			bmi 	IntegerNegateAlways 		; if so negate it
.1205	60		rts				rts
.1206					IntegerNegateAlways:
.1206	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1208	38		sec				sec 								; negate
.1209	a9 00		lda #$00			lda 	#0
.120b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.120e	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1211	a9 00		lda #$00			lda 	#0
.1213	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1216	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1219	60		rts				rts
.121a					CheckTOSNegate:
.121a	a5 07		lda $07				lda 	TOS+1
.121c	10 0f		bpl $122d			bpl		CTNNoChange
.121e	e6 1a		inc $1a				inc 	SignCount
.1220					TOSNegateAlways:
.1220	38		sec				sec
.1221	a9 00		lda #$00			lda 	#0
.1223	e5 06		sbc $06				sbc 	TOS
.1225	85 06		sta $06				sta 	TOS
.1227	a9 00		lda #$00			lda 	#0
.1229	e5 07		sbc $07				sbc 	TOS+1
.122b	85 07		sta $07				sta 	TOS+1
.122d					CTNNoChange:
.122d	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/multiply.src

.122e					Multiply16x16:
.122e	86 10		stx $10				stx 	temp1
.1230	ba		tsx				tsx
.1231	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.1234	85 12		sta $12				sta 	temp2
.1236	bd 01 01	lda $0101,x			lda		Stack2High,x
.1239	85 13		sta $13				sta 	temp2+1
.123b	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.123e	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1241					_MultLoop:
.1241	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.1243	66 12		ror $12				ror 	temp2
.1245	90 11		bcc $1258			bcc 	_MultNoAdd
.1247	18		clc				clc 								; add 1st to 2nd
.1248	a5 06		lda $06				lda 	TOS
.124a	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.124d	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1250	a5 07		lda $07				lda 	TOS+1
.1252	7d 01 01	adc $0101,x			adc 	Stack2High,x
.1255	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1258					_MultNoAdd:
.1258	06 06		asl $06				asl 	TOS 						; shift 1st left
.125a	26 07		rol $07				rol 	TOS+1
.125c	a5 12		lda $12				lda 	temp2	 					; until zero
.125e	05 13		ora $13				ora 	temp2+1
.1260	d0 df		bne $1241			bne 	_MultLoop
.1262	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.1264	68		pla				pla
.1265	85 07		sta $07				sta 	TOS+1
.1267	68		pla				pla
.1268	85 06		sta $06				sta 	TOS
.126a	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/unary.src

.126d					Unary1Plus:
.126d	e6 06		inc $06				inc 	TOS
.126f	d0 02		bne $1273			bne 	_U1PSkip
.1271	e6 07		inc $07				inc 	TOS+1
.1273					_U1PSkip:
.1273	4c 00 00	jmp $0000			jmp 	NextCode
.1276					Unary2Plus:
.1276	18		clc				clc
.1277	a5 06		lda $06				lda 	TOS
.1279	69 02		adc #$02			adc 	#2
.127b	85 06		sta $06				sta 	TOS
.127d	90 02		bcc $1281			bcc 	_U1PSkip
.127f	e6 07		inc $07				inc 	TOS+1
.1281					_U1PSkip:
.1281	4c 00 00	jmp $0000			jmp 	NextCode
.1284					Unary1Minus:
.1284	a5 06		lda $06				lda 	TOS
.1286	d0 02		bne $128a			bne 	_U1MSkip
.1288	c6 07		dec $07				dec 	TOS+1
.128a					_U1MSkip:
.128a	c6 06		dec $06				dec 	TOS
.128c	4c 00 00	jmp $0000			jmp 	NextCode
.128f					Unary2Minus:
.128f	38		sec				sec
.1290	a5 06		lda $06				lda 	TOS
.1292	e9 02		sbc #$02			sbc 	#2
.1294	85 06		sta $06				sta 	TOS
.1296	b0 02		bcs $129a			bcs 	_U1PSkip
.1298	c6 07		dec $07				dec 	TOS+1
.129a					_U1PSkip:
.129a	4c 00 00	jmp $0000			jmp 	NextCode
.129d					Absolute:
.129d	a5 07		lda $07				lda 	TOS+1
.129f	30 03		bmi $12a4			bmi 	Negate
.12a1	4c 00 00	jmp $0000			jmp 	NextCode
.12a4					Negate:
.12a4	38		sec				sec
.12a5	a9 00		lda #$00			lda 	#0
.12a7	e5 06		sbc $06				sbc 	TOS
.12a9	85 06		sta $06				sta 	TOS
.12ab	a9 00		lda #$00			lda 	#0
.12ad	e5 07		sbc $07				sbc 	TOS+1
.12af	85 07		sta $07				sta 	TOS+1
.12b1	4c 00 00	jmp $0000			jmp 	NextCode
.12b4					OneComplement:
.12b4	a5 06		lda $06				lda 	TOS
.12b6	49 ff		eor #$ff			eor 	#$FF
.12b8	85 06		sta $06				sta 	TOS
.12ba	a5 07		lda $07				lda 	TOS+1
.12bc	49 ff		eor #$ff			eor 	#$FF
.12be	85 07		sta $07				sta 	TOS+1
.12c0	4c 00 00	jmp $0000			jmp 	NextCode
.12c3					CheckMinus:
.12c3	a5 07		lda $07				lda 	TOS+1
.12c5	30 07		bmi $12ce			bmi 	UnaryTrue
.12c7					UnaryFalse:
.12c7	64 06		stz $06				stz 	TOS
.12c9	64 07		stz $07				stz 	TOS+1
.12cb	4c 00 00	jmp $0000			jmp 	NextCode
.12ce					UnaryTrue:
.12ce	a9 ff		lda #$ff			lda 	#$FF
.12d0	85 06		sta $06				sta 	TOS
.12d2	85 07		sta $07				sta 	TOS+1
.12d4	4c 00 00	jmp $0000			jmp 	NextCode
.12d7					CheckZero:
.12d7	a5 06		lda $06				lda 	TOS
.12d9	05 07		ora $07				ora 	TOS+1
.12db	d0 ea		bne $12c7			bne 	UnaryFalse
.12dd	80 ef		bra $12ce			bra 	UnaryTrue
.12df					SignTOS:
.12df	a5 07		lda $07				lda 	TOS+1
.12e1	30 eb		bmi $12ce			bmi		UnaryTrue
.12e3	05 06		ora $06				ora 	TOS
.12e5	f0 e0		beq $12c7			beq 	UnaryFalse
.12e7	a9 01		lda #$01			lda 	#1
.12e9	85 06		sta $06				sta 	TOS
.12eb	64 07		stz $07				stz		TOS+1
.12ed	4c 00 00	jmp $0000			jmp 	NextCode
.12f0					ByteSwap:
.12f0	a5 06		lda $06				lda 	TOS
.12f2	a4 07		ldy $07				ldy 	TOS+1
.12f4	85 07		sta $07				sta 	TOS+1
.12f6	84 06		sty $06				sty 	TOS
.12f8	4c 00 00	jmp $0000			jmp 	NextCode
.12fb					Times16:
.12fb	06 06		asl $06				asl 	TOS
.12fd	26 07		rol $07				rol 	TOS+1
.12ff					Times8:
.12ff	06 06		asl $06				asl 	TOS
.1301	26 07		rol $07				rol 	TOS+1
.1303					Times4:
.1303	06 06		asl $06				asl 	TOS
.1305	26 07		rol $07				rol 	TOS+1
.1307					Times2:
.1307	06 06		asl $06				asl 	TOS
.1309	26 07		rol $07				rol 	TOS+1
.130b	4c 00 00	jmp $0000			jmp 	NextCode
.130e					Divide16:
.130e	46 07		lsr $07				lsr 	TOS+1
.1310	66 06		ror $06				ror 	TOS
.1312					Divide8:
.1312	46 07		lsr $07				lsr 	TOS+1
.1314	66 06		ror $06				ror 	TOS
.1316					Divide4:
.1316	46 07		lsr $07				lsr 	TOS+1
.1318	66 06		ror $06				ror 	TOS
.131a					Divide2:
.131a	46 07		lsr $07				lsr 	TOS+1
.131c	66 06		ror $06				ror 	TOS
.131e	4c 00 00	jmp $0000			jmp 	NextCode
.1321					Times256:
.1321	a5 06		lda $06				lda 	TOS
.1323	85 07		sta $07				sta 	TOS+1
.1325	64 06		stz $06				stz 	TOS
.1327	4c 00 00	jmp $0000			jmp 	NextCode
.132a					Divide256:
.132a	a5 07		lda $07				lda 	TOS+1
.132c	85 06		sta $06				sta 	TOS
.132e	64 07		stz $07				stz 	TOS+1
.1330	4c 00 00	jmp $0000			jmp 	NextCode
.1333					RandomNumber:
.1333	a5 06		lda $06				lda 	TOS
.1335	48		pha				pha
.1336	a5 07		lda $07				lda 	TOS+1
.1338	48		pha				pha
.1339	a5 1b		lda $1b				lda 	randomSeed
.133b	05 1c		ora $1c				ora 	randomSeed+1
.133d	d0 08		bne $1347			bne 	_RH_NoInit
.133f	a9 7c		lda #$7c			lda 	#$7C
.1341	85 1b		sta $1b				sta 	randomSeed
.1343	a9 a1		lda #$a1			lda 	#$A1
.1345	85 1c		sta $1c				sta 	randomSeed+1
.1347					_RH_NoInit:
.1347	a5 1b		lda $1b				lda 	randomSeed
.1349	4a		lsr a		        lsr		a
.134a	26 1c		rol $1c		        rol 	randomSeed+1
.134c	90 02		bcc $1350	        bcc 	_RH_NoEor
.134e	49 b4		eor #$b4	        eor 	#$B4
.1350					_RH_NoEor:
.1350	85 1b		sta $1b		        sta 	randomSeed
.1352	45 1c		eor $1c		        eor 	randomSeed+1
.1354	85 07		sta $07		        sta 	TOS+1
.1356	a5 1b		lda $1b		        lda 	randomSeed
.1358	85 06		sta $06		        sta 	TOS
.135a	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/literals.src

.135d					Constant0:
.135d	a5 06		lda $06				lda 	TOS
.135f	48		pha				pha
.1360	a5 07		lda $07				lda 	TOS+1
.1362	48		pha				pha
.1363	64 06		stz $06				stz 	TOS
.1365	64 07		stz $07				stz 	TOS+1
.1367	4c 00 00	jmp $0000			jmp 	NextCode
.136a					ConstantMinus1:
.136a	a5 06		lda $06				lda 	TOS
.136c	48		pha				pha
.136d	a5 07		lda $07				lda 	TOS+1
.136f	48		pha				pha
.1370	a9 ff		lda #$ff			lda 	#$FF
.1372	85 06		sta $06				sta 	TOS
.1374	85 07		sta $07				sta 	TOS+1
.1376	4c 00 00	jmp $0000			jmp 	NextCode
.1379					C1:
.1379	a0 01		ldy #$01			ldy 	#1
.137b	80 24		bra $13a1			bra 	Const1Byte
.137d					C2:
.137d	a0 02		ldy #$02			ldy 	#2
.137f	80 20		bra $13a1			bra 	Const1Byte
.1381					C3:
.1381	a0 03		ldy #$03			ldy 	#3
.1383	80 1c		bra $13a1			bra 	Const1Byte
.1385					C4:
.1385	a0 04		ldy #$04			ldy 	#4
.1387	80 18		bra $13a1			bra 	Const1Byte
.1389					C5:
.1389	a0 05		ldy #$05			ldy 	#5
.138b	80 14		bra $13a1			bra 	Const1Byte
.138d					C8:
.138d	a0 08		ldy #$08			ldy 	#8
.138f	80 10		bra $13a1			bra 	Const1Byte
.1391					C10:
.1391	a0 0a		ldy #$0a			ldy 	#10
.1393	80 0c		bra $13a1			bra 	Const1Byte
.1395					C15:
.1395	a0 0f		ldy #$0f			ldy 	#15
.1397	80 08		bra $13a1			bra 	Const1Byte
.1399					C16:
.1399	a0 10		ldy #$10			ldy 	#16
.139b	80 04		bra $13a1			bra 	Const1Byte
.139d					C24:
.139d	a0 18		ldy #$18			ldy 	#24
.139f	80 00		bra $13a1			bra 	Const1Byte
.13a1					Const1Byte:
.13a1	a5 06		lda $06				lda 	TOS
.13a3	48		pha				pha
.13a4	a5 07		lda $07				lda 	TOS+1
.13a6	48		pha				pha
.13a7	84 06		sty $06				sty 	TOS
.13a9	64 07		stz $07				stz 	TOS+1
.13ab	4c 00 00	jmp $0000			jmp 	NextCode
.13ae					C32:
.13ae	a0 20		ldy #$20			ldy 	#32
.13b0	80 ef		bra $13a1			bra 	Const1Byte
.13b2					C63:
.13b2	a0 3f		ldy #$3f			ldy 	#63
.13b4	80 eb		bra $13a1			bra 	Const1Byte
.13b6					C64:
.13b6	a0 40		ldy #$40			ldy 	#64
.13b8	80 e7		bra $13a1			bra 	Const1Byte
.13ba					C100:
.13ba	a0 64		ldy #$64			ldy 	#100
.13bc	80 e3		bra $13a1			bra 	Const1Byte
.13be					C127:
.13be	a0 7f		ldy #$7f			ldy 	#127
.13c0	80 df		bra $13a1			bra 	Const1Byte
.13c2					C128:
.13c2	a0 80		ldy #$80			ldy 	#128
.13c4	80 db		bra $13a1			bra 	Const1Byte
.13c6					C255:
.13c6	a0 ff		ldy #$ff			ldy 	#255
.13c8	80 d7		bra $13a1			bra 	Const1Byte
.13ca					Const2Byte:
.13ca	85 06		sta $06				sta 	TOS
.13cc	84 07		sty $07				sty 	TOS+1
.13ce	4c 00 00	jmp $0000			jmp 	NextCode
.13d1					C256:
.13d1	a5 06		lda $06				lda 	TOS
.13d3	48		pha				pha
.13d4	a5 07		lda $07				lda 	TOS+1
.13d6	48		pha				pha
.13d7	a9 00		lda #$00			lda 	#(256) & $FF
.13d9	a0 01		ldy #$01			ldy 	#(256) >> 8
.13db	80 ed		bra $13ca			bra 	Const2Byte
.13dd					C512:
.13dd	a5 06		lda $06				lda 	TOS
.13df	48		pha				pha
.13e0	a5 07		lda $07				lda 	TOS+1
.13e2	48		pha				pha
.13e3	a9 00		lda #$00			lda 	#(512) & $FF
.13e5	a0 02		ldy #$02			ldy 	#(512) >> 8
.13e7	80 e1		bra $13ca			bra 	Const2Byte
.13e9					C1024:
.13e9	a5 06		lda $06				lda 	TOS
.13eb	48		pha				pha
.13ec	a5 07		lda $07				lda 	TOS+1
.13ee	48		pha				pha
.13ef	a9 00		lda #$00			lda 	#(1024) & $FF
.13f1	a0 04		ldy #$04			ldy 	#(1024) >> 8
.13f3	80 d5		bra $13ca			bra 	Const2Byte
.13f5					C4096:
.13f5	a5 06		lda $06				lda 	TOS
.13f7	48		pha				pha
.13f8	a5 07		lda $07				lda 	TOS+1
.13fa	48		pha				pha
.13fb	a9 00		lda #$00			lda 	#(4096) & $FF
.13fd	a0 10		ldy #$10			ldy 	#(4096) >> 8
.13ff	80 c9		bra $13ca			bra 	Const2Byte
.1401					C32767:
.1401	a5 06		lda $06				lda 	TOS
.1403	48		pha				pha
.1404	a5 07		lda $07				lda 	TOS+1
.1406	48		pha				pha
.1407	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1409	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.140b	80 bd		bra $13ca			bra 	Const2Byte
.140d					C32768:
.140d	a5 06		lda $06				lda 	TOS
.140f	48		pha				pha
.1410	a5 07		lda $07				lda 	TOS+1
.1412	48		pha				pha
.1413	a9 00		lda #$00			lda 	#(32768) & $FF
.1415	a0 80		ldy #$80			ldy 	#(32768) >> 8
.1417	80 b1		bra $13ca			bra 	Const2Byte

;******  Return to file: files.asm


;******  Processing file: words/data/stack.src

.1419					Drop:
.1419	68		pla				pla
.141a	85 07		sta $07				sta 	TOS+1
.141c	68		pla				pla
.141d	85 06		sta $06				sta 	TOS
.141f	4c 00 00	jmp $0000			jmp 	NextCode
.1422					TestDup:
.1422	a5 06		lda $06				lda 	TOS
.1424	05 07		ora $07				ora 	TOS+1
.1426	d0 03		bne $142b			bne 	Dup
.1428	4c 00 00	jmp $0000			jmp 	NextCode
.142b					Dup:
.142b	a5 06		lda $06				lda 	TOS
.142d	48		pha				pha
.142e	a5 07		lda $07				lda 	TOS+1
.1430	48		pha				pha
.1431	4c 00 00	jmp $0000			jmp 	NextCode
.1434					Swap:
.1434	86 10		stx $10				stx 	temp1
.1436	7a		ply				ply
.1437	fa		plx				plx
.1438	a5 06		lda $06				lda 	TOS
.143a	48		pha				pha
.143b	a5 07		lda $07				lda 	TOS+1
.143d	48		pha				pha
.143e	86 06		stx $06				stx 	TOS
.1440	84 07		sty $07				sty 	TOS+1
.1442	a6 10		ldx $10				ldx 	temp1
.1444	4c 00 00	jmp $0000			jmp 	NextCode
.1447					Over:
.1447	a5 06		lda $06				lda 	TOS
.1449	48		pha				pha
.144a	a5 07		lda $07				lda 	TOS+1
.144c	48		pha				pha
.144d	86 10		stx $10				stx 	temp1
.144f	ba		tsx				tsx
.1450	bd 04 01	lda $0104,x			lda 	stack3low,x
.1453	85 06		sta $06				sta 	TOS
.1455	bd 03 01	lda $0103,x			lda 	stack3High,x
.1458	85 07		sta $07				sta 	TOS+1
.145a	a6 10		ldx $10				ldx 	temp1
.145c	4c 00 00	jmp $0000			jmp 	NextCode
.145f					Nip:
.145f	68		pla				pla
.1460	68		pla				pla
.1461	4c 00 00	jmp $0000			jmp 	NextCode
.1464					Rot:
.1464	86 10		stx $10				stx 	temp1
.1466	ba		tsx				tsx
.1467	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.146a	a8		tay				tay
.146b	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.146e	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.1471	a5 06		lda $06				lda 	TOS
.1473	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1476	84 06		sty $06				sty 	TOS
.1478	bd 03 01	lda $0103,x			lda 	Stack3High,x
.147b	a8		tay				tay
.147c	bd 01 01	lda $0101,x			lda 	Stack2High,x
.147f	9d 03 01	sta $0103,x			sta 	Stack3High,x
.1482	a5 07		lda $07				lda 	TOS+1
.1484	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1487	84 07		sty $07				sty 	TOS+1
.1489	a6 10		ldx $10				ldx 	temp1
.148b	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/memory.src

.148e					ByteRead:
.148e	b2 06		lda ($06)			lda 	(TOS)
.1490	85 06		sta $06				sta 	TOS
.1492	64 07		stz $07				stz 	TOS+1
.1494	4c 00 00	jmp $0000			jmp 	NextCode
.1497					WordRead:
.1497	a0 01		ldy #$01			ldy 	#1
.1499	b1 06		lda ($06),y			lda 	(TOS),y
.149b	a8		tay				tay
.149c	b2 06		lda ($06)			lda 	(TOS)
.149e	85 06		sta $06				sta 	TOS
.14a0	84 07		sty $07				sty 	TOS+1
.14a2	4c 00 00	jmp $0000			jmp 	NextCode
.14a5					ByteWrite:
.14a5	68		pla				pla
.14a6	68		pla				pla
.14a7	92 06		sta ($06)			sta 	(TOS)
.14a9	68		pla				pla
.14aa	85 07		sta $07				sta 	TOS+1
.14ac	68		pla				pla
.14ad	85 06		sta $06				sta 	TOS
.14af	4c 00 00	jmp $0000			jmp 	NextCode
.14b2					WordWrite:
.14b2	68		pla				pla
.14b3	a0 01		ldy #$01			ldy 	#1
.14b5	91 06		sta ($06),y			sta 	(TOS),y
.14b7	68		pla				pla
.14b8	92 06		sta ($06)			sta 	(TOS)
.14ba	68		pla				pla
.14bb	85 07		sta $07				sta 	TOS+1
.14bd	68		pla				pla
.14be	85 06		sta $06				sta 	TOS
.14c0	4c 00 00	jmp $0000			jmp 	NextCode
.14c3					WordAdd:
.14c3	7a		ply				ply
.14c4	68		pla				pla
.14c5	18		clc				clc
.14c6	72 06		adc ($06)			adc 	(TOS)
.14c8	92 06		sta ($06)			sta 	(TOS)
.14ca	98		tya				tya
.14cb	a0 01		ldy #$01			ldy 	#1
.14cd	71 06		adc ($06),y			adc 	(TOS),y
.14cf	91 06		sta ($06),y			sta 	(TOS),y
.14d1	68		pla				pla
.14d2	85 07		sta $07				sta 	TOS+1
.14d4	68		pla				pla
.14d5	85 06		sta $06				sta 	TOS
.14d7	4c 00 00	jmp $0000			jmp 	NextCode
.14da					AllocateMemory:
.14da	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.14dc	48		pha				pha
.14dd	a5 07		lda $07				lda 	TOS+1
.14df	48		pha				pha
.14e0	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.14e2	85 06		sta $06				sta 	TOS
.14e4	a5 0f		lda $0f				lda 	nextFreeMem+1
.14e6	85 07		sta $07				sta 	TOS+1
.14e8	7a		ply				ply 								; advance the free ram pointer
.14e9	68		pla				pla
.14ea	20 1f 18	jsr $181f			jsr 	AdvanceFreeMem
.14ed	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/fornext.src

.14f0					ForHandler:
.14f0	e6 05		inc $05				inc 	rsp 						; bump the RSP
.14f2	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.14f4	c0 40		cpy #$40			cpy 	#$40 						; overflow
.14f6	f0 18		beq $1510			beq 	_FHOverflow
.14f8	a5 07		lda $07				lda 	TOS+1
.14fa	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.14fd	a5 06		lda $06				lda 	TOS
.14ff	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1502	a9 ff		lda #$ff			lda 	#$FF
.1504	99 80 07	sta $0780,y			sta 	returnStackX,y
.1507	68		pla				pla
.1508	85 07		sta $07				sta 	TOS+1
.150a	68		pla				pla
.150b	85 06		sta $06				sta 	TOS
.150d	4c 00 00	jmp $0000			jmp 	NextCode
.1510					_FHOverflow:
.1510	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1513	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>151b	45 20 4f 56 45 52 46 4c 4f 57 00
.1526					ForEncoder:
.1526	a9 f0		lda #$f0			lda 	#ForHandler & $FF 			; for handler
.1528	a0 14		ldy #$14			ldy 	#ForHandler >> 8
.152a	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.152d	a9 46		lda #$46			lda 	#"F" 						; for marker
.152f	20 5f 22	jsr $225f			jsr 	EncodePushPosMarkerOnStack
.1532	60		rts				rts
.1533					NextHandler:
.1533	da		phx				phx
.1534	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1536	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1539	c9 ff		cmp #$ff			cmp 	#$FF
.153b	d0 21		bne $155e			bne 	NHNoFor
.153d	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.1540	d0 03		bne $1545			bne 	_NHNoBorrow
.1542	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1545					_NHNoBorrow:
.1545	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1548	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.154b	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.154e	fa		plx				plx 								; restore X and re-test
.154f	09 00		ora #$00			ora 	#0
.1551	f0 05		beq $1558			beq 	_NHComplete 				; if so then complete, else loop.
.1553	e8		inx				inx 								; advance to branch
.1554	e8		inx				inx
.1555	4c 7a 16	jmp $167a			jmp 	BranchAlways
.1558					_NHComplete:
.1558	e8		inx				inx 								; skip over the branch quantity
.1559	c6 05		dec $05				dec 	rsp 						; drop the indx
.155b	4c 00 00	jmp $0000			jmp 	NextCode
.155e					NHNoFor:
.155e	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1561	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>1569	4f 52 20 53 43 4f 50 45 00
.1572					NextEncoder:
.1572	a9 33		lda #$33			lda 	#NextHandler & $FF 			; next code
.1574	a0 15		ldy #$15			ldy 	#NextHandler >> 8
.1576	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.1579	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.157b	c6 05		dec $05				dec 	rsp
.157d	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.1580	c9 46		cmp #$46			cmp 	#"F"
.1582	d0 07		bne $158b			bne 	_NENoFor
.1584	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.1587	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.158a	60		rts				rts
.158b					_NENoFor:
.158b	20 2c 24	jsr $242c			jsr 	ErrorHandler
>158e	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>1596	46 4f 52 00
.159a					GetIndex:
.159a	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.159c	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.159f	c9 ff		cmp #$ff			cmp 	#$FF
.15a1	d0 bb		bne $155e			bne 	NHNoFor
.15a3	a5 06		lda $06				lda 	TOS
.15a5	48		pha				pha
.15a6	a5 07		lda $07				lda 	TOS+1
.15a8	48		pha				pha
.15a9	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.15ac	38		sec				sec
.15ad	e9 01		sbc #$01			sbc 	#1
.15af	85 06		sta $06				sta 	TOS
.15b1	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.15b4	e9 00		sbc #$00			sbc 	#0
.15b6	85 07		sta $07				sta 	TOS+1
.15b8	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/ifelseendif.src

.15bb					IfHandler:
.15bb	4c 62 16	jmp $1662			jmp 	BranchIfZero
.15be					IfEncoder:
.15be	a9 bb		lda #$bb			lda 	#IfHandler & $FF 			; if handler
.15c0	a0 15		ldy #$15			ldy 	#IfHandler >> 8
.15c2	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.15c5	a9 49		lda #$49			lda 	#"I" 						; if marker
.15c7	20 5f 22	jsr $225f			jsr 	EncodePushPosMarkerOnStack
.15ca	a9 00		lda #$00			lda 	#0
.15cc	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte 			; dummy write.
.15cf	60		rts				rts
.15d0					ElseHandler:
.15d0	4c 78 16	jmp $1678			jmp 	BranchTestSucceedsNoPop
.15d3					ElseEncoder:
.15d3	a9 d0		lda #$d0			lda 	#ElseHandler & $FF 			; else handler
.15d5	a0 15		ldy #$15			ldy 	#ElseHandler >> 8
.15d7	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.15da	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.15dd	48		pha				pha
.15de	a9 00		lda #$00			lda 	#0 							; zero branch
.15e0	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.15e3	20 00 16	jsr $1600			jsr 	IfPatch 					; fix up the branch.
.15e6	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.15e8	20 5f 22	jsr $225f			jsr 	EncodePushPosMarkerOnStack
.15eb	68		pla				pla 								; address to patch
.15ec	a6 05		ldx $05				ldx 	rsp
.15ee	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.15f1	60		rts				rts
.15f2					EndIfHandler:
.15f2	4c 00 00	jmp $0000			jmp 	NextCode
.15f5					EndIfEncoder:
.15f5	a9 f2		lda #$f2			lda 	#EndIfHandler & $FF 		; endif handler
.15f7	a0 15		ldy #$15			ldy 	#EndIfHandler >> 8
.15f9	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.15fc	20 00 16	jsr $1600			jsr 	IfPatch
.15ff	60		rts				rts
.1600					IfPatch:
.1600	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1602	c6 05		dec $05				dec 	rsp
.1604	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1607	c9 49		cmp #$49			cmp 	#"I"
.1609	d0 0b		bne $1616			bne 	_NENoIf
.160b	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.160e	aa		tax				tax
.160f	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.1612	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1615	60		rts				rts
.1616					_NENoIf:
.1616	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1619	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>1621	49 46 00

;******  Return to file: files.asm


;******  Processing file: words/structures/repeatuntil.src

.1624					RepeatHandler:
.1624	4c 00 00	jmp $0000			jmp 	NextCode
.1627					RepeatEncoder:
.1627	a9 24		lda #$24			lda 	#RepeatHandler & $FF 		; repeat marker
.1629	a0 16		ldy #$16			ldy 	#RepeatHandler >> 8
.162b	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.162e	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.1630	20 5f 22	jsr $225f			jsr 	EncodePushPosMarkerOnStack
.1633	60		rts				rts
.1634					UntilHandler:
.1634	4c 62 16	jmp $1662			jmp 	BranchIfZero
.1637					UntilEncoder:
.1637	a9 34		lda #$34			lda 	#UntilHandler & $FF 		; until code
.1639	a0 16		ldy #$16			ldy 	#UntilHandler >> 8
.163b	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.163e	a6 05		ldx $05				ldx 	rsp 						; get stack offset and pop
.1640	c6 05		dec $05				dec 	rsp
.1642	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.1645	c9 52		cmp #$52			cmp 	#"R"
.1647	d0 07		bne $1650			bne 	_UENoRepeat
.1649	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.164c	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.164f	60		rts				rts
.1650					_UENoRepeat:
.1650	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1653	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>165b	52 45 50 45 41 54 00

;******  Return to file: files.asm


;******  Processing file: words/system/branch.src

.1662					BranchIfZero:
.1662	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.1664	05 07		ora $07				ora 	TOS+1
.1666	f0 0a		beq $1672			beq 	BranchTestSucceeds
.1668					BranchTestFails:
.1668	68		pla				pla
.1669	85 07		sta $07				sta 	TOS+1
.166b	68		pla				pla
.166c	85 06		sta $06				sta 	TOS
.166e	e8		inx				inx 								; skip over the relative branch.
.166f	4c 00 00	jmp $0000			jmp 	NextCode
.1672					BranchTestSucceeds:
.1672	68		pla				pla
.1673	85 07		sta $07				sta 	TOS+1
.1675	68		pla				pla
.1676	85 06		sta $06				sta 	TOS
.1678					BranchTestSucceedsNoPop:
.1678	e8		inx				inx 								; advance by two, to the offset
.1679	e8		inx				inx
.167a					BranchAlways:
.167a	8a		txa				txa 								; A = Y = position
.167b	a8		tay				tay 								; (IP),Y now points to the branch target
.167c	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.167e	aa		tax				tax 								; position back in this line.
.167f	ca		dex				dex
.1680	ca		dex				dex
.1681	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/callhandler.src

.1684					CallHandler:
.1684	e8		inx				inx									; bump X to the call address.
.1685	e8		inx				inx
.1686	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.1688	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.168a	c0 40		cpy #$40			cpy 	#$40 						; overflow
.168c	f0 54		beq $16e2			beq 	_CHOverflow
.168e	a5 04		lda $04				lda 	IP+1
.1690	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1693	a5 03		lda $03				lda 	IP
.1695	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1698	8a		txa				txa
.1699	99 80 07	sta $0780,y			sta 	returnStackX,y
.169c	8a		txa				txa 								; get the line number into temp1.
.169d	a8		tay				tay
.169e	b1 03		lda ($03),y			lda 	(IP),y
.16a0	85 10		sta $10				sta 	temp1
.16a2	c8		iny				iny
.16a3	b1 03		lda ($03),y			lda 	(IP),y
.16a5	85 11		sta $11				sta 	temp1+1
.16a7	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.16a9	85 03		sta $03				sta 	0+(IP)
.16ab	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.16ad	85 04		sta $04				sta 	1+(IP)
.16af	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.16b1	f0 17		beq $16ca			beq 	_CHFail
.16b3	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.16b5					_CHSearch:
.16b5	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.16b7	c5 10		cmp $10				cmp 	temp1
.16b9	f0 3e		beq $16f9			beq 	_CHFoundLSB
.16bb					_CHSearchNext:
.16bb	18		clc				clc
.16bc	a5 03		lda $03				lda 	IP
.16be	72 03		adc ($03)			adc 	(IP)
.16c0	85 03		sta $03				sta 	IP
.16c2	90 02		bcc $16c6			bcc 	_NoCarryAdv
.16c4	e6 04		inc $04				inc 	IP+1
.16c6					_NoCarryAdv:
.16c6	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.16c8	d0 eb		bne $16b5			bne 	_CHSearch
.16ca					_CHFail:
.16ca	20 2c 24	jsr $242c			jsr 	ErrorHandler
>16cd	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>16d5	44 20 44 45 46 49 4e 49 54 49 4f 4e 00
.16e2					_CHOverflow:
.16e2	20 2c 24	jsr $242c			jsr 	ErrorHandler
>16e5	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>16ed	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.16f9					_CHFoundLSB:
.16f9	c8		iny				iny 								; get MSB
.16fa	b1 03		lda ($03),y			lda 	(IP),y
.16fc	88		dey				dey
.16fd	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.16ff	d0 ba		bne $16bb			bne 	_CHSearchNext
.1701	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1703	b1 03		lda ($03),y			lda 	(IP),y
.1705	c9 ac		cmp #$ac			cmp 	#DefineCode & $FF
.1707	d0 c1		bne $16ca			bne 	_CHFail
.1709	c8		iny				iny
.170a	b1 03		lda ($03),y			lda 	(IP),y
.170c	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.170e	d0 ba		bne $16ca			bne 	_CHFail
.1710	c8		iny				iny
.1711	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1713	18		clc				clc
.1714	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.1716	aa		tax				tax
.1717	4c 00 00	jmp $0000			jmp 	NextCode
.171a					ReturnHandler:
.171a	a4 05		ldy $05				ldy 	rsp 						; get rsp
.171c	f0 15		beq $1733			beq 	_RHUnderflow 				; if -ve underflowed
.171e	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1720	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1723	85 04		sta $04				sta 	IP+1
.1725	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1728	85 03		sta $03				sta 	IP
.172a	b9 80 07	lda $0780,y			lda 	returnStackX,y
.172d	aa		tax				tax
.172e	f0 15		beq $1745			beq 	_RHInLoop 					; this means you have done :something for ; next
.1730	4c 00 00	jmp $0000			jmp 	NextCode
.1733					_RHUnderflow:
.1733	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1736	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>173e	52 45 54 55 52 4e 00
.1745					_RHInLoop:
.1745	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1748	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>1750	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.175d					CallHandlerDecode:
.175d	a9 03		lda #$03			lda 	#CTH_Call					; space
.175f	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1762	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.1764	aa		tax				tax
.1765	c8		iny				iny
.1766	b1 08		lda ($08),y			lda 	(srcPtr),y
.1768	a8		tay				tay
.1769	8a		txa				txa
.176a	20 a7 17	jsr $17a7			jsr 	FindLine 					; try to locate that line.
.176d	b0 11		bcs $1780			bcs 	_CHDFound 					; if found .....
.176f					_CHDLineOnly:
.176f	48		pha				pha
.1770	a9 3c		lda #$3c			lda 	#"<"
.1772	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1775	68		pla				pla
.1776	18		clc				clc 								; output unsigned
.1777	20 48 19	jsr $1948			jsr 	DecodeYAToBuffer
.177a	a9 3e		lda #$3e			lda 	#">"
.177c	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.177f	60		rts				rts
.1780					_CHDFound:
.1780	48		pha				pha 								; save YA
.1781	5a		phy				phy
.1782	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.1784	b1 10		lda ($10),y			lda 	(temp1),y
.1786	c9 ac		cmp #$ac			cmp 	#DefineCode & 255
.1788	d0 07		bne $1791			bne 	_CHDNoDefine
.178a	c8		iny				iny
.178b	b1 10		lda ($10),y			lda 	(temp1),y
.178d	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.178f	f0 04		beq $1795			beq 	_CHDFoundDefine
.1791					_CHDNoDefine:
.1791	7a		ply				ply									; restore the line number and print it in <>
.1792	68		pla				pla
.1793	80 da		bra $176f			bra 	_CHDLineOnly
.1795					_CHDFoundDefine:
.1795	68		pla				pla 								; throw saved line number.
.1796	68		pla				pla
.1797	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.1799					_CHDOutName:
.1799	c8		iny				iny 								; next
.179a	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.179c	48		pha				pha
.179d	29 7f		and #$7f			and 	#$7F
.179f	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.17a2	68		pla				pla
.17a3	0a		asl a				asl 	a 							; bit 7 to carry
.17a4	90 f3		bcc $1799			bcc 	_CHDOutName
.17a6	60		rts				rts
.17a7					FindLine:
.17a7	48		pha				pha 								; save registers
.17a8	da		phx				phx
.17a9	5a		phy				phy
.17aa	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.17ac	84 13		sty $13				sty 	temp2+1
.17ae	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17b0	85 10		sta $10				sta 	0+(temp1)
.17b2	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17b4	85 11		sta $11				sta 	1+(temp1)
.17b6					_FLLoop:
.17b6	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.17b8	18		clc				clc									; if so exit with CC.
.17b9	f0 1d		beq $17d8			beq 	_FLExit
.17bb	a0 01		ldy #$01			ldy 	#1 							; check line # match
.17bd	b1 10		lda ($10),y			lda 	(temp1),y
.17bf	c5 12		cmp $12				cmp 	temp2
.17c1	d0 08		bne $17cb			bne 	_FLNext
.17c3	c8		iny				iny
.17c4	b1 10		lda ($10),y			lda 	(temp1),y
.17c6	c5 13		cmp $13				cmp 	temp2+1
.17c8	38		sec				sec 								; if so exit with CS
.17c9	f0 0d		beq $17d8			beq 	_FLExit
.17cb					_FLNext:
.17cb	18		clc				clc
.17cc	a5 10		lda $10				lda 	temp1
.17ce	72 10		adc ($10)			adc 	(temp1)
.17d0	85 10		sta $10				sta 	temp1
.17d2	90 02		bcc $17d6			bcc 	_NoCarryAdv
.17d4	e6 11		inc $11				inc 	temp1+1
.17d6					_NoCarryAdv:
.17d6	80 de		bra $17b6			bra 	_FLLoop 					; keep looking.
.17d8					_FLExit:
.17d8	7a		ply				ply
.17d9	fa		plx				plx
.17da	68		pla				pla
.17db	60		rts				rts
.17dc	18		clc				clc
.17dd	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/clrnew.src

.17de					NewHandler:
.17de	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.17e1	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.17e4	4c a6 23	jmp $23a6			jmp 	WarmStartBlankStack
.17e7					ClrHandler:
.17e7	86 10		stx $10				stx 	temp1
.17e9	a2 80		ldx #$80			ldx 	#NumberStackBase
.17eb	9a		txs				txs
.17ec	a6 10		ldx $10				ldx 	temp1
.17ee	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.17f1	4c 00 00	jmp $0000			jmp 	NextCode
.17f4					ClearVariableSpace:
.17f4	64 05		stz $05				stz 	rsp
.17f6	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17f8	85 0e		sta $0e				sta 	0+(nextFreeMem)
.17fa	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17fc	85 0f		sta $0f				sta 	1+(nextFreeMem)
.17fe	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1800					_CVSHashClear:
.1800	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1802	99 40 06	sta $0640,y			sta 	hashTable,y
.1805	88		dey				dey
.1806	10 f8		bpl $1800			bpl 	_CVSHashClear
.1808					_CVSFindEnd:
.1808	18		clc				clc
.1809	a5 0e		lda $0e				lda 	nextFreeMem
.180b	72 0e		adc ($0e)			adc 	(nextFreeMem)
.180d	85 0e		sta $0e				sta 	nextFreeMem
.180f	90 02		bcc $1813			bcc 	_NoCarryAdv
.1811	e6 0f		inc $0f				inc 	nextFreeMem+1
.1813					_NoCarryAdv:
.1813	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1815	d0 f1		bne $1808			bne 	_CVSFindEnd
.1817	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.1819	a0 00		ldy #$00			ldy 	#0
.181b	20 1f 18	jsr $181f			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.181e	60		rts				rts 								; free mem pointer pointing to the last zero offset
.181f					AdvanceFreeMem:
.181f	18		clc				clc
.1820	65 0e		adc $0e				adc 	nextFreeMem
.1822	85 0e		sta $0e				sta 	nextFreeMem
.1824	98		tya				tya
.1825	65 0f		adc $0f				adc 	nextFreeMem+1
.1827	85 0f		sta $0f				sta 	nextFreeMem+1
.1829	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/debug.src

.182a					ExitDump:
.182a	ba		tsx				tsx 								; save Data Stack in temp1
.182b	86 10		stx $10				stx 	temp1
.182d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1830					BreakCmd:
>1830	ff						.byte 	$FF
.1831	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/decode.src

.1834					DecodeLineIntoBufPtr:
.1834	48		pha				pha
.1835	da		phx				phx
.1836	5a		phy				phy
.1837	85 08		sta $08				sta 	srcPtr 						; save the source line.
.1839	84 09		sty $09				sty 	srcPtr+1
.183b	90 1b		bcc $1858			bcc 	_DecodeNoLineNumber
.183d	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.183f	b1 08		lda ($08),y			lda 	(srcPtr),y
.1841	aa		tax				tax
.1842	c8		iny				iny
.1843	b1 08		lda ($08),y			lda 	(srcPtr),y
.1845	a8		tay				tay
.1846	8a		txa				txa
.1847	18		clc				clc
.1848	20 48 19	jsr $1948			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.184b	aa		tax				tax 								; count in X
.184c					_DecodeLineSpace:
.184c	e0 05		cpx #$05			cpx 	#5
.184e	f0 08		beq $1858			beq 	_DecodeNoLineNumber
.1850	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1852	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1855	e8		inx				inx
.1856	80 f4		bra $184c			bra 	_DecodeLineSpace
.1858					_DecodeNoLineNumber:
.1858	a0 03		ldy #$03			ldy 	#3 							; initial position.
.185a					_DecodeLoop:
.185a	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.185c	85 10		sta $10				sta 	temp1 						; must be an execution address.
.185e	c8		iny				iny
.185f	b1 08		lda ($08),y			lda 	(srcPtr),y
.1861	85 11		sta $11				sta 	temp1+1
.1863	c8		iny				iny 								; y points to the byte after it.
.1864	a5 10		lda $10				lda 	temp1
.1866	c9 6a		cmp #$6a			cmp 	#NextLine & $FF
.1868	d0 06		bne $1870			bne 	_DecodeNotEOL
.186a	a5 11		lda $11				lda 	temp1+1
.186c	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.186e	f0 0b		beq $187b			beq 	_DecodeEOL
.1870					_DecodeNotEOL:
.1870	20 83 18	jsr $1883			jsr 	IdentifyCodeWord
.1873	20 d1 18	jsr $18d1			jsr 	DecodeFoundWord
.1876	20 bb 18	jsr $18bb			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1879	80 df		bra $185a			bra 	_DecodeLoop 				; and go round again
.187b					_DecodeEOL:
.187b	a9 00		lda #$00			lda 	#0
.187d	92 0a		sta ($0a)			sta 	(bufPtr)
.187f	7a		ply				ply 								; restore registers and exit
.1880	fa		plx				plx
.1881	68		pla				pla
.1882	60		rts				rts
.1883					IdentifyCodeWord:
.1883	5a		phy				phy 								; save current position on the stack.
.1884	a9 6a		lda #$6a			lda 	#(Dictionary) & $FF
.1886	85 0c		sta $0c				sta 	0+(matchPtr)
.1888	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.188a	85 0d		sta $0d				sta 	1+(matchPtr)
.188c					_DecodeIdentify:
.188c	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.188e	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1890	c5 10		cmp $10				cmp 	temp1
.1892	d0 07		bne $189b			bne 	_DecodeIdNext
.1894	c8		iny				iny
.1895	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1897	c5 11		cmp $11				cmp 	temp1+1
.1899	f0 1e		beq $18b9			beq 	_DecodeIdFound
.189b					_DecodeIdNext:
.189b	18		clc				clc
.189c	b2 0c		lda ($0c)			lda 	(matchPtr)
.189e	f0 0a		beq $18aa			beq 	_DecodeIdIssue
.18a0	65 0c		adc $0c				adc 	matchPtr
.18a2	85 0c		sta $0c				sta 	matchPtr
.18a4	90 e6		bcc $188c			bcc 	_DecodeIdentify
.18a6	e6 0d		inc $0d				inc 	matchPtr+1
.18a8	80 e2		bra $188c			bra 	_DecodeIdentify
.18aa					_DecodeIdIssue:
.18aa	20 2c 24	jsr $242c			jsr 	ErrorHandler
>18ad	42 41 44 20 50 52 4f 47				.text 	"BAD PROGRAM",0
>18b5	52 41 4d 00
.18b9					_DecodeIdFound:
.18b9	7a		ply				ply 								; restore position.
.18ba	60		rts				rts
.18bb					AdvanceToNext:
.18bb	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.18bc	a0 01		ldy #$01			ldy 	#1
.18be	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.18c0	29 03		and #$03			and 	#3 							; bits 0-1.
.18c2	7a		ply				ply
.18c3	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.18c5	d0 02		bne $18c9			bne 	_ATN012
.18c7	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.18c9					_ATN012:
.18c9	85 12		sta $12				sta 	temp2 						; now add that to Y
.18cb	98		tya				tya
.18cc	18		clc				clc
.18cd	65 12		adc $12				adc 	temp2
.18cf	a8		tay				tay
.18d0	60		rts				rts
.18d1					DecodeFoundWord:
.18d1	5a		phy				phy 								; save current position
.18d2	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.18d4	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.18d6	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.18d8	29 10		and #$10			and 	#$10
.18da	d0 0e		bne $18ea			bne 	_DFWSpecialDecoder
.18dc	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.18de	30 08		bmi $18e8			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.18e0	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.18e2	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.18e5	20 03 19	jsr $1903			jsr 	DecodeCurrentWord 			; expand that.
.18e8					_DFWExit:
.18e8	7a		ply				ply 								; restore current position
.18e9	60		rts				rts
.18ea					_DFWSpecialDecoder:
.18ea	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.18ec	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.18ee	85 12		sta $12				sta 	temp2
.18f0	c8		iny				iny
.18f1	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.18f3	85 13		sta $13				sta 	temp2+1
.18f5	7a		ply				ply 	 							; restore current position into Y
.18f6	48		pha				pha 								; save registers
.18f7	da		phx				phx
.18f8	5a		phy				phy
.18f9	20 00 19	jsr $1900			jsr 	_DFWCallDecoder				; call the decoder routine
.18fc	7a		ply				ply 								; restore registers and exit
.18fd	fa		plx				plx
.18fe	68		pla				pla
.18ff	60		rts				rts
.1900					_DFWCallDecoder:
.1900	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1903					DecodeCurrentWord:
.1903	5a		phy				phy
.1904	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1906	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1908	a0 04		ldy #$04			ldy 	#4 							; original offset
.190a	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.190b	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.190c	4a		lsr a				lsr 	a 							; bit set.
.190d	4a		lsr a				lsr 	a
.190e	4a		lsr a				lsr 	a 							; decoder bit
.190f	90 02		bcc $1913			bcc 	_DWBNoDec
.1911	c8		iny				iny
.1912	c8		iny				iny
.1913					_DWBNoDec:
.1913	4a		lsr a				lsr 	a
.1914	90 02		bcc $1918			bcc 	_DWBNoEnc
.1916	c8		iny				iny
.1917	c8		iny				iny
.1918					_DWBNoEnc:
.1918					_DWBWordOut:
.1918	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.191a	48		pha				pha
.191b	29 7f		and #$7f			and 	#$7F
.191d	20 26 19	jsr $1926			jsr		DecodeWriteBuffer
.1920	c8		iny				iny
.1921	68		pla				pla
.1922	10 f4		bpl $1918			bpl 	_DWBWordOut
.1924	7a		ply				ply 								; restore Y and exit
.1925	60		rts				rts
.1926					DecodeWriteBuffer:
.1926	92 0a		sta ($0a)			sta 	(bufPtr)
.1928	e6 0a		inc $0a				inc 	bufPtr
.192a	d0 02		bne $192e			bne 	_DWBNoCarry
.192c	e6 0b		inc $0b				inc 	bufPtr+1
.192e					_DWBNoCarry:
.192e	60		rts				rts
.192f					DecodeOutputData:
.192f	48		pha				pha
.1930	da		phx				phx
.1931	5a		phy				phy
.1932	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1934	aa		tax				tax
.1935					_DODLoop:
.1935	ca		dex				dex 								; done it all ?
.1936	f0 0c		beq $1944			beq		_DODExit
.1938	c8		iny				iny 								; output next character
.1939	b1 08		lda ($08),y			lda 	(srcPtr),y
.193b	29 7f		and #$7f			and 	#$7F
.193d	f0 f6		beq $1935			beq 	_DODLoop 					; don't print NULL
.193f	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1942	80 f1		bra $1935			bra 	_DODLoop
.1944					_DODExit:
.1944	7a		ply				ply
.1945	fa		plx				plx
.1946	68		pla				pla
.1947	60		rts				rts
.1948					DecodeYAToBuffer:
.1948	da		phx				phx
.1949	5a		phy				phy
.194a	48		pha				pha
.194b	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.194d	85 12		sta $12				sta 	temp2
.194f	a5 0b		lda $0b				lda 	bufPtr+1
.1951	85 13		sta $13				sta 	temp2+1
.1953	68		pla				pla
.1954	20 a3 1d	jsr $1da3			jsr 	ConvertToStringMain 		; convert YA to string there
.1957	aa		tax				tax 								; chars output to X
.1958	18		clc				clc
.1959	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.195b	85 0a		sta $0a				sta 	bufPtr
.195d	90 02		bcc $1961			bcc 	_DYABNoCarry
.195f	e6 0b		inc $0b				inc 	bufPtr+1
.1961					_DYABNoCarry:
.1961	8a		txa				txa 								; count in A
.1962	7a		ply				ply									; restore and exit.
.1963	fa		plx				plx
.1964	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/edit.src

.1965					EditProgram:
.1965	20 e2 19	jsr $19e2			jsr 	EDFindLine					; find line address -> temp1
.1968	90 0f		bcc $1979			bcc 	_EPNotFound 				; if missing don't delete it.
.196a	a5 10		lda $10				lda 	temp1 						; save line address
.196c	48		pha				pha
.196d	a5 11		lda $11				lda 	temp1+1
.196f	48		pha				pha
.1970	20 87 19	jsr $1987			jsr 	EDDeleteLine 				; delete the line
.1973	68		pla				pla 								; restore line address
.1974	85 11		sta $11				sta 	temp1+1
.1976	68		pla				pla
.1977	85 10		sta $10				sta 	temp1
.1979					_EPNotFound:
.1979	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.197c	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.197e	f0 03		beq $1983			beq 	_EPNoInsert
.1980	20 aa 19	jsr $19aa			jsr 	EDInsertLine 				; insert line back in.
.1983					_EPNoInsert:
.1983	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace
.1986	60		rts				rts
.1987					EDDeleteLine:
.1987	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace
.198a	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.198c	a2 00		ldx #$00			ldx 	#0
.198e	b1 10		lda ($10),y			lda 	(temp1),y
.1990	a8		tay				tay 								; put in Y
.1991					_EDDelLoop:
.1991	b1 10		lda ($10),y			lda 	(temp1),y 					; get it
.1993	81 10		sta ($10,x)			sta 	(temp1,x) 					; write it.
.1995	a5 10		lda $10				lda 	temp1 						; check if pointer has reached the end of
.1997	c5 0e		cmp $0e				cmp		nextFreeMem 				; low memory. We will have copied down an
.1999	d0 06		bne $19a1			bne 	_EDDelNext 					; extra pile of stuff - technically should
.199b	a5 11		lda $11				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.199d	c5 0f		cmp $0f				cmp 	nextFreeMem+1				; doesn't really matter.
.199f	f0 08		beq $19a9			beq		_EDDelExit
.19a1					_EDDelNext:
.19a1	e6 10		inc $10				inc 	temp1 						; go to next byte.
.19a3	d0 ec		bne $1991			bne 	_EDDelLoop
.19a5	e6 11		inc $11				inc 	temp1+1
.19a7	80 e8		bra $1991			bra 	_EDDelLoop
.19a9					_EDDelExit:
.19a9	60		rts				rts
.19aa					EDInsertLine:
.19aa	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace
.19ad	a5 0e		lda $0e				lda 	nextFreeMem 				; copy high memory to temp3
.19af	85 14		sta $14				sta 	temp3
.19b1	a5 0f		lda $0f				lda 	nextFreeMem+1
.19b3	85 15		sta $15				sta 	temp3+1
.19b5	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.19b8	a2 00		ldx #$00			ldx 	#0
.19ba					_EDInsLoop:
.19ba	a1 14		lda ($14,x)			lda 	(temp3,x)					; copy it up
.19bc	91 14		sta ($14),y			sta 	(temp3),y
.19be	a5 14		lda $14				lda 	temp3 						; reached the insert point (temp1)
.19c0	c5 10		cmp $10				cmp 	temp1
.19c2	d0 06		bne $19ca			bne 	_EDINextShift
.19c4	a5 15		lda $15				lda 	temp3+1
.19c6	c5 11		cmp $11				cmp 	temp1+1
.19c8	f0 0a		beq $19d4			beq 	_EDIShiftOver
.19ca					_EDINextShift:
.19ca	a5 14		lda $14				lda 	temp3 						; decrement the copy pointer.
.19cc	d0 02		bne $19d0			bne 	_EDINoBorrow
.19ce	c6 15		dec $15				dec 	temp3+1
.19d0					_EDINoBorrow:
.19d0	c6 14		dec $14				dec 	temp3
.19d2	80 e6		bra $19ba			bra 	_EDInsLoop
.19d4					_EDIShiftOver:
.19d4	a0 00		ldy #$00			ldy 	#0
.19d6					_EDICopyCode:
.19d6	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.19d9	91 10		sta ($10),y			sta 	(temp1),y 					; write out
.19db	c8		iny				iny 								; bump pointers
.19dc	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.19df	d0 f5		bne $19d6			bne 	_EDICopyCode
.19e1	60		rts				rts
.19e2					EDFindLine:
.19e2	a9 00		lda #$00			lda 	#(programMemory) & $FF
.19e4	85 10		sta $10				sta 	0+(temp1)
.19e6	a9 40		lda #$40			lda 	#(programMemory) >> 8
.19e8	85 11		sta $11				sta 	1+(temp1)
.19ea					_EDFLLoop:
.19ea	b2 10		lda ($10)			lda 	(temp1) 					; check offset
.19ec	f0 24		beq $1a12			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.19ee	a0 01		ldy #$01			ldy 	#1							; look at line #
.19f0	38		sec				sec
.19f1	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.19f4	f1 10		sbc ($10),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.19f6	aa		tax				tax	 								; this will return 10.
.19f7	ad 12 09	lda $0912			lda 	encodeBuffer+2
.19fa	c8		iny				iny
.19fb	f1 10		sbc ($10),y			sbc 	(temp1),y
.19fd	90 13		bcc $1a12			bcc 	_EDFLFail					; if target < current then failed.
.19ff	d0 04		bne $1a05			bne 	_EDFLNext 					; if non-zero then goto next
.1a01	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1a03	f0 0f		beq $1a14			beq 	_EDFLFound
.1a05					_EDFLNext:
.1a05	18		clc				clc
.1a06	a5 10		lda $10				lda 	temp1
.1a08	72 10		adc ($10)			adc 	(temp1)
.1a0a	85 10		sta $10				sta 	temp1
.1a0c	90 02		bcc $1a10			bcc 	_NoCarryAdv
.1a0e	e6 11		inc $11				inc 	temp1+1
.1a10					_NoCarryAdv:
.1a10	80 d8		bra $19ea			bra 	_EDFLLoop
.1a12					_EDFLFail:
.1a12	18		clc				clc
.1a13	60		rts				rts
.1a14					_EDFLFound:
.1a14	38		sec				sec
.1a15	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/list.src

.1a16					ListCode:
.1a16	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1a18	64 1f		stz $1f				stz 	ListLowest+1
.1a1a	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1a1c	85 1d		sta $1d				sta 	ListCount
.1a1e	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1a20	85 18		sta $18				sta 	0+(listPtr)
.1a22	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1a24	85 19		sta $19				sta 	1+(listPtr)
.1a26	86 10		stx $10				stx 	temp1						; S->A
.1a28	ba		tsx				tsx
.1a29	8a		txa				txa
.1a2a	a6 10		ldx $10				ldx 	temp1
.1a2c	c9 80		cmp #$80			cmp 	#NumberStackBase
.1a2e	f0 0e		beq $1a3e			beq 	_LCLoop
.1a30	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1a32	85 1e		sta $1e				sta 	ListLowest
.1a34	a5 07		lda $07				lda 	TOS+1
.1a36	85 1f		sta $1f				sta 	ListLowest+1
.1a38	68		pla				pla
.1a39	85 07		sta $07				sta 	TOS+1
.1a3b	68		pla				pla
.1a3c	85 06		sta $06				sta 	TOS
.1a3e					_LCLoop:
.1a3e	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1a40	f0 4c		beq $1a8e			beq 	_LCExit
.1a42	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1a44	b1 18		lda ($18),y			lda 	(listPtr),y
.1a46	c5 1e		cmp $1e				cmp 	ListLowest
.1a48	c8		iny				iny
.1a49	b1 18		lda ($18),y			lda 	(listPtr),y
.1a4b	e5 1f		sbc $1f				sbc 	ListLowest+1
.1a4d	90 32		bcc $1a81			bcc 	_LCNext
.1a4f	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1a51	85 0a		sta $0a				sta 	0+(bufPtr)
.1a53	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1a55	85 0b		sta $0b				sta 	1+(bufPtr)
.1a57	a5 18		lda $18				lda 	listPtr 					; output the line.
.1a59	a4 19		ldy $19				ldy 	listPtr+1
.1a5b	38		sec				sec
.1a5c	20 34 18	jsr $1834			jsr 	DecodeLineIntoBufPtr
.1a5f	a9 02		lda #$02			lda 	#CTH_LineNo
.1a61	20 98 24	jsr $2498			jsr 	ExternColour
.1a64	a0 ff		ldy #$ff			ldy 	#255
.1a66					_LCLoop2:
.1a66	c8		iny				iny
.1a67	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1a6a	f0 0e		beq $1a7a			beq 	_LCEnd
.1a6c	c9 20		cmp #$20			cmp 	#32
.1a6e	b0 05		bcs $1a75			bcs 	_LCPrint
.1a70	20 98 24	jsr $2498			jsr 	ExternColour
.1a73	a9 20		lda #$20			lda 	#32
.1a75					_LCPrint:
.1a75	20 8c 24	jsr $248c			jsr 	ExternPrint
.1a78	80 ec		bra $1a66			bra 	_LCLoop2
.1a7a	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1a7c	20 8c 24	jsr $248c			jsr 	ExternPrint
.1a7f	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1a81					_LCNext:
.1a81	18		clc				clc
.1a82	a5 18		lda $18				lda 	listPtr
.1a84	72 18		adc ($18)			adc 	(listPtr)
.1a86	85 18		sta $18				sta 	listPtr
.1a88	90 02		bcc $1a8c			bcc 	_NoCarryAdv
.1a8a	e6 19		inc $19				inc 	listPtr+1
.1a8c					_NoCarryAdv:
.1a8c	80 b0		bra $1a3e			bra 	_LCLoop 					; go round again.
.1a8e					_LCExit:
.1a8e	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/miscellany.src

.1a91					RunProgram:
.1a91	86 10		stx $10				stx 	temp1
.1a93	a2 80		ldx #$80			ldx 	#NumberStackBase
.1a95	9a		txs				txs
.1a96	a6 10		ldx $10				ldx 	temp1
.1a98	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace 			; clear variables etc.
.1a9b	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1a9d	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1a9f	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1aa2	4c 00 00	jmp $0000			jmp 	NextCode
.1aa5					Call6502:
.1aa5	a5 06		lda $06				lda 	TOS 						; copy call address
.1aa7	85 10		sta $10				sta 	temp1
.1aa9	a5 07		lda $07				lda 	TOS+1
.1aab	85 11		sta $11				sta 	temp1+1
.1aad	68		pla				pla
.1aae	85 07		sta $07				sta 	TOS+1
.1ab0	68		pla				pla
.1ab1	85 06		sta $06				sta 	TOS
.1ab3	20 b9 1a	jsr $1ab9			jsr 	_CallTemp1 					; call it
.1ab6	4c 00 00	jmp $0000			jmp 	NextCode
.1ab9					_CallTemp1:
.1ab9	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1abc					AssertCode:
.1abc	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1abe	05 07		ora $07				ora 	TOS+1
.1ac0	f0 09		beq $1acb			beq 	_ASFail 					; if zero fail
.1ac2	68		pla				pla
.1ac3	85 07		sta $07				sta 	TOS+1
.1ac5	68		pla				pla
.1ac6	85 06		sta $06				sta 	TOS
.1ac8	4c 00 00	jmp $0000			jmp 	NextCode
.1acb					_ASFail:
.1acb	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1ace	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1ad5					StopCode:
.1ad5	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1ad8	53 54 4f 50 00					.text 	"STOP",0
.1add					EndProgram:
.1add	4c ad 23	jmp $23ad			jmp 	WarmStart
.1ae0					VlistCode:
.1ae0	a9 6a		lda #$6a			lda 	#(Dictionary) & $FF
.1ae2	85 10		sta $10				sta 	0+(temp1)
.1ae4	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1ae6	85 11		sta $11				sta 	1+(temp1)
.1ae8	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1aea	b1 10		lda ($10),y			lda 	(temp1),y
.1aec	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1aee	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1aef	4a		lsr a				lsr 	a
.1af0	4a		lsr a				lsr		a
.1af1	4a		lsr a				lsr 	a
.1af2	4a		lsr a				lsr 	a 							; add those bits in
.1af3	90 02		bcc $1af7			bcc 	_VLNoDec
.1af5	c8		iny				iny
.1af6	c8		iny				iny
.1af7					_VLNoDec:
.1af7	4a		lsr a				lsr 	a
.1af8	90 02		bcc $1afc			bcc 	_VLNoEnc
.1afa	c8		iny				iny
.1afb	c8		iny				iny
.1afc					_VLNoEnc:
.1afc	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1afe	c9 24		cmp #$24			cmp 	#"$"
.1b00	d0 06		bne $1b08			bne 	_VLPrint
.1b02	c8		iny				iny
.1b03	51 10		eor ($10),y			eor 	(temp1),y
.1b05	f0 13		beq $1b1a			beq 	_VLNext
.1b07	88		dey				dey
.1b08					_VLPrint:
.1b08	b1 10		lda ($10),y			lda 	(temp1),y
.1b0a	48		pha				pha
.1b0b	c8		iny				iny
.1b0c	29 7f		and #$7f			and 	#$7F
.1b0e	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b11	68		pla				pla
.1b12	0a		asl a				asl 	a
.1b13	90 f3		bcc $1b08			bcc 	_VLPrint
.1b15	a9 20		lda #$20			lda 	#32
.1b17	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b1a					_VLNext:
.1b1a	18		clc				clc 								; go to next
.1b1b	b2 10		lda ($10)			lda 	(temp1)
.1b1d	65 10		adc $10				adc 	temp1
.1b1f	85 10		sta $10				sta 	temp1
.1b21	90 02		bcc $1b25			bcc 	_VLNoCarry
.1b23	e6 11		inc $11				inc 	temp1+1
.1b25					_VLNoCarry:
.1b25	b2 10		lda ($10)			lda 	(temp1)
.1b27	d0 bf		bne $1ae8			bne 	_VLLoop
.1b29	a9 0d		lda #$0d			lda 	#13
.1b2b	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b2e	4c 00 00	jmp $0000			jmp 	NextCode
.1b31					DumpStack:
.1b31	a9 5b		lda #$5b			lda		#"["
.1b33	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b36	86 10		stx $10				stx 	temp1 						; X -> A
.1b38	ba		tsx				tsx
.1b39	8a		txa				txa
.1b3a	a6 10		ldx $10				ldx 	temp1
.1b3c	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.1b3e	f0 2f		beq $1b6f			beq 	_DSExit
.1b40	48		pha				pha 								; save it
.1b41	a9 07		lda #$07			lda 	#COL_WHITE
.1b43	20 98 24	jsr $2498			jsr 	ExternColour
.1b46	a5 06		lda $06				lda 	TOS 						; print TOS then stack values backwards
.1b48	a4 07		ldy $07				ldy 	TOS+1
.1b4a	38		sec				sec 								; print unsigned.
.1b4b	20 7d 1d	jsr $1d7d			jsr 	PrintYA
.1b4e	a9 06		lda #$06			lda 	#COL_CYAN
.1b50	20 98 24	jsr $2498			jsr 	ExternColour
.1b53	7a		ply				ply 								; restore offset
.1b54					_DSLoop:
.1b54	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.1b56	f0 17		beq $1b6f			beq 	_DSExit
.1b58	a9 20		lda #$20			lda 	#" " 						; space
.1b5a	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b5d	5a		phy				phy 								; save pos
.1b5e	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.1b61	48		pha				pha
.1b62	b9 02 01	lda $0102,y			lda 	$0102,y
.1b65	7a		ply				ply
.1b66	38		sec				sec
.1b67	20 7d 1d	jsr $1d7d			jsr 	PrintYA 					; print it
.1b6a	7a		ply				ply 								; restore and advance pos
.1b6b	c8		iny				iny
.1b6c	c8		iny				iny
.1b6d	80 e5		bra $1b54			bra 	_DSLoop
.1b6f					_DSExit:
.1b6f	a9 5d		lda #$5d			lda		#"]"
.1b71	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b74	a9 0d		lda #$0d			lda 	#13
.1b76	20 8c 24	jsr $248c			jsr 	ExternPrint
.1b79	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/old.src

.1b7c					OldCode:
.1b7c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1b7e	85 08		sta $08				sta 	0+(srcPtr)
.1b80	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1b82	85 09		sta $09				sta 	1+(srcPtr)
.1b84	a0 03		ldy #$03			ldy 	#3 							; start after line# / offset
.1b86					_OldLoop:
.1b86	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1b88	85 10		sta $10				sta 	temp1 						; must be an execution address.
.1b8a	c8		iny				iny
.1b8b	b1 08		lda ($08),y			lda 	(srcPtr),y
.1b8d	85 11		sta $11				sta 	temp1+1
.1b8f	c8		iny				iny
.1b90	a5 10		lda $10				lda 	temp1 						; have we reached the end ?
.1b92	c9 6a		cmp #$6a			cmp 	#NextLine & $FF
.1b94	d0 06		bne $1b9c			bne 	_OldNotEOL
.1b96	a5 11		lda $11				lda 	temp1+1
.1b98	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.1b9a	f0 08		beq $1ba4			beq 	_OldEOL
.1b9c					_OldNotEOL:
.1b9c	20 83 18	jsr $1883			jsr 	IdentifyCodeWord			; what is it ?
.1b9f	20 bb 18	jsr $18bb			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1ba2	80 e2		bra $1b86			bra	 	_OldLoop
.1ba4					_OldEOL:
.1ba4	8c 00 40	sty $4000			sty 	ProgramMemory 				; Y is the offset.
.1ba7	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1baa	4c a6 23	jmp $23a6			jmp 	WarmStartBlankStack

;******  Return to file: files.asm


;******  Processing file: words/system/saveload.src

.1bad					System_Save:
.1bad	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace  		; make sure start/end are right
.1bb0	20 2f 1c	jsr $1c2f			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.1bb3	20 db 1b	jsr $1bdb			jsr 	SLGetFileName 				; get filename -> temp3
.1bb6	a5 0e		lda $0e				lda 	nextFreeMem 				; end address
.1bb8	85 10		sta $10				sta 	temp1
.1bba	a5 0f		lda $0f				lda 	nextFreeMem+1
.1bbc	85 11		sta $11				sta 	temp1+1
.1bbe	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1bc0	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1bc2	20 e0 24	jsr $24e0			jsr 	ExternSave
.1bc5	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace  		; make sure start/end are right
.1bc8	4c a6 23	jmp $23a6			jmp 	WarmStartBlankStack
.1bcb					System_Load:
.1bcb	20 db 1b	jsr $1bdb			jsr 	SLGetFileName 				; get filename -> temp3
.1bce	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1bd0	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1bd2	20 16 25	jsr $2516			jsr 	ExternLoad
.1bd5	20 f4 17	jsr $17f4			jsr 	ClearVariableSpace 			; reset everything.
.1bd8	4c a6 23	jmp $23a6			jmp 	WarmStartBlankStack
.1bdb					SLGetFileName:
.1bdb	ba		tsx				tsx
.1bdc	e0 80		cpx #$80			cpx 	#NumberStackBase
.1bde	f0 3a		beq $1c1a			beq 	_SLFNFail
.1be0	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.1be2	85 14		sta $14				sta 	temp3
.1be4	a9 08		lda #$08			lda 	#textBuffer >> 8
.1be6	85 15		sta $15				sta 	temp3+1
.1be8	a0 00		ldy #$00			ldy 	#0
.1bea	b1 06		lda ($06),y	_SLCopy:lda 	(TOS),y
.1bec	91 14		sta ($14),y			sta 	(temp3),y
.1bee	c8		iny				iny
.1bef	c9 00		cmp #$00			cmp		#0
.1bf1	d0 f7		bne $1bea			bne 	_SLCopy
.1bf3	88		dey				dey
.1bf4	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.1bf6					_SLCheckEnd:
.1bf6	88		dey				dey
.1bf7	bd 2a 1c	lda $1c2a,x			lda 	_SLFNExtension,x
.1bfa	d1 14		cmp ($14),y			cmp 	(temp3),y
.1bfc	d0 05		bne $1c03			bne 	_SLNoExtension
.1bfe	ca		dex				dex
.1bff	10 f5		bpl $1bf6			bpl 	_SLCheckEnd
.1c01	80 16		bra $1c19			bra 	_SLExit
.1c03					_SLNoExtension:
.1c03	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.1c05					_SLFindend:
.1c05	c8		iny				iny
.1c06	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c09	d0 fa		bne $1c05			bne 	_SLFindend
.1c0b	a2 00		ldx #$00			ldx 	#0
.1c0d					_SLAppend:
.1c0d	bd 2a 1c	lda $1c2a,x			lda 	_SLFNExtension,x
.1c10	99 10 08	sta $0810,y			sta 	textBuffer,y
.1c13	e8		inx				inx
.1c14	c8		iny				iny
.1c15	c9 00		cmp #$00			cmp 	#0
.1c17	d0 f4		bne $1c0d			bne 	_SLAppend
.1c19					_SLExit:
.1c19	60		rts				rts
.1c1a					_SLFNFail:
.1c1a	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1c1d	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>1c25	4e 41 4d 45 00
.1c2a					_SLFNExtension:
>1c2a	2e 52 50 4c 00					.text 	".RPL",0
.1c2f					ExtendWithDictionary:
.1c2f	20 58 1c	jsr $1c58			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.1c32	a9 6a		lda #$6a			lda 	#(Dictionary) & $FF
.1c34	85 10		sta $10				sta 	0+(temp1)
.1c36	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1c38	85 11		sta $11				sta 	1+(temp1)
.1c3a					_EWDLoop:
.1c3a	b2 10		lda ($10)			lda 	(temp1)						; end
.1c3c	f0 1a		beq $1c58			beq 	_EWDMarker
.1c3e	a0 02		ldy #$02			ldy 	#2 							; output the address
.1c40	b1 10		lda ($10),y			lda 	(temp1),y
.1c42	20 61 1c	jsr $1c61			jsr 	_EWDWrite
.1c45	c8		iny				iny
.1c46	b1 10		lda ($10),y			lda 	(temp1),y
.1c48	20 61 1c	jsr $1c61			jsr 	_EWDWrite
.1c4b	18		clc				clc 								; next entry.
.1c4c	a5 10		lda $10				lda 	temp1
.1c4e	72 10		adc ($10)			adc 	(temp1)
.1c50	85 10		sta $10				sta 	temp1
.1c52	90 e6		bcc $1c3a			bcc 	_EWDLoop
.1c54	e6 11		inc $11				inc 	temp1+1
.1c56	80 e2		bra $1c3a			bra 	_EWDLoop
.1c58					_EWDMarker:
.1c58	a9 ff		lda #$ff			lda 	#$FF
.1c5a	20 61 1c	jsr $1c61			jsr 	_EWDWrite
.1c5d	20 61 1c	jsr $1c61			jsr 	_EWDWrite
.1c60	60		rts				rts
.1c61					_EWDWrite:
.1c61	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1c63	e6 0e		inc $0e				inc 	nextFreeMem
.1c65	d0 02		bne $1c69			bne 	_EWDExit
.1c67	e6 0f		inc $0f				inc 	nextFreeMem+1
.1c69					_EWDExit:
.1c69	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/skipper.src

.1c6a					NextLine:
.1c6a	18		clc				clc
.1c6b	a5 03		lda $03				lda 	IP
.1c6d	72 03		adc ($03)			adc 	(IP)
.1c6f	85 03		sta $03				sta 	IP
.1c71	90 02		bcc $1c75			bcc 	_NoCarryAdv
.1c73	e6 04		inc $04				inc 	IP+1
.1c75					_NoCarryAdv:
.1c75	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1c77	f0 05		beq $1c7e			beq 	_NLGoEnd
.1c79	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1c7b	4c 00 00	jmp $0000			jmp 	NextCode
.1c7e					_NLGoEnd:
.1c7e	4c ad 23	jmp $23ad			jmp 	WarmStart
.1c81					SkipComment:
.1c81	e8		inx				inx									; (IP),X points to the length.
.1c82	e8		inx				inx
.1c83	8a		txa				txa
.1c84	a8		tay				tay 								; put into Y
.1c85	18		clc				clc
.1c86	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1c88	aa		tax				tax 								; put back in X
.1c89	ca		dex				dex
.1c8a	ca		dex				dex
.1c8b	4c 00 00	jmp $0000			jmp 	NextCode
.1c8e					CommentDecoder:
.1c8e	a9 06		lda #$06			lda 	#CTH_Keyword
.1c90	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1c93	a9 27		lda #$27			lda 	#"'"
.1c95	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1c98	b1 08		lda ($08),y			lda 	(srcPtr),y 					; check if there is no data
.1c9a	c9 01		cmp #$01			cmp 	#1
.1c9c	f0 0d		beq $1cab			beq 	_CDEmpty 					; if so print nothing.
.1c9e	a9 0b		lda #$0b			lda 	#CTH_Comment
.1ca0	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1ca3	20 2f 19	jsr $192f			jsr 	DecodeOutputData
.1ca6	a9 20		lda #$20			lda 	#32
.1ca8	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1cab					_CDEmpty
.1cab	60		rts				rts
.1cac					DefineCode:
.1cac	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1caf	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>1cb7	44 45 46 49 4e 49 54 49 4f 4e 00
.1cc2					DefineDecoder:
.1cc2	a9 07		lda #$07			lda 	#CTH_Definition
.1cc4	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1cc7	a9 3a		lda #$3a			lda 	#":"
.1cc9	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1ccc	20 2f 19	jsr $192f			jsr 	DecodeOutputData
.1ccf	a9 20		lda #$20			lda 	#32
.1cd1	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1cd4	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/toint.src

.1cd5					ConvertToInteger:
.1cd5	84 17		sty $17				sty 	temp4+1
.1cd7	85 16		sta $16				sta 	temp4
.1cd9	64 14		stz $14				stz 	temp3 						; reset value
.1cdb	64 15		stz $15				stz 	temp3+1
.1cdd	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1cdf	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1ce1	b1 16		lda ($16),y			lda 	(temp4),y
.1ce3	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1ce5	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1ce7	d0 01		bne $1cea			bne 	_CTINotMinus
.1ce9	c8		iny				iny									; skip -
.1cea					_CTINotMinus:
.1cea	b1 16		lda ($16),y			lda 	(temp4),y
.1cec	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1cee	d0 03		bne $1cf3			bne 	_CTILoop
.1cf0	c6 10		dec $10				dec 	temp1
.1cf2	c8		iny				iny
.1cf3					_CTILoop:
.1cf3	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1cf5	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1cf7	38		sec				sec
.1cf8	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1cfa	90 65		bcc $1d61			bcc 	_CTIFail 					; out of range.
.1cfc	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1cfe	90 0b		bcc $1d0b			bcc 	_CTILegal
.1d00	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d02	90 5d		bcc $1d61			bcc 	_CTIFail
.1d04	38		sec				sec
.1d05	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d07	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d09	b0 56		bcs $1d61			bcs 	_CTIFail
.1d0b					_CTILegal:
.1d0b	48		pha				pha 								; save digit value.
.1d0c	06 14		asl $14				asl 	temp3
.1d0e	26 15		rol $15				rol 	temp3+1
.1d10	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1d12	85 12		sta $12				sta 	temp2
.1d14	a5 15		lda $15				lda 	temp3+1
.1d16	85 13		sta $13				sta 	temp2+1
.1d18	06 14		asl $14				asl 	temp3
.1d1a	26 15		rol $15				rol 	temp3+1
.1d1c	06 14		asl $14				asl 	temp3
.1d1e	26 15		rol $15				rol 	temp3+1
.1d20	24 10		bit $10				bit 	temp1 						; hexadecimal
.1d22	10 07		bpl $1d2b			bpl 	_CTIDecimal
.1d24	06 14		asl $14				asl 	temp3
.1d26	26 15		rol $15				rol 	temp3+1
.1d28	68		pla				pla 								; get digit back
.1d29	80 12		bra $1d3d			bra 	_CTIAddLoop
.1d2b					_CTIDecimal:
.1d2b	18		clc				clc 								; x 8 + x 2 = x 10
.1d2c	a5 14		lda $14				lda 	temp3
.1d2e	65 12		adc $12				adc 	temp2
.1d30	85 14		sta $14				sta 	temp3
.1d32	a5 15		lda $15				lda 	temp3+1
.1d34	65 13		adc $13				adc 	temp2+1
.1d36	85 15		sta $15				sta 	temp3+1
.1d38	68		pla				pla 								; check digit 0-9
.1d39	c9 0a		cmp #$0a			cmp 	#10
.1d3b	b0 24		bcs $1d61			bcs 	_CTIFail
.1d3d					_CTIAddLoop:
.1d3d	18		clc				clc
.1d3e	65 14		adc $14				adc 	temp3
.1d40	85 14		sta $14				sta 	temp3
.1d42	90 02		bcc $1d46			bcc 	_CTINoCarry
.1d44	e6 15		inc $15				inc 	temp3+1
.1d46					_CTINoCarry:
.1d46	c8		iny				iny
.1d47	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1d49	c9 21		cmp #$21			cmp 	#32+1
.1d4b	b0 a6		bcs $1cf3			bcs 	_CTILoop 					; no, go back.
.1d4d	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1d4f	d0 0d		bne $1d5e			bne 	_CTIOkay
.1d51	38		sec				sec
.1d52	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1d54	e5 14		sbc $14				sbc 	temp3
.1d56	85 14		sta $14				sta 	temp3
.1d58	a9 00		lda #$00			lda 	#0
.1d5a	e5 15		sbc $15				sbc 	temp3+1
.1d5c	85 15		sta $15				sta 	temp3+1
.1d5e					_CTIOkay:
.1d5e	98		tya				tya
.1d5f	38		sec				sec
.1d60	60		rts				rts
.1d61					_CTIFail:
.1d61	18		clc				clc
.1d62	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/tostr.src

.1d63					IntToString:
.1d63	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1d65	85 12		sta $12				sta 	0+(temp2)
.1d67	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1d69	85 13		sta $13				sta 	1+(temp2)
.1d6b	a5 06		lda $06				lda 	TOS 						; value in YA
.1d6d	a4 07		ldy $07				ldy 	TOS+1
.1d6f	20 9f 1d	jsr $1d9f			jsr 	ConvertToString
.1d72	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1d74	85 06		sta $06				sta 	0+(TOS)
.1d76	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1d78	85 07		sta $07				sta 	1+(TOS)
.1d7a	4c 00 00	jmp $0000			jmp 	NextCode
.1d7d					PrintYA:
.1d7d	48		pha				pha
.1d7e	da		phx				phx
.1d7f	5a		phy				phy
.1d80	48		pha				pha
.1d81	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1d83	85 12		sta $12				sta 	0+(temp2)
.1d85	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1d87	85 13		sta $13				sta 	1+(temp2)
.1d89	68		pla				pla
.1d8a	20 a3 1d	jsr $1da3			jsr 	ConvertToStringMain
.1d8d	a2 00		ldx #$00			ldx 	#0
.1d8f					_PrintYALoop:
.1d8f	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1d92	20 8c 24	jsr $248c			jsr 	ExternPrint
.1d95	e8		inx				inx
.1d96	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1d99	d0 f4		bne $1d8f			bne 	_PrintYALoop
.1d9b	7a		ply				ply
.1d9c	fa		plx				plx
.1d9d	68		pla				pla
.1d9e	60		rts				rts
.1d9f					ConvertToString:
.1d9f	38		sec				sec
.1da0	80 01		bra $1da3			bra 	ConvertToStringMain
.1da2					ConvertToStringUnsigned:
.1da2	18		clc				clc
.1da3					ConvertToStringMain:
.1da3	da		phx				phx									; save XY
.1da4	5a		phy				phy
.1da5	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1da7	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1da9	84 11		sty $11				sty 	temp1+1
.1dab	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1dad	90 16		bcc $1dc5			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1daf	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1db1	10 12		bpl $1dc5			bpl 	_CTSUnsigned
.1db3	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1db5	91 12		sta ($12),y			sta 	(temp2),y
.1db7	c8		iny				iny
.1db8	38		sec				sec 								; negate temp1
.1db9	a9 00		lda #$00			lda 	#0
.1dbb	e5 10		sbc $10				sbc 	temp1
.1dbd	85 10		sta $10				sta 	temp1
.1dbf	a9 00		lda #$00			lda 	#0
.1dc1	e5 11		sbc $11				sbc 	temp1+1
.1dc3	85 11		sta $11				sta 	temp1+1
.1dc5					_CTSUnsigned:
.1dc5	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1dc7					_CTSLoop:
.1dc7	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1dc9	91 12		sta ($12),y			sta 	(temp2),y
.1dcb					_CTSSubLoop:
.1dcb	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1dcd	1a		inc a				inc 	a
.1dce	91 12		sta ($12),y			sta 	(temp2),y
.1dd0	38		sec				sec 								; do subtraction saving interim result
.1dd1	a5 10		lda $10				lda 	temp1
.1dd3	fd 06 1e	sbc $1e06,x			sbc 	_CTSTable,x
.1dd6	48		pha				pha
.1dd7	a5 11		lda $11				lda 	temp1+1
.1dd9	fd 07 1e	sbc $1e07,x			sbc 	_CTSTable+1,x
.1ddc	90 07		bcc $1de5			bcc 	_CTSCantSubtract 			; end of subtraction.
.1dde	85 11		sta $11				sta 	temp1+1 					; save result back
.1de0	68		pla				pla
.1de1	85 10		sta $10				sta 	temp1
.1de3	80 e6		bra $1dcb			bra 	_CTSSubLoop
.1de5					_CTSCantSubtract:
.1de5	68		pla				pla 								; throw away interim
.1de6	e8		inx				inx 								; next subtractor
.1de7	e8		inx				inx
.1de8	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1dea	49 30		eor #$30			eor 	#"0"
.1dec	05 1a		ora $1a				ora 	SignCount
.1dee	85 1a		sta $1a				sta 	SignCount
.1df0	f0 01		beq $1df3			beq		_CTSLZ 						; if all zeros so far suppress.
.1df2	c8		iny				iny 								; next character
.1df3					_CTSLZ:
.1df3	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1df5	d0 d0		bne $1dc7			bne 	_CTSLoop
.1df7					_CTSComplete:
.1df7	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1df9	09 30		ora #$30			ora 	#48 						; ASCII
.1dfb	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1dfd	c8		iny				iny
.1dfe	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e00	91 12		sta ($12),y			sta 	(temp2),y
.1e02	98		tya				tya 								; size in A
.1e03	7a		ply				ply									; pull and exit.
.1e04	fa		plx				plx
.1e05	60		rts				rts
.1e06					_CTSTable:
>1e06	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e0e					_CTSTableEnd:

;******  Return to file: files.asm


;******  Processing file: words/system/varhandlers.src

.1e0e					VarAddressHandler:
.1e0e	18		clc				clc 								; find variable, error if it doesn't exist.
.1e0f	20 b1 1e	jsr $1eb1			jsr 	VariableFind
.1e12	20 8b 1e	jsr $1e8b			jsr 	VariableCheckIndex
.1e15	a5 06		lda $06				lda 	TOS
.1e17	48		pha				pha
.1e18	a5 07		lda $07				lda 	TOS+1
.1e1a	48		pha				pha
.1e1b	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1e1d	85 06		sta $06				sta 	TOS
.1e1f	a5 11		lda $11				lda		temp1+1
.1e21	85 07		sta $07				sta 	TOS+1
.1e23	4c 00 00	jmp $0000			jmp 	NextCode
.1e26					VarAddrHandlerDecode:
.1e26	a9 26		lda #$26			lda 	#"&"
.1e28	4c 66 1f	jmp $1f66			jmp 	VarHandlerDecode
.1e2b					VarReadHandler:
.1e2b	18		clc				clc 								; find variable, error if it doesn't exist.
.1e2c	20 b1 1e	jsr $1eb1			jsr 	VariableFind
.1e2f	20 8b 1e	jsr $1e8b			jsr 	VariableCheckIndex
.1e32	a5 06		lda $06				lda 	TOS
.1e34	48		pha				pha
.1e35	a5 07		lda $07				lda 	TOS+1
.1e37	48		pha				pha
.1e38	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1e3a	85 06		sta $06				sta 	TOS
.1e3c	a0 01		ldy #$01			ldy 	#1
.1e3e	b1 10		lda ($10),y			lda 	(temp1),y
.1e40	85 07		sta $07				sta 	TOS+1
.1e42	4c 00 00	jmp $0000			jmp 	NextCode
.1e45					VarReadHandlerDecode:
.1e45	a9 40		lda #$40			lda 	#"@"
.1e47	4c 66 1f	jmp $1f66			jmp 	VarHandlerDecode
.1e4a					VarWriteHandler:
.1e4a	38		sec				sec 								; find variable, create it if it doesn't exist.
.1e4b	20 b1 1e	jsr $1eb1			jsr 	VariableFind
.1e4e	20 8b 1e	jsr $1e8b			jsr 	VariableCheckIndex
.1e51	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1e53	92 10		sta ($10)			sta 	(temp1)
.1e55	a5 07		lda $07				lda 	TOS+1
.1e57	a0 01		ldy #$01			ldy 	#1
.1e59	91 10		sta ($10),y			sta 	(temp1),y
.1e5b	68		pla				pla
.1e5c	85 07		sta $07				sta 	TOS+1
.1e5e	68		pla				pla
.1e5f	85 06		sta $06				sta 	TOS
.1e61	4c 00 00	jmp $0000			jmp 	NextCode
.1e64					VarWriteHandlerDecode:
.1e64	a9 21		lda #$21			lda 	#"!"
.1e66	4c 66 1f	jmp $1f66			jmp 	VarHandlerDecode
.1e69					IndexHandler:
.1e69	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1e6c	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>1e74	42 55 47 00
.1e78					IndexHandlerDecode:
.1e78	a9 5b		lda #$5b			lda 	#"["
.1e7a	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1e7d	b1 08		lda ($08),y			lda 	(srcPtr),y
.1e7f	a0 00		ldy #$00			ldy 	#0
.1e81	38		sec				sec
.1e82	20 48 19	jsr $1948			jsr 	DecodeYAToBuffer
.1e85	a9 5d		lda #$5d			lda 	#"]"
.1e87	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1e8a	60		rts				rts
.1e8b					VariableCheckIndex:
.1e8b	8a		txa				txa 								; next is $$index ?
.1e8c	a8		tay				tay
.1e8d	c8		iny				iny
.1e8e	c8		iny				iny
.1e8f	b1 03		lda ($03),y			lda 	(IP),y
.1e91	c9 69		cmp #$69			cmp 	#IndexHandler & $FF
.1e93	d0 1b		bne $1eb0			bne 	_VCIExit
.1e95	c8		iny				iny
.1e96	b1 03		lda ($03),y			lda 	(IP),y
.1e98	c9 1e		cmp #$1e			cmp 	#IndexHandler >> 8
.1e9a	d0 14		bne $1eb0			bne 	_VCIExit
.1e9c	98		tya				tya 								; fix X backup 3 on from where we started
.1e9d	aa		tax				tax
.1e9e	c8		iny				iny 								; get the index
.1e9f	b1 03		lda ($03),y			lda 	(IP),y
.1ea1	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.1ea2	a0 01		ldy #$01			ldy 	#1
.1ea4	72 10		adc ($10)			adc 	(temp1) 					; do the indirection e.g. the look up.
.1ea6	48		pha				pha
.1ea7	b1 10		lda ($10),y			lda 	(temp1),y
.1ea9	69 00		adc #$00			adc 	#0
.1eab	85 11		sta $11				sta 	temp1+1
.1ead	68		pla				pla
.1eae	85 10		sta $10				sta 	temp1
.1eb0					_VCIExit:
.1eb0	60		rts				rts
.1eb1					VariableFind:
.1eb1	08		php				php 								; save autocreate flag.
.1eb2	e8		inx				inx 								; advance to/over the variable name.
.1eb3	e8		inx				inx
.1eb4	8a		txa				txa 								; put in Y
.1eb5	a8		tay				tay
.1eb6	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1eb8	85 12		sta $12				sta 	temp2
.1eba	c8		iny				iny
.1ebb	b1 03		lda ($03),y			lda 	(IP),y
.1ebd	85 13		sta $13				sta 	temp2+1
.1ebf	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1ec1	b0 0f		bcs $1ed2			bcs 	_VFLong
.1ec3	a5 13		lda $13				lda 	temp2+1
.1ec5	d0 0b		bne $1ed2			bne 	_VFLong
.1ec7	a5 12		lda $12				lda 	temp2						; this is the index
.1ec9	0a		asl a				asl 	a 							; double it
.1eca	85 10		sta $10				sta 	temp1
.1ecc	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1ece	85 11		sta $11				sta 	temp1+1
.1ed0	28		plp				plp 								; throw creation flag, it always exists.
.1ed1	60		rts				rts
.1ed2					_VFLong:
.1ed2	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1ed4	6a		ror a				ror 	a
.1ed5	6a		ror a				ror 	a
.1ed6	6a		ror a				ror 	a
.1ed7	6a		ror a				ror 	a
.1ed8	45 12		eor $12				eor 	temp2
.1eda	45 13		eor $13				eor 	temp2+1
.1edc	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1ede	0a		asl a				asl 	a
.1edf	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1ee1	85 10		sta $10				sta 	temp1
.1ee3	85 14		sta $14				sta 	temp3
.1ee5	a9 06		lda #$06			lda 	#hashTable >> 8
.1ee7	85 11		sta $11				sta 	temp1+1
.1ee9	85 15		sta $15				sta 	temp3+1
.1eeb					_VFSearch:
.1eeb	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1eed	b1 10		lda ($10),y			lda 	(temp1),y
.1eef	f0 23		beq $1f14			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1ef1	a8		tay				tay 								; follow the link through.
.1ef2	b2 10		lda ($10)			lda 	(temp1)
.1ef4	85 10		sta $10				sta 	temp1
.1ef6	84 11		sty $11				sty 	temp1+1
.1ef8	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1efa	b1 10		lda ($10),y			lda 	(temp1),y
.1efc	c5 12		cmp $12				cmp 	temp2
.1efe	d0 eb		bne $1eeb			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f00	c8		iny				iny 								; same for 2nd byte of name
.1f01	b1 10		lda ($10),y			lda 	(temp1),y
.1f03	c5 13		cmp $13				cmp 	temp2+1
.1f05	d0 e4		bne $1eeb			bne 	_VFSearch
.1f07	18		clc				clc
.1f08	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1f0a	69 02		adc #$02			adc 	#2
.1f0c	85 10		sta $10				sta 	temp1
.1f0e	90 02		bcc $1f12			bcc 	_VFNoPage1
.1f10	e6 11		inc $11				inc 	temp1+1
.1f12					_VFNoPage1:
.1f12	28		plp				plp 								; don't need to worry about creation flag
.1f13	60		rts				rts
.1f14					_VFNotFound:
.1f14	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1f15	b0 14		bcs $1f2b			bcs 	_VFCreate
.1f17	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1f1a	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>1f22	56 41 52 49 41 42 4c 45 00
.1f2b					_VFCreate:
.1f2b	a0 01		ldy #$01			ldy 	#1
.1f2d	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1f2f	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1f31	b1 14		lda ($14),y			lda 	(temp3),y
.1f33	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f35	c8		iny				iny
.1f36	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1f38	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f3a	c8		iny				iny
.1f3b	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f3d	c8		iny				iny
.1f3e	a5 12		lda $12				lda 	temp2 						; copy the name out
.1f40	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f42	c8		iny				iny
.1f43	a5 13		lda $13				lda 	temp2+1
.1f45	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1f47	a0 01		ldy #$01			ldy 	#1
.1f49	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1f4b	92 14		sta ($14)			sta 	(temp3)
.1f4d	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f4f	91 14		sta ($14),y			sta 	(temp3),y
.1f51	18		clc				clc
.1f52	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1f54	69 02		adc #$02			adc 	#2
.1f56	85 10		sta $10				sta 	temp1
.1f58	a5 0f		lda $0f				lda 	nextFreeMem+1
.1f5a	69 00		adc #$00			adc 	#0
.1f5c	85 11		sta $11				sta 	temp1+1
.1f5e	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1f60	a0 00		ldy #$00			ldy 	#0
.1f62	20 1f 18	jsr $181f			jsr 	AdvanceFreeMem
.1f65	60		rts				rts
.1f66					VarHandlerDecode:
.1f66	48		pha				pha 								; save, leading space
.1f67	a9 07		lda #$07			lda 	#CTH_Variable
.1f69	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1f6c	68		pla				pla 								; restore and write type
.1f6d	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1f70	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1f72	85 10		sta $10				sta 	temp1
.1f74	c8		iny				iny
.1f75	b1 08		lda ($08),y			lda 	(srcPtr),y
.1f77	85 11		sta $11				sta 	temp1+1
.1f79	a5 10		lda $10				lda 	temp1 						; output the first character
.1f7b	29 1f		and #$1f			and 	#31
.1f7d	20 a8 1f	jsr $1fa8			jsr 	VHOutVarChar
.1f80	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1f82					_VHDShift:
.1f82	46 11		lsr $11				lsr 	temp1+1
.1f84	66 10		ror $10				ror 	temp1
.1f86	ca		dex				dex
.1f87	d0 f9		bne $1f82			bne 	_VHDShift
.1f89	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1f8b					_VHDDiv40:
.1f8b	e8		inx				inx
.1f8c	38		sec				sec
.1f8d	a5 10		lda $10				lda 	temp1
.1f8f	e9 28		sbc #$28			sbc 	#40
.1f91	a8		tay				tay
.1f92	a5 11		lda $11				lda 	temp1+1
.1f94	e9 00		sbc #$00			sbc 	#0
.1f96	90 06		bcc $1f9e			bcc 	_VHDivDone
.1f98	85 11		sta $11				sta 	temp1+1
.1f9a	84 10		sty $10				sty 	temp1
.1f9c	80 ed		bra $1f8b			bra 	_VHDDiv40
.1f9e					_VHDivDone:
.1f9e	a5 10		lda $10				lda 	temp1 						; remainder
.1fa0	20 a8 1f	jsr $1fa8			jsr 	VHOutVarChar
.1fa3	8a		txa				txa
.1fa4	20 a8 1f	jsr $1fa8			jsr 	VHOutVarChar 				; and result.
.1fa7	60		rts				rts
.1fa8					VHOutVarChar:
.1fa8	c9 00		cmp #$00			cmp 	#0
.1faa	f0 0c		beq $1fb8			beq 	_VHOExit
.1fac	18		clc				clc
.1fad	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1faf	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1fb1	90 02		bcc $1fb5			bcc 	_VHOOut
.1fb3	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1fb5					_VHOOut:
.1fb5	20 26 19	jsr $1926			jsr 	DecodeWriteBuffer
.1fb8					_VHOExit:
.1fb8	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encode.src

.1fb9					EncodeProgram:
.1fb9	48		pha				pha 								; save registers.
.1fba	da		phx				phx
.1fbb	5a		phy				phy
.1fbc	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1fbe	85 08		sta $08				sta		srcPtr
.1fc0	64 05		stz $05				stz 	rsp
.1fc2	a6 05		ldx $05				ldx 	rsp 						; this is the current stack entry type, so $00 means
.1fc4	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.1fc7	20 46 22	jsr $2246			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.1fca	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.1fcc	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.1fcf	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.1fd2	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.1fd5	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.1fd7	20 f1 21	jsr $21f1			jsr 	CheckIsDigit
.1fda	90 09		bcc $1fe5			bcc 	_EPNoLineNumber 			; if so there is a line number
.1fdc	20 13 22	jsr $2213			jsr 	EncodeGetConstant 			; extract that constant from the source
.1fdf	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.1fe2	8c 12 09	sty $0912			sty 	encodeBuffer+2
.1fe5					_EPNoLineNumber:
.1fe5					EncodeLoop:
.1fe5	20 38 22	jsr $2238			jsr 	EncSkipSpaces 				; skip over spaces
.1fe8	b2 08		lda ($08)			lda 	(srcPtr) 					; reached end ?
.1fea	d0 21		bne $200d			bne 	_EPNotEnd
.1fec					_EPEndEncode:
.1fec	a9 6a		lda #$6a			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.1fee	a0 1c		ldy #$1c			ldy 	#NextLine >> 8
.1ff0	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.1ff3	a5 05		lda $05				lda 	rsp 						; is the return stack empty ?
.1ff5	d0 04		bne $1ffb			bne 	_EPIncomplete
.1ff7	7a		ply				ply									; restore and exit.
.1ff8	fa		plx				plx
.1ff9	68		pla				pla
.1ffa	60		rts				rts
.1ffb					_EPIncomplete:
.1ffb	20 2c 24	jsr $242c			jsr 	ErrorHandler
>1ffe	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>2006	45 20 4f 50 45 4e 00
.200d					_EPNotEnd:
.200d	b2 08		lda ($08)			lda 	(srcPtr)
.200f	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.2011	f0 04		beq $2017			beq 	_EPIsComStr
.2013	c9 27		cmp #$27			cmp 	#"'"
.2015	d0 05		bne $201c			bne 	_EPNotComStr
.2017					_EPIsComStr:
.2017	20 16 21	jsr $2116			jsr 	EncodeCommentString
.201a	80 c9		bra $1fe5			bra 	EncodeLoop
.201c					_EPNotComStr:
.201c	38		sec				sec
.201d	20 25 22	jsr $2225			jsr 	EncSetBit7Word
.2020	20 6d 22	jsr $226d			jsr 	EncodeSearchDictionary		; look it up
.2023	90 45		bcc $206a			bcc 	_EPNotInDictionary
.2025	85 10		sta $10				sta 	temp1 						; save dictionary record address
.2027	84 11		sty $11				sty 	temp1+1
.2029	a0 01		ldy #$01			ldy 	#1
.202b	b1 10		lda ($10),y			lda 	(temp1),y 					; check if has an encode bit
.202d	29 20		and #$20			and 	#$20
.202f	d0 12		bne $2043			bne 	_EPEncodeRoutine 			; if so, do special routine.
.2031	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.2033	b1 10		lda ($10),y			lda 	(temp1),y
.2035	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2038	c8		iny				iny
.2039	b1 10		lda ($10),y			lda 	(temp1),y
.203b	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.203e	20 fd 21	jsr $21fd			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2041	80 a2		bra $1fe5			bra 	EncodeLoop
.2043					_EPEncodeRoutine:
.2043	a0 01		ldy #$01			ldy 	#1							; get type bit
.2045	b1 10		lda ($10),y			lda 	(temp1),y
.2047	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.2049	29 10		and #$10			and 	#$10 						; but decoder comes first
.204b	f0 02		beq $204f			beq 	_EPENoDecoder
.204d	c8		iny				iny 								; so if it exists, adjust for it.
.204e	c8		iny				iny
.204f					_EPENoDecoder:
.204f	b1 10		lda ($10),y			lda 	(temp1),y 					; copy exec addr to temp2
.2051	85 12		sta $12				sta 	temp2
.2053	c8		iny				iny
.2054	b1 10		lda ($10),y			lda 	(temp1),y
.2056	85 13		sta $13				sta 	temp2+1
.2058	48		pha				pha 								; call routine preserving state
.2059	da		phx				phx
.205a	5a		phy				phy
.205b	20 67 20	jsr $2067			jsr 	_EPECallTemp2
.205e	7a		ply				ply
.205f	fa		plx				plx
.2060	68		pla				pla
.2061	20 fd 21	jsr $21fd			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2064	4c e5 1f	jmp $1fe5			jmp 	EncodeLoop
.2067					_EPECallTemp2:
.2067	6c 12 00	jmp ($0012)			jmp 	(temp2)
.206a					_EPNotInDictionary:
.206a	20 7b 21	jsr $217b			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.206d	90 19		bcc $2088			bcc 	_EPNotDefined
.206f	48		pha				pha
.2070	a9 84		lda #$84			lda	 	#CallHandler & $FF 			; write code call handler
.2072	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2075	a9 16		lda #$16			lda	 	#CallHandler >> 8
.2077	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.207a	68		pla				pla 								; write line number
.207b	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.207e	98		tya				tya
.207f	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2082	20 fd 21	jsr $21fd			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2085	4c e5 1f	jmp $1fe5			jmp 	EncodeLoop
.2088					_EPNotDefined:
.2088	b2 08		lda ($08)			lda 	(srcPtr) 					; first character
.208a	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.208c	f0 65		beq $20f3			beq 	_EPDefinition
.208e	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.2090	f0 3b		beq $20cd			beq 	_EPCallDirect
.2092	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.2094	f0 54		beq $20ea			beq 	_EPVariable
.2096	c9 40		cmp #$40			cmp 	#"@"
.2098	f0 50		beq $20ea			beq 	_EPVariable
.209a	c9 26		cmp #$26			cmp 	#"&"
.209c	f0 4c		beq $20ea			beq 	_EPVariable
.209e	c9 24		cmp #$24			cmp 	#"$" 						; is it a hex constant
.20a0	d0 09		bne $20ab			bne 	_EPDecLiteral
.20a2	a9 14		lda #$14			lda 	#HexLiteral2Byte & $FF 		; write out 2 byte literal (hex)
.20a4	a0 10		ldy #$10			ldy 	#HexLiteral2Byte >> 8
.20a6	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.20a9	80 07		bra $20b2			bra 	_EPOutputConstant
.20ab					_EPDecLiteral:
.20ab	a9 15		lda #$15			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.20ad	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.20af	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.20b2					_EPOutputConstant:
.20b2	20 13 22	jsr $2213			jsr 	EncodeGetConstant 			; extract that constant from the source
.20b5	90 06		bcc $20bd			bcc 	_EPFail 					; if can't find one, that's us done.
.20b7	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord 			; write out the encoded value.
.20ba	4c e5 1f	jmp $1fe5			jmp 	EncodeLoop 					; and go round again.
.20bd					_EPFail:
.20bd	20 2c 24	jsr $242c			jsr 	ErrorHandler
>20c0	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>20c8	52 52 4f 52 00
.20cd					_EPCallDirect:
.20cd	a9 84		lda #$84			lda	 	#CallHandler & $FF 			; write code call handler
.20cf	a0 16		ldy #$16			ldy	 	#CallHandler >> 8
.20d1	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.20d4	a9 01		lda #$01			lda 	#1
.20d6	20 09 22	jsr $2209			jsr 	EncodeAddSrcPtr 			; skip over the <
.20d9	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.20db					_EPToLast:
.20db	c8		iny				iny
.20dc	b1 08		lda ($08),y			lda 	(srcPtr),y
.20de	10 fb		bpl $20db			bpl	 	_EPToLast
.20e0	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.20e2	d0 d9		bne $20bd			bne 	_EPFail
.20e4	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.20e6	91 08		sta ($08),y			sta 	(srcPtr),y
.20e8	80 c8		bra $20b2			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.20ea					_EPVariable:
.20ea	20 c1 22	jsr $22c1			jsr 	EncodeVariableReference
.20ed	20 fd 21	jsr $21fd			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20f0	4c e5 1f	jmp $1fe5			jmp 	EncodeLoop
.20f3					_EPDefinition:
.20f3	a9 ac		lda #$ac			lda	 	#DefineCode & $FF 			; write code call handler
.20f5	a0 1c		ldy #$1c			ldy	 	#DefineCode >> 8
.20f7	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.20fa	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.20fd	a9 01		lda #$01			lda 	#1 							; write default size
.20ff	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2102	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.2104	c8		iny		_EPCopy:iny
.2105	b1 08		lda ($08),y			lda 	(srcPtr),y
.2107	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.210a	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.210d	0a		asl a				asl 	a
.210e	90 f4		bcc $2104			bcc 	_EPCopy
.2110	20 fd 21	jsr $21fd			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2113	4c e5 1f	jmp $1fe5			jmp 	EncodeLoop

;******  Return to file: files.asm


;******  Processing file: words/encode/comstr.src

.2116					EncodeCommentString:
.2116	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.2118	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.211a	aa		tax				tax 								; save in X
.211b	a9 81		lda #$81			lda 	#(SkipComment & $FF)		; get the routine to use
.211d	a0 1c		ldy #$1c			ldy 	#(SkipComment >> 8)
.211f	e0 27		cpx #$27			cpx 	#"'"
.2121	f0 06		beq $2129			beq 	_ECSGotCmd
.2123	86 10		stx $10				stx		temp1 						; other terminator = "
.2125	a9 6f		lda #$6f			lda 	#(LiteralString & $FF)
.2127	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.2129					_ECSGotCmd:
.2129	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord 			; write word out.
.212c	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.212e	20 09 22	jsr $2209			jsr 	EncodeAddSrcPtr
.2131	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.2133	d0 03		bne $2138			bne 	_ECNoSkipSpaces
.2135	20 38 22	jsr $2238			jsr 	EncSkipSpaces
.2138					_ECNoSkipSpaces:
.2138	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.213b	a9 01		lda #$01			lda 	#1
.213d	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte 			; write total length, so far 1.
.2140	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.2142					_ECSCopyText:
.2142	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.2144	f0 18		beq $215e			beq 	_ECSEndOfLine 				; end of line ?
.2146	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.2148	f0 09		beq $2153			beq 	_ECSEndOfString 			; if so must be closing quote.
.214a	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte 			; write the byte out
.214d	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.2150	c8		iny				iny 								; next character
.2151	80 ef		bra $2142			bra 	_ECSCopyText
.2153					_ECSEndOfString:
.2153	c8		iny				iny 								; skip closing quote.
.2154	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.2156	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2159	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.215c	80 18		bra $2176			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.215e					_ECSEndOfLine:
.215e	a5 10		lda $10				lda 	temp1 						; missing closing quote
.2160	f0 14		beq $2176			beq 	_ECSComplete 				; if we were doing a string.
.2162	20 2c 24	jsr $242c			jsr 	ErrorHandler
>2165	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>216d	4e 47 20 51 55 4f 54 45 00
.2176					_ECSComplete:
.2176	98		tya				tya									; skip over.
.2177	20 09 22	jsr $2209			jsr 	EncodeAddSrcPtr
.217a	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encdef.src

.217b					EncodeSearchUserDefined:
.217b	38		sec				sec 								; temp1 = srcPtr-6 because the
.217c	a5 08		lda $08				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.217e	e9 06		sbc #$06			sbc		#6
.2180	85 10		sta $10				sta 	temp1
.2182	a5 09		lda $09				lda 	srcPtr+1
.2184	e9 00		sbc #$00			sbc 	#0
.2186	85 11		sta $11				sta 	temp1+1
.2188	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.218a	85 12		sta $12				sta 	0+(temp2)
.218c	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.218e	85 13		sta $13				sta 	1+(temp2)
.2190					_ESULoop:
.2190	b2 12		lda ($12)			lda 	(temp2) 					; reached the end (offset 0)
.2192	f0 33		beq $21c7			beq 	_ESUFail
.2194	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.2196	b1 12		lda ($12),y			lda 	(temp2),y
.2198	c9 ac		cmp #$ac			cmp 	#DefineCode & $FF
.219a	d0 1e		bne $21ba			bne 	_ESUNext
.219c	c8		iny				iny
.219d	b1 12		lda ($12),y			lda 	(temp2),y
.219f	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.21a1	d0 17		bne $21ba			bne 	_ESUNext
.21a3	c8		iny				iny 								; skip length byte.
.21a4					_ESUCompare:
.21a4	c8		iny				iny
.21a5	b1 12		lda ($12),y			lda 	(temp2),y
.21a7	d1 10		cmp ($10),y			cmp 	(temp1),y
.21a9	d0 0f		bne $21ba			bne 	_ESUNext
.21ab	0a		asl a				asl 	a 							; bit 7 set => found it.
.21ac	90 f6		bcc $21a4			bcc 	_ESUCompare
.21ae	a0 01		ldy #$01			ldy 	#1
.21b0	b1 12		lda ($12),y			lda 	(temp2),y 					; read in the line number to YA
.21b2	aa		tax				tax
.21b3	c8		iny				iny
.21b4	b1 12		lda ($12),y			lda 	(temp2),y
.21b6	a8		tay				tay
.21b7	8a		txa				txa
.21b8	38		sec				sec 								; return with carry set as found
.21b9	60		rts				rts
.21ba					_ESUNext:
.21ba	18		clc				clc
.21bb	a5 12		lda $12				lda 	temp2
.21bd	72 12		adc ($12)			adc 	(temp2)
.21bf	85 12		sta $12				sta 	temp2
.21c1	90 02		bcc $21c5			bcc 	_NoCarryAdv
.21c3	e6 13		inc $13				inc 	temp2+1
.21c5					_NoCarryAdv:
.21c5	80 c9		bra $2190			bra 	_ESULoop 					; and loop round
.21c7					_ESUFail:
.21c7	18		clc				clc
.21c8	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encutils.src

.21c9					EncodeWriteWord:
.21c9	48		pha				pha
.21ca	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.21cd	98		tya				tya
.21ce	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.21d1	68		pla				pla
.21d2	60		rts				rts
.21d3					EncodeWriteByte:
.21d3	da		phx				phx
.21d4	ae 10 09	ldx $0910			ldx 	encodeBuffer
.21d7	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.21da	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.21dd	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.21e0	ee 10 09	inc $0910			inc 	encodeBuffer
.21e3	fa		plx				plx
.21e4	60		rts				rts
.21e5					CheckIsLetter:
.21e5	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.21e7	90 06		bcc $21ef			bcc 	_CILFail
.21e9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.21eb	b0 02		bcs $21ef			bcs 	_CILFail
.21ed	38		sec				sec
.21ee	60		rts				rts
.21ef					_CILFail:
.21ef	18		clc				clc
.21f0	60		rts				rts
.21f1					CheckIsDigit:
.21f1	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.21f3	90 06		bcc $21fb			bcc 	_CIDFail
.21f5	c9 3a		cmp #$3a			cmp 	#"9"+1
.21f7	b0 02		bcs $21fb			bcs 	_CIDFail
.21f9	38		sec				sec
.21fa	60		rts				rts
.21fb					_CIDFail:
.21fb	18		clc				clc
.21fc	60		rts				rts
.21fd					EncodeMoveNextWord:
.21fd	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.21ff					_EPNWLoop:
.21ff	c8		iny				iny
.2200	b1 08		lda ($08),y			lda 	(srcPtr),y
.2202	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.2204	b0 f9		bcs $21ff			bcs 	_EPNWLoop
.2206	98		tya				tya
.2207	80 00		bra $2209			bra 	EncodeAddSrcPtr
.2209					EncodeAddSrcPtr:
.2209	18		clc				clc 								; add offset
.220a	65 08		adc $08				adc 	srcPtr
.220c	85 08		sta $08				sta 	srcPtr
.220e	90 02		bcc $2212			bcc 	_EASPNoCarry
.2210	e6 09		inc $09				inc 	srcPtr+1					; carry through
.2212					_EASPNoCarry:
.2212	60		rts				rts
.2213					EncodeGetConstant:
.2213	a5 08		lda $08				lda 	srcPtr 						; get source
.2215	a4 09		ldy $09				ldy 	srcPtr+1
.2217	20 d5 1c	jsr $1cd5			jsr 	ConvertToInteger 			; call converter
.221a	90 08		bcc $2224			bcc 	_EGCExit
.221c	20 09 22	jsr $2209			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.221f	a5 14		lda $14				lda 	temp3 						; get result into YA
.2221	a4 15		ldy $15				ldy 	temp3+1
.2223	38		sec				sec 								; return CS
.2224					_EGCExit:
.2224	60		rts				rts
.2225					EncSetBit7Word:
.2225	08		php				php 								; save carry
.2226	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.2228					_ESB7Loop:
.2228	c8		iny				iny
.2229	b1 08		lda ($08),y			lda 	(srcPtr),y
.222b	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.222d	b0 f9		bcs $2228			bcs 	_ESB7Loop
.222f	88		dey				dey									; previous character
.2230	b1 08		lda ($08),y			lda 	(srcPtr),y 					; read it
.2232	0a		asl a				asl 	a 							; shift bit 7 out
.2233	28		plp				plp 								; restore carry
.2234	6a		ror a				ror 	a 							; shift it in
.2235	91 08		sta ($08),y			sta 	(srcPtr),y 					; write back and exit
.2237	60		rts				rts
.2238					EncSkipSpaces:
.2238	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.223a	c9 20		cmp #$20			cmp 	#32
.223c	d0 07		bne $2245			bne 	_ESNotSpace
.223e	a9 01		lda #$01			lda 	#1
.2240	20 09 22	jsr $2209			jsr 	EncodeAddSrcPtr
.2243	80 f3		bra $2238			bra	 	EncSkipSpaces
.2245					_ESNotSpace:
.2245	60		rts				rts
.2246					EncodeTrimTrailingSpaces:
.2246	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.2248					_ETTFindEnd:
.2248	c8		iny				iny
.2249	b1 08		lda ($08),y			lda 	(srcPtr),y
.224b	d0 fb		bne $2248			bne 	_ETTFindEnd
.224d					_ETTRemoveSpace:
.224d	c0 00		cpy #$00			cpy 	#0 							; start of string
.224f	f0 0d		beq $225e			beq 	_ETTExit
.2251	88		dey				dey 								; previous character 1..32
.2252	b1 08		lda ($08),y			lda 	(srcPtr),y
.2254	c9 21		cmp #$21			cmp 	#32+1
.2256	b0 06		bcs $225e			bcs 	_ETTExit
.2258	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.225a	91 08		sta ($08),y			sta 	(srcPtr),y
.225c	80 ef		bra $224d			bra 	_ETTRemoveSpace
.225e					_ETTExit:
.225e	60		rts				rts
.225f					EncodePushPosMarkerOnStack:
.225f	e6 05		inc $05				inc 	rsp 						; make space on rstack
.2261	a6 05		ldx $05				ldx 	rsp							; access it
.2263	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.2266	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.2269	9d 80 07	sta $0780,x			sta 	returnStackX,x
.226c	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encsearch.src

.226d					EncodeSearchDictionary:
.226d	a9 6a		lda #$6a			lda 	#(Dictionary) & $FF
.226f	85 10		sta $10				sta 	0+(temp1)
.2271	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.2273	85 11		sta $11				sta 	1+(temp1)
.2275					_ESDLoop:
.2275	b2 10		lda ($10)			lda 	(temp1) 					; end of dictionary return with CC.
.2277	18		clc				clc
.2278	f0 46		beq $22c0			beq 	_ESDExit
.227a	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.227c	b1 10		lda ($10),y			lda 	(temp1),y
.227e	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.227f	4a		lsr a				lsr 	a
.2280	4a		lsr a				lsr 	a
.2281	4a		lsr a				lsr 	a
.2282	c8		iny				iny 								; Y = 2
.2283	4a		lsr a				lsr 	a
.2284	90 01		bcc $2287			bcc 	_ESDNotDec
.2286	c8		iny				iny
.2287					_ESDNotDec:
.2287	4a		lsr a				lsr 	a
.2288	90 01		bcc $228b			bcc 	_ESDNotInc
.228a	c8		iny				iny
.228b					_ESDNotInc:
.228b	98		tya				tya
.228c	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.228d	a8		tay				tay
.228e	b1 10		lda ($10),y			lda 	(temp1),y 					; quick check of first character
.2290	d2 08		cmp ($08)			cmp 	(srcPtr)
.2292	d0 1f		bne $22b3			bne 	_ESDNext 					; do not match, go to next
.2294	98		tya				tya 								; make temp2 point to the name in
.2295	18		clc				clc 								; the dictionary.
.2296	65 10		adc $10				adc 	temp1
.2298	85 12		sta $12				sta 	temp2
.229a	a5 11		lda $11				lda 	temp1+1
.229c	69 00		adc #$00			adc 	#0
.229e	85 13		sta $13				sta 	temp2+1
.22a0	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.22a2					_ESDCompare:
.22a2	c8		iny				iny
.22a3	b1 08		lda ($08),y			lda 	(srcPtr),y
.22a5	d1 12		cmp ($12),y			cmp 	(temp2),y
.22a7	d0 0a		bne $22b3			bne 	_ESDNext
.22a9	0a		asl a				asl 	a
.22aa	90 f6		bcc $22a2			bcc 	_ESDCompare
.22ac	a5 10		lda $10				lda 	temp1 						; return address in YA and carry set.
.22ae	a4 11		ldy $11				ldy 	temp1+1
.22b0	38		sec				sec
.22b1	80 0d		bra $22c0			bra 	_ESDExit
.22b3					_ESDNext:
.22b3	18		clc				clc
.22b4	a5 10		lda $10				lda 	temp1
.22b6	72 10		adc ($10)			adc 	(temp1)
.22b8	85 10		sta $10				sta 	temp1
.22ba	90 b9		bcc $2275			bcc 	_ESDLoop
.22bc	e6 11		inc $11				inc 	temp1+1
.22be	80 b5		bra $2275			bra 	_ESDLoop
.22c0					_ESDExit:
.22c0	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encvar.src

.22c1					EncodeVariableReference:
.22c1	b2 08		lda ($08)			lda 	(srcPtr)					; get the type, use it to identify the routine
.22c3	a2 0e		ldx #$0e			ldx 	#VarAddressHandler & $FF
.22c5	a0 1e		ldy #$1e			ldy 	#VarAddressHandler >> 8
.22c7	c9 26		cmp #$26			cmp 	#"&"
.22c9	f0 0c		beq $22d7			beq 	_EVFHaveAddress
.22cb	a2 2b		ldx #$2b			ldx 	#VarReadHandler & $FF
.22cd	a0 1e		ldy #$1e			ldy 	#VarReadHandler >> 8
.22cf	c9 40		cmp #$40			cmp 	#"@"
.22d1	f0 04		beq $22d7			beq 	_EVFHaveAddress
.22d3	a2 4a		ldx #$4a			ldx 	#VarWriteHandler & $FF
.22d5	a0 1e		ldy #$1e			ldy 	#VarWriteHandler >> 8
.22d7					_EVFHaveAddress:
.22d7	8a		txa				txa
.22d8	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord 			; write it out.
.22db	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.22dd	b1 08		lda ($08),y			lda 	(srcPtr),y
.22df	29 7f		and #$7f			and 	#$7F 						; might be the last.
.22e1	20 e5 21	jsr $21e5			jsr 	CheckIsLetter 				; is it A-Z
.22e4	90 54		bcc $233a			bcc 	EVFFail
.22e6	29 1f		and #$1f			and 	#31 						; make 1-26
.22e8	85 10		sta $10				sta 	temp1 						; start building the name in temp1
.22ea	64 11		stz $11				stz 	temp1+1
.22ec	38		sec				sec 								; possible char 2
.22ed	20 4f 23	jsr $234f			jsr 	EncVarAlNum
.22f0	18		clc				clc 								; possible char 3
.22f1	20 4f 23	jsr $234f			jsr 	EncVarAlNum
.22f4	5a		phy				phy
.22f5	a5 10		lda $10				lda 	temp1 						; write out variable identifier.
.22f7	a4 11		ldy $11				ldy 	temp1+1
.22f9	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.22fc	7a		ply				ply
.22fd	b1 08		lda ($08),y			lda 	(srcPtr),y 					; more text after ?
.22ff	10 01		bpl $2302			bpl 	_EVFCheckArray
.2301	60		rts				rts
.2302					_EVFCheckArray:
.2302	c8		iny				iny 								; get the next character
.2303	b1 08		lda ($08),y			lda 	(srcPtr),y
.2305	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.2307	d0 31		bne $233a			bne 	EVFFail
.2309	64 10		stz $10				stz 	temp1 						; zero temp1.
.230b	c8		iny				iny  								; point to index
.230c					_EVFGetIndex:
.230c	06 10		asl $10				asl 	temp1 						; temp1 x 10
.230e	a5 10		lda $10				lda 	temp1
.2310	0a		asl a				asl 	a
.2311	0a		asl a				asl		a
.2312	65 10		adc $10				adc 	temp1
.2314	85 10		sta $10				sta 	temp1
.2316	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get the digit
.2318	20 f1 21	jsr $21f1			jsr 	CheckIsDigit
.231b	90 1d		bcc $233a			bcc 	EVFFail 					; failed, not digit
.231d	29 0f		and #$0f			and 	#15
.231f	18		clc				clc
.2320	65 10		adc $10				adc 	temp1
.2322	30 16		bmi $233a			bmi 	EVFFail 					; failed, bad index.
.2324	85 10		sta $10				sta 	temp1
.2326	c8		iny				iny
.2327	b1 08		lda ($08),y			lda 	(srcPtr),y
.2329	c9 dd		cmp #$dd			cmp 	#"]"+$80
.232b	d0 df		bne $230c			bne 	_EVFGetIndex 				; index now in temp1.
.232d	a9 69		lda #$69			lda 	#IndexHandler & $FF 		; output code
.232f	a0 1e		ldy #$1e			ldy 	#IndexHandler >> 8
.2331	20 c9 21	jsr $21c9			jsr 	EncodeWriteWord
.2334	a5 10		lda $10				lda 	temp1	 					; write index
.2336	20 d3 21	jsr $21d3			jsr 	EncodeWriteByte
.2339	60		rts				rts
.233a					EVFFail:
.233a	20 2c 24	jsr $242c			jsr 	ErrorHandler
>233d	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>2345	41 42 4c 45 20 4e 41 4d 45 00
.234f					EncVarAlNum:
.234f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; points to the  last char processed.
.2351	10 01		bpl $2354			bpl 	_EVAContinue
.2353	60		rts				rts
.2354					_EVAContinue:
.2354	08		php				php 								; CS x 32 ; CC x 32 x 40
.2355	c8		iny				iny 								; get the next character, strip bit 7
.2356	b1 08		lda ($08),y			lda 	(srcPtr),y
.2358	88		dey				dey
.2359	29 7f		and #$7f			and 	#$7F
.235b	20 e5 21	jsr $21e5			jsr 	CheckIsLetter 				; letter ?
.235e	b0 08		bcs $2368			bcs 	_EVACharOkay
.2360	20 f1 21	jsr $21f1			jsr 	CheckIsDigit				; fail if not digit.
.2363	90 32		bcc $2397			bcc 	_EVAExit
.2365	18		clc				clc
.2366	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.2368					_EVACharOkay:
.2368	c8		iny				iny 								; char okay advance to it.
.2369	38		sec				sec 								; range 1-36
.236a	e9 40		sbc #$40			sbc 	#64
.236c	28		plp				plp 								; which multiplier ?
.236d	90 0f		bcc $237e			bcc 	_EVATimes32x40
.236f	85 12		sta $12				sta 	temp2 						; save in temp2 - A x 32
.2371	64 13		stz $13				stz 	temp2+1
.2373	a2 05		ldx #$05			ldx 	#5
.2375	06 12		asl $12		_EVA32:	asl 	temp2
.2377	26 13		rol $13				rol 	temp2+1
.2379	ca		dex				dex
.237a	d0 f9		bne $2375			bne 	_EVA32
.237c	80 0b		bra $2389			bra 	_EVAAddVar
.237e					_EVATimes32x40:
.237e	85 13		sta $13				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.2380	64 12		stz $12				stz 	temp2
.2382	0a		asl a				asl 	a
.2383	0a		asl a				asl 	a
.2384	18		clc				clc
.2385	65 13		adc $13				adc 	temp2+1
.2387	85 13		sta $13				sta 	temp2+1
.2389					_EVAAddVar:
.2389	18		clc				clc
.238a	a5 10		lda $10				lda 	temp1
.238c	65 12		adc $12				adc 	temp2
.238e	85 10		sta $10				sta 	temp1
.2390	a5 11		lda $11				lda 	temp1+1
.2392	65 13		adc $13				adc 	temp2+1
.2394	85 11		sta $11				sta 	temp1+1
.2396	08		php				php
.2397					_EVAExit:
.2397	28		plp				plp
.2398	60		rts				rts

;******  Return to file: files.asm


;******  Return to file: kernel.asm

.2399					ColdStart:
.2399	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.239b	9a		txs				txs
.239c	20 5f 24	jsr $245f			jsr 	ExternInitialise
.239f	a9 da		lda #$da			lda 	#BootMsg & $FF
.23a1	a0 23		ldy #$23			ldy 	#BootMsg >> 8
.23a3	20 53 25	jsr $2553			jsr 	EXPrintString
.23a6					WarmStartBlankStack:
.23a6	86 10		stx $10				stx 	temp1
.23a8	a2 80		ldx #$80			ldx 	#NumberStackBase
.23aa	9a		txs				txs
.23ab	a6 10		ldx $10				ldx 	temp1
.23ad					WarmStart:
.23ad	a9 03		lda #$03			lda 	#COL_Yellow
.23af	20 98 24	jsr $2498			jsr 	ExternColour
.23b2	20 bb 24	jsr $24bb			jsr 	ExternInput
.23b5	a9 06		lda #$06			lda 	#COL_Cyan
.23b7	20 98 24	jsr $2498			jsr 	ExternColour
.23ba	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.23bc	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.23be	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.23c1	a9 10		lda #$10			lda 	#textBuffer & $FF
.23c3	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.23c5	20 b9 1f	jsr $1fb9			jsr 	EncodeProgram
.23c8	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.23cb	0d 12 09	ora $0912			ora 	encodeBuffer+2
.23ce	d0 05		bne $23d5			bne 	LineEditor 					; if so, do the line editing code.
.23d0	64 05		stz $05				stz 	rsp
.23d2	4c 00 00	jmp $0000			jmp 	NextCode
.23d5					LineEditor:
.23d5	20 65 19	jsr $1965			jsr 	EditProgram
.23d8	80 cc		bra $23a6			bra 	WarmStartBlankStack
.23da					BootMsg:
>23da	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>23e2	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>23f2	2a 0d 0d
>23f5	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>23fd	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>240d	30 32 30 0d 0d
>2412	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>2419	5b 32 30 2d 30 31 2d 31			.text	"[20-01-17 07:56]"
>2421	37 20 30 37 3a 35 36 5d

;******  Return to file: kernel.asm

>2429	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/error.asm

.242c					ErrorHandler:
.242c	68		pla				pla 								; get message address
.242d	7a		ply				ply
.242e	1a		inc a				inc 	a
.242f	d0 01		bne $2432			bne 	_EHNoCarry
.2431	c8		iny				iny
.2432					_EHNoCarry:
.2432	20 53 25	jsr $2553			jsr 	EXPrintString
.2435	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.2437	b1 03		lda ($03),y			lda 	(IP),y
.2439	c8		iny				iny
.243a	11 03		ora ($03),y			ora 	(IP),y
.243c	f0 14		beq $2452			beq 	_EHNoLine
.243e	a9 5a		lda #$5a			lda 	#_EHMsg2 & $FF 				; print " at "
.2440	a0 24		ldy #$24			ldy 	#_EHMsg2 >> 8
.2442	20 53 25	jsr $2553			jsr 	EXPrintString
.2445	a0 02		ldy #$02			ldy 	#2 							; print line number
.2447	b1 03		lda ($03),y			lda 	(IP),y
.2449	48		pha				pha
.244a	88		dey				dey
.244b	b1 03		lda ($03),y			lda 	(IP),y
.244d	7a		ply				ply
.244e	18		clc				clc
.244f	20 7d 1d	jsr $1d7d			jsr 	PrintYA
.2452					_EHNoLine:
.2452	a9 0d		lda #$0d			lda 	#13
.2454	20 8c 24	jsr $248c			jsr 	ExternPrint
.2457	4c a6 23	jmp $23a6			jmp 	WarmStartBlankStack			; S is indeterminate
>245a	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.245f					ExternInitialise:
.245f	a9 90		lda #$90			lda 	#144 						; set colour
.2461	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2464	a9 01		lda #$01			lda 	#$01
.2466	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2469	a9 0e		lda #$0e			lda 	#14							; lower case
.246b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.246e	a9 93		lda #$93			lda 	#147 						; clear screen
.2470	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2473	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.2475	4c 98 24	jmp $2498			jmp 	ExternColour
.2478					ExternCheckBreak:
.2478	da		phx				phx 								; make sure we keep XY
.2479	5a		phy				phy
.247a	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.247d	f0 03		beq $2482			beq		_ECBExit 					; stopped
.247f	7a		ply				ply 								; restore and exit.
.2480	fa		plx				plx
.2481	60		rts				rts
.2482					_ECBExit:
.2482	20 2c 24	jsr $242c			jsr 	ErrorHandler
>2485	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.248c					ExternPrint:
.248c	48		pha				pha
.248d	da		phx				phx
.248e	5a		phy				phy
.248f	29 7f		and #$7f			and 	#$7F
.2491	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2494	7a		ply				ply
.2495	fa		plx				plx
.2496	68		pla				pla
.2497	60		rts				rts
.2498					ExternColour:
.2498	48		pha				pha
.2499	da		phx				phx
.249a	48		pha				pha
.249b	29 08		and #$08			and 	#8
.249d	0a		asl a				asl 	a
.249e	0a		asl a				asl 	a
.249f	0a		asl a				asl 	a
.24a0	0a		asl a				asl 	a
.24a1	49 92		eor #$92			eor 	#$92
.24a3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24a6	68		pla				pla
.24a7	29 07		and #$07			and 	#7
.24a9	aa		tax				tax
.24aa	bd b3 24	lda $24b3,x			lda 	_ECTable,x
.24ad	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24b0	fa		plx				plx
.24b1	68		pla				pla
.24b2	60		rts				rts
.24b3					_ECTable:
>24b3	90						.byte 	144
>24b4	1c						.byte 	28
>24b5	1e						.byte 	30
>24b6	9e						.byte 	158
>24b7	1f						.byte 	31
>24b8	9c						.byte 	156
>24b9	9f						.byte 	159
>24ba	05						.byte 	5
.24bb					ExternInput:
.24bb	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.24bd	85 14		sta $14				sta 	temp3
.24bf	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.24c1	85 15		sta $15				sta 	temp3+1
.24c3	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.24c6	c9 0d		cmp #$0d			cmp 	#13
.24c8	f0 0c		beq $24d6			beq 	_EIExit
.24ca	29 7f		and #$7f			and 	#$7F
.24cc	92 14		sta ($14)			sta 	(temp3)
.24ce	e6 14		inc $14				inc 	temp3
.24d0	d0 f1		bne $24c3			bne 	_EIRead
.24d2	e6 15		inc $15				inc 	temp3+1
.24d4	80 ed		bra $24c3			bra 	_EIRead
.24d6	a9 00		lda #$00	_EIExit:lda 	#0
.24d8	92 14		sta ($14)			sta 	(temp3)
.24da	a9 0d		lda #$0d			lda 	#13
.24dc	20 8c 24	jsr $248c			jsr 	ExternPrint
.24df	60		rts				rts
.24e0					ExternSave:
.24e0	da		phx				phx
.24e1	5a		phy				phy
.24e2	85 12		sta $12				sta 	temp2 						; save start
.24e4	84 13		sty $13				sty 	temp2+1
.24e6	20 48 25	jsr $2548			jsr 	EXGetLength 				; get length of file into A
.24e9	a6 14		ldx $14				ldx 	temp3
.24eb	a4 15		ldy $15				ldy 	temp3+1
.24ed	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.24f0	a9 01		lda #$01			lda 	#1
.24f2	a2 08		ldx #$08			ldx 	#8	 						; device #8
.24f4	a0 00		ldy #$00			ldy 	#0
.24f6	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.24f9	a6 10		ldx $10				ldx 	temp1 						; end address
.24fb	a4 11		ldy $11				ldy 	temp1+1
.24fd	a9 12		lda #$12			lda 	#temp2
.24ff	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.2502	b0 03		bcs $2507			bcs 	_ESSave
.2504	7a		ply				ply
.2505	fa		plx				plx
.2506	60		rts				rts
.2507					_ESSave:
.2507	20 2c 24	jsr $242c			jsr 	ErrorHandler
>250a	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>2512	4c 45 44 00
.2516					ExternLoad:
.2516	da		phx				phx 								; save XY
.2517	5a		phy				phy
.2518	48		pha				pha 								; save target
.2519	5a		phy				phy
.251a	20 48 25	jsr $2548			jsr 	EXGetLength 				; get length of file into A
.251d	a6 14		ldx $14				ldx 	temp3
.251f	a4 15		ldy $15				ldy 	temp3+1
.2521	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.2524	a9 01		lda #$01			lda 	#1
.2526	a2 08		ldx #$08			ldx 	#8	 						; device #8
.2528	a0 00		ldy #$00			ldy 	#0
.252a	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.252d	7a		ply				ply 								; restore target to YX and call load
.252e	fa		plx				plx
.252f	a9 00		lda #$00			lda 	#0 							; load command
.2531	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.2534	b0 03		bcs $2539			bcs 	_ESLoad
.2536	7a		ply				ply
.2537	fa		plx				plx
.2538	60		rts				rts
.2539					_ESLoad:
.2539	20 2c 24	jsr $242c			jsr 	ErrorHandler
>253c	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>2544	4c 45 44 00
.2548					EXGetLength:
.2548	5a		phy				phy
.2549	a0 ff		ldy #$ff			ldy 	#255
.254b	c8		iny		_EXGL0:	iny
.254c	b1 14		lda ($14),y			lda 	(temp3),y
.254e	d0 fb		bne $254b			bne 	_EXGL0
.2550	98		tya				tya
.2551	7a		ply				ply
.2552	60		rts				rts
.2553					EXPrintString:
.2553	48		pha				pha
.2554	5a		phy				phy
.2555	84 11		sty $11				sty 	temp1+1
.2557	85 10		sta $10				sta 	temp1
.2559	a0 00		ldy #$00			ldy 	#0
.255b					_EXPSLoop:
.255b	b1 10		lda ($10),y			lda 	(temp1),y
.255d	f0 08		beq $2567			beq 	_EXPSExit
.255f	29 7f		and #$7f			and 	#$7F
.2561	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2564	c8		iny				iny
.2565	80 f4		bra $255b			bra 	_EXPSLoop
.2567					_EXPSExit:
.2567	7a		ply				ply
.2568	68		pla				pla
.2569	60		rts				rts

;******  Return to file: kernel.asm

.256a					Dictionary:

;******  Processing file: generated/dictionary.inc

>256a	05					.byte	_end0-*
>256b	00					.byte	$00
>256c	b2 14					.word	WordWrite
>256e	a1					.byte	$a1
.256f					_end0:
>256f	10					.byte	_end1-*
>2570	52					.byte	$52
>2571	4a 1e					.word	VarWriteHandler
>2573	64 1e					.word	VarWriteHandlerDecode
>2575	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>257d	45 d2
.257f					_end1:
>257f	10					.byte	_end2-*
>2580	52					.byte	$52
>2581	0e 1e					.word	VarAddressHandler
>2583	26 1e					.word	VarAddrHandlerDecode
>2585	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>258d	45 d2
.258f					_end2:
>258f	10					.byte	_end3-*
>2590	52					.byte	$52
>2591	2b 1e					.word	VarReadHandler
>2593	45 1e					.word	VarReadHandlerDecode
>2595	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>259d	45 d2
.259f					_end3:
>259f	0c					.byte	_end4-*
>25a0	52					.byte	$52
>25a1	84 16					.word	CallHandler
>25a3	5d 17					.word	CallHandlerDecode
>25a5	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.25ab					_end4:
>25ab	0f					.byte	_end5-*
>25ac	53					.byte	$53
>25ad	81 1c					.word	SkipComment
>25af	8e 1c					.word	CommentDecoder
>25b1	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>25b9	d4
.25ba					_end5:
>25ba	0e					.byte	_end6-*
>25bb	53					.byte	$53
>25bc	ac 1c					.word	DefineCode
>25be	c2 1c					.word	DefineDecoder
>25c0	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.25c8					_end6:
>25c8	0f					.byte	_end7-*
>25c9	52					.byte	$52
>25ca	15 10					.word	Literal2Byte
>25cc	5d 10					.word	Literal2ByteDecode
>25ce	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>25d6	cc
.25d7					_end7:
>25d7	0e					.byte	_end8-*
>25d8	80					.byte	$80
>25d9	6a 1c					.word	NextLine
>25db	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>25e3	4e c5
.25e5					_end8:
>25e5	0e					.byte	_end9-*
>25e6	53					.byte	$53
>25e7	6f 10					.word	LiteralString
>25e9	8e 10					.word	LiteralStringDecoder
>25eb	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.25f3					_end9:
>25f3	05					.byte	_end10-*
>25f4	00					.byte	$00
>25f5	2e 12					.word	Multiply16x16
>25f7	aa					.byte	$aa
.25f8					_end10:
>25f8	05					.byte	_end11-*
>25f9	00					.byte	$00
>25fa	9f 10					.word	Add
>25fc	ab					.byte	$ab
.25fd					_end11:
>25fd	06					.byte	_end12-*
>25fe	00					.byte	$00
>25ff	c3 14					.word	WordAdd
>2601	2b a1					.byte	$2b,$a1
.2603					_end12:
>2603	05					.byte	_end13-*
>2604	00					.byte	$00
>2605	ae 10					.word	Subtract
>2607	ad					.byte	$ad
.2608					_end13:
>2608	06					.byte	_end14-*
>2609	00					.byte	$00
>260a	6a 13					.word	ConstantMinus1
>260c	2d b1					.byte	$2d,$b1
.260e					_end14:
>260e	06					.byte	_end15-*
>260f	00					.byte	$00
>2610	31 1b					.word	DumpStack
>2612	2e ae					.byte	$2e,$ae
.2614					_end15:
>2614	05					.byte	_end16-*
>2615	00					.byte	$00
>2616	7f 11					.word	Divide16x16
>2618	af					.byte	$af
.2619					_end16:
>2619	05					.byte	_end17-*
>261a	00					.byte	$00
>261b	5d 13					.word	Constant0
>261d	b0					.byte	$b0
.261e					_end17:
>261e	06					.byte	_end18-*
>261f	00					.byte	$00
>2620	c3 12					.word	CheckMinus
>2622	30 bc					.byte	$30,$bc
.2624					_end18:
>2624	06					.byte	_end19-*
>2625	00					.byte	$00
>2626	d7 12					.word	CheckZero
>2628	30 bd					.byte	$30,$bd
.262a					_end19:
>262a	05					.byte	_end20-*
>262b	00					.byte	$00
>262c	79 13					.word	C1
>262e	b1					.byte	$b1
.262f					_end20:
>262f	06					.byte	_end21-*
>2630	00					.byte	$00
>2631	6d 12					.word	Unary1Plus
>2633	31 ab					.byte	$31,$ab
.2635					_end21:
>2635	06					.byte	_end22-*
>2636	00					.byte	$00
>2637	84 12					.word	Unary1Minus
>2639	31 ad					.byte	$31,$ad
.263b					_end22:
>263b	06					.byte	_end23-*
>263c	00					.byte	$00
>263d	91 13					.word	C10
>263f	31 b0					.byte	$31,$b0
.2641					_end23:
>2641	07					.byte	_end24-*
>2642	00					.byte	$00
>2643	ba 13					.word	C100
>2645	31 30 b0				.byte	$31,$30,$b0
.2648					_end24:
>2648	08					.byte	_end25-*
>2649	00					.byte	$00
>264a	e9 13					.word	C1024
>264c	31 30 32 b4				.byte	$31,$30,$32,$b4
.2650					_end25:
>2650	07					.byte	_end26-*
>2651	00					.byte	$00
>2652	be 13					.word	C127
>2654	31 32 b7				.byte	$31,$32,$b7
.2657					_end26:
>2657	07					.byte	_end27-*
>2658	00					.byte	$00
>2659	c2 13					.word	C128
>265b	31 32 b8				.byte	$31,$32,$b8
.265e					_end27:
>265e	06					.byte	_end28-*
>265f	00					.byte	$00
>2660	95 13					.word	C15
>2662	31 b5					.byte	$31,$b5
.2664					_end28:
>2664	06					.byte	_end29-*
>2665	00					.byte	$00
>2666	99 13					.word	C16
>2668	31 b6					.byte	$31,$b6
.266a					_end29:
>266a	07					.byte	_end30-*
>266b	00					.byte	$00
>266c	fb 12					.word	Times16
>266e	31 36 aa				.byte	$31,$36,$aa
.2671					_end30:
>2671	07					.byte	_end31-*
>2672	00					.byte	$00
>2673	0e 13					.word	Divide16
>2675	31 36 af				.byte	$31,$36,$af
.2678					_end31:
>2678	05					.byte	_end32-*
>2679	00					.byte	$00
>267a	7d 13					.word	C2
>267c	b2					.byte	$b2
.267d					_end32:
>267d	06					.byte	_end33-*
>267e	00					.byte	$00
>267f	07 13					.word	Times2
>2681	32 aa					.byte	$32,$aa
.2683					_end33:
>2683	06					.byte	_end34-*
>2684	00					.byte	$00
>2685	76 12					.word	Unary2Plus
>2687	32 ab					.byte	$32,$ab
.2689					_end34:
>2689	06					.byte	_end35-*
>268a	00					.byte	$00
>268b	8f 12					.word	Unary2Minus
>268d	32 ad					.byte	$32,$ad
.268f					_end35:
>268f	06					.byte	_end36-*
>2690	00					.byte	$00
>2691	1a 13					.word	Divide2
>2693	32 af					.byte	$32,$af
.2695					_end36:
>2695	06					.byte	_end37-*
>2696	00					.byte	$00
>2697	9d 13					.word	C24
>2699	32 b4					.byte	$32,$b4
.269b					_end37:
>269b	07					.byte	_end38-*
>269c	00					.byte	$00
>269d	c6 13					.word	C255
>269f	32 35 b5				.byte	$32,$35,$b5
.26a2					_end38:
>26a2	07					.byte	_end39-*
>26a3	00					.byte	$00
>26a4	d1 13					.word	C256
>26a6	32 35 b6				.byte	$32,$35,$b6
.26a9					_end39:
>26a9	08					.byte	_end40-*
>26aa	00					.byte	$00
>26ab	21 13					.word	Times256
>26ad	32 35 36 aa				.byte	$32,$35,$36,$aa
.26b1					_end40:
>26b1	08					.byte	_end41-*
>26b2	00					.byte	$00
>26b3	2a 13					.word	Divide256
>26b5	32 35 36 af				.byte	$32,$35,$36,$af
.26b9					_end41:
>26b9	05					.byte	_end42-*
>26ba	00					.byte	$00
>26bb	81 13					.word	C3
>26bd	b3					.byte	$b3
.26be					_end42:
>26be	06					.byte	_end43-*
>26bf	00					.byte	$00
>26c0	ae 13					.word	C32
>26c2	33 b2					.byte	$33,$b2
.26c4					_end43:
>26c4	09					.byte	_end44-*
>26c5	00					.byte	$00
>26c6	01 14					.word	C32767
>26c8	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.26cd					_end44:
>26cd	09					.byte	_end45-*
>26ce	00					.byte	$00
>26cf	0d 14					.word	C32768
>26d1	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.26d6					_end45:
>26d6	05					.byte	_end46-*
>26d7	00					.byte	$00
>26d8	85 13					.word	C4
>26da	b4					.byte	$b4
.26db					_end46:
>26db	06					.byte	_end47-*
>26dc	00					.byte	$00
>26dd	03 13					.word	Times4
>26df	34 aa					.byte	$34,$aa
.26e1					_end47:
>26e1	06					.byte	_end48-*
>26e2	00					.byte	$00
>26e3	16 13					.word	Divide4
>26e5	34 af					.byte	$34,$af
.26e7					_end48:
>26e7	08					.byte	_end49-*
>26e8	00					.byte	$00
>26e9	f5 13					.word	C4096
>26eb	34 30 39 b6				.byte	$34,$30,$39,$b6
.26ef					_end49:
>26ef	05					.byte	_end50-*
>26f0	00					.byte	$00
>26f1	89 13					.word	C5
>26f3	b5					.byte	$b5
.26f4					_end50:
>26f4	07					.byte	_end51-*
>26f5	00					.byte	$00
>26f6	dd 13					.word	C512
>26f8	35 31 b2				.byte	$35,$31,$b2
.26fb					_end51:
>26fb	06					.byte	_end52-*
>26fc	00					.byte	$00
>26fd	b2 13					.word	C63
>26ff	36 b3					.byte	$36,$b3
.2701					_end52:
>2701	06					.byte	_end53-*
>2702	00					.byte	$00
>2703	b6 13					.word	C64
>2705	36 b4					.byte	$36,$b4
.2707					_end53:
>2707	05					.byte	_end54-*
>2708	00					.byte	$00
>2709	8d 13					.word	C8
>270b	b8					.byte	$b8
.270c					_end54:
>270c	06					.byte	_end55-*
>270d	00					.byte	$00
>270e	ff 12					.word	Times8
>2710	38 aa					.byte	$38,$aa
.2712					_end55:
>2712	06					.byte	_end56-*
>2713	00					.byte	$00
>2714	12 13					.word	Divide8
>2716	38 af					.byte	$38,$af
.2718					_end56:
>2718	05					.byte	_end57-*
>2719	40					.byte	$40
>271a	1a 17					.word	ReturnHandler
>271c	bb					.byte	$bb
.271d					_end57:
>271d	05					.byte	_end58-*
>271e	00					.byte	$00
>271f	1b 11					.word	CheckLess
>2721	bc					.byte	$bc
.2722					_end58:
>2722	06					.byte	_end59-*
>2723	00					.byte	$00
>2724	34 11					.word	CheckLessEq
>2726	3c bd					.byte	$3c,$bd
.2728					_end59:
>2728	06					.byte	_end60-*
>2729	00					.byte	$00
>272a	e4 10					.word	CheckNotEqual
>272c	3c be					.byte	$3c,$be
.272e					_end60:
>272e	05					.byte	_end61-*
>272f	00					.byte	$00
>2730	e7 10					.word	CheckEqual
>2732	bd					.byte	$bd
.2733					_end61:
>2733	05					.byte	_end62-*
>2734	00					.byte	$00
>2735	37 11					.word	CheckGreater
>2737	be					.byte	$be
.2738					_end62:
>2738	06					.byte	_end63-*
>2739	00					.byte	$00
>273a	18 11					.word	CheckGreaterEq
>273c	3e bd					.byte	$3e,$bd
.273e					_end63:
>273e	08					.byte	_end64-*
>273f	00					.byte	$00
>2740	22 14					.word	TestDup
>2742	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.2746					_end64:
>2746	05					.byte	_end65-*
>2747	00					.byte	$00
>2748	97 14					.word	WordRead
>274a	c0					.byte	$c0
.274b					_end65:
>274b	07					.byte	_end66-*
>274c	00					.byte	$00
>274d	9d 12					.word	Absolute
>274f	41 42 d3				.byte	$41,$42,$d3
.2752					_end66:
>2752	09					.byte	_end67-*
>2753	00					.byte	$00
>2754	da 14					.word	AllocateMemory
>2756	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.275b					_end67:
>275b	07					.byte	_end68-*
>275c	00					.byte	$00
>275d	bd 10					.word	And
>275f	41 4e c4				.byte	$41,$4e,$c4
.2762					_end68:
>2762	0a					.byte	_end69-*
>2763	00					.byte	$00
>2764	bc 1a					.word	AssertCode
>2766	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.276c					_end69:
>276c	09					.byte	_end70-*
>276d	00					.byte	$00
>276e	f0 12					.word	ByteSwap
>2770	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2775					_end70:
>2775	06					.byte	_end71-*
>2776	00					.byte	$00
>2777	a5 14					.word	ByteWrite
>2779	43 a1					.byte	$43,$a1
.277b					_end71:
>277b	06					.byte	_end72-*
>277c	00					.byte	$00
>277d	8e 14					.word	ByteRead
>277f	43 c0					.byte	$43,$c0
.2781					_end72:
>2781	07					.byte	_end73-*
>2782	00					.byte	$00
>2783	e7 17					.word	ClrHandler
>2785	43 4c d2				.byte	$43,$4c,$d2
.2788					_end73:
>2788	08					.byte	_end74-*
>2789	00					.byte	$00
>278a	19 14					.word	Drop
>278c	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2790					_end74:
>2790	07					.byte	_end75-*
>2791	00					.byte	$00
>2792	2b 14					.word	Dup
>2794	44 55 d0				.byte	$44,$55,$d0
.2797					_end75:
>2797	0a					.byte	_end76-*
>2798	21					.byte	$21
>2799	d0 15					.word	ElseHandler
>279b	d3 15					.word	ElseEncoder
>279d	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.27a1					_end76:
>27a1	07					.byte	_end77-*
>27a2	00					.byte	$00
>27a3	dd 1a					.word	EndProgram
>27a5	45 4e c4				.byte	$45,$4e,$c4
.27a8					_end77:
>27a8	0b					.byte	_end78-*
>27a9	20					.byte	$20
>27aa	f2 15					.word	EndIfHandler
>27ac	f5 15					.word	EndIfEncoder
>27ae	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.27b3					_end78:
>27b3	09					.byte	_end79-*
>27b4	20					.byte	$20
>27b5	f0 14					.word	ForHandler
>27b7	26 15					.word	ForEncoder
>27b9	46 4f d2				.byte	$46,$4f,$d2
.27bc					_end79:
>27bc	08					.byte	_end80-*
>27bd	21					.byte	$21
>27be	bb 15					.word	IfHandler
>27c0	be 15					.word	IfEncoder
>27c2	49 c6					.byte	$49,$c6
.27c4					_end80:
>27c4	09					.byte	_end81-*
>27c5	00					.byte	$00
>27c6	9a 15					.word	GetIndex
>27c8	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.27cd					_end81:
>27cd	08					.byte	_end82-*
>27ce	00					.byte	$00
>27cf	16 1a					.word	ListCode
>27d1	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.27d5					_end82:
>27d5	07					.byte	_end83-*
>27d6	00					.byte	$00
>27d7	54 11					.word	Maximum
>27d9	4d 41 d8				.byte	$4d,$41,$d8
.27dc					_end83:
>27dc	07					.byte	_end84-*
>27dd	00					.byte	$00
>27de	50 11					.word	Minimum
>27e0	4d 49 ce				.byte	$4d,$49,$ce
.27e3					_end84:
>27e3	07					.byte	_end85-*
>27e4	00					.byte	$00
>27e5	90 11					.word	Modulus16x16
>27e7	4d 4f c4				.byte	$4d,$4f,$c4
.27ea					_end85:
>27ea	0a					.byte	_end86-*
>27eb	00					.byte	$00
>27ec	a4 12					.word	Negate
>27ee	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.27f4					_end86:
>27f4	07					.byte	_end87-*
>27f5	00					.byte	$00
>27f6	de 17					.word	NewHandler
>27f8	4e 45 d7				.byte	$4e,$45,$d7
.27fb					_end87:
>27fb	0a					.byte	_end88-*
>27fc	21					.byte	$21
>27fd	33 15					.word	NextHandler
>27ff	72 15					.word	NextEncoder
>2801	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.2805					_end88:
>2805	07					.byte	_end89-*
>2806	00					.byte	$00
>2807	5f 14					.word	Nip
>2809	4e 49 d0				.byte	$4e,$49,$d0
.280c					_end89:
>280c	07					.byte	_end90-*
>280d	00					.byte	$00
>280e	b4 12					.word	OneComplement
>2810	4e 4f d4				.byte	$4e,$4f,$d4
.2813					_end90:
>2813	06					.byte	_end91-*
>2814	00					.byte	$00
>2815	d7 10					.word	LogOr
>2817	4f d2					.byte	$4f,$d2
.2819					_end91:
>2819	08					.byte	_end92-*
>281a	00					.byte	$00
>281b	47 14					.word	Over
>281d	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.2821					_end92:
>2821	0c					.byte	_end93-*
>2822	20					.byte	$20
>2823	24 16					.word	RepeatHandler
>2825	27 16					.word	RepeatEncoder
>2827	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.282d					_end93:
>282d	07					.byte	_end94-*
>282e	00					.byte	$00
>282f	33 13					.word	RandomNumber
>2831	52 4e c4				.byte	$52,$4e,$c4
.2834					_end94:
>2834	07					.byte	_end95-*
>2835	00					.byte	$00
>2836	64 14					.word	Rot
>2838	52 4f d4				.byte	$52,$4f,$d4
.283b					_end95:
>283b	07					.byte	_end96-*
>283c	00					.byte	$00
>283d	91 1a					.word	RunProgram
>283f	52 55 ce				.byte	$52,$55,$ce
.2842					_end96:
>2842	07					.byte	_end97-*
>2843	00					.byte	$00
>2844	df 12					.word	SignTOS
>2846	53 47 ce				.byte	$53,$47,$ce
.2849					_end97:
>2849	08					.byte	_end98-*
>284a	00					.byte	$00
>284b	d5 1a					.word	StopCode
>284d	53 54 4f d0				.byte	$53,$54,$4f,$d0
.2851					_end98:
>2851	08					.byte	_end99-*
>2852	00					.byte	$00
>2853	34 14					.word	Swap
>2855	53 57 41 d0				.byte	$53,$57,$41,$d0
.2859					_end99:
>2859	07					.byte	_end100-*
>285a	00					.byte	$00
>285b	a5 1a					.word	Call6502
>285d	53 59 d3				.byte	$53,$59,$d3
.2860					_end100:
>2860	0d					.byte	_end101-*
>2861	00					.byte	$00
>2862	63 1d					.word	IntToString
>2864	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>286c	c7
.286d					_end101:
>286d	0b					.byte	_end102-*
>286e	21					.byte	$21
>286f	34 16					.word	UntilHandler
>2871	37 16					.word	UntilEncoder
>2873	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.2878					_end102:
>2878	09					.byte	_end103-*
>2879	00					.byte	$00
>287a	e0 1a					.word	VlistCode
>287c	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2881					_end103:
>2881	0a					.byte	_end104-*
>2882	40					.byte	$40
>2883	30 18					.word	BreakCmd
>2885	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.288b					_end104:
>288b	09					.byte	_end105-*
>288c	00					.byte	$00
>288d	2a 18					.word	ExitDump
>288f	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2894					_end105:
>2894	07					.byte	_end106-*
>2895	00					.byte	$00
>2896	ca 10					.word	Xor
>2898	58 4f d2				.byte	$58,$4f,$d2
.289b					_end106:
>289b	08					.byte	_end107-*
>289c	00					.byte	$00
>289d	ad 1b					.word	System_Save
>289f	53 41 56 c5				.byte	$53,$41,$56,$c5
.28a3					_end107:
>28a3	08					.byte	_end108-*
>28a4	00					.byte	$00
>28a5	cb 1b					.word	System_Load
>28a7	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.28ab					_end108:
>28ab	0d					.byte	_end109-*
>28ac	11					.byte	$11
>28ad	69 1e					.word	IndexHandler
>28af	78 1e					.word	IndexHandlerDecode
>28b1	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.28b8					_end109:
>28b8	07					.byte	_end110-*
>28b9	00					.byte	$00
>28ba	7c 1b					.word	OldCode
>28bc	4f 4c c4				.byte	$4f,$4c,$c4
.28bf					_end110:
>28bf	12					.byte	_end111-*
>28c0	52					.byte	$52
>28c1	14 10					.word	HexLiteral2Byte
>28c3	2b 10					.word	HexLiteral2ByteDecode
>28c5	24 24 48 45 58 4c 49 54			.byte	$24,$24,$48,$45,$58,$4c,$49,$54,$45,$52,$41,$cc
>28cd	45 52 41 cc
.28d1					_end111:
>28d1	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
