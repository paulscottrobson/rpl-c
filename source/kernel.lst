
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -D encode=0 -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 18 13:40:01 2020

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					encode=0

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.
=$9eff					LastMemoryByte = $9EFF 						; program ends here

;******  Processing file: code/data.asm

.0000					NextCode:
>0000							.fill 	8
=5					AltCode = NextCode+5 						; Patch goes here.
=3					IP = NextCode+3 							; the IP which points to the current instruction
.0008					rsp:
>0008							.byte 	?
.0009					tos:
>0009							.word 	?
.000b					srcPtr:
>000b							.word 	?
.000d					bufPtr:
>000d							.word 	?
.000f					matchPtr:
>000f							.word 	?
.0011					nextFreeMem:
>0011							.word 	?
.0013					temp1:
>0013							.word 	?
.0015					temp2:
>0015							.word 	?
.0017					temp3:
>0017							.word 	?
.0019					temp4:
>0019							.word 	?
.001b					listPtr:
>001b							.word 	?
.001d					SignCount:
>001d							.byte 	?
.001e					RandomSeed:
>001e							.word 	?
.0020					ListCount:
>0020							.byte 	?
.0021					ListLowest:
>0021							.word 	?
.0023					BreakTestCount:
>0023							.byte 	?
.0024					FastMode:
>0024							.byte 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow
=7					CTH_Variable = COL_White

;******  Return to file: kernel.asm

.1000	4c 2c 24	jmp $242c			jmp 	ColdStart

;******  Processing file: files.asm


;******  Processing file: code/core.src

.1003					InitialiseCoreCode:
.1003	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.1005	85 02		sta $02				sta 	NextCode+2
.1007	86 03		stx $03				stx 	NextCode+3 				; set the indirect address (IP)
.1009	84 04		sty $04				sty 	NextCode+4
.100b	a9 4c		lda #$4c			lda 	#$4C 					; JMP AltHandler
.100d	85 05		sta $05				sta 	AltCode
.100f	a9 31		lda #$31			lda 	#AlternateHandler & $FF
.1011	85 06		sta $06				sta 	AltCode+1
.1013	a9 10		lda #$10			lda 	#AlternateHandler >> 8
.1015	85 07		sta $07				sta 	AltCode+2
.1017	20 1d 10	jsr $101d			jsr 	SetRunMode 				; set run mode to current
.101a	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.101c	60		rts				rts								; (2 INX skip offset and line#)
.101d					SetRunMode:
.101d	a5 24		lda $24				lda 	FastMode
.101f	f0 07		beq $1028			beq 	_SRMSlow
.1021	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1023	85 00		sta $00				sta 	NextCode
.1025	85 01		sta $01				sta 	NextCode+1
.1027	60		rts				rts
.1028					_SRMSlow:
.1028	a9 80		lda #$80			lda 	#$80	 				; BRA AltCode
.102a	85 00		sta $00				sta 	NextCode
.102c	a9 03		lda #$03			lda 	#AltCode-NextCode-2
.102e	85 01		sta $01				sta 	NextCode+1
.1030	60		rts				rts
.1031					AlternateHandler:
.1031	e8		inx				inx 							; patched in - does the INX that is overwritten
.1032	e8		inx				inx
.1033	86 13		stx $13				stx 	temp1 					; save it
.1035	ba		tsx				tsx 							; check underflow
.1036	e0 81		cpx #$81			cpx 	#$81
.1038	b0 11		bcs $104b			bcs 	_AHStackError
.103a	a6 13		ldx $13				ldx 	temp1
.103c	a5 23		lda $23				lda 	BreakTestCount 			; do a break test say 1 in 32
.103e	18		clc				clc
.103f	69 08		adc #$08			adc 	#8
.1041	85 23		sta $23				sta 	BreakTestCount
.1043	90 03		bcc $1048			bcc 	_AHNoTest
.1045	20 0d 25	jsr $250d			jsr 	ExternCheckBreak
.1048					_AHNoTest:
.1048	4c 02 00	jmp $0002			jmp 	NextCode+2				; then the indirect jump.
.104b					_AHStackError:
.104b	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>104e	53 54 41 43 4b 20 55 4e				.text 	"STACK UNDERFLOW",0
>1056	44 45 52 46 4c 4f 57 00
.105e					SetSlowMode:
.105e	a9 00		lda #$00			lda 	#0
.1060	80 02		bra $1064			bra 	SetMode
.1062					SetFastMode:
.1062	a9 01		lda #$01			lda 	#1
.1064					SetMode:
.1064	85 24		sta $24				sta 	FastMode
.1066	20 1d 10	jsr $101d			jsr 	SetRunMode
.1069	4c 00 00	jmp $0000			jmp 	NextCode
.106c					HexLiteral2Byte:
.106c	ea		nop				nop 							; must have different address for decoding.
.106d					Literal2Byte:
.106d	a5 09		lda $09				lda 	TOS
.106f	48		pha				pha
.1070	a5 0a		lda $0a				lda 	TOS+1
.1072	48		pha				pha
.1073	e8		inx				inx  							; point X to the word
.1074	e8		inx				inx
.1075	8a		txa				txa 							; copy into Y
.1076	a8		tay				tay
.1077	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1079	85 09		sta $09				sta 	TOS
.107b	c8		iny				iny 							; read and push the MSB
.107c	b1 03		lda ($03),y			lda 	(IP),y
.107e	85 0a		sta $0a				sta 	TOS+1
.1080	4c 00 00	jmp $0000			jmp 	NextCode
.1083					HexLiteral2ByteDecode:
.1083	a9 06		lda #$06			lda 	#CTH_Keyword
.1085	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1088	a9 24		lda #$24			lda 	#"$"
.108a	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.108d	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.108f	48		pha				pha
.1090	c8		iny				iny
.1091	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1093	c8		iny				iny
.1094	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.1097	68		pla				pla
.1098	20 9c 10	jsr $109c			jsr 	HL2BDWrite
.109b	60		rts				rts
.109c					HL2BDWrite:
.109c	48		pha				pha
.109d	4a		lsr a				lsr 	a
.109e	4a		lsr a				lsr 	a
.109f	4a		lsr a				lsr 	a
.10a0	4a		lsr a				lsr 	a
.10a1	20 a5 10	jsr $10a5			jsr 	_HLNibble
.10a4	68		pla				pla
.10a5					_HLNibble:
.10a5	29 0f		and #$0f			and 	#$0F
.10a7	c9 0a		cmp #$0a			cmp 	#$0A
.10a9	90 03		bcc $10ae			bcc 	_HLNoAdjust
.10ab	18		clc				clc
.10ac	69 07		adc #$07			adc 	#7
.10ae					_HLNoAdjust:
.10ae	18		clc				clc
.10af	69 30		adc #$30			adc 	#48
.10b1	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10b4	60		rts				rts
.10b5					Literal2ByteDecode:
.10b5	a9 06		lda #$06			lda 	#CTH_Keyword
.10b7	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10ba	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10bc	aa		tax				tax
.10bd	c8		iny				iny
.10be	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.10c0	a8		tay				tay
.10c1	8a		txa				txa
.10c2	38		sec				sec 							; output signed
.10c3	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.10c6	60		rts				rts
.10c7					LiteralString:
.10c7	a5 09		lda $09				lda 	TOS
.10c9	48		pha				pha
.10ca	a5 0a		lda $0a				lda 	TOS+1
.10cc	48		pha				pha
.10cd	e8		inx				inx
.10ce	e8		inx				inx 							; skip over current word
.10cf	8a		txa				txa 							; add to IP + 1 to give string address
.10d0	a8		tay				tay 							; put in Y
.10d1	38		sec				sec 							; make that TOS
.10d2	65 03		adc $03				adc 	IP
.10d4	85 09		sta $09				sta 	TOS
.10d6	a5 04		lda $04				lda 	IP+1
.10d8	69 00		adc #$00			adc 	#0
.10da	85 0a		sta $0a				sta 	TOS+1
.10dc	8a		txa				txa 							; add data length to X
.10dd	18		clc				clc
.10de	71 03		adc ($03),y			adc 	(IP),y
.10e0	aa		tax				tax
.10e1	ca		dex				dex
.10e2	ca		dex				dex
.10e3	4c 00 00	jmp $0000			jmp 	NextCode
.10e6					LiteralStringDecoder:
.10e6	a9 05		lda #$05			lda 	#CTH_String
.10e8	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10eb	a9 22		lda #$22			lda 	#'"'
.10ed	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10f0	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.10f3	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.10f6	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/binary.src

.10f7					Add:
.10f7	7a		ply				ply
.10f8	68		pla				pla
.10f9	18		clc				clc
.10fa	65 09		adc $09				adc 	TOS
.10fc	85 09		sta $09				sta 	TOS
.10fe	98		tya				tya
.10ff	65 0a		adc $0a				adc 	TOS+1
.1101	85 0a		sta $0a				sta 	TOS+1
.1103	4c 00 00	jmp $0000			jmp 	NextCode
.1106					Subtract:
.1106	7a		ply				ply
.1107	68		pla				pla
.1108	38		sec				sec
.1109	e5 09		sbc $09				sbc 	TOS
.110b	85 09		sta $09				sta 	TOS
.110d	98		tya				tya
.110e	e5 0a		sbc $0a				sbc 	TOS+1
.1110	85 0a		sta $0a				sta 	TOS+1
.1112	4c 00 00	jmp $0000			jmp 	NextCode
.1115					And:
.1115	68		pla				pla
.1116	25 0a		and $0a				and 	TOS+1
.1118	85 0a		sta $0a				sta 	TOS+1
.111a	68		pla				pla
.111b	25 09		and $09				and 	TOS
.111d	85 09		sta $09				sta 	TOS
.111f	4c 00 00	jmp $0000			jmp 	NextCode
.1122					Xor:
.1122	68		pla				pla
.1123	45 0a		eor $0a				eor 	TOS+1
.1125	85 0a		sta $0a				sta 	TOS+1
.1127	68		pla				pla
.1128	45 09		eor $09				eor 	TOS
.112a	85 09		sta $09				sta 	TOS
.112c	4c 00 00	jmp $0000			jmp 	NextCode
.112f					LogOr:
.112f	68		pla				pla
.1130	05 0a		ora $0a				ora 	TOS+1
.1132	85 0a		sta $0a				sta 	TOS+1
.1134	68		pla				pla
.1135	05 09		ora $09				ora 	TOS
.1137	85 09		sta $09				sta 	TOS
.1139	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/compare.src

.113c					CheckNotEqual:
.113c	38		sec				sec
.113d	80 01		bra $1140			bra 	CECode
.113f					CheckEqual:
.113f	18		clc				clc
.1140					CECode:
.1140	86 13		stx $13				stx 	temp1
.1142	ba		tsx				tsx
.1143	08		php				php
.1144	a5 09		lda $09				lda 	TOS
.1146	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1149	d0 17		bne $1162			bne	 	CompareFalse
.114b	a5 0a		lda $0a				lda 	TOS+1
.114d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1150	d0 10		bne $1162			bne 	CompareFalse
.1152					CompareTrue:
.1152	a6 13		ldx $13				ldx 	temp1
.1154	28		plp				plp
.1155	b0 10		bcs $1167			bcs		CompareFalse2
.1157					CompareTrue2:
.1157	68		pla				pla
.1158	68		pla				pla
.1159	a9 ff		lda #$ff			lda 	#$FF
.115b	85 09		sta $09				sta 	TOS
.115d	85 0a		sta $0a				sta 	TOS+1
.115f	4c 00 00	jmp $0000			jmp 	NextCode
.1162					CompareFalse:
.1162	a6 13		ldx $13				ldx 	temp1
.1164	28		plp				plp
.1165	b0 f0		bcs $1157			bcs		CompareTrue2
.1167					CompareFalse2:
.1167	68		pla				pla
.1168	68		pla				pla
.1169	64 09		stz $09				stz 	TOS
.116b	64 0a		stz $0a				stz 	TOS+1
.116d	4c 00 00	jmp $0000			jmp 	NextCode
.1170					CheckGreaterEq:
.1170	38		sec				sec
.1171	80 01		bra $1174			bra		CLCode
.1173					CheckLess:
.1173	18		clc				clc
.1174	86 13		stx $13		CLCode:	stx 	temp1
.1176	ba		tsx				tsx
.1177	08		php				php
.1178	18		clc				clc
.1179	a5 09		lda $09				lda 	TOS
.117b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.117e	a5 0a		lda $0a				lda 	TOS+1
.1180	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1183	50 02		bvc $1187			bvc 	_CLNoFlip
.1185	49 80		eor #$80			eor 	#$80
.1187					_CLNoFlip:
.1187	0a		asl a				asl 	a
.1188	b0 d8		bcs $1162			bcs 	CompareFalse
.118a	80 c6		bra $1152			bra 	CompareTrue
.118c					CheckLessEq:
.118c	38		sec				sec
.118d	80 01		bra $1190			bra		CGCode
.118f					CheckGreater:
.118f	18		clc				clc
.1190					CGCode:
.1190	86 13		stx $13				stx 	temp1
.1192	ba		tsx				tsx
.1193	08		php				php
.1194	18		clc				clc
.1195	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1198	e5 09		sbc $09				sbc 	TOS
.119a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.119d	e5 0a		sbc $0a				sbc 	TOS+1
.119f	50 02		bvc $11a3			bvc 	_CGNoFlip
.11a1	49 80		eor #$80			eor 	#$80
.11a3					_CGNoFlip:
.11a3	0a		asl a				asl 	a
.11a4	b0 bc		bcs $1162			bcs 	CompareFalse
.11a6	80 aa		bra $1152			bra 	CompareTrue
.11a8					Minimum:
.11a8	a9 00		lda #$00			lda 	#0
.11aa	80 02		bra $11ae			bra 	MinMaxCode
.11ac					Maximum:
.11ac	a9 80		lda #$80			lda 	#$80
.11ae					MinMaxCode:
.11ae	85 14		sta $14				sta 	temp1+1
.11b0	86 13		stx $13				stx 	temp1
.11b2	ba		tsx				tsx
.11b3	38		sec				sec
.11b4	a5 09		lda $09				lda 	TOS
.11b6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.11b9	a5 0a		lda $0a				lda 	TOS+1
.11bb	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.11be	50 02		bvc $11c2			bvc 	_MMNoFlip
.11c0	49 80		eor #$80			eor 	#$80
.11c2					_MMNoFlip:
.11c2	45 14		eor $14				eor 	temp1+1
.11c4	30 0a		bmi $11d0			bmi 	_MMNoCopy
.11c6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.11c9	85 09		sta $09				sta 	TOS
.11cb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.11ce	85 0a		sta $0a				sta 	TOS+1
.11d0					_MMNoCopy:
.11d0	a6 13		ldx $13				ldx 	temp1
.11d2	68		pla				pla
.11d3	68		pla				pla
.11d4	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/divide.src

.11d7					Divide16x16:
.11d7	86 15		stx $15				stx 	temp2
.11d9	ba		tsx				tsx
.11da	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11dd	68		pla				pla
.11de	85 0a		sta $0a				sta 	TOS+1
.11e0	68		pla				pla
.11e1	85 09		sta $09				sta 	TOS
.11e3	a6 15		ldx $15				ldx 	temp2
.11e5	4c 00 00	jmp $0000			jmp 	NextCode
.11e8					Modulus16x16:
.11e8	86 15		stx $15				stx 	temp2
.11ea	ba		tsx				tsx
.11eb	20 fd 11	jsr $11fd			jsr 	IntegerDivide
.11ee	a6 15		ldx $15				ldx 	temp2
.11f0	68		pla				pla
.11f1	68		pla				pla
.11f2	a5 13		lda $13				lda 	temp1
.11f4	85 09		sta $09				sta 	TOS
.11f6	a5 14		lda $14				lda 	temp1+1
.11f8	85 0a		sta $0a				sta 	TOS+1
.11fa	4c 00 00	jmp $0000			jmp 	NextCode
.11fd					IntegerDivide:
.11fd	a5 09		lda $09				lda 	TOS 				; check for division by zero.
.11ff	05 0a		ora $0a				ora 	TOS+1
.1201	d0 14		bne $1217			bne 	_BFDOkay
.1203	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1206	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>120e	20 42 59 20 5a 45 52 4f 00
.1217					_BFDOkay:
.1217	64 13		stz $13				stz 	temp1 						; Q/Dividend/Left in +0
.1219	64 14		stz $14				stz 	temp1+1 					; M/Divisor/Right in +2
.121b	64 1d		stz $1d				stz 	SignCount 					; Count of signs.
.121d	20 58 12	jsr $1258			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1220	20 72 12	jsr $1272			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1223	5a		phy				phy 								; Y is the counter
.1224	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1226					_BFDLoop:
.1226	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1229	3e 01 01	rol $0101,x			rol 	Stack2High,x
.122c	26 13		rol $13				rol 	temp1
.122e	26 14		rol $14				rol 	temp1+1
.1230	38		sec				sec
.1231	a5 13		lda $13				lda 	temp1+0 					; Calculate A-M on stack.
.1233	e5 09		sbc $09				sbc 	TOS
.1235	48		pha				pha
.1236	a5 14		lda $14				lda 	temp1+1
.1238	e5 0a		sbc $0a				sbc 	TOS+1
.123a	90 0f		bcc $124b			bcc 	_BFDNoAdd
.123c	85 14		sta $14				sta 	temp1+1
.123e	68		pla				pla
.123f	85 13		sta $13				sta 	temp1+0
.1241	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1244	09 01		ora #$01			ora 	#1
.1246	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1249	80 01		bra $124c			bra 	_BFDNext
.124b					_BFDNoAdd:
.124b	68		pla				pla 								; Throw away the intermediate calculations
.124c					_BFDNext:
.124c	88		dey				dey
.124d	d0 d7		bne $1226			bne 	_BFDLoop
.124f	7a		ply				ply 								; restore Y
.1250	46 1d		lsr $1d				lsr 	SignCount 					; if sign count odd,
.1252	90 03		bcc $1257			bcc 	_BFDUnsigned 				; then the result is signed
.1254	20 5e 12	jsr $125e			jsr		IntegerNegateAlways 		; negate the result
.1257					_BFDUnsigned:
.1257	60		rts				rts
.1258					CheckIntegerNegate:
.1258	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.125b	30 01		bmi $125e			bmi 	IntegerNegateAlways 		; if so negate it
.125d	60		rts				rts
.125e					IntegerNegateAlways:
.125e	e6 1d		inc $1d				inc 	SignCount 					; bump the count of signs
.1260	38		sec				sec 								; negate
.1261	a9 00		lda #$00			lda 	#0
.1263	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1266	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1269	a9 00		lda #$00			lda 	#0
.126b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.126e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1271	60		rts				rts
.1272					CheckTOSNegate:
.1272	a5 0a		lda $0a				lda 	TOS+1
.1274	10 0f		bpl $1285			bpl		CTNNoChange
.1276	e6 1d		inc $1d				inc 	SignCount
.1278					TOSNegateAlways:
.1278	38		sec				sec
.1279	a9 00		lda #$00			lda 	#0
.127b	e5 09		sbc $09				sbc 	TOS
.127d	85 09		sta $09				sta 	TOS
.127f	a9 00		lda #$00			lda 	#0
.1281	e5 0a		sbc $0a				sbc 	TOS+1
.1283	85 0a		sta $0a				sta 	TOS+1
.1285					CTNNoChange:
.1285	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/multiply.src

.1286					Multiply16x16:
.1286	86 13		stx $13				stx 	temp1
.1288	ba		tsx				tsx
.1289	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.128c	85 15		sta $15				sta 	temp2
.128e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1291	85 16		sta $16				sta 	temp2+1
.1293	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1296	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1299					_MultLoop:
.1299	46 16		lsr $16				lsr 	temp2+1 					; ror temp2 into C
.129b	66 15		ror $15				ror 	temp2
.129d	90 11		bcc $12b0			bcc 	_MultNoAdd
.129f	18		clc				clc 								; add 1st to 2nd
.12a0	a5 09		lda $09				lda 	TOS
.12a2	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.12a5	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.12a8	a5 0a		lda $0a				lda 	TOS+1
.12aa	7d 01 01	adc $0101,x			adc 	Stack2High,x
.12ad	9d 01 01	sta $0101,x			sta 	Stack2High,x
.12b0					_MultNoAdd:
.12b0	06 09		asl $09				asl 	TOS 						; shift 1st left
.12b2	26 0a		rol $0a				rol 	TOS+1
.12b4	a5 15		lda $15				lda 	temp2	 					; until zero
.12b6	05 16		ora $16				ora 	temp2+1
.12b8	d0 df		bne $1299			bne 	_MultLoop
.12ba	a6 13		ldx $13				ldx 	temp1 						; restore X load result
.12bc	68		pla				pla
.12bd	85 0a		sta $0a				sta 	TOS+1
.12bf	68		pla				pla
.12c0	85 09		sta $09				sta 	TOS
.12c2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/arithmetic/unary.src

.12c5					Unary1Plus:
.12c5	e6 09		inc $09				inc 	TOS
.12c7	d0 02		bne $12cb			bne 	_U1PSkip
.12c9	e6 0a		inc $0a				inc 	TOS+1
.12cb					_U1PSkip:
.12cb	4c 00 00	jmp $0000			jmp 	NextCode
.12ce					Unary2Plus:
.12ce	18		clc				clc
.12cf	a5 09		lda $09				lda 	TOS
.12d1	69 02		adc #$02			adc 	#2
.12d3	85 09		sta $09				sta 	TOS
.12d5	90 02		bcc $12d9			bcc 	_U1PSkip
.12d7	e6 0a		inc $0a				inc 	TOS+1
.12d9					_U1PSkip:
.12d9	4c 00 00	jmp $0000			jmp 	NextCode
.12dc					Unary1Minus:
.12dc	a5 09		lda $09				lda 	TOS
.12de	d0 02		bne $12e2			bne 	_U1MSkip
.12e0	c6 0a		dec $0a				dec 	TOS+1
.12e2					_U1MSkip:
.12e2	c6 09		dec $09				dec 	TOS
.12e4	4c 00 00	jmp $0000			jmp 	NextCode
.12e7					Unary2Minus:
.12e7	38		sec				sec
.12e8	a5 09		lda $09				lda 	TOS
.12ea	e9 02		sbc #$02			sbc 	#2
.12ec	85 09		sta $09				sta 	TOS
.12ee	b0 02		bcs $12f2			bcs 	_U1PSkip
.12f0	c6 0a		dec $0a				dec 	TOS+1
.12f2					_U1PSkip:
.12f2	4c 00 00	jmp $0000			jmp 	NextCode
.12f5					Absolute:
.12f5	a5 0a		lda $0a				lda 	TOS+1
.12f7	30 03		bmi $12fc			bmi 	Negate
.12f9	4c 00 00	jmp $0000			jmp 	NextCode
.12fc					Negate:
.12fc	38		sec				sec
.12fd	a9 00		lda #$00			lda 	#0
.12ff	e5 09		sbc $09				sbc 	TOS
.1301	85 09		sta $09				sta 	TOS
.1303	a9 00		lda #$00			lda 	#0
.1305	e5 0a		sbc $0a				sbc 	TOS+1
.1307	85 0a		sta $0a				sta 	TOS+1
.1309	4c 00 00	jmp $0000			jmp 	NextCode
.130c					OneComplement:
.130c	a5 09		lda $09				lda 	TOS
.130e	49 ff		eor #$ff			eor 	#$FF
.1310	85 09		sta $09				sta 	TOS
.1312	a5 0a		lda $0a				lda 	TOS+1
.1314	49 ff		eor #$ff			eor 	#$FF
.1316	85 0a		sta $0a				sta 	TOS+1
.1318	4c 00 00	jmp $0000			jmp 	NextCode
.131b					CheckMinus:
.131b	a5 0a		lda $0a				lda 	TOS+1
.131d	30 07		bmi $1326			bmi 	UnaryTrue
.131f					UnaryFalse:
.131f	64 09		stz $09				stz 	TOS
.1321	64 0a		stz $0a				stz 	TOS+1
.1323	4c 00 00	jmp $0000			jmp 	NextCode
.1326					UnaryTrue:
.1326	a9 ff		lda #$ff			lda 	#$FF
.1328	85 09		sta $09				sta 	TOS
.132a	85 0a		sta $0a				sta 	TOS+1
.132c	4c 00 00	jmp $0000			jmp 	NextCode
.132f					CheckZero:
.132f	a5 09		lda $09				lda 	TOS
.1331	05 0a		ora $0a				ora 	TOS+1
.1333	d0 ea		bne $131f			bne 	UnaryFalse
.1335	80 ef		bra $1326			bra 	UnaryTrue
.1337					SignTOS:
.1337	a5 0a		lda $0a				lda 	TOS+1
.1339	30 eb		bmi $1326			bmi		UnaryTrue
.133b	05 09		ora $09				ora 	TOS
.133d	f0 e0		beq $131f			beq 	UnaryFalse
.133f	a9 01		lda #$01			lda 	#1
.1341	85 09		sta $09				sta 	TOS
.1343	64 0a		stz $0a				stz		TOS+1
.1345	4c 00 00	jmp $0000			jmp 	NextCode
.1348					ByteSwap:
.1348	a5 09		lda $09				lda 	TOS
.134a	a4 0a		ldy $0a				ldy 	TOS+1
.134c	85 0a		sta $0a				sta 	TOS+1
.134e	84 09		sty $09				sty 	TOS
.1350	4c 00 00	jmp $0000			jmp 	NextCode
.1353					Times16:
.1353	06 09		asl $09				asl 	TOS
.1355	26 0a		rol $0a				rol 	TOS+1
.1357					Times8:
.1357	06 09		asl $09				asl 	TOS
.1359	26 0a		rol $0a				rol 	TOS+1
.135b					Times4:
.135b	06 09		asl $09				asl 	TOS
.135d	26 0a		rol $0a				rol 	TOS+1
.135f					Times2:
.135f	06 09		asl $09				asl 	TOS
.1361	26 0a		rol $0a				rol 	TOS+1
.1363	4c 00 00	jmp $0000			jmp 	NextCode
.1366					Divide16:
.1366	46 0a		lsr $0a				lsr 	TOS+1
.1368	66 09		ror $09				ror 	TOS
.136a					Divide8:
.136a	46 0a		lsr $0a				lsr 	TOS+1
.136c	66 09		ror $09				ror 	TOS
.136e					Divide4:
.136e	46 0a		lsr $0a				lsr 	TOS+1
.1370	66 09		ror $09				ror 	TOS
.1372					Divide2:
.1372	46 0a		lsr $0a				lsr 	TOS+1
.1374	66 09		ror $09				ror 	TOS
.1376	4c 00 00	jmp $0000			jmp 	NextCode
.1379					Times256:
.1379	a5 09		lda $09				lda 	TOS
.137b	85 0a		sta $0a				sta 	TOS+1
.137d	64 09		stz $09				stz 	TOS
.137f	4c 00 00	jmp $0000			jmp 	NextCode
.1382					Divide256:
.1382	a5 0a		lda $0a				lda 	TOS+1
.1384	85 09		sta $09				sta 	TOS
.1386	64 0a		stz $0a				stz 	TOS+1
.1388	4c 00 00	jmp $0000			jmp 	NextCode
.138b					RandomNumber:
.138b	a5 09		lda $09				lda 	TOS
.138d	48		pha				pha
.138e	a5 0a		lda $0a				lda 	TOS+1
.1390	48		pha				pha
.1391	a5 1e		lda $1e				lda 	randomSeed
.1393	05 1f		ora $1f				ora 	randomSeed+1
.1395	d0 08		bne $139f			bne 	_RH_NoInit
.1397	a9 7c		lda #$7c			lda 	#$7C
.1399	85 1e		sta $1e				sta 	randomSeed
.139b	a9 a1		lda #$a1			lda 	#$A1
.139d	85 1f		sta $1f				sta 	randomSeed+1
.139f					_RH_NoInit:
.139f	a5 1e		lda $1e				lda 	randomSeed
.13a1	4a		lsr a		        lsr		a
.13a2	26 1f		rol $1f		        rol 	randomSeed+1
.13a4	90 02		bcc $13a8	        bcc 	_RH_NoEor
.13a6	49 b4		eor #$b4	        eor 	#$B4
.13a8					_RH_NoEor:
.13a8	85 1e		sta $1e		        sta 	randomSeed
.13aa	45 1f		eor $1f		        eor 	randomSeed+1
.13ac	85 0a		sta $0a		        sta 	TOS+1
.13ae	a5 1e		lda $1e		        lda 	randomSeed
.13b0	85 09		sta $09		        sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/literals.src

.13b5					Constant0:
.13b5	a5 09		lda $09				lda 	TOS
.13b7	48		pha				pha
.13b8	a5 0a		lda $0a				lda 	TOS+1
.13ba	48		pha				pha
.13bb	64 09		stz $09				stz 	TOS
.13bd	64 0a		stz $0a				stz 	TOS+1
.13bf	4c 00 00	jmp $0000			jmp 	NextCode
.13c2					ConstantMinus1:
.13c2	a5 09		lda $09				lda 	TOS
.13c4	48		pha				pha
.13c5	a5 0a		lda $0a				lda 	TOS+1
.13c7	48		pha				pha
.13c8	a9 ff		lda #$ff			lda 	#$FF
.13ca	85 09		sta $09				sta 	TOS
.13cc	85 0a		sta $0a				sta 	TOS+1
.13ce	4c 00 00	jmp $0000			jmp 	NextCode
.13d1					C1:
.13d1	a0 01		ldy #$01			ldy 	#1
.13d3	80 24		bra $13f9			bra 	Const1Byte
.13d5					C2:
.13d5	a0 02		ldy #$02			ldy 	#2
.13d7	80 20		bra $13f9			bra 	Const1Byte
.13d9					C3:
.13d9	a0 03		ldy #$03			ldy 	#3
.13db	80 1c		bra $13f9			bra 	Const1Byte
.13dd					C4:
.13dd	a0 04		ldy #$04			ldy 	#4
.13df	80 18		bra $13f9			bra 	Const1Byte
.13e1					C5:
.13e1	a0 05		ldy #$05			ldy 	#5
.13e3	80 14		bra $13f9			bra 	Const1Byte
.13e5					C8:
.13e5	a0 08		ldy #$08			ldy 	#8
.13e7	80 10		bra $13f9			bra 	Const1Byte
.13e9					C10:
.13e9	a0 0a		ldy #$0a			ldy 	#10
.13eb	80 0c		bra $13f9			bra 	Const1Byte
.13ed					C15:
.13ed	a0 0f		ldy #$0f			ldy 	#15
.13ef	80 08		bra $13f9			bra 	Const1Byte
.13f1					C16:
.13f1	a0 10		ldy #$10			ldy 	#16
.13f3	80 04		bra $13f9			bra 	Const1Byte
.13f5					C24:
.13f5	a0 18		ldy #$18			ldy 	#24
.13f7	80 00		bra $13f9			bra 	Const1Byte
.13f9					Const1Byte:
.13f9	a5 09		lda $09				lda 	TOS
.13fb	48		pha				pha
.13fc	a5 0a		lda $0a				lda 	TOS+1
.13fe	48		pha				pha
.13ff	84 09		sty $09				sty 	TOS
.1401	64 0a		stz $0a				stz 	TOS+1
.1403	4c 00 00	jmp $0000			jmp 	NextCode
.1406					C32:
.1406	a0 20		ldy #$20			ldy 	#32
.1408	80 ef		bra $13f9			bra 	Const1Byte
.140a					C63:
.140a	a0 3f		ldy #$3f			ldy 	#63
.140c	80 eb		bra $13f9			bra 	Const1Byte
.140e					C64:
.140e	a0 40		ldy #$40			ldy 	#64
.1410	80 e7		bra $13f9			bra 	Const1Byte
.1412					C100:
.1412	a0 64		ldy #$64			ldy 	#100
.1414	80 e3		bra $13f9			bra 	Const1Byte
.1416					C127:
.1416	a0 7f		ldy #$7f			ldy 	#127
.1418	80 df		bra $13f9			bra 	Const1Byte
.141a					C128:
.141a	a0 80		ldy #$80			ldy 	#128
.141c	80 db		bra $13f9			bra 	Const1Byte
.141e					C255:
.141e	a0 ff		ldy #$ff			ldy 	#255
.1420	80 d7		bra $13f9			bra 	Const1Byte
.1422					Const2Byte:
.1422	85 09		sta $09				sta 	TOS
.1424	84 0a		sty $0a				sty 	TOS+1
.1426	4c 00 00	jmp $0000			jmp 	NextCode
.1429					C256:
.1429	a5 09		lda $09				lda 	TOS
.142b	48		pha				pha
.142c	a5 0a		lda $0a				lda 	TOS+1
.142e	48		pha				pha
.142f	a9 00		lda #$00			lda 	#(256) & $FF
.1431	a0 01		ldy #$01			ldy 	#(256) >> 8
.1433	80 ed		bra $1422			bra 	Const2Byte
.1435					C512:
.1435	a5 09		lda $09				lda 	TOS
.1437	48		pha				pha
.1438	a5 0a		lda $0a				lda 	TOS+1
.143a	48		pha				pha
.143b	a9 00		lda #$00			lda 	#(512) & $FF
.143d	a0 02		ldy #$02			ldy 	#(512) >> 8
.143f	80 e1		bra $1422			bra 	Const2Byte
.1441					C1024:
.1441	a5 09		lda $09				lda 	TOS
.1443	48		pha				pha
.1444	a5 0a		lda $0a				lda 	TOS+1
.1446	48		pha				pha
.1447	a9 00		lda #$00			lda 	#(1024) & $FF
.1449	a0 04		ldy #$04			ldy 	#(1024) >> 8
.144b	80 d5		bra $1422			bra 	Const2Byte
.144d					C4096:
.144d	a5 09		lda $09				lda 	TOS
.144f	48		pha				pha
.1450	a5 0a		lda $0a				lda 	TOS+1
.1452	48		pha				pha
.1453	a9 00		lda #$00			lda 	#(4096) & $FF
.1455	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1457	80 c9		bra $1422			bra 	Const2Byte
.1459					C32767:
.1459	a5 09		lda $09				lda 	TOS
.145b	48		pha				pha
.145c	a5 0a		lda $0a				lda 	TOS+1
.145e	48		pha				pha
.145f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1461	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1463	80 bd		bra $1422			bra 	Const2Byte
.1465					C32768:
.1465	a5 09		lda $09				lda 	TOS
.1467	48		pha				pha
.1468	a5 0a		lda $0a				lda 	TOS+1
.146a	48		pha				pha
.146b	a9 00		lda #$00			lda 	#(32768) & $FF
.146d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.146f	80 b1		bra $1422			bra 	Const2Byte

;******  Return to file: files.asm


;******  Processing file: words/data/stack.src

.1471					Drop:
.1471	68		pla				pla
.1472	85 0a		sta $0a				sta 	TOS+1
.1474	68		pla				pla
.1475	85 09		sta $09				sta 	TOS
.1477	4c 00 00	jmp $0000			jmp 	NextCode
.147a					TestDup:
.147a	a5 09		lda $09				lda 	TOS
.147c	05 0a		ora $0a				ora 	TOS+1
.147e	d0 03		bne $1483			bne 	Dup
.1480	4c 00 00	jmp $0000			jmp 	NextCode
.1483					Dup:
.1483	a5 09		lda $09				lda 	TOS
.1485	48		pha				pha
.1486	a5 0a		lda $0a				lda 	TOS+1
.1488	48		pha				pha
.1489	4c 00 00	jmp $0000			jmp 	NextCode
.148c					Swap:
.148c	86 13		stx $13				stx 	temp1
.148e	7a		ply				ply
.148f	fa		plx				plx
.1490	a5 09		lda $09				lda 	TOS
.1492	48		pha				pha
.1493	a5 0a		lda $0a				lda 	TOS+1
.1495	48		pha				pha
.1496	86 09		stx $09				stx 	TOS
.1498	84 0a		sty $0a				sty 	TOS+1
.149a	a6 13		ldx $13				ldx 	temp1
.149c	4c 00 00	jmp $0000			jmp 	NextCode
.149f					Over:
.149f	a5 09		lda $09				lda 	TOS
.14a1	48		pha				pha
.14a2	a5 0a		lda $0a				lda 	TOS+1
.14a4	48		pha				pha
.14a5	86 13		stx $13				stx 	temp1
.14a7	ba		tsx				tsx
.14a8	bd 04 01	lda $0104,x			lda 	stack3low,x
.14ab	85 09		sta $09				sta 	TOS
.14ad	bd 03 01	lda $0103,x			lda 	stack3High,x
.14b0	85 0a		sta $0a				sta 	TOS+1
.14b2	a6 13		ldx $13				ldx 	temp1
.14b4	4c 00 00	jmp $0000			jmp 	NextCode
.14b7					Nip:
.14b7	68		pla				pla
.14b8	68		pla				pla
.14b9	4c 00 00	jmp $0000			jmp 	NextCode
.14bc					Rot:
.14bc	86 13		stx $13				stx 	temp1
.14be	ba		tsx				tsx
.14bf	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.14c2	a8		tay				tay
.14c3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.14c6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.14c9	a5 09		lda $09				lda 	TOS
.14cb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.14ce	84 09		sty $09				sty 	TOS
.14d0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.14d3	a8		tay				tay
.14d4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.14d7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.14da	a5 0a		lda $0a				lda 	TOS+1
.14dc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.14df	84 0a		sty $0a				sty 	TOS+1
.14e1	a6 13		ldx $13				ldx 	temp1
.14e3	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/data/memory.src

.14e6					ByteRead:
.14e6	b2 09		lda ($09)			lda 	(TOS)
.14e8	85 09		sta $09				sta 	TOS
.14ea	64 0a		stz $0a				stz 	TOS+1
.14ec	4c 00 00	jmp $0000			jmp 	NextCode
.14ef					WordRead:
.14ef	a0 01		ldy #$01			ldy 	#1
.14f1	b1 09		lda ($09),y			lda 	(TOS),y
.14f3	a8		tay				tay
.14f4	b2 09		lda ($09)			lda 	(TOS)
.14f6	85 09		sta $09				sta 	TOS
.14f8	84 0a		sty $0a				sty 	TOS+1
.14fa	4c 00 00	jmp $0000			jmp 	NextCode
.14fd					ByteWrite:
.14fd	68		pla				pla
.14fe	68		pla				pla
.14ff	92 09		sta ($09)			sta 	(TOS)
.1501	68		pla				pla
.1502	85 0a		sta $0a				sta 	TOS+1
.1504	68		pla				pla
.1505	85 09		sta $09				sta 	TOS
.1507	4c 00 00	jmp $0000			jmp 	NextCode
.150a					WordWrite:
.150a	68		pla				pla
.150b	a0 01		ldy #$01			ldy 	#1
.150d	91 09		sta ($09),y			sta 	(TOS),y
.150f	68		pla				pla
.1510	92 09		sta ($09)			sta 	(TOS)
.1512	68		pla				pla
.1513	85 0a		sta $0a				sta 	TOS+1
.1515	68		pla				pla
.1516	85 09		sta $09				sta 	TOS
.1518	4c 00 00	jmp $0000			jmp 	NextCode
.151b					WordAdd:
.151b	7a		ply				ply
.151c	68		pla				pla
.151d	18		clc				clc
.151e	72 09		adc ($09)			adc 	(TOS)
.1520	92 09		sta ($09)			sta 	(TOS)
.1522	98		tya				tya
.1523	a0 01		ldy #$01			ldy 	#1
.1525	71 09		adc ($09),y			adc 	(TOS),y
.1527	91 09		sta ($09),y			sta 	(TOS),y
.1529	68		pla				pla
.152a	85 0a		sta $0a				sta 	TOS+1
.152c	68		pla				pla
.152d	85 09		sta $09				sta 	TOS
.152f	4c 00 00	jmp $0000			jmp 	NextCode
.1532					AllocateMemory:
.1532	a5 09		lda $09				lda 	TOS 						; save memory required on stack.
.1534	48		pha				pha
.1535	a5 0a		lda $0a				lda 	TOS+1
.1537	48		pha				pha
.1538	a5 11		lda $11				lda 	nextFreeMem 				; copy free mem address to TOS
.153a	85 09		sta $09				sta 	TOS
.153c	a5 12		lda $12				lda 	nextFreeMem+1
.153e	85 0a		sta $0a				sta 	TOS+1
.1540	7a		ply				ply 								; advance the free ram pointer
.1541	68		pla				pla
.1542	20 92 18	jsr $1892			jsr 	AdvanceFreeMem
.1545	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.1548	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/fornext.src

.154b					ForHandler:
.154b	e6 08		inc $08				inc 	rsp 						; bump the RSP
.154d	a4 08		ldy $08				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.154f	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1551	f0 18		beq $156b			beq 	_FHOverflow
.1553	a5 0a		lda $0a				lda 	TOS+1
.1555	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1558	a5 09		lda $09				lda 	TOS
.155a	99 00 07	sta $0700,y			sta 	returnStackLow,y
.155d	a9 ff		lda #$ff			lda 	#$FF
.155f	99 80 07	sta $0780,y			sta 	returnStackX,y
.1562	68		pla				pla
.1563	85 0a		sta $0a				sta 	TOS+1
.1565	68		pla				pla
.1566	85 09		sta $09				sta 	TOS
.1568	4c 00 00	jmp $0000			jmp 	NextCode
.156b					_FHOverflow:
.156b	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>156e	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OVERFLOW",0
>1576	45 20 4f 56 45 52 46 4c 4f 57 00
.1581					ForEncoder:
.1581	a9 4b		lda #$4b			lda 	#ForHandler & $FF 			; for handler
.1583	a0 15		ldy #$15			ldy 	#ForHandler >> 8
.1585	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1588	a9 46		lda #$46			lda 	#"F" 						; for marker
.158a	20 f2 22	jsr $22f2			jsr 	EncodePushPosMarkerOnStack
.158d	60		rts				rts
.158e					NextHandler:
.158e	da		phx				phx
.158f	a6 08		ldx $08				ldx 	rsp 						; get current stack ptr
.1591	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1594	c9 ff		cmp #$ff			cmp 	#$FF
.1596	d0 21		bne $15b9			bne 	NHNoFor
.1598	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.159b	d0 03		bne $15a0			bne 	_NHNoBorrow
.159d	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.15a0					_NHNoBorrow:
.15a0	de 00 07	dec $0700,x			dec 	returnStackLow,x
.15a3	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.15a6	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.15a9	fa		plx				plx 								; restore X and re-test
.15aa	09 00		ora #$00			ora 	#0
.15ac	f0 05		beq $15b3			beq 	_NHComplete 				; if so then complete, else loop.
.15ae	e8		inx				inx 								; advance to branch
.15af	e8		inx				inx
.15b0	4c d5 16	jmp $16d5			jmp 	BranchAlways
.15b3					_NHComplete:
.15b3	e8		inx				inx 								; skip over the branch quantity
.15b4	c6 08		dec $08				dec 	rsp 						; drop the indx
.15b6	4c 00 00	jmp $0000			jmp 	NextCode
.15b9					NHNoFor:
.15b9	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>15bc	4f 55 54 20 4f 46 20 46				.text 	"OUT OF FOR SCOPE",0
>15c4	4f 52 20 53 43 4f 50 45 00
.15cd					NextEncoder:
.15cd	a9 8e		lda #$8e			lda 	#NextHandler & $FF 			; next code
.15cf	a0 15		ldy #$15			ldy 	#NextHandler >> 8
.15d1	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.15d4	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.15d6	c6 08		dec $08				dec 	rsp
.15d8	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a for
.15db	c9 46		cmp #$46			cmp 	#"F"
.15dd	d0 07		bne $15e6			bne 	_NENoFor
.15df	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.15e2	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.15e5	60		rts				rts
.15e6					_NENoFor:
.15e6	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>15e9	4d 49 53 53 49 4e 47 20				.text 	"MISSING FOR",0
>15f1	46 4f 52 00
.15f5					GetIndex:
.15f5	a4 08		ldy $08				ldy 	rsp 						; get current stack ptr
.15f7	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.15fa	c9 ff		cmp #$ff			cmp 	#$FF
.15fc	d0 bb		bne $15b9			bne 	NHNoFor
.15fe	a5 09		lda $09				lda 	TOS
.1600	48		pha				pha
.1601	a5 0a		lda $0a				lda 	TOS+1
.1603	48		pha				pha
.1604	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.1607	38		sec				sec
.1608	e9 01		sbc #$01			sbc 	#1
.160a	85 09		sta $09				sta 	TOS
.160c	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.160f	e9 00		sbc #$00			sbc 	#0
.1611	85 0a		sta $0a				sta 	TOS+1
.1613	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/structures/ifelseendif.src

.1616					IfHandler:
.1616	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1619					IfEncoder:
.1619	a9 16		lda #$16			lda 	#IfHandler & $FF 			; if handler
.161b	a0 16		ldy #$16			ldy 	#IfHandler >> 8
.161d	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1620	a9 49		lda #$49			lda 	#"I" 						; if marker
.1622	20 f2 22	jsr $22f2			jsr 	EncodePushPosMarkerOnStack
.1625	a9 00		lda #$00			lda 	#0
.1627	20 66 22	jsr $2266			jsr 	EncodeWriteByte 			; dummy write.
.162a	60		rts				rts
.162b					ElseHandler:
.162b	4c d3 16	jmp $16d3			jmp 	BranchTestSucceedsNoPop
.162e					ElseEncoder:
.162e	a9 2b		lda #$2b			lda 	#ElseHandler & $FF 			; else handler
.1630	a0 16		ldy #$16			ldy 	#ElseHandler >> 8
.1632	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1635	ad 10 09	lda $0910			lda 	encodeBuffer 				; push current position
.1638	48		pha				pha
.1639	a9 00		lda #$00			lda 	#0 							; zero branch
.163b	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.163e	20 5b 16	jsr $165b			jsr 	IfPatch 					; fix up the branch.
.1641	a9 49		lda #$49			lda 	#"I" 						; recreate if marker
.1643	20 f2 22	jsr $22f2			jsr 	EncodePushPosMarkerOnStack
.1646	68		pla				pla 								; address to patch
.1647	a6 08		ldx $08				ldx 	rsp
.1649	9d 80 07	sta $0780,x			sta 	returnStackX,x 				; and overwrite the target address
.164c	60		rts				rts
.164d					EndIfHandler:
.164d	4c 00 00	jmp $0000			jmp 	NextCode
.1650					EndIfEncoder:
.1650	a9 4d		lda #$4d			lda 	#EndIfHandler & $FF 		; endif handler
.1652	a0 16		ldy #$16			ldy 	#EndIfHandler >> 8
.1654	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1657	20 5b 16	jsr $165b			jsr 	IfPatch
.165a	60		rts				rts
.165b					IfPatch:
.165b	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.165d	c6 08		dec $08				dec 	rsp
.165f	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is an if.
.1662	c9 49		cmp #$49			cmp 	#"I"
.1664	d0 0b		bne $1671			bne 	_NENoIf
.1666	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; this is what you patch.
.1669	aa		tax				tax
.166a	ad 10 09	lda $0910			lda 	encodeBuffer 				; with the current position.
.166d	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1670	60		rts				rts
.1671					_NENoIf:
.1671	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1674	4d 49 53 53 49 4e 47 20				.text 	"MISSING IF",0
>167c	49 46 00

;******  Return to file: files.asm


;******  Processing file: words/structures/repeatuntil.src

.167f					RepeatHandler:
.167f	4c 00 00	jmp $0000			jmp 	NextCode
.1682					RepeatEncoder:
.1682	a9 7f		lda #$7f			lda 	#RepeatHandler & $FF 		; repeat marker
.1684	a0 16		ldy #$16			ldy 	#RepeatHandler >> 8
.1686	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1689	a9 52		lda #$52			lda 	#"R" 						; repeat marker
.168b	20 f2 22	jsr $22f2			jsr 	EncodePushPosMarkerOnStack
.168e	60		rts				rts
.168f					UntilHandler:
.168f	4c bd 16	jmp $16bd			jmp 	BranchIfZero
.1692					UntilEncoder:
.1692	a9 8f		lda #$8f			lda 	#UntilHandler & $FF 		; until code
.1694	a0 16		ldy #$16			ldy 	#UntilHandler >> 8
.1696	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.1699	a6 08		ldx $08				ldx 	rsp 						; get stack offset and pop
.169b	c6 08		dec $08				dec 	rsp
.169d	bd 40 07	lda $0740,x			lda 	returnStackHigh,x 			; check it is a repeat
.16a0	c9 52		cmp #$52			cmp 	#"R"
.16a2	d0 07		bne $16ab			bne 	_UENoRepeat
.16a4	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; write the branch
.16a7	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.16aa	60		rts				rts
.16ab					_UENoRepeat:
.16ab	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>16ae	4d 49 53 53 49 4e 47 20				.text 	"MISSING REPEAT",0
>16b6	52 45 50 45 41 54 00

;******  Return to file: files.asm


;******  Processing file: words/system/branch.src

.16bd					BranchIfZero:
.16bd	a5 09		lda $09				lda 	TOS 						; check TOS = 0
.16bf	05 0a		ora $0a				ora 	TOS+1
.16c1	f0 0a		beq $16cd			beq 	BranchTestSucceeds
.16c3					BranchTestFails:
.16c3	68		pla				pla
.16c4	85 0a		sta $0a				sta 	TOS+1
.16c6	68		pla				pla
.16c7	85 09		sta $09				sta 	TOS
.16c9	e8		inx				inx 								; skip over the relative branch.
.16ca	4c 00 00	jmp $0000			jmp 	NextCode
.16cd					BranchTestSucceeds:
.16cd	68		pla				pla
.16ce	85 0a		sta $0a				sta 	TOS+1
.16d0	68		pla				pla
.16d1	85 09		sta $09				sta 	TOS
.16d3					BranchTestSucceedsNoPop:
.16d3	e8		inx				inx 								; advance by two, to the offset
.16d4	e8		inx				inx
.16d5					BranchAlways:
.16d5	8a		txa				txa 								; A = Y = position
.16d6	a8		tay				tay 								; (IP),Y now points to the branch target
.16d7	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.16d9	aa		tax				tax 								; position back in this line.
.16da	ca		dex				dex
.16db	ca		dex				dex
.16dc	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/callhandler.src

.16df					CallHandler:
.16df	e8		inx				inx									; bump X to the call address.
.16e0	e8		inx				inx
.16e1	e6 08		inc $08				inc 	rsp 						; bump the RSP (first time to zero)
.16e3	a4 08		ldy $08				ldy 	rsp 						; get return stack and push IP/X on it.
.16e5	c0 40		cpy #$40			cpy 	#$40 						; overflow
.16e7	f0 35		beq $171e			beq 	_CHOverflow
.16e9	a5 04		lda $04				lda 	IP+1
.16eb	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.16ee	a5 03		lda $03				lda 	IP
.16f0	99 00 07	sta $0700,y			sta 	returnStackLow,y
.16f3	8a		txa				txa
.16f4	99 80 07	sta $0780,y			sta 	returnStackX,y
.16f7	8a		txa				txa 								; get the line number into temp1.
.16f8	a8		tay				tay
.16f9	b1 03		lda ($03),y			lda 	(IP),y
.16fb	85 13		sta $13				sta 	temp1
.16fd	c8		iny				iny
.16fe	b1 03		lda ($03),y			lda 	(IP),y
.1700	85 14		sta $14				sta 	temp1+1
.1702	20 0b 18	jsr $180b			jsr 	CallSearch
.1705	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1707	b1 03		lda ($03),y			lda 	(IP),y
.1709	c9 3c		cmp #$3c			cmp 	#DefineCode & $FF
.170b	d0 28		bne $1735			bne 	_CHNoDefine
.170d	c8		iny				iny
.170e	b1 03		lda ($03),y			lda 	(IP),y
.1710	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.1712	d0 21		bne $1735			bne 	_CHNoDefine
.1714	c8		iny				iny
.1715	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1717	18		clc				clc
.1718	69 03		adc #$03			adc 	#5-2 						; $$define token, line number, offset - 2 for Next
.171a	aa		tax				tax
.171b	4c 00 00	jmp $0000			jmp 	NextCode
.171e					_CHOverflow:
.171e	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1721	43 41 4c 4c 20 53 54 41				.text 	"CALL STACK OVERFLOW",0
>1729	43 4b 20 4f 56 45 52 46 4c 4f 57 00
.1735					_CHNoDefine:
.1735	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1738	44 45 46 49 4e 45 20 4d				.text 	"DEFINE MISSING",0
>1740	49 53 53 49 4e 47 00
.1747					ReturnHandler:
.1747	a4 08		ldy $08				ldy 	rsp 						; get rsp
.1749	f0 15		beq $1760			beq 	_RHUnderflow 				; if -ve underflowed
.174b	c6 08		dec $08				dec 	rsp 						; decrement rsp
.174d	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1750	85 04		sta $04				sta 	IP+1
.1752	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.1755	85 03		sta $03				sta 	IP
.1757	b9 80 07	lda $0780,y			lda 	returnStackX,y
.175a	aa		tax				tax
.175b	f0 15		beq $1772			beq 	_RHInLoop 					; this means you have done :something for ; next
.175d	4c 00 00	jmp $0000			jmp 	NextCode
.1760					_RHUnderflow:
.1760	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1763	4d 49 53 53 49 4e 47 20				.text 	"MISSING RETURN",0
>176b	52 45 54 55 52 4e 00
.1772					_RHInLoop:
.1772	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1775	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP ERROR",0
>177d	4e 20 4c 4f 4f 50 20 45 52 52 4f 52 00
.178a					CallHandlerDecode:
.178a	a9 03		lda #$03			lda 	#CTH_Call					; space
.178c	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.178f	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get line number into YA
.1791	aa		tax				tax
.1792	c8		iny				iny
.1793	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1795	a8		tay				tay
.1796	8a		txa				txa
.1797	20 d4 17	jsr $17d4			jsr 	FindLine 					; try to locate that line.
.179a	b0 11		bcs $17ad			bcs 	_CHDFound 					; if found .....
.179c					_CHDLineOnly:
.179c	48		pha				pha
.179d	a9 3c		lda #$3c			lda 	#"<"
.179f	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17a2	68		pla				pla
.17a3	18		clc				clc 								; output unsigned
.17a4	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.17a7	a9 3e		lda #$3e			lda 	#">"
.17a9	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17ac	60		rts				rts
.17ad					_CHDFound:
.17ad	48		pha				pha 								; save YA
.17ae	5a		phy				phy
.17af	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.17b1	b1 13		lda ($13),y			lda 	(temp1),y
.17b3	c9 3c		cmp #$3c			cmp 	#DefineCode & 255
.17b5	d0 07		bne $17be			bne 	_CHDNoDefine
.17b7	c8		iny				iny
.17b8	b1 13		lda ($13),y			lda 	(temp1),y
.17ba	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.17bc	f0 04		beq $17c2			beq 	_CHDFoundDefine
.17be					_CHDNoDefine:
.17be	7a		ply				ply									; restore the line number and print it in <>
.17bf	68		pla				pla
.17c0	80 da		bra $179c			bra 	_CHDLineOnly
.17c2					_CHDFoundDefine:
.17c2	68		pla				pla 								; throw saved line number.
.17c3	68		pla				pla
.17c4	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.17c6					_CHDOutName:
.17c6	c8		iny				iny 								; next
.17c7	b1 13		lda ($13),y			lda 	(temp1),y 					; print char no bit 7
.17c9	48		pha				pha
.17ca	29 7f		and #$7f			and 	#$7F
.17cc	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.17cf	68		pla				pla
.17d0	0a		asl a				asl 	a 							; bit 7 to carry
.17d1	90 f3		bcc $17c6			bcc 	_CHDOutName
.17d3	60		rts				rts
.17d4					FindLine:
.17d4	48		pha				pha 								; save registers
.17d5	da		phx				phx
.17d6	5a		phy				phy
.17d7	85 15		sta $15				sta 	temp2 						; temp2 = target line#
.17d9	84 16		sty $16				sty 	temp2+1
.17db	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.17dd	85 13		sta $13				sta 	0+(temp1)
.17df	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.17e1	85 14		sta $14				sta 	1+(temp1)
.17e3					_FLLoop:
.17e3	b2 13		lda ($13)			lda 	(temp1) 					; found end ?
.17e5	18		clc				clc									; if so exit with CC.
.17e6	f0 1d		beq $1805			beq 	_FLExit
.17e8	a0 01		ldy #$01			ldy 	#1 							; check line # match
.17ea	b1 13		lda ($13),y			lda 	(temp1),y
.17ec	c5 15		cmp $15				cmp 	temp2
.17ee	d0 08		bne $17f8			bne 	_FLNext
.17f0	c8		iny				iny
.17f1	b1 13		lda ($13),y			lda 	(temp1),y
.17f3	c5 16		cmp $16				cmp 	temp2+1
.17f5	38		sec				sec 								; if so exit with CS
.17f6	f0 0d		beq $1805			beq 	_FLExit
.17f8					_FLNext:
.17f8	18		clc				clc
.17f9	a5 13		lda $13				lda 	temp1
.17fb	72 13		adc ($13)			adc 	(temp1)
.17fd	85 13		sta $13				sta 	temp1
.17ff	90 02		bcc $1803			bcc 	_NoCarryAdv
.1801	e6 14		inc $14				inc 	temp1+1
.1803					_NoCarryAdv:
.1803	80 de		bra $17e3			bra 	_FLLoop 					; keep looking.
.1805					_FLExit:
.1805	7a		ply				ply
.1806	fa		plx				plx
.1807	68		pla				pla
.1808	60		rts				rts
.1809	18		clc				clc
.180a	60		rts				rts
.180b					CallSearch:
.180b	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.180d	85 03		sta $03				sta 	0+(IP)
.180f	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1811	85 04		sta $04				sta 	1+(IP)
.1813	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1815	f0 22		beq $1839			beq 	SearchFail
.1817	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1819					_CHSearch:
.1819	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.181b	c5 13		cmp $13				cmp 	temp1
.181d	f0 11		beq $1830			beq 	_CHFoundLSB
.181f					_CHSearchNext:
.181f	18		clc				clc
.1820	a5 03		lda $03				lda 	IP
.1822	72 03		adc ($03)			adc 	(IP)
.1824	85 03		sta $03				sta 	IP
.1826	90 02		bcc $182a			bcc 	_NoCarryAdv
.1828	e6 04		inc $04				inc 	IP+1
.182a					_NoCarryAdv:
.182a	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.182c	d0 eb		bne $1819			bne 	_CHSearch
.182e	80 09		bra $1839			bra 	SearchFail
.1830					_CHFoundLSB:
.1830	c8		iny				iny 								; get MSB
.1831	b1 03		lda ($03),y			lda 	(IP),y
.1833	88		dey				dey
.1834	c5 14		cmp $14				cmp 	temp1+1 					; matches, if not contineu
.1836	d0 e7		bne $181f			bne 	_CHSearchNext
.1838	60		rts				rts
.1839					SearchFail:
.1839	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>183c	43 41 4e 54 20 46 49 4e				.text 	"CANT FIND DEFINITION",0
>1844	44 20 44 45 46 49 4e 49 54 49 4f 4e 00

;******  Return to file: files.asm


;******  Processing file: words/system/clrnew.src

.1851					NewHandler:
.1851	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1854	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1857	4c 3b 24	jmp $243b			jmp 	WarmStartBlankStack
.185a					ClrHandler:
.185a	86 13		stx $13				stx 	temp1
.185c	a2 80		ldx #$80			ldx 	#NumberStackBase
.185e	9a		txs				txs
.185f	a6 13		ldx $13				ldx 	temp1
.1861	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1864	4c 00 00	jmp $0000			jmp 	NextCode
.1867					ClearVariableSpace:
.1867	64 08		stz $08				stz 	rsp
.1869	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.186b	85 11		sta $11				sta 	0+(nextFreeMem)
.186d	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.186f	85 12		sta $12				sta 	1+(nextFreeMem)
.1871	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1873					_CVSHashClear:
.1873	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1875	99 40 06	sta $0640,y			sta 	hashTable,y
.1878	88		dey				dey
.1879	10 f8		bpl $1873			bpl 	_CVSHashClear
.187b					_CVSFindEnd:
.187b	18		clc				clc
.187c	a5 11		lda $11				lda 	nextFreeMem
.187e	72 11		adc ($11)			adc 	(nextFreeMem)
.1880	85 11		sta $11				sta 	nextFreeMem
.1882	90 02		bcc $1886			bcc 	_NoCarryAdv
.1884	e6 12		inc $12				inc 	nextFreeMem+1
.1886					_NoCarryAdv:
.1886	b2 11		lda ($11)			lda 	(nextFreeMem)
.1888	d0 f1		bne $187b			bne 	_CVSFindEnd
.188a	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.188c	a0 00		ldy #$00			ldy 	#0
.188e	20 92 18	jsr $1892			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.1891	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1892					AdvanceFreeMem:
.1892	18		clc				clc
.1893	65 11		adc $11				adc 	nextFreeMem
.1895	85 11		sta $11				sta 	nextFreeMem
.1897	98		tya				tya
.1898	65 12		adc $12				adc 	nextFreeMem+1
.189a	85 12		sta $12				sta 	nextFreeMem+1
.189c	b0 08		bcs $18a6			bcs 	MemoryOverflow
.189e	60		rts				rts
.189f					CheckMemory:
.189f	a5 12		lda $12				lda 	nextFreeMem+1
.18a1	c9 9d		cmp #$9d			cmp 	#(lastMemoryByte >> 8)-1
.18a3	b0 01		bcs $18a6			bcs 	MemoryOverflow
.18a5	60		rts				rts
.18a6					MemoryOverflow:
.18a6	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>18a9	4f 55 54 20 4f 46 20 4d				.text 	"OUT OF MEMORY",0
>18b1	45 4d 4f 52 59 00

;******  Return to file: files.asm


;******  Processing file: words/system/debug.src

.18b7					ExitDump:
.18b7	ba		tsx				tsx 								; save Data Stack in temp1
.18b8	86 13		stx $13				stx 	temp1
.18ba	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.18bd					BreakCmd:
>18bd	ff						.byte 	$FF
.18be	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/decode.src

.18c1					DecodeLineIntoBufPtr:
.18c1	48		pha				pha
.18c2	da		phx				phx
.18c3	5a		phy				phy
.18c4	85 0b		sta $0b				sta 	srcPtr 						; save the source line.
.18c6	84 0c		sty $0c				sty 	srcPtr+1
.18c8	90 1b		bcc $18e5			bcc 	_DecodeNoLineNumber
.18ca	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.18cc	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18ce	aa		tax				tax
.18cf	c8		iny				iny
.18d0	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18d2	a8		tay				tay
.18d3	8a		txa				txa
.18d4	18		clc				clc
.18d5	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.18d8	aa		tax				tax 								; count in X
.18d9					_DecodeLineSpace:
.18d9	e0 05		cpx #$05			cpx 	#5
.18db	f0 08		beq $18e5			beq 	_DecodeNoLineNumber
.18dd	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.18df	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.18e2	e8		inx				inx
.18e3	80 f4		bra $18d9			bra 	_DecodeLineSpace
.18e5					_DecodeNoLineNumber:
.18e5	a0 03		ldy #$03			ldy 	#3 							; initial position.
.18e7					_DecodeLoop:
.18e7	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.18e9	85 13		sta $13				sta 	temp1 						; must be an execution address.
.18eb	c8		iny				iny
.18ec	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.18ee	85 14		sta $14				sta 	temp1+1
.18f0	c8		iny				iny 								; y points to the byte after it.
.18f1	a5 13		lda $13				lda 	temp1
.18f3	c9 fa		cmp #$fa			cmp 	#NextLine & $FF
.18f5	d0 06		bne $18fd			bne 	_DecodeNotEOL
.18f7	a5 14		lda $14				lda 	temp1+1
.18f9	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.18fb	f0 0b		beq $1908			beq 	_DecodeEOL
.18fd					_DecodeNotEOL:
.18fd	20 10 19	jsr $1910			jsr 	IdentifyCodeWord
.1900	20 5e 19	jsr $195e			jsr 	DecodeFoundWord
.1903	20 48 19	jsr $1948			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1906	80 df		bra $18e7			bra 	_DecodeLoop 				; and go round again
.1908					_DecodeEOL:
.1908	a9 00		lda #$00			lda 	#0
.190a	92 0d		sta ($0d)			sta 	(bufPtr)
.190c	7a		ply				ply 								; restore registers and exit
.190d	fa		plx				plx
.190e	68		pla				pla
.190f	60		rts				rts
.1910					IdentifyCodeWord:
.1910	5a		phy				phy 								; save current position on the stack.
.1911	a9 ff		lda #$ff			lda 	#(Dictionary) & $FF
.1913	85 0f		sta $0f				sta 	0+(matchPtr)
.1915	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1917	85 10		sta $10				sta 	1+(matchPtr)
.1919					_DecodeIdentify:
.1919	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.191b	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.191d	c5 13		cmp $13				cmp 	temp1
.191f	d0 07		bne $1928			bne 	_DecodeIdNext
.1921	c8		iny				iny
.1922	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1924	c5 14		cmp $14				cmp 	temp1+1
.1926	f0 1e		beq $1946			beq 	_DecodeIdFound
.1928					_DecodeIdNext:
.1928	18		clc				clc
.1929	b2 0f		lda ($0f)			lda 	(matchPtr)
.192b	f0 0a		beq $1937			beq 	_DecodeIdIssue
.192d	65 0f		adc $0f				adc 	matchPtr
.192f	85 0f		sta $0f				sta 	matchPtr
.1931	90 e6		bcc $1919			bcc 	_DecodeIdentify
.1933	e6 10		inc $10				inc 	matchPtr+1
.1935	80 e2		bra $1919			bra 	_DecodeIdentify
.1937					_DecodeIdIssue:
.1937	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>193a	42 41 44 20 50 52 4f 47				.text 	"BAD PROGRAM",0
>1942	52 41 4d 00
.1946					_DecodeIdFound:
.1946	7a		ply				ply 								; restore position.
.1947	60		rts				rts
.1948					AdvanceToNext:
.1948	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.1949	a0 01		ldy #$01			ldy 	#1
.194b	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.194d	29 03		and #$03			and 	#3 							; bits 0-1.
.194f	7a		ply				ply
.1950	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1952	d0 02		bne $1956			bne 	_ATN012
.1954	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1956					_ATN012:
.1956	85 15		sta $15				sta 	temp2 						; now add that to Y
.1958	98		tya				tya
.1959	18		clc				clc
.195a	65 15		adc $15				adc 	temp2
.195c	a8		tay				tay
.195d	60		rts				rts
.195e					DecodeFoundWord:
.195e	5a		phy				phy 								; save current position
.195f	84 15		sty $15				sty		temp2 						; put it in temp2 as well.
.1961	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1963	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1965	29 10		and #$10			and 	#$10
.1967	d0 0e		bne $1977			bne 	_DFWSpecialDecoder
.1969	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; reget it.
.196b	30 08		bmi $1975			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.196d	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.196f	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1972	20 90 19	jsr $1990			jsr 	DecodeCurrentWord 			; expand that.
.1975					_DFWExit:
.1975	7a		ply				ply 								; restore current position
.1976	60		rts				rts
.1977					_DFWSpecialDecoder:
.1977	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1979	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; copy this into temp2
.197b	85 15		sta $15				sta 	temp2
.197d	c8		iny				iny
.197e	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1980	85 16		sta $16				sta 	temp2+1
.1982	7a		ply				ply 	 							; restore current position into Y
.1983	48		pha				pha 								; save registers
.1984	da		phx				phx
.1985	5a		phy				phy
.1986	20 8d 19	jsr $198d			jsr 	_DFWCallDecoder				; call the decoder routine
.1989	7a		ply				ply 								; restore registers and exit
.198a	fa		plx				plx
.198b	68		pla				pla
.198c	60		rts				rts
.198d					_DFWCallDecoder:
.198d	6c 15 00	jmp ($0015)			jmp 	(temp2)
.1990					DecodeCurrentWord:
.1990	5a		phy				phy
.1991	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1993	b1 0f		lda ($0f),y			lda 	(matchPtr),y
.1995	a0 04		ldy #$04			ldy 	#4 							; original offset
.1997	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1998	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1999	4a		lsr a				lsr 	a 							; bit set.
.199a	4a		lsr a				lsr 	a
.199b	4a		lsr a				lsr 	a 							; decoder bit
.199c	90 02		bcc $19a0			bcc 	_DWBNoDec
.199e	c8		iny				iny
.199f	c8		iny				iny
.19a0					_DWBNoDec:
.19a0	4a		lsr a				lsr 	a
.19a1	90 02		bcc $19a5			bcc 	_DWBNoEnc
.19a3	c8		iny				iny
.19a4	c8		iny				iny
.19a5					_DWBNoEnc:
.19a5					_DWBWordOut:
.19a5	b1 0f		lda ($0f),y			lda 	(matchPtr),y 				; output until bit 7 set.
.19a7	48		pha				pha
.19a8	29 7f		and #$7f			and 	#$7F
.19aa	20 b3 19	jsr $19b3			jsr		DecodeWriteBuffer
.19ad	c8		iny				iny
.19ae	68		pla				pla
.19af	10 f4		bpl $19a5			bpl 	_DWBWordOut
.19b1	7a		ply				ply 								; restore Y and exit
.19b2	60		rts				rts
.19b3					DecodeWriteBuffer:
.19b3	92 0d		sta ($0d)			sta 	(bufPtr)
.19b5	e6 0d		inc $0d				inc 	bufPtr
.19b7	d0 02		bne $19bb			bne 	_DWBNoCarry
.19b9	e6 0e		inc $0e				inc 	bufPtr+1
.19bb					_DWBNoCarry:
.19bb	60		rts				rts
.19bc					DecodeOutputData:
.19bc	48		pha				pha
.19bd	da		phx				phx
.19be	5a		phy				phy
.19bf	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; length + 1
.19c1	aa		tax				tax
.19c2					_DODLoop:
.19c2	ca		dex				dex 								; done it all ?
.19c3	f0 0c		beq $19d1			beq		_DODExit
.19c5	c8		iny				iny 								; output next character
.19c6	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.19c8	29 7f		and #$7f			and 	#$7F
.19ca	f0 f6		beq $19c2			beq 	_DODLoop 					; don't print NULL
.19cc	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.19cf	80 f1		bra $19c2			bra 	_DODLoop
.19d1					_DODExit:
.19d1	7a		ply				ply
.19d2	fa		plx				plx
.19d3	68		pla				pla
.19d4	60		rts				rts
.19d5					DecodeYAToBuffer:
.19d5	da		phx				phx
.19d6	5a		phy				phy
.19d7	48		pha				pha
.19d8	a5 0d		lda $0d				lda 	bufPtr 						; copy bufPtr to temp2
.19da	85 15		sta $15				sta 	temp2
.19dc	a5 0e		lda $0e				lda 	bufPtr+1
.19de	85 16		sta $16				sta 	temp2+1
.19e0	68		pla				pla
.19e1	20 33 1e	jsr $1e33			jsr 	ConvertToStringMain 		; convert YA to string there
.19e4	aa		tax				tax 								; chars output to X
.19e5	18		clc				clc
.19e6	65 0d		adc $0d				adc 	bufPtr 						; add to buffer pointer
.19e8	85 0d		sta $0d				sta 	bufPtr
.19ea	90 02		bcc $19ee			bcc 	_DYABNoCarry
.19ec	e6 0e		inc $0e				inc 	bufPtr+1
.19ee					_DYABNoCarry:
.19ee	8a		txa				txa 								; count in A
.19ef	7a		ply				ply									; restore and exit.
.19f0	fa		plx				plx
.19f1	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/edit.src

.19f2					EditProgram:
.19f2	20 72 1a	jsr $1a72			jsr 	EDFindLine					; find line address -> temp1
.19f5	90 0f		bcc $1a06			bcc 	_EPNotFound 				; if missing don't delete it.
.19f7	a5 13		lda $13				lda 	temp1 						; save line address
.19f9	48		pha				pha
.19fa	a5 14		lda $14				lda 	temp1+1
.19fc	48		pha				pha
.19fd	20 17 1a	jsr $1a17			jsr 	EDDeleteLine 				; delete the line
.1a00	68		pla				pla 								; restore line address
.1a01	85 14		sta $14				sta 	temp1+1
.1a03	68		pla				pla
.1a04	85 13		sta $13				sta 	temp1
.1a06					_EPNotFound:
.1a06	ad 10 09	lda $0910			lda 	encodeBuffer 				; is there anything in the line.
.1a09	c9 05		cmp #$05			cmp 	#5 							; <offset> <line#> <next line>
.1a0b	f0 06		beq $1a13			beq 	_EPNoInsert
.1a0d	20 3a 1a	jsr $1a3a			jsr 	EDInsertLine 				; insert line back in.
.1a10	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.1a13					_EPNoInsert:
.1a13	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a16	60		rts				rts
.1a17					EDDeleteLine:
.1a17	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a1a	a0 00		ldy #$00			ldy 	#0 							; this is the offset to copy down.
.1a1c	a2 00		ldx #$00			ldx 	#0
.1a1e	b1 13		lda ($13),y			lda 	(temp1),y
.1a20	a8		tay				tay 								; put in Y
.1a21					_EDDelLoop:
.1a21	b1 13		lda ($13),y			lda 	(temp1),y 					; get it
.1a23	81 13		sta ($13,x)			sta 	(temp1,x) 					; write it.
.1a25	a5 13		lda $13				lda 	temp1 						; check if pointer has reached the end of
.1a27	c5 11		cmp $11				cmp		nextFreeMem 				; low memory. We will have copied down an
.1a29	d0 06		bne $1a31			bne 	_EDDelNext 					; extra pile of stuff - technically should
.1a2b	a5 14		lda $14				lda 	temp1+1 					; check the upper value (e.g. temp1+y)
.1a2d	c5 12		cmp $12				cmp 	nextFreeMem+1				; doesn't really matter.
.1a2f	f0 08		beq $1a39			beq		_EDDelExit
.1a31					_EDDelNext:
.1a31	e6 13		inc $13				inc 	temp1 						; go to next byte.
.1a33	d0 ec		bne $1a21			bne 	_EDDelLoop
.1a35	e6 14		inc $14				inc 	temp1+1
.1a37	80 e8		bra $1a21			bra 	_EDDelLoop
.1a39					_EDDelExit:
.1a39	60		rts				rts
.1a3a					EDInsertLine:
.1a3a	20 67 18	jsr $1867			jsr 	ClearVariableSpace
.1a3d	a5 11		lda $11				lda 	nextFreeMem 				; copy high memory to temp3
.1a3f	85 17		sta $17				sta 	temp3
.1a41	a5 12		lda $12				lda 	nextFreeMem+1
.1a43	85 18		sta $18				sta 	temp3+1
.1a45	ac 10 09	ldy $0910			ldy 	encodeBuffer 				; space to move it to in Y
.1a48	a2 00		ldx #$00			ldx 	#0
.1a4a					_EDInsLoop:
.1a4a	a1 17		lda ($17,x)			lda 	(temp3,x)					; copy it up
.1a4c	91 17		sta ($17),y			sta 	(temp3),y
.1a4e	a5 17		lda $17				lda 	temp3 						; reached the insert point (temp1)
.1a50	c5 13		cmp $13				cmp 	temp1
.1a52	d0 06		bne $1a5a			bne 	_EDINextShift
.1a54	a5 18		lda $18				lda 	temp3+1
.1a56	c5 14		cmp $14				cmp 	temp1+1
.1a58	f0 0a		beq $1a64			beq 	_EDIShiftOver
.1a5a					_EDINextShift:
.1a5a	a5 17		lda $17				lda 	temp3 						; decrement the copy pointer.
.1a5c	d0 02		bne $1a60			bne 	_EDINoBorrow
.1a5e	c6 18		dec $18				dec 	temp3+1
.1a60					_EDINoBorrow:
.1a60	c6 17		dec $17				dec 	temp3
.1a62	80 e6		bra $1a4a			bra 	_EDInsLoop
.1a64					_EDIShiftOver:
.1a64	a0 00		ldy #$00			ldy 	#0
.1a66					_EDICopyCode:
.1a66	b9 10 09	lda $0910,y			lda 	encodeBuffer,y				; read from the current line
.1a69	91 13		sta ($13),y			sta 	(temp1),y 					; write out
.1a6b	c8		iny				iny 								; bump pointers
.1a6c	cc 10 09	cpy $0910			cpy 	encodeBuffer 				; done the whole lot ?
.1a6f	d0 f5		bne $1a66			bne 	_EDICopyCode
.1a71	60		rts				rts
.1a72					EDFindLine:
.1a72	a9 00		lda #$00			lda 	#(programMemory) & $FF
.1a74	85 13		sta $13				sta 	0+(temp1)
.1a76	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1a78	85 14		sta $14				sta 	1+(temp1)
.1a7a					_EDFLLoop:
.1a7a	b2 13		lda ($13)			lda 	(temp1) 					; check offset
.1a7c	f0 24		beq $1aa2			beq 	_EDFLFail 					; then obviously that's the end ;-) (great comment !)
.1a7e	a0 01		ldy #$01			ldy 	#1							; look at line #
.1a80	38		sec				sec
.1a81	ad 11 09	lda $0911			lda 	encodeBuffer+1				; subtract the current from the target
.1a84	f1 13		sbc ($13),y			sbc 	(temp1),y 					; so if searching for 100 and this one is 90,
.1a86	aa		tax				tax	 								; this will return 10.
.1a87	ad 12 09	lda $0912			lda 	encodeBuffer+2
.1a8a	c8		iny				iny
.1a8b	f1 13		sbc ($13),y			sbc 	(temp1),y
.1a8d	90 13		bcc $1aa2			bcc 	_EDFLFail					; if target < current then failed.
.1a8f	d0 04		bne $1a95			bne 	_EDFLNext 					; if non-zero then goto next
.1a91	e0 00		cpx #$00			cpx 	#0 							; same for the LSB - zero if match found.
.1a93	f0 0f		beq $1aa4			beq 	_EDFLFound
.1a95					_EDFLNext:
.1a95	18		clc				clc
.1a96	a5 13		lda $13				lda 	temp1
.1a98	72 13		adc ($13)			adc 	(temp1)
.1a9a	85 13		sta $13				sta 	temp1
.1a9c	90 02		bcc $1aa0			bcc 	_NoCarryAdv
.1a9e	e6 14		inc $14				inc 	temp1+1
.1aa0					_NoCarryAdv:
.1aa0	80 d8		bra $1a7a			bra 	_EDFLLoop
.1aa2					_EDFLFail:
.1aa2	18		clc				clc
.1aa3	60		rts				rts
.1aa4					_EDFLFound:
.1aa4	38		sec				sec
.1aa5	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/list.src

.1aa6					ListCode:
.1aa6	64 21		stz $21				stz 	ListLowest 					; zero lowest line#
.1aa8	64 22		stz $22				stz 	ListLowest+1
.1aaa	a9 18		lda #$18			lda 	#24 						; show max 24 after lowest line
.1aac	85 20		sta $20				sta 	ListCount
.1aae	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1ab0	85 1b		sta $1b				sta 	0+(listPtr)
.1ab2	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1ab4	85 1c		sta $1c				sta 	1+(listPtr)
.1ab6	86 13		stx $13				stx 	temp1						; S->A
.1ab8	ba		tsx				tsx
.1ab9	8a		txa				txa
.1aba	a6 13		ldx $13				ldx 	temp1
.1abc	c9 80		cmp #$80			cmp 	#NumberStackBase
.1abe	f0 0e		beq $1ace			beq 	_LCLoop
.1ac0	a5 09		lda $09				lda 	TOS 						; copy TOS to lowest
.1ac2	85 21		sta $21				sta 	ListLowest
.1ac4	a5 0a		lda $0a				lda 	TOS+1
.1ac6	85 22		sta $22				sta 	ListLowest+1
.1ac8	68		pla				pla
.1ac9	85 0a		sta $0a				sta 	TOS+1
.1acb	68		pla				pla
.1acc	85 09		sta $09				sta 	TOS
.1ace					_LCLoop:
.1ace	b2 1b		lda ($1b)			lda 	(listPtr)					; reached end ?
.1ad0	f0 4c		beq $1b1e			beq 	_LCExit
.1ad2	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1ad4	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1ad6	c5 21		cmp $21				cmp 	ListLowest
.1ad8	c8		iny				iny
.1ad9	b1 1b		lda ($1b),y			lda 	(listPtr),y
.1adb	e5 22		sbc $22				sbc 	ListLowest+1
.1add	90 32		bcc $1b11			bcc 	_LCNext
.1adf	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1ae1	85 0d		sta $0d				sta 	0+(bufPtr)
.1ae3	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1ae5	85 0e		sta $0e				sta 	1+(bufPtr)
.1ae7	a5 1b		lda $1b				lda 	listPtr 					; output the line.
.1ae9	a4 1c		ldy $1c				ldy 	listPtr+1
.1aeb	38		sec				sec
.1aec	20 c1 18	jsr $18c1			jsr 	DecodeLineIntoBufPtr
.1aef	a9 02		lda #$02			lda 	#CTH_LineNo
.1af1	20 2d 25	jsr $252d			jsr 	ExternColour
.1af4	a0 ff		ldy #$ff			ldy 	#255
.1af6					_LCLoop2:
.1af6	c8		iny				iny
.1af7	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1afa	f0 0e		beq $1b0a			beq 	_LCEnd
.1afc	c9 20		cmp #$20			cmp 	#32
.1afe	b0 05		bcs $1b05			bcs 	_LCPrint
.1b00	20 2d 25	jsr $252d			jsr 	ExternColour
.1b03	a9 20		lda #$20			lda 	#32
.1b05					_LCPrint:
.1b05	20 21 25	jsr $2521			jsr 	ExternPrint
.1b08	80 ec		bra $1af6			bra 	_LCLoop2
.1b0a	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1b0c	20 21 25	jsr $2521			jsr 	ExternPrint
.1b0f	c6 20		dec $20				dec 	ListCount					; done all the lines allowed
.1b11					_LCNext:
.1b11	18		clc				clc
.1b12	a5 1b		lda $1b				lda 	listPtr
.1b14	72 1b		adc ($1b)			adc 	(listPtr)
.1b16	85 1b		sta $1b				sta 	listPtr
.1b18	90 02		bcc $1b1c			bcc 	_NoCarryAdv
.1b1a	e6 1c		inc $1c				inc 	listPtr+1
.1b1c					_NoCarryAdv:
.1b1c	80 b0		bra $1ace			bra 	_LCLoop 					; go round again.
.1b1e					_LCExit:
.1b1e	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/miscellany.src

.1b21					RunProgram:
.1b21	86 13		stx $13				stx 	temp1
.1b23	a2 80		ldx #$80			ldx 	#NumberStackBase
.1b25	9a		txs				txs
.1b26	a6 13		ldx $13				ldx 	temp1
.1b28	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables etc.
.1b2b	a2 00		ldx #$00			ldx		#ProgramMemory & $FF		; boot address
.1b2d	a0 40		ldy #$40			ldy 	#ProgramMemory >>8
.1b2f	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00
.1b32	4c 00 00	jmp $0000			jmp 	NextCode
.1b35					Call6502:
.1b35	a5 09		lda $09				lda 	TOS 						; copy call address
.1b37	85 13		sta $13				sta 	temp1
.1b39	a5 0a		lda $0a				lda 	TOS+1
.1b3b	85 14		sta $14				sta 	temp1+1
.1b3d	68		pla				pla
.1b3e	85 0a		sta $0a				sta 	TOS+1
.1b40	68		pla				pla
.1b41	85 09		sta $09				sta 	TOS
.1b43	20 49 1b	jsr $1b49			jsr 	_CallTemp1 					; call it
.1b46	4c 00 00	jmp $0000			jmp 	NextCode
.1b49					_CallTemp1:
.1b49	6c 13 00	jmp ($0013)			jmp 	(temp1)
.1b4c					AssertCode:
.1b4c	a5 09		lda $09				lda 	TOS 						; TOS = 0
.1b4e	05 0a		ora $0a				ora 	TOS+1
.1b50	f0 09		beq $1b5b			beq 	_ASFail 					; if zero fail
.1b52	68		pla				pla
.1b53	85 0a		sta $0a				sta 	TOS+1
.1b55	68		pla				pla
.1b56	85 09		sta $09				sta 	TOS
.1b58	4c 00 00	jmp $0000			jmp 	NextCode
.1b5b					_ASFail:
.1b5b	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1b5e	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1b65					StopCode:
.1b65	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1b68	53 54 4f 50 00					.text 	"STOP",0
.1b6d					EndProgram:
.1b6d	4c 42 24	jmp $2442			jmp 	WarmStart
.1b70					VlistCode:
.1b70	a9 ff		lda #$ff			lda 	#(Dictionary) & $FF
.1b72	85 13		sta $13				sta 	0+(temp1)
.1b74	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1b76	85 14		sta $14				sta 	1+(temp1)
.1b78	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1b7a	b1 13		lda ($13),y			lda 	(temp1),y
.1b7c	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1b7e	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1b7f	4a		lsr a				lsr 	a
.1b80	4a		lsr a				lsr		a
.1b81	4a		lsr a				lsr 	a
.1b82	4a		lsr a				lsr 	a 							; add those bits in
.1b83	90 02		bcc $1b87			bcc 	_VLNoDec
.1b85	c8		iny				iny
.1b86	c8		iny				iny
.1b87					_VLNoDec:
.1b87	4a		lsr a				lsr 	a
.1b88	90 02		bcc $1b8c			bcc 	_VLNoEnc
.1b8a	c8		iny				iny
.1b8b	c8		iny				iny
.1b8c					_VLNoEnc:
.1b8c	b1 13		lda ($13),y			lda 	(temp1),y 					; remove $$ words
.1b8e	c9 24		cmp #$24			cmp 	#"$"
.1b90	d0 06		bne $1b98			bne 	_VLPrint
.1b92	c8		iny				iny
.1b93	51 13		eor ($13),y			eor 	(temp1),y
.1b95	f0 13		beq $1baa			beq 	_VLNext
.1b97	88		dey				dey
.1b98					_VLPrint:
.1b98	b1 13		lda ($13),y			lda 	(temp1),y
.1b9a	48		pha				pha
.1b9b	c8		iny				iny
.1b9c	29 7f		and #$7f			and 	#$7F
.1b9e	20 21 25	jsr $2521			jsr 	ExternPrint
.1ba1	68		pla				pla
.1ba2	0a		asl a				asl 	a
.1ba3	90 f3		bcc $1b98			bcc 	_VLPrint
.1ba5	a9 20		lda #$20			lda 	#32
.1ba7	20 21 25	jsr $2521			jsr 	ExternPrint
.1baa					_VLNext:
.1baa	18		clc				clc 								; go to next
.1bab	b2 13		lda ($13)			lda 	(temp1)
.1bad	65 13		adc $13				adc 	temp1
.1baf	85 13		sta $13				sta 	temp1
.1bb1	90 02		bcc $1bb5			bcc 	_VLNoCarry
.1bb3	e6 14		inc $14				inc 	temp1+1
.1bb5					_VLNoCarry:
.1bb5	b2 13		lda ($13)			lda 	(temp1)
.1bb7	d0 bf		bne $1b78			bne 	_VLLoop
.1bb9	a9 0d		lda #$0d			lda 	#13
.1bbb	20 21 25	jsr $2521			jsr 	ExternPrint
.1bbe	4c 00 00	jmp $0000			jmp 	NextCode
.1bc1					DumpStack:
.1bc1	a9 5b		lda #$5b			lda		#"["
.1bc3	20 21 25	jsr $2521			jsr 	ExternPrint
.1bc6	86 13		stx $13				stx 	temp1 						; X -> A
.1bc8	ba		tsx				tsx
.1bc9	8a		txa				txa
.1bca	a6 13		ldx $13				ldx 	temp1
.1bcc	c9 80		cmp #$80			cmp 	#NumberStackBase 			; out of range, exit
.1bce	f0 2f		beq $1bff			beq 	_DSExit
.1bd0	48		pha				pha 								; save it
.1bd1	a9 07		lda #$07			lda 	#COL_WHITE
.1bd3	20 2d 25	jsr $252d			jsr 	ExternColour
.1bd6	a5 09		lda $09				lda 	TOS 						; print TOS then stack values backwards
.1bd8	a4 0a		ldy $0a				ldy 	TOS+1
.1bda	38		sec				sec 								; print unsigned.
.1bdb	20 0d 1e	jsr $1e0d			jsr 	PrintYA
.1bde	a9 06		lda #$06			lda 	#COL_CYAN
.1be0	20 2d 25	jsr $252d			jsr 	ExternColour
.1be3	7a		ply				ply 								; restore offset
.1be4					_DSLoop:
.1be4	c0 7e		cpy #$7e			cpy 	#NumberStackBase-2 			; till done whole stack.
.1be6	f0 17		beq $1bff			beq 	_DSExit
.1be8	a9 20		lda #$20			lda 	#" " 						; space
.1bea	20 21 25	jsr $2521			jsr 	ExternPrint
.1bed	5a		phy				phy 								; save pos
.1bee	b9 01 01	lda $0101,y			lda 	$0101,y 					; read stack item
.1bf1	48		pha				pha
.1bf2	b9 02 01	lda $0102,y			lda 	$0102,y
.1bf5	7a		ply				ply
.1bf6	38		sec				sec
.1bf7	20 0d 1e	jsr $1e0d			jsr 	PrintYA 					; print it
.1bfa	7a		ply				ply 								; restore and advance pos
.1bfb	c8		iny				iny
.1bfc	c8		iny				iny
.1bfd	80 e5		bra $1be4			bra 	_DSLoop
.1bff					_DSExit:
.1bff	a9 5d		lda #$5d			lda		#"]"
.1c01	20 21 25	jsr $2521			jsr 	ExternPrint
.1c04	a9 0d		lda #$0d			lda 	#13
.1c06	20 21 25	jsr $2521			jsr 	ExternPrint
.1c09	4c 00 00	jmp $0000			jmp 	NextCode

;******  Return to file: files.asm


;******  Processing file: words/system/old.src

.1c0c					OldCode:
.1c0c	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1c0e	85 0b		sta $0b				sta 	0+(srcPtr)
.1c10	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1c12	85 0c		sta $0c				sta 	1+(srcPtr)
.1c14	a0 03		ldy #$03			ldy 	#3 							; start after line# / offset
.1c16					_OldLoop:
.1c16	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy the current character to temp1
.1c18	85 13		sta $13				sta 	temp1 						; must be an execution address.
.1c1a	c8		iny				iny
.1c1b	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1c1d	85 14		sta $14				sta 	temp1+1
.1c1f	c8		iny				iny
.1c20	a5 13		lda $13				lda 	temp1 						; have we reached the end ?
.1c22	c9 fa		cmp #$fa			cmp 	#NextLine & $FF
.1c24	d0 06		bne $1c2c			bne 	_OldNotEOL
.1c26	a5 14		lda $14				lda 	temp1+1
.1c28	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.1c2a	f0 08		beq $1c34			beq 	_OldEOL
.1c2c					_OldNotEOL:
.1c2c	20 10 19	jsr $1910			jsr 	IdentifyCodeWord			; what is it ?
.1c2f	20 48 19	jsr $1948			jsr 	AdvanceToNext 				; advance to next entry in the line.
.1c32	80 e2		bra $1c16			bra	 	_OldLoop
.1c34					_OldEOL:
.1c34	8c 00 40	sty $4000			sty 	ProgramMemory 				; Y is the offset.
.1c37	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1c3a	4c 3b 24	jmp $243b			jmp 	WarmStartBlankStack

;******  Return to file: files.asm


;******  Processing file: words/system/saveload.src

.1c3d					System_Save:
.1c3d	20 67 18	jsr $1867			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c40	20 bf 1c	jsr $1cbf			jsr 	ExtendWithDictionary 		; attach the dictionary addresses.
.1c43	20 6b 1c	jsr $1c6b			jsr 	SLGetFileName 				; get filename -> temp3
.1c46	a5 11		lda $11				lda 	nextFreeMem 				; end address
.1c48	85 13		sta $13				sta 	temp1
.1c4a	a5 12		lda $12				lda 	nextFreeMem+1
.1c4c	85 14		sta $14				sta 	temp1+1
.1c4e	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c50	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c52	20 75 25	jsr $2575			jsr 	ExternSave
.1c55	20 67 18	jsr $1867			jsr 	ClearVariableSpace  		; make sure start/end are right
.1c58	4c 3b 24	jmp $243b			jmp 	WarmStartBlankStack
.1c5b					System_Load:
.1c5b	20 6b 1c	jsr $1c6b			jsr 	SLGetFileName 				; get filename -> temp3
.1c5e	a9 00		lda #$00			lda 	#ProgramMemory & $FF 		; program start to YA
.1c60	a0 40		ldy #$40			ldy 	#ProgramMemory >> 8
.1c62	20 ab 25	jsr $25ab			jsr 	ExternLoad
.1c65	20 67 18	jsr $1867			jsr 	ClearVariableSpace 			; reset everything.
.1c68	4c 3b 24	jmp $243b			jmp 	WarmStartBlankStack
.1c6b					SLGetFileName:
.1c6b	ba		tsx				tsx
.1c6c	e0 80		cpx #$80			cpx 	#NumberStackBase
.1c6e	f0 3a		beq $1caa			beq 	_SLFNFail
.1c70	a9 10		lda #$10			lda 	#textBuffer & $FF 			; f/n in input buffer.
.1c72	85 17		sta $17				sta 	temp3
.1c74	a9 08		lda #$08			lda 	#textBuffer >> 8
.1c76	85 18		sta $18				sta 	temp3+1
.1c78	a0 00		ldy #$00			ldy 	#0
.1c7a	b1 09		lda ($09),y	_SLCopy:lda 	(TOS),y
.1c7c	91 17		sta ($17),y			sta 	(temp3),y
.1c7e	c8		iny				iny
.1c7f	c9 00		cmp #$00			cmp		#0
.1c81	d0 f7		bne $1c7a			bne 	_SLCopy
.1c83	88		dey				dey
.1c84	a2 03		ldx #$03			ldx 	#3 							; check if it ends in .RPL
.1c86					_SLCheckEnd:
.1c86	88		dey				dey
.1c87	bd ba 1c	lda $1cba,x			lda 	_SLFNExtension,x
.1c8a	d1 17		cmp ($17),y			cmp 	(temp3),y
.1c8c	d0 05		bne $1c93			bne 	_SLNoExtension
.1c8e	ca		dex				dex
.1c8f	10 f5		bpl $1c86			bpl 	_SLCheckEnd
.1c91	80 16		bra $1ca9			bra 	_SLExit
.1c93					_SLNoExtension:
.1c93	a0 ff		ldy #$ff			ldy 	#255						; add the extension.
.1c95					_SLFindend:
.1c95	c8		iny				iny
.1c96	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1c99	d0 fa		bne $1c95			bne 	_SLFindend
.1c9b	a2 00		ldx #$00			ldx 	#0
.1c9d					_SLAppend:
.1c9d	bd ba 1c	lda $1cba,x			lda 	_SLFNExtension,x
.1ca0	99 10 08	sta $0810,y			sta 	textBuffer,y
.1ca3	e8		inx				inx
.1ca4	c8		iny				iny
.1ca5	c9 00		cmp #$00			cmp 	#0
.1ca7	d0 f4		bne $1c9d			bne 	_SLAppend
.1ca9					_SLExit:
.1ca9	60		rts				rts
.1caa					_SLFNFail:
.1caa	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1cad	42 41 44 20 46 49 4c 45				.text 	"BAD FILENAME",0
>1cb5	4e 41 4d 45 00
.1cba					_SLFNExtension:
>1cba	2e 52 50 4c 00					.text 	".RPL",0
.1cbf					ExtendWithDictionary:
.1cbf	20 e8 1c	jsr $1ce8			jsr 	_EWDMarker 					; 8 bytes after the final offset write a marker
.1cc2	a9 ff		lda #$ff			lda 	#(Dictionary) & $FF
.1cc4	85 13		sta $13				sta 	0+(temp1)
.1cc6	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.1cc8	85 14		sta $14				sta 	1+(temp1)
.1cca					_EWDLoop:
.1cca	b2 13		lda ($13)			lda 	(temp1)						; end
.1ccc	f0 1a		beq $1ce8			beq 	_EWDMarker
.1cce	a0 02		ldy #$02			ldy 	#2 							; output the address
.1cd0	b1 13		lda ($13),y			lda 	(temp1),y
.1cd2	20 f1 1c	jsr $1cf1			jsr 	_EWDWrite
.1cd5	c8		iny				iny
.1cd6	b1 13		lda ($13),y			lda 	(temp1),y
.1cd8	20 f1 1c	jsr $1cf1			jsr 	_EWDWrite
.1cdb	18		clc				clc 								; next entry.
.1cdc	a5 13		lda $13				lda 	temp1
.1cde	72 13		adc ($13)			adc 	(temp1)
.1ce0	85 13		sta $13				sta 	temp1
.1ce2	90 e6		bcc $1cca			bcc 	_EWDLoop
.1ce4	e6 14		inc $14				inc 	temp1+1
.1ce6	80 e2		bra $1cca			bra 	_EWDLoop
.1ce8					_EWDMarker:
.1ce8	a9 ff		lda #$ff			lda 	#$FF
.1cea	20 f1 1c	jsr $1cf1			jsr 	_EWDWrite
.1ced	20 f1 1c	jsr $1cf1			jsr 	_EWDWrite
.1cf0	60		rts				rts
.1cf1					_EWDWrite:
.1cf1	92 11		sta ($11)			sta 	(nextFreeMem)
.1cf3	e6 11		inc $11				inc 	nextFreeMem
.1cf5	d0 02		bne $1cf9			bne 	_EWDExit
.1cf7	e6 12		inc $12				inc 	nextFreeMem+1
.1cf9					_EWDExit:
.1cf9	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/skipper.src

.1cfa					NextLine:
.1cfa	18		clc				clc
.1cfb	a5 03		lda $03				lda 	IP
.1cfd	72 03		adc ($03)			adc 	(IP)
.1cff	85 03		sta $03				sta 	IP
.1d01	90 02		bcc $1d05			bcc 	_NoCarryAdv
.1d03	e6 04		inc $04				inc 	IP+1
.1d05					_NoCarryAdv:
.1d05	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1d07	f0 05		beq $1d0e			beq 	_NLGoEnd
.1d09	a2 01		ldx #$01			ldx 	#1 							; start 3 in (-2 for Next)
.1d0b	4c 00 00	jmp $0000			jmp 	NextCode
.1d0e					_NLGoEnd:
.1d0e	4c 42 24	jmp $2442			jmp 	WarmStart
.1d11					SkipComment:
.1d11	e8		inx				inx									; (IP),X points to the length.
.1d12	e8		inx				inx
.1d13	8a		txa				txa
.1d14	a8		tay				tay 								; put into Y
.1d15	18		clc				clc
.1d16	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1d18	aa		tax				tax 								; put back in X
.1d19	ca		dex				dex
.1d1a	ca		dex				dex
.1d1b	4c 00 00	jmp $0000			jmp 	NextCode
.1d1e					CommentDecoder:
.1d1e	a9 06		lda #$06			lda 	#CTH_Keyword
.1d20	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d23	a9 27		lda #$27			lda 	#"'"
.1d25	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d28	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; check if there is no data
.1d2a	c9 01		cmp #$01			cmp 	#1
.1d2c	f0 0d		beq $1d3b			beq 	_CDEmpty 					; if so print nothing.
.1d2e	a9 0b		lda #$0b			lda 	#CTH_Comment
.1d30	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d33	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.1d36	a9 20		lda #$20			lda 	#32
.1d38	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d3b					_CDEmpty
.1d3b	60		rts				rts
.1d3c					DefineCode:
.1d3c	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1d3f	52 45 41 43 48 45 44 20				.text 	"REACHED DEFINITION",0
>1d47	44 45 46 49 4e 49 54 49 4f 4e 00
.1d52					DefineDecoder:
.1d52	a9 07		lda #$07			lda 	#CTH_Definition
.1d54	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d57	a9 3a		lda #$3a			lda 	#":"
.1d59	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d5c	20 bc 19	jsr $19bc			jsr 	DecodeOutputData
.1d5f	a9 20		lda #$20			lda 	#32
.1d61	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1d64	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/toint.src

.1d65					ConvertToInteger:
.1d65	84 1a		sty $1a				sty 	temp4+1
.1d67	85 19		sta $19				sta 	temp4
.1d69	64 17		stz $17				stz 	temp3 						; reset value
.1d6b	64 18		stz $18				stz 	temp3+1
.1d6d	64 13		stz $13				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1d6f	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1d71	b1 19		lda ($19),y			lda 	(temp4),y
.1d73	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1d75	85 14		sta $14				sta 	temp1+1 					; save this in temp1+1
.1d77	d0 01		bne $1d7a			bne 	_CTINotMinus
.1d79	c8		iny				iny									; skip -
.1d7a					_CTINotMinus:
.1d7a	b1 19		lda ($19),y			lda 	(temp4),y
.1d7c	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1d7e	d0 03		bne $1d83			bne 	_CTILoop
.1d80	c6 13		dec $13				dec 	temp1
.1d82	c8		iny				iny
.1d83					_CTILoop:
.1d83	b1 19		lda ($19),y			lda 	(temp4),y 					; next digit
.1d85	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1d87	38		sec				sec
.1d88	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1d8a	90 65		bcc $1df1			bcc 	_CTIFail 					; out of range.
.1d8c	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1d8e	90 0b		bcc $1d9b			bcc 	_CTILegal
.1d90	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1d92	90 5d		bcc $1df1			bcc 	_CTIFail
.1d94	38		sec				sec
.1d95	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1d97	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1d99	b0 56		bcs $1df1			bcs 	_CTIFail
.1d9b					_CTILegal:
.1d9b	48		pha				pha 								; save digit value.
.1d9c	06 17		asl $17				asl 	temp3
.1d9e	26 18		rol $18				rol 	temp3+1
.1da0	a5 17		lda $17				lda 	temp3 						; copy x2 into temp2
.1da2	85 15		sta $15				sta 	temp2
.1da4	a5 18		lda $18				lda 	temp3+1
.1da6	85 16		sta $16				sta 	temp2+1
.1da8	06 17		asl $17				asl 	temp3
.1daa	26 18		rol $18				rol 	temp3+1
.1dac	06 17		asl $17				asl 	temp3
.1dae	26 18		rol $18				rol 	temp3+1
.1db0	24 13		bit $13				bit 	temp1 						; hexadecimal
.1db2	10 07		bpl $1dbb			bpl 	_CTIDecimal
.1db4	06 17		asl $17				asl 	temp3
.1db6	26 18		rol $18				rol 	temp3+1
.1db8	68		pla				pla 								; get digit back
.1db9	80 12		bra $1dcd			bra 	_CTIAddLoop
.1dbb					_CTIDecimal:
.1dbb	18		clc				clc 								; x 8 + x 2 = x 10
.1dbc	a5 17		lda $17				lda 	temp3
.1dbe	65 15		adc $15				adc 	temp2
.1dc0	85 17		sta $17				sta 	temp3
.1dc2	a5 18		lda $18				lda 	temp3+1
.1dc4	65 16		adc $16				adc 	temp2+1
.1dc6	85 18		sta $18				sta 	temp3+1
.1dc8	68		pla				pla 								; check digit 0-9
.1dc9	c9 0a		cmp #$0a			cmp 	#10
.1dcb	b0 24		bcs $1df1			bcs 	_CTIFail
.1dcd					_CTIAddLoop:
.1dcd	18		clc				clc
.1dce	65 17		adc $17				adc 	temp3
.1dd0	85 17		sta $17				sta 	temp3
.1dd2	90 02		bcc $1dd6			bcc 	_CTINoCarry
.1dd4	e6 18		inc $18				inc 	temp3+1
.1dd6					_CTINoCarry:
.1dd6	c8		iny				iny
.1dd7	b1 19		lda ($19),y			lda 	(temp4),y 					; was this the last character
.1dd9	c9 21		cmp #$21			cmp 	#32+1
.1ddb	b0 a6		bcs $1d83			bcs 	_CTILoop 					; no, go back.
.1ddd	a5 14		lda $14				lda 	temp1+1 					; was it - ?
.1ddf	d0 0d		bne $1dee			bne 	_CTIOkay
.1de1	38		sec				sec
.1de2	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1de4	e5 17		sbc $17				sbc 	temp3
.1de6	85 17		sta $17				sta 	temp3
.1de8	a9 00		lda #$00			lda 	#0
.1dea	e5 18		sbc $18				sbc 	temp3+1
.1dec	85 18		sta $18				sta 	temp3+1
.1dee					_CTIOkay:
.1dee	98		tya				tya
.1def	38		sec				sec
.1df0	60		rts				rts
.1df1					_CTIFail:
.1df1	18		clc				clc
.1df2	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/system/tostr.src

.1df3					IntToString:
.1df3	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1df5	85 15		sta $15				sta 	0+(temp2)
.1df7	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1df9	85 16		sta $16				sta 	1+(temp2)
.1dfb	a5 09		lda $09				lda 	TOS 						; value in YA
.1dfd	a4 0a		ldy $0a				ldy 	TOS+1
.1dff	20 2f 1e	jsr $1e2f			jsr 	ConvertToString
.1e02	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e04	85 09		sta $09				sta 	0+(TOS)
.1e06	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e08	85 0a		sta $0a				sta 	1+(TOS)
.1e0a	4c 00 00	jmp $0000			jmp 	NextCode
.1e0d					PrintYA:
.1e0d	48		pha				pha
.1e0e	da		phx				phx
.1e0f	5a		phy				phy
.1e10	48		pha				pha
.1e11	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1e13	85 15		sta $15				sta 	0+(temp2)
.1e15	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1e17	85 16		sta $16				sta 	1+(temp2)
.1e19	68		pla				pla
.1e1a	20 33 1e	jsr $1e33			jsr 	ConvertToStringMain
.1e1d	a2 00		ldx #$00			ldx 	#0
.1e1f					_PrintYALoop:
.1e1f	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e22	20 21 25	jsr $2521			jsr 	ExternPrint
.1e25	e8		inx				inx
.1e26	bd 10 08	lda $0810,x			lda 	textBuffer,x
.1e29	d0 f4		bne $1e1f			bne 	_PrintYALoop
.1e2b	7a		ply				ply
.1e2c	fa		plx				plx
.1e2d	68		pla				pla
.1e2e	60		rts				rts
.1e2f					ConvertToString:
.1e2f	38		sec				sec
.1e30	80 01		bra $1e33			bra 	ConvertToStringMain
.1e32					ConvertToStringUnsigned:
.1e32	18		clc				clc
.1e33					ConvertToStringMain:
.1e33	da		phx				phx									; save XY
.1e34	5a		phy				phy
.1e35	64 1d		stz $1d				stz 	SignCount 					; this is zero suppression
.1e37	85 13		sta $13				sta 	temp1 						; save YA in temp1
.1e39	84 14		sty $14				sty 	temp1+1
.1e3b	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1e3d	90 16		bcc $1e55			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1e3f	a5 14		lda $14				lda 	temp1+1 					; is it negative
.1e41	10 12		bpl $1e55			bpl 	_CTSUnsigned
.1e43	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1e45	91 15		sta ($15),y			sta 	(temp2),y
.1e47	c8		iny				iny
.1e48	38		sec				sec 								; negate temp1
.1e49	a9 00		lda #$00			lda 	#0
.1e4b	e5 13		sbc $13				sbc 	temp1
.1e4d	85 13		sta $13				sta 	temp1
.1e4f	a9 00		lda #$00			lda 	#0
.1e51	e5 14		sbc $14				sbc 	temp1+1
.1e53	85 14		sta $14				sta 	temp1+1
.1e55					_CTSUnsigned:
.1e55	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1e57					_CTSLoop:
.1e57	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1e59	91 15		sta ($15),y			sta 	(temp2),y
.1e5b					_CTSSubLoop:
.1e5b	b1 15		lda ($15),y			lda 	(temp2),y 					; bump the count
.1e5d	1a		inc a				inc 	a
.1e5e	91 15		sta ($15),y			sta 	(temp2),y
.1e60	38		sec				sec 								; do subtraction saving interim result
.1e61	a5 13		lda $13				lda 	temp1
.1e63	fd 96 1e	sbc $1e96,x			sbc 	_CTSTable,x
.1e66	48		pha				pha
.1e67	a5 14		lda $14				lda 	temp1+1
.1e69	fd 97 1e	sbc $1e97,x			sbc 	_CTSTable+1,x
.1e6c	90 07		bcc $1e75			bcc 	_CTSCantSubtract 			; end of subtraction.
.1e6e	85 14		sta $14				sta 	temp1+1 					; save result back
.1e70	68		pla				pla
.1e71	85 13		sta $13				sta 	temp1
.1e73	80 e6		bra $1e5b			bra 	_CTSSubLoop
.1e75					_CTSCantSubtract:
.1e75	68		pla				pla 								; throw away interim
.1e76	e8		inx				inx 								; next subtractor
.1e77	e8		inx				inx
.1e78	b1 15		lda ($15),y			lda 	(temp2),y 					; update leading zero
.1e7a	49 30		eor #$30			eor 	#"0"
.1e7c	05 1d		ora $1d				ora 	SignCount
.1e7e	85 1d		sta $1d				sta 	SignCount
.1e80	f0 01		beq $1e83			beq		_CTSLZ 						; if all zeros so far suppress.
.1e82	c8		iny				iny 								; next character
.1e83					_CTSLZ:
.1e83	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1e85	d0 d0		bne $1e57			bne 	_CTSLoop
.1e87					_CTSComplete:
.1e87	a5 13		lda $13				lda		temp1 						; get remainder 0-9
.1e89	09 30		ora #$30			ora 	#48 						; ASCII
.1e8b	91 15		sta ($15),y			sta 	(temp2),y					; write out
.1e8d	c8		iny				iny
.1e8e	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1e90	91 15		sta ($15),y			sta 	(temp2),y
.1e92	98		tya				tya 								; size in A
.1e93	7a		ply				ply									; pull and exit.
.1e94	fa		plx				plx
.1e95	60		rts				rts
.1e96					_CTSTable:
>1e96	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1e9e					_CTSTableEnd:

;******  Return to file: files.asm


;******  Processing file: words/system/varhandlers.src

.1e9e					VarAddressHandler:
.1e9e	18		clc				clc 								; find variable, error if it doesn't exist.
.1e9f	20 41 1f	jsr $1f41			jsr 	VariableFind
.1ea2	20 1b 1f	jsr $1f1b			jsr 	VariableCheckIndex
.1ea5	a5 09		lda $09				lda 	TOS
.1ea7	48		pha				pha
.1ea8	a5 0a		lda $0a				lda 	TOS+1
.1eaa	48		pha				pha
.1eab	a5 13		lda $13				lda 	temp1 						; the address is the new value
.1ead	85 09		sta $09				sta 	TOS
.1eaf	a5 14		lda $14				lda		temp1+1
.1eb1	85 0a		sta $0a				sta 	TOS+1
.1eb3	4c 00 00	jmp $0000			jmp 	NextCode
.1eb6					VarAddrHandlerDecode:
.1eb6	a9 26		lda #$26			lda 	#"&"
.1eb8	4c f9 1f	jmp $1ff9			jmp 	VarHandlerDecode
.1ebb					VarReadHandler:
.1ebb	18		clc				clc 								; find variable, error if it doesn't exist.
.1ebc	20 41 1f	jsr $1f41			jsr 	VariableFind
.1ebf	20 1b 1f	jsr $1f1b			jsr 	VariableCheckIndex
.1ec2	a5 09		lda $09				lda 	TOS
.1ec4	48		pha				pha
.1ec5	a5 0a		lda $0a				lda 	TOS+1
.1ec7	48		pha				pha
.1ec8	b2 13		lda ($13)			lda 	(temp1)						; read variable address to TOS
.1eca	85 09		sta $09				sta 	TOS
.1ecc	a0 01		ldy #$01			ldy 	#1
.1ece	b1 13		lda ($13),y			lda 	(temp1),y
.1ed0	85 0a		sta $0a				sta 	TOS+1
.1ed2	4c 00 00	jmp $0000			jmp 	NextCode
.1ed5					VarReadHandlerDecode:
.1ed5	a9 40		lda #$40			lda 	#"@"
.1ed7	4c f9 1f	jmp $1ff9			jmp 	VarHandlerDecode
.1eda					VarWriteHandler:
.1eda	38		sec				sec 								; find variable, create it if it doesn't exist.
.1edb	20 41 1f	jsr $1f41			jsr 	VariableFind
.1ede	20 1b 1f	jsr $1f1b			jsr 	VariableCheckIndex
.1ee1	a5 09		lda $09				lda 	TOS 						; write TOS to that address.
.1ee3	92 13		sta ($13)			sta 	(temp1)
.1ee5	a5 0a		lda $0a				lda 	TOS+1
.1ee7	a0 01		ldy #$01			ldy 	#1
.1ee9	91 13		sta ($13),y			sta 	(temp1),y
.1eeb	68		pla				pla
.1eec	85 0a		sta $0a				sta 	TOS+1
.1eee	68		pla				pla
.1eef	85 09		sta $09				sta 	TOS
.1ef1	4c 00 00	jmp $0000			jmp 	NextCode
.1ef4					VarWriteHandlerDecode:
.1ef4	a9 21		lda #$21			lda 	#"!"
.1ef6	4c f9 1f	jmp $1ff9			jmp 	VarHandlerDecode
.1ef9					IndexHandler:
.1ef9	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1efc	24 24 49 4e 44 45 58 3a				.text 	"$$INDEX:BUG",0
>1f04	42 55 47 00
.1f08					IndexHandlerDecode:
.1f08	a9 5b		lda #$5b			lda 	#"["
.1f0a	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1f0d	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.1f0f	a0 00		ldy #$00			ldy 	#0
.1f11	38		sec				sec
.1f12	20 d5 19	jsr $19d5			jsr 	DecodeYAToBuffer
.1f15	a9 5d		lda #$5d			lda 	#"]"
.1f17	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1f1a	60		rts				rts
.1f1b					VariableCheckIndex:
.1f1b	8a		txa				txa 								; next is $$index ?
.1f1c	a8		tay				tay
.1f1d	c8		iny				iny
.1f1e	c8		iny				iny
.1f1f	b1 03		lda ($03),y			lda 	(IP),y
.1f21	c9 f9		cmp #$f9			cmp 	#IndexHandler & $FF
.1f23	d0 1b		bne $1f40			bne 	_VCIExit
.1f25	c8		iny				iny
.1f26	b1 03		lda ($03),y			lda 	(IP),y
.1f28	c9 1e		cmp #$1e			cmp 	#IndexHandler >> 8
.1f2a	d0 14		bne $1f40			bne 	_VCIExit
.1f2c	98		tya				tya 								; fix X backup 3 on from where we started
.1f2d	aa		tax				tax
.1f2e	c8		iny				iny 								; get the index
.1f2f	b1 03		lda ($03),y			lda 	(IP),y
.1f31	0a		asl a				asl 	a 							; double it, add to (temp1) -> temp1
.1f32	a0 01		ldy #$01			ldy 	#1
.1f34	72 13		adc ($13)			adc 	(temp1) 					; do the indirection e.g. the look up.
.1f36	48		pha				pha
.1f37	b1 13		lda ($13),y			lda 	(temp1),y
.1f39	69 00		adc #$00			adc 	#0
.1f3b	85 14		sta $14				sta 	temp1+1
.1f3d	68		pla				pla
.1f3e	85 13		sta $13				sta 	temp1
.1f40					_VCIExit:
.1f40	60		rts				rts
.1f41					VariableFind:
.1f41	08		php				php 								; save autocreate flag.
.1f42	e8		inx				inx 								; advance to/over the variable name.
.1f43	e8		inx				inx
.1f44	8a		txa				txa 								; put in Y
.1f45	a8		tay				tay
.1f46	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1f48	85 15		sta $15				sta 	temp2
.1f4a	c8		iny				iny
.1f4b	b1 03		lda ($03),y			lda 	(IP),y
.1f4d	85 16		sta $16				sta 	temp2+1
.1f4f	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1f51	b0 0f		bcs $1f62			bcs 	_VFLong
.1f53	a5 16		lda $16				lda 	temp2+1
.1f55	d0 0b		bne $1f62			bne 	_VFLong
.1f57	a5 15		lda $15				lda 	temp2						; this is the index
.1f59	0a		asl a				asl 	a 							; double it
.1f5a	85 13		sta $13				sta 	temp1
.1f5c	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1f5e	85 14		sta $14				sta 	temp1+1
.1f60	28		plp				plp 								; throw creation flag, it always exists.
.1f61	60		rts				rts
.1f62					_VFLong:
.1f62	a5 15		lda $15				lda 	temp2 						; built a hash table index into temp3/temp4
.1f64	6a		ror a				ror 	a
.1f65	6a		ror a				ror 	a
.1f66	6a		ror a				ror 	a
.1f67	6a		ror a				ror 	a
.1f68	45 15		eor $15				eor 	temp2
.1f6a	45 16		eor $16				eor 	temp2+1
.1f6c	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1f6e	0a		asl a				asl 	a
.1f6f	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1f71	85 13		sta $13				sta 	temp1
.1f73	85 17		sta $17				sta 	temp3
.1f75	a9 06		lda #$06			lda 	#hashTable >> 8
.1f77	85 14		sta $14				sta 	temp1+1
.1f79	85 18		sta $18				sta 	temp3+1
.1f7b					_VFSearch:
.1f7b	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1f7d	b1 13		lda ($13),y			lda 	(temp1),y
.1f7f	f0 23		beq $1fa4			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1f81	a8		tay				tay 								; follow the link through.
.1f82	b2 13		lda ($13)			lda 	(temp1)
.1f84	85 13		sta $13				sta 	temp1
.1f86	84 14		sty $14				sty 	temp1+1
.1f88	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1f8a	b1 13		lda ($13),y			lda 	(temp1),y
.1f8c	c5 15		cmp $15				cmp 	temp2
.1f8e	d0 eb		bne $1f7b			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1f90	c8		iny				iny 								; same for 2nd byte of name
.1f91	b1 13		lda ($13),y			lda 	(temp1),y
.1f93	c5 16		cmp $16				cmp 	temp2+1
.1f95	d0 e4		bne $1f7b			bne 	_VFSearch
.1f97	18		clc				clc
.1f98	a5 13		lda $13				lda 	temp1 						; make temp1 point to the data at offset 2
.1f9a	69 02		adc #$02			adc 	#2
.1f9c	85 13		sta $13				sta 	temp1
.1f9e	90 02		bcc $1fa2			bcc 	_VFNoPage1
.1fa0	e6 14		inc $14				inc 	temp1+1
.1fa2					_VFNoPage1:
.1fa2	28		plp				plp 								; don't need to worry about creation flag
.1fa3	60		rts				rts
.1fa4					_VFNotFound:
.1fa4	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1fa5	b0 14		bcs $1fbb			bcs 	_VFCreate
.1fa7	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>1faa	4e 4f 20 53 55 43 48 20				.text 	"NO SUCH VARIABLE",0
>1fb2	56 41 52 49 41 42 4c 45 00
.1fbb					_VFCreate:
.1fbb	a0 01		ldy #$01			ldy 	#1
.1fbd	b2 17		lda ($17)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1fbf	92 11		sta ($11)			sta 	(nextFreeMem)
.1fc1	b1 17		lda ($17),y			lda 	(temp3),y
.1fc3	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fc5	c8		iny				iny
.1fc6	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1fc8	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fca	c8		iny				iny
.1fcb	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fcd	c8		iny				iny
.1fce	a5 15		lda $15				lda 	temp2 						; copy the name out
.1fd0	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fd2	c8		iny				iny
.1fd3	a5 16		lda $16				lda 	temp2+1
.1fd5	91 11		sta ($11),y			sta 	(nextFreeMem),y
.1fd7	a0 01		ldy #$01			ldy 	#1
.1fd9	a5 11		lda $11				lda 	nextFreeMem 				; update the head link
.1fdb	92 17		sta ($17)			sta 	(temp3)
.1fdd	a5 12		lda $12				lda 	nextFreeMem+1
.1fdf	91 17		sta ($17),y			sta 	(temp3),y
.1fe1	18		clc				clc
.1fe2	a5 11		lda $11				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1fe4	69 02		adc #$02			adc 	#2
.1fe6	85 13		sta $13				sta 	temp1
.1fe8	a5 12		lda $12				lda 	nextFreeMem+1
.1fea	69 00		adc #$00			adc 	#0
.1fec	85 14		sta $14				sta 	temp1+1
.1fee	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1ff0	a0 00		ldy #$00			ldy 	#0
.1ff2	20 92 18	jsr $1892			jsr 	AdvanceFreeMem
.1ff5	20 9f 18	jsr $189f			jsr 	CheckMemory 				; low on memory ?
.1ff8	60		rts				rts
.1ff9					VarHandlerDecode:
.1ff9	48		pha				pha 								; save, leading space
.1ffa	a9 07		lda #$07			lda 	#CTH_Variable
.1ffc	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.1fff	68		pla				pla 								; restore and write type
.2000	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.2003	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; copy to temp1
.2005	85 13		sta $13				sta 	temp1
.2007	c8		iny				iny
.2008	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.200a	85 14		sta $14				sta 	temp1+1
.200c	a5 13		lda $13				lda 	temp1 						; output the first character
.200e	29 1f		and #$1f			and 	#31
.2010	20 3b 20	jsr $203b			jsr 	VHOutVarChar
.2013	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.2015					_VHDShift:
.2015	46 14		lsr $14				lsr 	temp1+1
.2017	66 13		ror $13				ror 	temp1
.2019	ca		dex				dex
.201a	d0 f9		bne $2015			bne 	_VHDShift
.201c	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.201e					_VHDDiv40:
.201e	e8		inx				inx
.201f	38		sec				sec
.2020	a5 13		lda $13				lda 	temp1
.2022	e9 28		sbc #$28			sbc 	#40
.2024	a8		tay				tay
.2025	a5 14		lda $14				lda 	temp1+1
.2027	e9 00		sbc #$00			sbc 	#0
.2029	90 06		bcc $2031			bcc 	_VHDivDone
.202b	85 14		sta $14				sta 	temp1+1
.202d	84 13		sty $13				sty 	temp1
.202f	80 ed		bra $201e			bra 	_VHDDiv40
.2031					_VHDivDone:
.2031	a5 13		lda $13				lda 	temp1 						; remainder
.2033	20 3b 20	jsr $203b			jsr 	VHOutVarChar
.2036	8a		txa				txa
.2037	20 3b 20	jsr $203b			jsr 	VHOutVarChar 				; and result.
.203a	60		rts				rts
.203b					VHOutVarChar:
.203b	c9 00		cmp #$00			cmp 	#0
.203d	f0 0c		beq $204b			beq 	_VHOExit
.203f	18		clc				clc
.2040	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.2042	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.2044	90 02		bcc $2048			bcc 	_VHOOut
.2046	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.2048					_VHOOut:
.2048	20 b3 19	jsr $19b3			jsr 	DecodeWriteBuffer
.204b					_VHOExit:
.204b	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encode.src

.204c					EncodeProgram:
.204c	48		pha				pha 								; save registers.
.204d	da		phx				phx
.204e	5a		phy				phy
.204f	84 0c		sty $0c				sty 	srcPtr+1					; save source pointer.
.2051	85 0b		sta $0b				sta		srcPtr
.2053	64 08		stz $08				stz 	rsp
.2055	a6 08		ldx $08				ldx 	rsp 						; this is the current stack entry type, so $00 means
.2057	9e 40 07	stz $0740,x			stz 	returnStackHigh,x 			; an initial "until" will fail as it's looking for "R" here (repeat)
.205a	20 d9 22	jsr $22d9			jsr 	EncodeTrimTrailingSpaces 	; remove trailing spaces.
.205d	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.205f	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.2062	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.2065	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.2068	b2 0b		lda ($0b)			lda 	(srcPtr) 					; check if first character is digit
.206a	20 84 22	jsr $2284			jsr 	CheckIsDigit
.206d	90 09		bcc $2078			bcc 	_EPNoLineNumber 			; if so there is a line number
.206f	20 a6 22	jsr $22a6			jsr 	EncodeGetConstant 			; extract that constant from the source
.2072	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.2075	8c 12 09	sty $0912			sty 	encodeBuffer+2
.2078					_EPNoLineNumber:
.2078					EncodeLoop:
.2078	20 cb 22	jsr $22cb			jsr 	EncSkipSpaces 				; skip over spaces
.207b	b2 0b		lda ($0b)			lda 	(srcPtr) 					; reached end ?
.207d	d0 21		bne $20a0			bne 	_EPNotEnd
.207f					_EPEndEncode:
.207f	a9 fa		lda #$fa			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.2081	a0 1c		ldy #$1c			ldy 	#NextLine >> 8
.2083	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.2086	a5 08		lda $08				lda 	rsp 						; is the return stack empty ?
.2088	d0 04		bne $208e			bne 	_EPIncomplete
.208a	7a		ply				ply									; restore and exit.
.208b	fa		plx				plx
.208c	68		pla				pla
.208d	60		rts				rts
.208e					_EPIncomplete:
.208e	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>2091	53 54 52 55 43 54 55 52				.text 	"STRUCTURE OPEN",0
>2099	45 20 4f 50 45 4e 00
.20a0					_EPNotEnd:
.20a0	b2 0b		lda ($0b)			lda 	(srcPtr)
.20a2	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.20a4	f0 04		beq $20aa			beq 	_EPIsComStr
.20a6	c9 27		cmp #$27			cmp 	#"'"
.20a8	d0 05		bne $20af			bne 	_EPNotComStr
.20aa					_EPIsComStr:
.20aa	20 a9 21	jsr $21a9			jsr 	EncodeCommentString
.20ad	80 c9		bra $2078			bra 	EncodeLoop
.20af					_EPNotComStr:
.20af	38		sec				sec
.20b0	20 b8 22	jsr $22b8			jsr 	EncSetBit7Word
.20b3	20 00 23	jsr $2300			jsr 	EncodeSearchDictionary		; look it up
.20b6	90 45		bcc $20fd			bcc 	_EPNotInDictionary
.20b8	85 13		sta $13				sta 	temp1 						; save dictionary record address
.20ba	84 14		sty $14				sty 	temp1+1
.20bc	a0 01		ldy #$01			ldy 	#1
.20be	b1 13		lda ($13),y			lda 	(temp1),y 					; check if has an encode bit
.20c0	29 20		and #$20			and 	#$20
.20c2	d0 12		bne $20d6			bne 	_EPEncodeRoutine 			; if so, do special routine.
.20c4	a0 02		ldy #$02			ldy 	#2 							; write out the routine address
.20c6	b1 13		lda ($13),y			lda 	(temp1),y
.20c8	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.20cb	c8		iny				iny
.20cc	b1 13		lda ($13),y			lda 	(temp1),y
.20ce	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.20d1	20 90 22	jsr $2290			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20d4	80 a2		bra $2078			bra 	EncodeLoop
.20d6					_EPEncodeRoutine:
.20d6	a0 01		ldy #$01			ldy 	#1							; get type bit
.20d8	b1 13		lda ($13),y			lda 	(temp1),y
.20da	a0 04		ldy #$04			ldy 	#4							; encoder here if no decoder
.20dc	29 10		and #$10			and 	#$10 						; but decoder comes first
.20de	f0 02		beq $20e2			beq 	_EPENoDecoder
.20e0	c8		iny				iny 								; so if it exists, adjust for it.
.20e1	c8		iny				iny
.20e2					_EPENoDecoder:
.20e2	b1 13		lda ($13),y			lda 	(temp1),y 					; copy exec addr to temp2
.20e4	85 15		sta $15				sta 	temp2
.20e6	c8		iny				iny
.20e7	b1 13		lda ($13),y			lda 	(temp1),y
.20e9	85 16		sta $16				sta 	temp2+1
.20eb	48		pha				pha 								; call routine preserving state
.20ec	da		phx				phx
.20ed	5a		phy				phy
.20ee	20 fa 20	jsr $20fa			jsr 	_EPECallTemp2
.20f1	7a		ply				ply
.20f2	fa		plx				plx
.20f3	68		pla				pla
.20f4	20 90 22	jsr $2290			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.20f7	4c 78 20	jmp $2078			jmp 	EncodeLoop
.20fa					_EPECallTemp2:
.20fa	6c 15 00	jmp ($0015)			jmp 	(temp2)
.20fd					_EPNotInDictionary:
.20fd	20 0e 22	jsr $220e			jsr 	EncodeSearchUserDefined 	; are there any user defined routines
.2100	90 19		bcc $211b			bcc 	_EPNotDefined
.2102	48		pha				pha
.2103	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.2105	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2108	a9 16		lda #$16			lda	 	#CallHandler >> 8
.210a	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.210d	68		pla				pla 								; write line number
.210e	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2111	98		tya				tya
.2112	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2115	20 90 22	jsr $2290			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2118	4c 78 20	jmp $2078			jmp 	EncodeLoop
.211b					_EPNotDefined:
.211b	b2 0b		lda ($0b)			lda 	(srcPtr) 					; first character
.211d	c9 3a		cmp #$3a			cmp 	#":"						; is it :<routine> ?
.211f	f0 65		beq $2186			beq 	_EPDefinition
.2121	c9 3c		cmp #$3c			cmp 	#"<"						; is it <line> which is call syntax
.2123	f0 3b		beq $2160			beq 	_EPCallDirect
.2125	c9 21		cmp #$21			cmp 	#"!"						; check for variable operators
.2127	f0 54		beq $217d			beq 	_EPVariable
.2129	c9 40		cmp #$40			cmp 	#"@"
.212b	f0 50		beq $217d			beq 	_EPVariable
.212d	c9 26		cmp #$26			cmp 	#"&"
.212f	f0 4c		beq $217d			beq 	_EPVariable
.2131	c9 24		cmp #$24			cmp 	#"$" 						; is it a hex constant
.2133	d0 09		bne $213e			bne 	_EPDecLiteral
.2135	a9 6c		lda #$6c			lda 	#HexLiteral2Byte & $FF 		; write out 2 byte literal (hex)
.2137	a0 10		ldy #$10			ldy 	#HexLiteral2Byte >> 8
.2139	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.213c	80 07		bra $2145			bra 	_EPOutputConstant
.213e					_EPDecLiteral:
.213e	a9 6d		lda #$6d			lda 	#Literal2Byte & $FF 		; write out 2 byte literal
.2140	a0 10		ldy #$10			ldy 	#Literal2Byte >> 8
.2142	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.2145					_EPOutputConstant:
.2145	20 a6 22	jsr $22a6			jsr 	EncodeGetConstant 			; extract that constant from the source
.2148	90 06		bcc $2150			bcc 	_EPFail 					; if can't find one, that's us done.
.214a	20 5c 22	jsr $225c			jsr 	EncodeWriteWord 			; write out the encoded value.
.214d	4c 78 20	jmp $2078			jmp 	EncodeLoop 					; and go round again.
.2150					_EPFail:
.2150	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>2153	53 59 4e 54 41 58 20 45				.text 	"SYNTAX ERROR",0
>215b	52 52 4f 52 00
.2160					_EPCallDirect:
.2160	a9 df		lda #$df			lda	 	#CallHandler & $FF 			; write code call handler
.2162	a0 16		ldy #$16			ldy	 	#CallHandler >> 8
.2164	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.2167	a9 01		lda #$01			lda 	#1
.2169	20 9c 22	jsr $229c			jsr 	EncodeAddSrcPtr 			; skip over the <
.216c	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for last character.
.216e					_EPToLast:
.216e	c8		iny				iny
.216f	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2171	10 fb		bpl $216e			bpl	 	_EPToLast
.2173	c9 be		cmp #$be			cmp 	#">"+$80 					; must be >
.2175	d0 d9		bne $2150			bne 	_EPFail
.2177	a9 20		lda #$20			lda 	#" " 						; strip back to a number, erases last char
.2179	91 0b		sta ($0b),y			sta 	(srcPtr),y
.217b	80 c8		bra $2145			bra 	_EPOutputConstant 			; borrow the number routines extract/compile constant
.217d					_EPVariable:
.217d	20 54 23	jsr $2354			jsr 	EncodeVariableReference
.2180	20 90 22	jsr $2290			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.2183	4c 78 20	jmp $2078			jmp 	EncodeLoop
.2186					_EPDefinition:
.2186	a9 3c		lda #$3c			lda	 	#DefineCode & $FF 			; write code call handler
.2188	a0 1d		ldy #$1d			ldy	 	#DefineCode >> 8
.218a	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.218d	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; position
.2190	a9 01		lda #$01			lda 	#1 							; write default size
.2192	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2195	a0 00		ldy #$00			ldy 	#0 							; copy definition over.
.2197	c8		iny		_EPCopy:iny
.2198	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.219a	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.219d	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; update length.
.21a0	0a		asl a				asl 	a
.21a1	90 f4		bcc $2197			bcc 	_EPCopy
.21a3	20 90 22	jsr $2290			jsr 	EncodeMoveNextWord 			; advance to the next and loop
.21a6	4c 78 20	jmp $2078			jmp 	EncodeLoop

;******  Return to file: files.asm


;******  Processing file: words/encode/comstr.src

.21a9					EncodeCommentString:
.21a9	b2 0b		lda ($0b)			lda 	(srcPtr) 					; get first character
.21ab	64 13		stz $13				stz 	temp1 						; other terminator = EOL
.21ad	aa		tax				tax 								; save in X
.21ae	a9 11		lda #$11			lda 	#(SkipComment & $FF)		; get the routine to use
.21b0	a0 1d		ldy #$1d			ldy 	#(SkipComment >> 8)
.21b2	e0 27		cpx #$27			cpx 	#"'"
.21b4	f0 06		beq $21bc			beq 	_ECSGotCmd
.21b6	86 13		stx $13				stx		temp1 						; other terminator = "
.21b8	a9 c7		lda #$c7			lda 	#(LiteralString & $FF)
.21ba	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.21bc					_ECSGotCmd:
.21bc	20 5c 22	jsr $225c			jsr 	EncodeWriteWord 			; write word out.
.21bf	a9 01		lda #$01			lda 	#1 							; skip over ' or "
.21c1	20 9c 22	jsr $229c			jsr 	EncodeAddSrcPtr
.21c4	e0 27		cpx #$27			cpx 	#"'"						; if ' then skip spaces
.21c6	d0 03		bne $21cb			bne 	_ECNoSkipSpaces
.21c8	20 cb 22	jsr $22cb			jsr 	EncSkipSpaces
.21cb					_ECNoSkipSpaces:
.21cb	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.21ce	a9 01		lda #$01			lda 	#1
.21d0	20 66 22	jsr $2266			jsr 	EncodeWriteByte 			; write total length, so far 1.
.21d3	a0 00		ldy #$00			ldy 	#0 							; for reading the actual text
.21d5					_ECSCopyText:
.21d5	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get next
.21d7	f0 18		beq $21f1			beq 	_ECSEndOfLine 				; end of line ?
.21d9	c5 13		cmp $13				cmp 	temp1						; is it the other terminator
.21db	f0 09		beq $21e6			beq 	_ECSEndOfString 			; if so must be closing quote.
.21dd	20 66 22	jsr $2266			jsr 	EncodeWriteByte 			; write the byte out
.21e0	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.21e3	c8		iny				iny 								; next character
.21e4	80 ef		bra $21d5			bra 	_ECSCopyText
.21e6					_ECSEndOfString:
.21e6	c8		iny				iny 								; skip closing quote.
.21e7	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.21e9	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.21ec	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.21ef	80 18		bra $2209			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.21f1					_ECSEndOfLine:
.21f1	a5 13		lda $13				lda 	temp1 						; missing closing quote
.21f3	f0 14		beq $2209			beq 	_ECSComplete 				; if we were doing a string.
.21f5	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>21f8	4e 4f 20 43 4c 4f 53 49				.text 	"NO CLOSING QUOTE",0
>2200	4e 47 20 51 55 4f 54 45 00
.2209					_ECSComplete:
.2209	98		tya				tya									; skip over.
.220a	20 9c 22	jsr $229c			jsr 	EncodeAddSrcPtr
.220d	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encdef.src

.220e					EncodeSearchUserDefined:
.220e	38		sec				sec 								; temp1 = srcPtr-6 because the
.220f	a5 0b		lda $0b				lda 	srcPtr				 		; name is 6 in (offset line# $$call len)
.2211	e9 06		sbc #$06			sbc		#6
.2213	85 13		sta $13				sta 	temp1
.2215	a5 0c		lda $0c				lda 	srcPtr+1
.2217	e9 00		sbc #$00			sbc 	#0
.2219	85 14		sta $14				sta 	temp1+1
.221b	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.221d	85 15		sta $15				sta 	0+(temp2)
.221f	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.2221	85 16		sta $16				sta 	1+(temp2)
.2223					_ESULoop:
.2223	b2 15		lda ($15)			lda 	(temp2) 					; reached the end (offset 0)
.2225	f0 33		beq $225a			beq 	_ESUFail
.2227	a0 03		ldy #$03			ldy 	#3 							; check it is $$define
.2229	b1 15		lda ($15),y			lda 	(temp2),y
.222b	c9 3c		cmp #$3c			cmp 	#DefineCode & $FF
.222d	d0 1e		bne $224d			bne 	_ESUNext
.222f	c8		iny				iny
.2230	b1 15		lda ($15),y			lda 	(temp2),y
.2232	c9 1d		cmp #$1d			cmp 	#DefineCode >> 8
.2234	d0 17		bne $224d			bne 	_ESUNext
.2236	c8		iny				iny 								; skip length byte.
.2237					_ESUCompare:
.2237	c8		iny				iny
.2238	b1 15		lda ($15),y			lda 	(temp2),y
.223a	d1 13		cmp ($13),y			cmp 	(temp1),y
.223c	d0 0f		bne $224d			bne 	_ESUNext
.223e	0a		asl a				asl 	a 							; bit 7 set => found it.
.223f	90 f6		bcc $2237			bcc 	_ESUCompare
.2241	a0 01		ldy #$01			ldy 	#1
.2243	b1 15		lda ($15),y			lda 	(temp2),y 					; read in the line number to YA
.2245	aa		tax				tax
.2246	c8		iny				iny
.2247	b1 15		lda ($15),y			lda 	(temp2),y
.2249	a8		tay				tay
.224a	8a		txa				txa
.224b	38		sec				sec 								; return with carry set as found
.224c	60		rts				rts
.224d					_ESUNext:
.224d	18		clc				clc
.224e	a5 15		lda $15				lda 	temp2
.2250	72 15		adc ($15)			adc 	(temp2)
.2252	85 15		sta $15				sta 	temp2
.2254	90 02		bcc $2258			bcc 	_NoCarryAdv
.2256	e6 16		inc $16				inc 	temp2+1
.2258					_NoCarryAdv:
.2258	80 c9		bra $2223			bra 	_ESULoop 					; and loop round
.225a					_ESUFail:
.225a	18		clc				clc
.225b	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encutils.src

.225c					EncodeWriteWord:
.225c	48		pha				pha
.225d	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2260	98		tya				tya
.2261	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.2264	68		pla				pla
.2265	60		rts				rts
.2266					EncodeWriteByte:
.2266	da		phx				phx
.2267	ae 10 09	ldx $0910			ldx 	encodeBuffer
.226a	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.226d	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.2270	9e 12 09	stz $0912,x			stz 	encodeBuffer+2,x
.2273	ee 10 09	inc $0910			inc 	encodeBuffer
.2276	fa		plx				plx
.2277	60		rts				rts
.2278					CheckIsLetter:
.2278	c9 41		cmp #$41			cmp 	#"A"						; return CS if A..Z
.227a	90 06		bcc $2282			bcc 	_CILFail
.227c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.227e	b0 02		bcs $2282			bcs 	_CILFail
.2280	38		sec				sec
.2281	60		rts				rts
.2282					_CILFail:
.2282	18		clc				clc
.2283	60		rts				rts
.2284					CheckIsDigit:
.2284	c9 30		cmp #$30			cmp 	#"0"						; return CS if 0..9
.2286	90 06		bcc $228e			bcc 	_CIDFail
.2288	c9 3a		cmp #$3a			cmp 	#"9"+1
.228a	b0 02		bcs $228e			bcs 	_CIDFail
.228c	38		sec				sec
.228d	60		rts				rts
.228e					_CIDFail:
.228e	18		clc				clc
.228f	60		rts				rts
.2290					EncodeMoveNextWord:
.2290	a0 ff		ldy #$ff			ldy 	#255 						; search forward
.2292					_EPNWLoop:
.2292	c8		iny				iny
.2293	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2295	c9 21		cmp #$21			cmp 	#" "+1						; looking for <= space
.2297	b0 f9		bcs $2292			bcs 	_EPNWLoop
.2299	98		tya				tya
.229a	80 00		bra $229c			bra 	EncodeAddSrcPtr
.229c					EncodeAddSrcPtr:
.229c	18		clc				clc 								; add offset
.229d	65 0b		adc $0b				adc 	srcPtr
.229f	85 0b		sta $0b				sta 	srcPtr
.22a1	90 02		bcc $22a5			bcc 	_EASPNoCarry
.22a3	e6 0c		inc $0c				inc 	srcPtr+1					; carry through
.22a5					_EASPNoCarry:
.22a5	60		rts				rts
.22a6					EncodeGetConstant:
.22a6	a5 0b		lda $0b				lda 	srcPtr 						; get source
.22a8	a4 0c		ldy $0c				ldy 	srcPtr+1
.22aa	20 65 1d	jsr $1d65			jsr 	ConvertToInteger 			; call converter
.22ad	90 08		bcc $22b7			bcc 	_EGCExit
.22af	20 9c 22	jsr $229c			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.22b2	a5 17		lda $17				lda 	temp3 						; get result into YA
.22b4	a4 18		ldy $18				ldy 	temp3+1
.22b6	38		sec				sec 								; return CS
.22b7					_EGCExit:
.22b7	60		rts				rts
.22b8					EncSetBit7Word:
.22b8	08		php				php 								; save carry
.22b9	a0 ff		ldy #$ff			ldy 	#255 						; scan forward for space/NULL
.22bb					_ESB7Loop:
.22bb	c8		iny				iny
.22bc	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22be	c9 21		cmp #$21			cmp 	#" "+1 						; while > ' '
.22c0	b0 f9		bcs $22bb			bcs 	_ESB7Loop
.22c2	88		dey				dey									; previous character
.22c3	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; read it
.22c5	0a		asl a				asl 	a 							; shift bit 7 out
.22c6	28		plp				plp 								; restore carry
.22c7	6a		ror a				ror 	a 							; shift it in
.22c8	91 0b		sta ($0b),y			sta 	(srcPtr),y 					; write back and exit
.22ca	60		rts				rts
.22cb					EncSkipSpaces:
.22cb	b2 0b		lda ($0b)			lda 	(srcPtr) 					; skip over spaces/ reached end
.22cd	c9 20		cmp #$20			cmp 	#32
.22cf	d0 07		bne $22d8			bne 	_ESNotSpace
.22d1	a9 01		lda #$01			lda 	#1
.22d3	20 9c 22	jsr $229c			jsr 	EncodeAddSrcPtr
.22d6	80 f3		bra $22cb			bra	 	EncSkipSpaces
.22d8					_ESNotSpace:
.22d8	60		rts				rts
.22d9					EncodeTrimTrailingSpaces:
.22d9	a0 ff		ldy #$ff			ldy 	#255 						; find EOS
.22db					_ETTFindEnd:
.22db	c8		iny				iny
.22dc	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22de	d0 fb		bne $22db			bne 	_ETTFindEnd
.22e0					_ETTRemoveSpace:
.22e0	c0 00		cpy #$00			cpy 	#0 							; start of string
.22e2	f0 0d		beq $22f1			beq 	_ETTExit
.22e4	88		dey				dey 								; previous character 1..32
.22e5	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.22e7	c9 21		cmp #$21			cmp 	#32+1
.22e9	b0 06		bcs $22f1			bcs 	_ETTExit
.22eb	a9 00		lda #$00			lda 	#0 							; erase it and go round again
.22ed	91 0b		sta ($0b),y			sta 	(srcPtr),y
.22ef	80 ef		bra $22e0			bra 	_ETTRemoveSpace
.22f1					_ETTExit:
.22f1	60		rts				rts
.22f2					EncodePushPosMarkerOnStack:
.22f2	e6 08		inc $08				inc 	rsp 						; make space on rstack
.22f4	a6 08		ldx $08				ldx 	rsp							; access it
.22f6	9d 40 07	sta $0740,x			sta 	returnStackHigh,x			; save marker
.22f9	ad 10 09	lda $0910			lda 	encodeBuffer 				; save position in encode buffer
.22fc	9d 80 07	sta $0780,x			sta 	returnStackX,x
.22ff	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encsearch.src

.2300					EncodeSearchDictionary:
.2300	a9 ff		lda #$ff			lda 	#(Dictionary) & $FF
.2302	85 13		sta $13				sta 	0+(temp1)
.2304	a9 25		lda #$25			lda 	#(Dictionary) >> 8
.2306	85 14		sta $14				sta 	1+(temp1)
.2308					_ESDLoop:
.2308	b2 13		lda ($13)			lda 	(temp1) 					; end of dictionary return with CC.
.230a	18		clc				clc
.230b	f0 46		beq $2353			beq 	_ESDExit
.230d	a0 01		ldy #$01			ldy 	#1 							; get control bits, get offset to name.
.230f	b1 13		lda ($13),y			lda 	(temp1),y
.2311	4a		lsr a				lsr 	a 							; encode/decode bits move to 0,1
.2312	4a		lsr a				lsr 	a
.2313	4a		lsr a				lsr 	a
.2314	4a		lsr a				lsr 	a
.2315	c8		iny				iny 								; Y = 2
.2316	4a		lsr a				lsr 	a
.2317	90 01		bcc $231a			bcc 	_ESDNotDec
.2319	c8		iny				iny
.231a					_ESDNotDec:
.231a	4a		lsr a				lsr 	a
.231b	90 01		bcc $231e			bcc 	_ESDNotInc
.231d	c8		iny				iny
.231e					_ESDNotInc:
.231e	98		tya				tya
.231f	0a		asl a				asl 	a 							; A is now 4,6,8 offset to name.
.2320	a8		tay				tay
.2321	b1 13		lda ($13),y			lda 	(temp1),y 					; quick check of first character
.2323	d2 0b		cmp ($0b)			cmp 	(srcPtr)
.2325	d0 1f		bne $2346			bne 	_ESDNext 					; do not match, go to next
.2327	98		tya				tya 								; make temp2 point to the name in
.2328	18		clc				clc 								; the dictionary.
.2329	65 13		adc $13				adc 	temp1
.232b	85 15		sta $15				sta 	temp2
.232d	a5 14		lda $14				lda 	temp1+1
.232f	69 00		adc #$00			adc 	#0
.2331	85 16		sta $16				sta 	temp2+1
.2333	a0 ff		ldy #$ff			ldy 	#255 						; now start matching up.
.2335					_ESDCompare:
.2335	c8		iny				iny
.2336	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2338	d1 15		cmp ($15),y			cmp 	(temp2),y
.233a	d0 0a		bne $2346			bne 	_ESDNext
.233c	0a		asl a				asl 	a
.233d	90 f6		bcc $2335			bcc 	_ESDCompare
.233f	a5 13		lda $13				lda 	temp1 						; return address in YA and carry set.
.2341	a4 14		ldy $14				ldy 	temp1+1
.2343	38		sec				sec
.2344	80 0d		bra $2353			bra 	_ESDExit
.2346					_ESDNext:
.2346	18		clc				clc
.2347	a5 13		lda $13				lda 	temp1
.2349	72 13		adc ($13)			adc 	(temp1)
.234b	85 13		sta $13				sta 	temp1
.234d	90 b9		bcc $2308			bcc 	_ESDLoop
.234f	e6 14		inc $14				inc 	temp1+1
.2351	80 b5		bra $2308			bra 	_ESDLoop
.2353					_ESDExit:
.2353	60		rts				rts

;******  Return to file: files.asm


;******  Processing file: words/encode/encvar.src

.2354					EncodeVariableReference:
.2354	b2 0b		lda ($0b)			lda 	(srcPtr)					; get the type, use it to identify the routine
.2356	a2 9e		ldx #$9e			ldx 	#VarAddressHandler & $FF
.2358	a0 1e		ldy #$1e			ldy 	#VarAddressHandler >> 8
.235a	c9 26		cmp #$26			cmp 	#"&"
.235c	f0 0c		beq $236a			beq 	_EVFHaveAddress
.235e	a2 bb		ldx #$bb			ldx 	#VarReadHandler & $FF
.2360	a0 1e		ldy #$1e			ldy 	#VarReadHandler >> 8
.2362	c9 40		cmp #$40			cmp 	#"@"
.2364	f0 04		beq $236a			beq 	_EVFHaveAddress
.2366	a2 da		ldx #$da			ldx 	#VarWriteHandler & $FF
.2368	a0 1e		ldy #$1e			ldy 	#VarWriteHandler >> 8
.236a					_EVFHaveAddress:
.236a	8a		txa				txa
.236b	20 5c 22	jsr $225c			jsr 	EncodeWriteWord 			; write it out.
.236e	a0 01		ldy #$01			ldy 	#1 							; get the first charactere
.2370	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2372	29 7f		and #$7f			and 	#$7F 						; might be the last.
.2374	20 78 22	jsr $2278			jsr 	CheckIsLetter 				; is it A-Z
.2377	90 54		bcc $23cd			bcc 	EVFFail
.2379	29 1f		and #$1f			and 	#31 						; make 1-26
.237b	85 13		sta $13				sta 	temp1 						; start building the name in temp1
.237d	64 14		stz $14				stz 	temp1+1
.237f	38		sec				sec 								; possible char 2
.2380	20 e2 23	jsr $23e2			jsr 	EncVarAlNum
.2383	18		clc				clc 								; possible char 3
.2384	20 e2 23	jsr $23e2			jsr 	EncVarAlNum
.2387	5a		phy				phy
.2388	a5 13		lda $13				lda 	temp1 						; write out variable identifier.
.238a	a4 14		ldy $14				ldy 	temp1+1
.238c	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.238f	7a		ply				ply
.2390	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; more text after ?
.2392	10 01		bpl $2395			bpl 	_EVFCheckArray
.2394	60		rts				rts
.2395					_EVFCheckArray:
.2395	c8		iny				iny 								; get the next character
.2396	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.2398	c9 5b		cmp #$5b			cmp 	#"["						; array index ?
.239a	d0 31		bne $23cd			bne 	EVFFail
.239c	64 13		stz $13				stz 	temp1 						; zero temp1.
.239e	c8		iny				iny  								; point to index
.239f					_EVFGetIndex:
.239f	06 13		asl $13				asl 	temp1 						; temp1 x 10
.23a1	a5 13		lda $13				lda 	temp1
.23a3	0a		asl a				asl 	a
.23a4	0a		asl a				asl		a
.23a5	65 13		adc $13				adc 	temp1
.23a7	85 13		sta $13				sta 	temp1
.23a9	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; get the digit
.23ab	20 84 22	jsr $2284			jsr 	CheckIsDigit
.23ae	90 1d		bcc $23cd			bcc 	EVFFail 					; failed, not digit
.23b0	29 0f		and #$0f			and 	#15
.23b2	18		clc				clc
.23b3	65 13		adc $13				adc 	temp1
.23b5	30 16		bmi $23cd			bmi 	EVFFail 					; failed, bad index.
.23b7	85 13		sta $13				sta 	temp1
.23b9	c8		iny				iny
.23ba	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23bc	c9 dd		cmp #$dd			cmp 	#"]"+$80
.23be	d0 df		bne $239f			bne 	_EVFGetIndex 				; index now in temp1.
.23c0	a9 f9		lda #$f9			lda 	#IndexHandler & $FF 		; output code
.23c2	a0 1e		ldy #$1e			ldy 	#IndexHandler >> 8
.23c4	20 5c 22	jsr $225c			jsr 	EncodeWriteWord
.23c7	a5 13		lda $13				lda 	temp1	 					; write index
.23c9	20 66 22	jsr $2266			jsr 	EncodeWriteByte
.23cc	60		rts				rts
.23cd					EVFFail:
.23cd	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>23d0	42 41 44 20 56 41 52 49				.text 	"BAD VARIABLE NAME",0
>23d8	41 42 4c 45 20 4e 41 4d 45 00
.23e2					EncVarAlNum:
.23e2	b1 0b		lda ($0b),y			lda 	(srcPtr),y 					; points to the  last char processed.
.23e4	10 01		bpl $23e7			bpl 	_EVAContinue
.23e6	60		rts				rts
.23e7					_EVAContinue:
.23e7	08		php				php 								; CS x 32 ; CC x 32 x 40
.23e8	c8		iny				iny 								; get the next character, strip bit 7
.23e9	b1 0b		lda ($0b),y			lda 	(srcPtr),y
.23eb	88		dey				dey
.23ec	29 7f		and #$7f			and 	#$7F
.23ee	20 78 22	jsr $2278			jsr 	CheckIsLetter 				; letter ?
.23f1	b0 08		bcs $23fb			bcs 	_EVACharOkay
.23f3	20 84 22	jsr $2284			jsr 	CheckIsDigit				; fail if not digit.
.23f6	90 32		bcc $242a			bcc 	_EVAExit
.23f8	18		clc				clc
.23f9	69 2b		adc #$2b			adc 	#"Z"+1-"0"					; shift 0 so after Z
.23fb					_EVACharOkay:
.23fb	c8		iny				iny 								; char okay advance to it.
.23fc	38		sec				sec 								; range 1-36
.23fd	e9 40		sbc #$40			sbc 	#64
.23ff	28		plp				plp 								; which multiplier ?
.2400	90 0f		bcc $2411			bcc 	_EVATimes32x40
.2402	85 15		sta $15				sta 	temp2 						; save in temp2 - A x 32
.2404	64 16		stz $16				stz 	temp2+1
.2406	a2 05		ldx #$05			ldx 	#5
.2408	06 15		asl $15		_EVA32:	asl 	temp2
.240a	26 16		rol $16				rol 	temp2+1
.240c	ca		dex				dex
.240d	d0 f9		bne $2408			bne 	_EVA32
.240f	80 0b		bra $241c			bra 	_EVAAddVar
.2411					_EVATimes32x40:
.2411	85 16		sta $16				sta 	temp2+1						; 32 x 40 = 1280 or $500, so temp2 = A x 256 x 5
.2413	64 15		stz $15				stz 	temp2
.2415	0a		asl a				asl 	a
.2416	0a		asl a				asl 	a
.2417	18		clc				clc
.2418	65 16		adc $16				adc 	temp2+1
.241a	85 16		sta $16				sta 	temp2+1
.241c					_EVAAddVar:
.241c	18		clc				clc
.241d	a5 13		lda $13				lda 	temp1
.241f	65 15		adc $15				adc 	temp2
.2421	85 13		sta $13				sta 	temp1
.2423	a5 14		lda $14				lda 	temp1+1
.2425	65 16		adc $16				adc 	temp2+1
.2427	85 14		sta $14				sta 	temp1+1
.2429	08		php				php
.242a					_EVAExit:
.242a	28		plp				plp
.242b	60		rts				rts

;******  Return to file: files.asm


;******  Return to file: kernel.asm

.242c					ColdStart:
.242c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack
.242e	9a		txs				txs
.242f	64 24		stz $24				stz 	FastMode 					; start in slow mode.
.2431	20 f4 24	jsr $24f4			jsr 	ExternInitialise
.2434	a9 6f		lda #$6f			lda 	#BootMsg & $FF
.2436	a0 24		ldy #$24			ldy 	#BootMsg >> 8
.2438	20 e8 25	jsr $25e8			jsr 	EXPrintString
.243b					WarmStartBlankStack:
.243b	86 13		stx $13				stx 	temp1
.243d	a2 80		ldx #$80			ldx 	#NumberStackBase
.243f	9a		txs				txs
.2440	a6 13		ldx $13				ldx 	temp1
.2442					WarmStart:
.2442	a9 03		lda #$03			lda 	#COL_Yellow
.2444	20 2d 25	jsr $252d			jsr 	ExternColour
.2447	20 50 25	jsr $2550			jsr 	ExternInput
.244a	a9 06		lda #$06			lda 	#COL_Cyan
.244c	20 2d 25	jsr $252d			jsr 	ExternColour
.244f	a2 10		ldx #$10			ldx 	#encodeBuffer & $FF 		; run what is in the encode buffer.
.2451	a0 09		ldy #$09			ldy 	#encodeBuffer >> 8
.2453	20 03 10	jsr $1003			jsr 	InitialiseCoreCode 			; initialise the NEXT routine at $00 so error line# works
.2456	a9 10		lda #$10			lda 	#textBuffer & $FF
.2458	a0 08		ldy #$08			ldy 	#textBuffer >> 8
.245a	20 4c 20	jsr $204c			jsr 	EncodeProgram
.245d	ad 11 09	lda $0911			lda 	encodeBuffer+1 				; has a line number been entered ?
.2460	0d 12 09	ora $0912			ora 	encodeBuffer+2
.2463	d0 05		bne $246a			bne 	LineEditor 					; if so, do the line editing code.
.2465	64 08		stz $08				stz 	rsp
.2467	4c 00 00	jmp $0000			jmp 	NextCode
.246a					LineEditor:
.246a	20 f2 19	jsr $19f2			jsr 	EditProgram
.246d	80 cc		bra $243b			bra 	WarmStartBlankStack
.246f					BootMsg:
>246f	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>2477	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>2487	2a 0d 0d
>248a	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>2492	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>24a2	30 32 30 0d 0d
>24a7	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>24ae	5b 32 30 2d 30 31 2d 31			.text	"[20-01-18 13:40]"
>24b6	38 20 31 33 3a 34 30 5d

;******  Return to file: kernel.asm

>24be	0d 0d 00					.byte 	13,13,0

;******  Processing file: code/error.asm

.24c1					ErrorHandler:
.24c1	68		pla				pla 								; get message address
.24c2	7a		ply				ply
.24c3	1a		inc a				inc 	a
.24c4	d0 01		bne $24c7			bne 	_EHNoCarry
.24c6	c8		iny				iny
.24c7					_EHNoCarry:
.24c7	20 e8 25	jsr $25e8			jsr 	EXPrintString
.24ca	a0 01		ldy #$01			ldy 	#1 							; check if there is a line #
.24cc	b1 03		lda ($03),y			lda 	(IP),y
.24ce	c8		iny				iny
.24cf	11 03		ora ($03),y			ora 	(IP),y
.24d1	f0 14		beq $24e7			beq 	_EHNoLine
.24d3	a9 ef		lda #$ef			lda 	#_EHMsg2 & $FF 				; print " at "
.24d5	a0 24		ldy #$24			ldy 	#_EHMsg2 >> 8
.24d7	20 e8 25	jsr $25e8			jsr 	EXPrintString
.24da	a0 02		ldy #$02			ldy 	#2 							; print line number
.24dc	b1 03		lda ($03),y			lda 	(IP),y
.24de	48		pha				pha
.24df	88		dey				dey
.24e0	b1 03		lda ($03),y			lda 	(IP),y
.24e2	7a		ply				ply
.24e3	18		clc				clc
.24e4	20 0d 1e	jsr $1e0d			jsr 	PrintYA
.24e7					_EHNoLine:
.24e7	a9 0d		lda #$0d			lda 	#13
.24e9	20 21 25	jsr $2521			jsr 	ExternPrint
.24ec	4c 3b 24	jmp $243b			jmp 	WarmStartBlankStack			; S is indeterminate
>24ef	20 41 54 20 00			_EHMsg2:.text 	" AT ",0

;******  Return to file: kernel.asm


;******  Processing file: code/extern.asm

.24f4					ExternInitialise:
.24f4	a9 90		lda #$90			lda 	#144 						; set colour
.24f6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24f9	a9 01		lda #$01			lda 	#$01
.24fb	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.24fe	a9 0e		lda #$0e			lda 	#14							; lower case
.2500	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2503	a9 93		lda #$93			lda 	#147 						; clear screen
.2505	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2508	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.250a	4c 2d 25	jmp $252d			jmp 	ExternColour
.250d					ExternCheckBreak:
.250d	da		phx				phx 								; make sure we keep XY
.250e	5a		phy				phy
.250f	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.2512	f0 03		beq $2517			beq		_ECBExit 					; stopped
.2514	7a		ply				ply 								; restore and exit.
.2515	fa		plx				plx
.2516	60		rts				rts
.2517					_ECBExit:
.2517	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>251a	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.2521					ExternPrint:
.2521	48		pha				pha
.2522	da		phx				phx
.2523	5a		phy				phy
.2524	29 7f		and #$7f			and 	#$7F
.2526	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2529	7a		ply				ply
.252a	fa		plx				plx
.252b	68		pla				pla
.252c	60		rts				rts
.252d					ExternColour:
.252d	48		pha				pha
.252e	da		phx				phx
.252f	48		pha				pha
.2530	29 08		and #$08			and 	#8
.2532	0a		asl a				asl 	a
.2533	0a		asl a				asl 	a
.2534	0a		asl a				asl 	a
.2535	0a		asl a				asl 	a
.2536	49 92		eor #$92			eor 	#$92
.2538	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.253b	68		pla				pla
.253c	29 07		and #$07			and 	#7
.253e	aa		tax				tax
.253f	bd 48 25	lda $2548,x			lda 	_ECTable,x
.2542	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2545	fa		plx				plx
.2546	68		pla				pla
.2547	60		rts				rts
.2548					_ECTable:
>2548	90						.byte 	144
>2549	1c						.byte 	28
>254a	1e						.byte 	30
>254b	9e						.byte 	158
>254c	1f						.byte 	31
>254d	9c						.byte 	156
>254e	9f						.byte 	159
>254f	05						.byte 	5
.2550					ExternInput:
.2550	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.2552	85 17		sta $17				sta 	temp3
.2554	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.2556	85 18		sta $18				sta 	temp3+1
.2558	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.255b	c9 0d		cmp #$0d			cmp 	#13
.255d	f0 0c		beq $256b			beq 	_EIExit
.255f	29 7f		and #$7f			and 	#$7F
.2561	92 17		sta ($17)			sta 	(temp3)
.2563	e6 17		inc $17				inc 	temp3
.2565	d0 f1		bne $2558			bne 	_EIRead
.2567	e6 18		inc $18				inc 	temp3+1
.2569	80 ed		bra $2558			bra 	_EIRead
.256b	a9 00		lda #$00	_EIExit:lda 	#0
.256d	92 17		sta ($17)			sta 	(temp3)
.256f	a9 0d		lda #$0d			lda 	#13
.2571	20 21 25	jsr $2521			jsr 	ExternPrint
.2574	60		rts				rts
.2575					ExternSave:
.2575	da		phx				phx
.2576	5a		phy				phy
.2577	85 15		sta $15				sta 	temp2 						; save start
.2579	84 16		sty $16				sty 	temp2+1
.257b	20 dd 25	jsr $25dd			jsr 	EXGetLength 				; get length of file into A
.257e	a6 17		ldx $17				ldx 	temp3
.2580	a4 18		ldy $18				ldy 	temp3+1
.2582	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.2585	a9 01		lda #$01			lda 	#1
.2587	a2 08		ldx #$08			ldx 	#8	 						; device #8
.2589	a0 00		ldy #$00			ldy 	#0
.258b	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.258e	a6 13		ldx $13				ldx 	temp1 						; end address
.2590	a4 14		ldy $14				ldy 	temp1+1
.2592	a9 15		lda #$15			lda 	#temp2
.2594	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.2597	b0 03		bcs $259c			bcs 	_ESSave
.2599	7a		ply				ply
.259a	fa		plx				plx
.259b	60		rts				rts
.259c					_ESSave:
.259c	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>259f	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>25a7	4c 45 44 00
.25ab					ExternLoad:
.25ab	da		phx				phx 								; save XY
.25ac	5a		phy				phy
.25ad	48		pha				pha 								; save target
.25ae	5a		phy				phy
.25af	20 dd 25	jsr $25dd			jsr 	EXGetLength 				; get length of file into A
.25b2	a6 17		ldx $17				ldx 	temp3
.25b4	a4 18		ldy $18				ldy 	temp3+1
.25b6	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.25b9	a9 01		lda #$01			lda 	#1
.25bb	a2 08		ldx #$08			ldx 	#8	 						; device #8
.25bd	a0 00		ldy #$00			ldy 	#0
.25bf	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.25c2	7a		ply				ply 								; restore target to YX and call load
.25c3	fa		plx				plx
.25c4	a9 00		lda #$00			lda 	#0 							; load command
.25c6	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.25c9	b0 03		bcs $25ce			bcs 	_ESLoad
.25cb	7a		ply				ply
.25cc	fa		plx				plx
.25cd	60		rts				rts
.25ce					_ESLoad:
.25ce	20 c1 24	jsr $24c1			jsr 	ErrorHandler
>25d1	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>25d9	4c 45 44 00
.25dd					EXGetLength:
.25dd	5a		phy				phy
.25de	a0 ff		ldy #$ff			ldy 	#255
.25e0	c8		iny		_EXGL0:	iny
.25e1	b1 17		lda ($17),y			lda 	(temp3),y
.25e3	d0 fb		bne $25e0			bne 	_EXGL0
.25e5	98		tya				tya
.25e6	7a		ply				ply
.25e7	60		rts				rts
.25e8					EXPrintString:
.25e8	48		pha				pha
.25e9	5a		phy				phy
.25ea	84 14		sty $14				sty 	temp1+1
.25ec	85 13		sta $13				sta 	temp1
.25ee	a0 00		ldy #$00			ldy 	#0
.25f0					_EXPSLoop:
.25f0	b1 13		lda ($13),y			lda 	(temp1),y
.25f2	f0 08		beq $25fc			beq 	_EXPSExit
.25f4	29 7f		and #$7f			and 	#$7F
.25f6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.25f9	c8		iny				iny
.25fa	80 f4		bra $25f0			bra 	_EXPSLoop
.25fc					_EXPSExit:
.25fc	7a		ply				ply
.25fd	68		pla				pla
.25fe	60		rts				rts

;******  Return to file: kernel.asm

.25ff					Dictionary:

;******  Processing file: generated/dictionary.inc

>25ff	05					.byte	_end0-*
>2600	00					.byte	$00
>2601	0a 15					.word	WordWrite
>2603	a1					.byte	$a1
.2604					_end0:
>2604	10					.byte	_end1-*
>2605	52					.byte	$52
>2606	da 1e					.word	VarWriteHandler
>2608	f4 1e					.word	VarWriteHandlerDecode
>260a	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>2612	45 d2
.2614					_end1:
>2614	10					.byte	_end2-*
>2615	52					.byte	$52
>2616	9e 1e					.word	VarAddressHandler
>2618	b6 1e					.word	VarAddrHandlerDecode
>261a	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>2622	45 d2
.2624					_end2:
>2624	10					.byte	_end3-*
>2625	52					.byte	$52
>2626	bb 1e					.word	VarReadHandler
>2628	d5 1e					.word	VarReadHandlerDecode
>262a	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>2632	45 d2
.2634					_end3:
>2634	0c					.byte	_end4-*
>2635	52					.byte	$52
>2636	df 16					.word	CallHandler
>2638	8a 17					.word	CallHandlerDecode
>263a	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.2640					_end4:
>2640	0f					.byte	_end5-*
>2641	53					.byte	$53
>2642	11 1d					.word	SkipComment
>2644	1e 1d					.word	CommentDecoder
>2646	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>264e	d4
.264f					_end5:
>264f	0e					.byte	_end6-*
>2650	53					.byte	$53
>2651	3c 1d					.word	DefineCode
>2653	52 1d					.word	DefineDecoder
>2655	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.265d					_end6:
>265d	0f					.byte	_end7-*
>265e	52					.byte	$52
>265f	6d 10					.word	Literal2Byte
>2661	b5 10					.word	Literal2ByteDecode
>2663	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>266b	cc
.266c					_end7:
>266c	0e					.byte	_end8-*
>266d	80					.byte	$80
>266e	fa 1c					.word	NextLine
>2670	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>2678	4e c5
.267a					_end8:
>267a	0e					.byte	_end9-*
>267b	53					.byte	$53
>267c	c7 10					.word	LiteralString
>267e	e6 10					.word	LiteralStringDecoder
>2680	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.2688					_end9:
>2688	05					.byte	_end10-*
>2689	00					.byte	$00
>268a	86 12					.word	Multiply16x16
>268c	aa					.byte	$aa
.268d					_end10:
>268d	05					.byte	_end11-*
>268e	00					.byte	$00
>268f	f7 10					.word	Add
>2691	ab					.byte	$ab
.2692					_end11:
>2692	06					.byte	_end12-*
>2693	00					.byte	$00
>2694	1b 15					.word	WordAdd
>2696	2b a1					.byte	$2b,$a1
.2698					_end12:
>2698	05					.byte	_end13-*
>2699	00					.byte	$00
>269a	06 11					.word	Subtract
>269c	ad					.byte	$ad
.269d					_end13:
>269d	06					.byte	_end14-*
>269e	00					.byte	$00
>269f	c2 13					.word	ConstantMinus1
>26a1	2d b1					.byte	$2d,$b1
.26a3					_end14:
>26a3	06					.byte	_end15-*
>26a4	00					.byte	$00
>26a5	c1 1b					.word	DumpStack
>26a7	2e ae					.byte	$2e,$ae
.26a9					_end15:
>26a9	05					.byte	_end16-*
>26aa	00					.byte	$00
>26ab	d7 11					.word	Divide16x16
>26ad	af					.byte	$af
.26ae					_end16:
>26ae	05					.byte	_end17-*
>26af	00					.byte	$00
>26b0	b5 13					.word	Constant0
>26b2	b0					.byte	$b0
.26b3					_end17:
>26b3	06					.byte	_end18-*
>26b4	00					.byte	$00
>26b5	1b 13					.word	CheckMinus
>26b7	30 bc					.byte	$30,$bc
.26b9					_end18:
>26b9	06					.byte	_end19-*
>26ba	00					.byte	$00
>26bb	2f 13					.word	CheckZero
>26bd	30 bd					.byte	$30,$bd
.26bf					_end19:
>26bf	05					.byte	_end20-*
>26c0	00					.byte	$00
>26c1	d1 13					.word	C1
>26c3	b1					.byte	$b1
.26c4					_end20:
>26c4	06					.byte	_end21-*
>26c5	00					.byte	$00
>26c6	c5 12					.word	Unary1Plus
>26c8	31 ab					.byte	$31,$ab
.26ca					_end21:
>26ca	06					.byte	_end22-*
>26cb	00					.byte	$00
>26cc	dc 12					.word	Unary1Minus
>26ce	31 ad					.byte	$31,$ad
.26d0					_end22:
>26d0	06					.byte	_end23-*
>26d1	00					.byte	$00
>26d2	e9 13					.word	C10
>26d4	31 b0					.byte	$31,$b0
.26d6					_end23:
>26d6	07					.byte	_end24-*
>26d7	00					.byte	$00
>26d8	12 14					.word	C100
>26da	31 30 b0				.byte	$31,$30,$b0
.26dd					_end24:
>26dd	08					.byte	_end25-*
>26de	00					.byte	$00
>26df	41 14					.word	C1024
>26e1	31 30 32 b4				.byte	$31,$30,$32,$b4
.26e5					_end25:
>26e5	07					.byte	_end26-*
>26e6	00					.byte	$00
>26e7	16 14					.word	C127
>26e9	31 32 b7				.byte	$31,$32,$b7
.26ec					_end26:
>26ec	07					.byte	_end27-*
>26ed	00					.byte	$00
>26ee	1a 14					.word	C128
>26f0	31 32 b8				.byte	$31,$32,$b8
.26f3					_end27:
>26f3	06					.byte	_end28-*
>26f4	00					.byte	$00
>26f5	ed 13					.word	C15
>26f7	31 b5					.byte	$31,$b5
.26f9					_end28:
>26f9	06					.byte	_end29-*
>26fa	00					.byte	$00
>26fb	f1 13					.word	C16
>26fd	31 b6					.byte	$31,$b6
.26ff					_end29:
>26ff	07					.byte	_end30-*
>2700	00					.byte	$00
>2701	53 13					.word	Times16
>2703	31 36 aa				.byte	$31,$36,$aa
.2706					_end30:
>2706	07					.byte	_end31-*
>2707	00					.byte	$00
>2708	66 13					.word	Divide16
>270a	31 36 af				.byte	$31,$36,$af
.270d					_end31:
>270d	05					.byte	_end32-*
>270e	00					.byte	$00
>270f	d5 13					.word	C2
>2711	b2					.byte	$b2
.2712					_end32:
>2712	06					.byte	_end33-*
>2713	00					.byte	$00
>2714	5f 13					.word	Times2
>2716	32 aa					.byte	$32,$aa
.2718					_end33:
>2718	06					.byte	_end34-*
>2719	00					.byte	$00
>271a	ce 12					.word	Unary2Plus
>271c	32 ab					.byte	$32,$ab
.271e					_end34:
>271e	06					.byte	_end35-*
>271f	00					.byte	$00
>2720	e7 12					.word	Unary2Minus
>2722	32 ad					.byte	$32,$ad
.2724					_end35:
>2724	06					.byte	_end36-*
>2725	00					.byte	$00
>2726	72 13					.word	Divide2
>2728	32 af					.byte	$32,$af
.272a					_end36:
>272a	06					.byte	_end37-*
>272b	00					.byte	$00
>272c	f5 13					.word	C24
>272e	32 b4					.byte	$32,$b4
.2730					_end37:
>2730	07					.byte	_end38-*
>2731	00					.byte	$00
>2732	1e 14					.word	C255
>2734	32 35 b5				.byte	$32,$35,$b5
.2737					_end38:
>2737	07					.byte	_end39-*
>2738	00					.byte	$00
>2739	29 14					.word	C256
>273b	32 35 b6				.byte	$32,$35,$b6
.273e					_end39:
>273e	08					.byte	_end40-*
>273f	00					.byte	$00
>2740	79 13					.word	Times256
>2742	32 35 36 aa				.byte	$32,$35,$36,$aa
.2746					_end40:
>2746	08					.byte	_end41-*
>2747	00					.byte	$00
>2748	82 13					.word	Divide256
>274a	32 35 36 af				.byte	$32,$35,$36,$af
.274e					_end41:
>274e	05					.byte	_end42-*
>274f	00					.byte	$00
>2750	d9 13					.word	C3
>2752	b3					.byte	$b3
.2753					_end42:
>2753	06					.byte	_end43-*
>2754	00					.byte	$00
>2755	06 14					.word	C32
>2757	33 b2					.byte	$33,$b2
.2759					_end43:
>2759	09					.byte	_end44-*
>275a	00					.byte	$00
>275b	59 14					.word	C32767
>275d	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.2762					_end44:
>2762	09					.byte	_end45-*
>2763	00					.byte	$00
>2764	65 14					.word	C32768
>2766	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.276b					_end45:
>276b	05					.byte	_end46-*
>276c	00					.byte	$00
>276d	dd 13					.word	C4
>276f	b4					.byte	$b4
.2770					_end46:
>2770	06					.byte	_end47-*
>2771	00					.byte	$00
>2772	5b 13					.word	Times4
>2774	34 aa					.byte	$34,$aa
.2776					_end47:
>2776	06					.byte	_end48-*
>2777	00					.byte	$00
>2778	6e 13					.word	Divide4
>277a	34 af					.byte	$34,$af
.277c					_end48:
>277c	08					.byte	_end49-*
>277d	00					.byte	$00
>277e	4d 14					.word	C4096
>2780	34 30 39 b6				.byte	$34,$30,$39,$b6
.2784					_end49:
>2784	05					.byte	_end50-*
>2785	00					.byte	$00
>2786	e1 13					.word	C5
>2788	b5					.byte	$b5
.2789					_end50:
>2789	07					.byte	_end51-*
>278a	00					.byte	$00
>278b	35 14					.word	C512
>278d	35 31 b2				.byte	$35,$31,$b2
.2790					_end51:
>2790	06					.byte	_end52-*
>2791	00					.byte	$00
>2792	0a 14					.word	C63
>2794	36 b3					.byte	$36,$b3
.2796					_end52:
>2796	06					.byte	_end53-*
>2797	00					.byte	$00
>2798	0e 14					.word	C64
>279a	36 b4					.byte	$36,$b4
.279c					_end53:
>279c	05					.byte	_end54-*
>279d	00					.byte	$00
>279e	e5 13					.word	C8
>27a0	b8					.byte	$b8
.27a1					_end54:
>27a1	06					.byte	_end55-*
>27a2	00					.byte	$00
>27a3	57 13					.word	Times8
>27a5	38 aa					.byte	$38,$aa
.27a7					_end55:
>27a7	06					.byte	_end56-*
>27a8	00					.byte	$00
>27a9	6a 13					.word	Divide8
>27ab	38 af					.byte	$38,$af
.27ad					_end56:
>27ad	05					.byte	_end57-*
>27ae	40					.byte	$40
>27af	47 17					.word	ReturnHandler
>27b1	bb					.byte	$bb
.27b2					_end57:
>27b2	05					.byte	_end58-*
>27b3	00					.byte	$00
>27b4	73 11					.word	CheckLess
>27b6	bc					.byte	$bc
.27b7					_end58:
>27b7	06					.byte	_end59-*
>27b8	00					.byte	$00
>27b9	8c 11					.word	CheckLessEq
>27bb	3c bd					.byte	$3c,$bd
.27bd					_end59:
>27bd	06					.byte	_end60-*
>27be	00					.byte	$00
>27bf	3c 11					.word	CheckNotEqual
>27c1	3c be					.byte	$3c,$be
.27c3					_end60:
>27c3	05					.byte	_end61-*
>27c4	00					.byte	$00
>27c5	3f 11					.word	CheckEqual
>27c7	bd					.byte	$bd
.27c8					_end61:
>27c8	05					.byte	_end62-*
>27c9	00					.byte	$00
>27ca	8f 11					.word	CheckGreater
>27cc	be					.byte	$be
.27cd					_end62:
>27cd	06					.byte	_end63-*
>27ce	00					.byte	$00
>27cf	70 11					.word	CheckGreaterEq
>27d1	3e bd					.byte	$3e,$bd
.27d3					_end63:
>27d3	08					.byte	_end64-*
>27d4	00					.byte	$00
>27d5	7a 14					.word	TestDup
>27d7	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.27db					_end64:
>27db	05					.byte	_end65-*
>27dc	00					.byte	$00
>27dd	ef 14					.word	WordRead
>27df	c0					.byte	$c0
.27e0					_end65:
>27e0	07					.byte	_end66-*
>27e1	00					.byte	$00
>27e2	f5 12					.word	Absolute
>27e4	41 42 d3				.byte	$41,$42,$d3
.27e7					_end66:
>27e7	09					.byte	_end67-*
>27e8	00					.byte	$00
>27e9	32 15					.word	AllocateMemory
>27eb	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.27f0					_end67:
>27f0	07					.byte	_end68-*
>27f1	00					.byte	$00
>27f2	15 11					.word	And
>27f4	41 4e c4				.byte	$41,$4e,$c4
.27f7					_end68:
>27f7	0a					.byte	_end69-*
>27f8	00					.byte	$00
>27f9	4c 1b					.word	AssertCode
>27fb	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.2801					_end69:
>2801	09					.byte	_end70-*
>2802	00					.byte	$00
>2803	48 13					.word	ByteSwap
>2805	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.280a					_end70:
>280a	06					.byte	_end71-*
>280b	00					.byte	$00
>280c	fd 14					.word	ByteWrite
>280e	43 a1					.byte	$43,$a1
.2810					_end71:
>2810	06					.byte	_end72-*
>2811	00					.byte	$00
>2812	e6 14					.word	ByteRead
>2814	43 c0					.byte	$43,$c0
.2816					_end72:
>2816	07					.byte	_end73-*
>2817	00					.byte	$00
>2818	5a 18					.word	ClrHandler
>281a	43 4c d2				.byte	$43,$4c,$d2
.281d					_end73:
>281d	08					.byte	_end74-*
>281e	00					.byte	$00
>281f	71 14					.word	Drop
>2821	44 52 4f d0				.byte	$44,$52,$4f,$d0
.2825					_end74:
>2825	07					.byte	_end75-*
>2826	00					.byte	$00
>2827	83 14					.word	Dup
>2829	44 55 d0				.byte	$44,$55,$d0
.282c					_end75:
>282c	0a					.byte	_end76-*
>282d	21					.byte	$21
>282e	2b 16					.word	ElseHandler
>2830	2e 16					.word	ElseEncoder
>2832	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.2836					_end76:
>2836	07					.byte	_end77-*
>2837	00					.byte	$00
>2838	6d 1b					.word	EndProgram
>283a	45 4e c4				.byte	$45,$4e,$c4
.283d					_end77:
>283d	0b					.byte	_end78-*
>283e	20					.byte	$20
>283f	4d 16					.word	EndIfHandler
>2841	50 16					.word	EndIfEncoder
>2843	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.2848					_end78:
>2848	09					.byte	_end79-*
>2849	20					.byte	$20
>284a	4b 15					.word	ForHandler
>284c	81 15					.word	ForEncoder
>284e	46 4f d2				.byte	$46,$4f,$d2
.2851					_end79:
>2851	08					.byte	_end80-*
>2852	21					.byte	$21
>2853	16 16					.word	IfHandler
>2855	19 16					.word	IfEncoder
>2857	49 c6					.byte	$49,$c6
.2859					_end80:
>2859	09					.byte	_end81-*
>285a	00					.byte	$00
>285b	f5 15					.word	GetIndex
>285d	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.2862					_end81:
>2862	08					.byte	_end82-*
>2863	00					.byte	$00
>2864	a6 1a					.word	ListCode
>2866	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.286a					_end82:
>286a	07					.byte	_end83-*
>286b	00					.byte	$00
>286c	ac 11					.word	Maximum
>286e	4d 41 d8				.byte	$4d,$41,$d8
.2871					_end83:
>2871	07					.byte	_end84-*
>2872	00					.byte	$00
>2873	a8 11					.word	Minimum
>2875	4d 49 ce				.byte	$4d,$49,$ce
.2878					_end84:
>2878	07					.byte	_end85-*
>2879	00					.byte	$00
>287a	e8 11					.word	Modulus16x16
>287c	4d 4f c4				.byte	$4d,$4f,$c4
.287f					_end85:
>287f	0a					.byte	_end86-*
>2880	00					.byte	$00
>2881	fc 12					.word	Negate
>2883	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.2889					_end86:
>2889	07					.byte	_end87-*
>288a	00					.byte	$00
>288b	51 18					.word	NewHandler
>288d	4e 45 d7				.byte	$4e,$45,$d7
.2890					_end87:
>2890	0a					.byte	_end88-*
>2891	21					.byte	$21
>2892	8e 15					.word	NextHandler
>2894	cd 15					.word	NextEncoder
>2896	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.289a					_end88:
>289a	07					.byte	_end89-*
>289b	00					.byte	$00
>289c	b7 14					.word	Nip
>289e	4e 49 d0				.byte	$4e,$49,$d0
.28a1					_end89:
>28a1	07					.byte	_end90-*
>28a2	00					.byte	$00
>28a3	0c 13					.word	OneComplement
>28a5	4e 4f d4				.byte	$4e,$4f,$d4
.28a8					_end90:
>28a8	06					.byte	_end91-*
>28a9	00					.byte	$00
>28aa	2f 11					.word	LogOr
>28ac	4f d2					.byte	$4f,$d2
.28ae					_end91:
>28ae	08					.byte	_end92-*
>28af	00					.byte	$00
>28b0	9f 14					.word	Over
>28b2	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.28b6					_end92:
>28b6	0c					.byte	_end93-*
>28b7	20					.byte	$20
>28b8	7f 16					.word	RepeatHandler
>28ba	82 16					.word	RepeatEncoder
>28bc	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.28c2					_end93:
>28c2	07					.byte	_end94-*
>28c3	00					.byte	$00
>28c4	8b 13					.word	RandomNumber
>28c6	52 4e c4				.byte	$52,$4e,$c4
.28c9					_end94:
>28c9	07					.byte	_end95-*
>28ca	00					.byte	$00
>28cb	bc 14					.word	Rot
>28cd	52 4f d4				.byte	$52,$4f,$d4
.28d0					_end95:
>28d0	07					.byte	_end96-*
>28d1	00					.byte	$00
>28d2	21 1b					.word	RunProgram
>28d4	52 55 ce				.byte	$52,$55,$ce
.28d7					_end96:
>28d7	07					.byte	_end97-*
>28d8	00					.byte	$00
>28d9	37 13					.word	SignTOS
>28db	53 47 ce				.byte	$53,$47,$ce
.28de					_end97:
>28de	08					.byte	_end98-*
>28df	00					.byte	$00
>28e0	65 1b					.word	StopCode
>28e2	53 54 4f d0				.byte	$53,$54,$4f,$d0
.28e6					_end98:
>28e6	08					.byte	_end99-*
>28e7	00					.byte	$00
>28e8	8c 14					.word	Swap
>28ea	53 57 41 d0				.byte	$53,$57,$41,$d0
.28ee					_end99:
>28ee	07					.byte	_end100-*
>28ef	00					.byte	$00
>28f0	35 1b					.word	Call6502
>28f2	53 59 d3				.byte	$53,$59,$d3
.28f5					_end100:
>28f5	0d					.byte	_end101-*
>28f6	00					.byte	$00
>28f7	f3 1d					.word	IntToString
>28f9	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2901	c7
.2902					_end101:
>2902	0b					.byte	_end102-*
>2903	21					.byte	$21
>2904	8f 16					.word	UntilHandler
>2906	92 16					.word	UntilEncoder
>2908	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.290d					_end102:
>290d	09					.byte	_end103-*
>290e	00					.byte	$00
>290f	70 1b					.word	VlistCode
>2911	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2916					_end103:
>2916	0a					.byte	_end104-*
>2917	40					.byte	$40
>2918	bd 18					.word	BreakCmd
>291a	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.2920					_end104:
>2920	09					.byte	_end105-*
>2921	00					.byte	$00
>2922	b7 18					.word	ExitDump
>2924	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2929					_end105:
>2929	07					.byte	_end106-*
>292a	00					.byte	$00
>292b	22 11					.word	Xor
>292d	58 4f d2				.byte	$58,$4f,$d2
.2930					_end106:
>2930	08					.byte	_end107-*
>2931	00					.byte	$00
>2932	3d 1c					.word	System_Save
>2934	53 41 56 c5				.byte	$53,$41,$56,$c5
.2938					_end107:
>2938	08					.byte	_end108-*
>2939	00					.byte	$00
>293a	5b 1c					.word	System_Load
>293c	4c 4f 41 c4				.byte	$4c,$4f,$41,$c4
.2940					_end108:
>2940	0d					.byte	_end109-*
>2941	11					.byte	$11
>2942	f9 1e					.word	IndexHandler
>2944	08 1f					.word	IndexHandlerDecode
>2946	24 24 49 4e 44 45 d8			.byte	$24,$24,$49,$4e,$44,$45,$d8
.294d					_end109:
>294d	07					.byte	_end110-*
>294e	00					.byte	$00
>294f	0c 1c					.word	OldCode
>2951	4f 4c c4				.byte	$4f,$4c,$c4
.2954					_end110:
>2954	12					.byte	_end111-*
>2955	52					.byte	$52
>2956	6c 10					.word	HexLiteral2Byte
>2958	83 10					.word	HexLiteral2ByteDecode
>295a	24 24 48 45 58 4c 49 54			.byte	$24,$24,$48,$45,$58,$4c,$49,$54,$45,$52,$41,$cc
>2962	45 52 41 cc
.2966					_end111:
>2966	08					.byte	_end112-*
>2967	00					.byte	$00
>2968	62 10					.word	SetFastMode
>296a	46 41 53 d4				.byte	$46,$41,$53,$d4
.296e					_end112:
>296e	08					.byte	_end113-*
>296f	00					.byte	$00
>2970	5e 10					.word	SetSlowMode
>2972	53 4c 4f d7				.byte	$53,$4c,$4f,$d7
.2976					_end113:
>2976	00					.byte	0

;******  Return to file: kernel.asm


;******  Processing file: code/enctest.asm


;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
