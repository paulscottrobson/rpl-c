
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -o kernel_nocode.prg -L kernel.lst -l kernel.lbl kernel.asm
; Sat Jan 11 11:43:43 2020

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm

=$1000					RplBuild = $1000 							; code starts here.

;******  Processing file: data.asm

.0000					Next:
>0000							.fill 	5
=3					IP = Next+3 								; the IP which points to the current instruction
.0005					rsp:
>0005							.byte 	?
.0006					tos:
>0006							.word 	?
.0008					srcPtr:
>0008							.word 	?
.000a					bufPtr:
>000a							.word 	?
.000c					matchPtr:
>000c							.word 	?
.000e					nextFreeMem:
>000e							.word 	?
.0010					temp1:
>0010							.word 	?
.0012					temp2:
>0012							.word 	?
.0014					temp3:
>0014							.word 	?
.0016					temp4:
>0016							.word 	?
.0018					listPtr:
>0018							.word 	?
.001a					SignCount:
>001a							.byte 	?
.001b					RandomSeed:
>001b							.word 	?
.001d					ListCount:
>001d							.byte 	?
.001e					ListLowest:
>001e							.word 	?
=$102					stack2Low = $102							; access other stack members following tsx
=$101					stack2High = $101							; (which requires saving X, not on the stack !)
=$104					stack3Low = $104
=$103					stack3High = $103
=$600					azVariables = $600 							; 26 x 2 variables occupying 52 bytes * PAGE BOUNDARY *
=16					hashTableSize = 16 							; hash tables for variables.
=$640					hashTable = $640 							; hash tables start here * ALL ON ONE PAGE *
=$810					textBuffer = $810 							; buffer for text.
=$700					returnStack = $700							; return stack (1 page)
=$700					returnStackLow = returnStack
=1856					returnStackHigh = returnStack+$40
=1920					returnStackX = returnStack+$80
=$80					NumberStackBase = $80 						; number stack down from here.
=$910					encodeBuffer = $910 						; buffer for encoded program
=0					COL_BLACK = 0
=1					COL_RED = 1
=2					COL_GREEN = 2
=3					COL_YELLOW = 3
=4					COL_BLUE = 4
=5					COL_MAGENTA = 5
=6					COL_CYAN = 6
=7					COL_WHITE = 7
=8					COL_RVS = 8
=2					CTH_LineNo = COL_Green
=6					CTH_Keyword = COL_Cyan
=11					CTH_Comment = COL_Yellow+COL_Rvs
=7					CTH_Definition = COL_White
=5					CTH_String = COL_Magenta
=3					CTH_Call = COL_Yellow

;******  Return to file: kernel.asm

.1000	a2 ff		ldx #$ff			ldx 		#$FF 					; reset the stack
.1002	9a		txs				txs
.1003	20 dc 10	jsr $10dc			jsr 		ExternInitialise
.1006	a9 23		lda #$23			lda 	#BootMsg & $FF
.1008	a0 10		ldy #$10			ldy 	#BootMsg >> 8
.100a	20 cc 11	jsr $11cc			jsr 	EXPrintString
.100d					WarmStartBlankStack:
.100d	a2 80		ldx #$80			ldx 	#NumberStackBase
.100f	9a		txs				txs
.1010	4c 38 16	jmp $1638			jmp 	EncodeTest
.1013					WarmStart:
.1013	a9 03		lda #$03			lda 	#COL_Yellow
.1015	20 13 11	jsr $1113			jsr 	ExternColour
.1018	a9 06		lda #$06			lda 	#COL_Cyan
.101a	20 13 11	jsr $1113			jsr 	ExternColour
.101d	4c 1f 1b	jmp $1b1f			jmp 	RunProgram
.1020					ErrorHandler:
>1020	ff						.byte 	$FF
.1021	a2 5e		ldx #$5e			ldx 	#$5E
.1023					BootMsg:
>1023	2a 2a 2a 20 52 50 4c 2f				.text 	"*** RPL/C INTERPRETER ***",13,13
>102b	43 20 49 4e 54 45 52 50 52 45 54 45 52 20 2a 2a
>103b	2a 0d 0d
>103e	57 52 49 54 54 45 4e 20				.text	"WRITTEN BY PAUL ROBSON 2020",13,13
>1046	42 59 20 50 41 55 4c 20 52 4f 42 53 4f 4e 20 32
>1056	30 32 30 0d 0d
>105b	42 55 49 4c 44 3a 20				.text 	"BUILD: "

;******  Processing file: generated/timestamp.inc

>1062	5b 32 30 2d 30 31 2d 31			.text	"[20-01-11 11:43]"
>106a	31 20 31 31 3a 34 33 5d

;******  Return to file: kernel.asm

>1072	0d 0d 00					.byte 	13,13,0

;******  Processing file: core.src

.1075					InitialiseCoreCode:
.1075	a9 e8		lda #$e8			lda 	#$E8 					; Copy INX INX 			4 cycles when run
.1077	85 00		sta $00				sta 	Next
.1079	85 01		sta $01				sta 	Next+1
.107b	a9 7c		lda #$7c			lda 	#$7C 					; Copy JMP ($aaaa,x) 	6 cycles when run
.107d	85 02		sta $02				sta 	Next+2
.107f	86 03		stx $03				stx 	Next+3 					; set the indirect address (IP)
.1081	84 04		sty $04				sty 	Next+4
.1083	a2 01		ldx #$01			ldx 	#1 						; set up to run from provided word.
.1085	60		rts				rts								; (2 INX skip offset and line#)
.1086					Literal2Byte:
.1086	a5 06		lda $06				lda 	TOS
.1088	48		pha				pha
.1089	a5 07		lda $07				lda 	TOS+1
.108b	48		pha				pha
.108c	e8		inx				inx  							; point X to the word
.108d	e8		inx				inx
.108e	8a		txa				txa 							; copy into Y
.108f	a8		tay				tay
.1090	b1 03		lda ($03),y			lda 	(IP),y 					; read it. the LSB
.1092	85 06		sta $06				sta 	TOS
.1094	c8		iny				iny 							; read and push the MSB
.1095	b1 03		lda ($03),y			lda 	(IP),y
.1097	85 07		sta $07				sta 	TOS+1
.1099	4c 00 00	jmp $0000			jmp 	Next
.109c					Literal2ByteDecode:
.109c	a9 06		lda #$06			lda 	#CTH_Keyword
.109e	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.10a1	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a3	aa		tax				tax
.10a4	c8		iny				iny
.10a5	b1 08		lda ($08),y			lda 	(srcPtr),y
.10a7	a8		tay				tay
.10a8	8a		txa				txa
.10a9	38		sec				sec 							; output signed
.10aa	20 85 1a	jsr $1a85			jsr 	DecodeYAToBuffer
.10ad	60		rts				rts
.10ae					LiteralString:
.10ae	a5 06		lda $06				lda 	TOS
.10b0	48		pha				pha
.10b1	a5 07		lda $07				lda 	TOS+1
.10b3	48		pha				pha
.10b4	e8		inx				inx
.10b5	e8		inx				inx 							; skip over current word
.10b6	8a		txa				txa 							; add to IP + 1 to give string address
.10b7	a8		tay				tay 							; put in Y
.10b8	38		sec				sec 							; make that TOS
.10b9	65 03		adc $03				adc 	IP
.10bb	85 06		sta $06				sta 	TOS
.10bd	a5 04		lda $04				lda 	IP+1
.10bf	69 00		adc #$00			adc 	#0
.10c1	85 07		sta $07				sta 	TOS+1
.10c3	8a		txa				txa 							; add data length to X
.10c4	18		clc				clc
.10c5	71 03		adc ($03),y			adc 	(IP),y
.10c7	aa		tax				tax
.10c8	4c 02 00	jmp $0002			jmp 	Next+2 					; jump without pre-increment
.10cb					LiteralStringDecoder:
.10cb	a9 05		lda #$05			lda 	#CTH_String
.10cd	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.10d0	a9 22		lda #$22			lda 	#'"'
.10d2	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.10d5	20 6c 1a	jsr $1a6c			jsr 	DecodeOutputData
.10d8	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.10db	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: extern.asm

.10dc					ExternInitialise:
.10dc	a9 90		lda #$90			lda 	#144 						; set colour
.10de	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e1	a9 01		lda #$01			lda 	#$01
.10e3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10e6	a9 0e		lda #$0e			lda 	#14							; lower case
.10e8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10eb	a9 93		lda #$93			lda 	#147 						; clear screen
.10ed	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.10f0	a9 07		lda #$07			lda 	#COL_WHITE 					; white text.
.10f2	4c 13 11	jmp $1113			jmp 	ExternColour
.10f5					ExternCheckBreak:
.10f5	da		phx				phx 								; make sure we keep XY
.10f6	5a		phy				phy
.10f7	20 e1 ff	jsr $ffe1			jsr 	$FFE1						; STOP check on CBM KERNAL
.10fa	f0 03		beq $10ff			beq		_ECBExit 					; stopped
.10fc	7a		ply				ply 								; restore and exit.
.10fd	fa		plx				plx
.10fe	60		rts				rts
.10ff					_ECBExit:
.10ff	20 20 10	jsr $1020			jsr 	ErrorHandler
>1102	45 53 43 41 50 45 00				.text 	"ESCAPE",0
.1109					ExternPrint:
.1109	48		pha				pha
.110a	da		phx				phx
.110b	5a		phy				phy
.110c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.110f	7a		ply				ply
.1110	fa		plx				plx
.1111	68		pla				pla
.1112	60		rts				rts
.1113					ExternColour:
.1113	48		pha				pha
.1114	da		phx				phx
.1115	48		pha				pha
.1116	29 08		and #$08			and 	#8
.1118	0a		asl a				asl 	a
.1119	0a		asl a				asl 	a
.111a	0a		asl a				asl 	a
.111b	0a		asl a				asl 	a
.111c	49 92		eor #$92			eor 	#$92
.111e	20 09 11	jsr $1109			jsr 	ExternPrint
.1121	68		pla				pla
.1122	29 07		and #$07			and 	#7
.1124	aa		tax				tax
.1125	bd 2e 11	lda $112e,x			lda 	_ECTable,x
.1128	20 09 11	jsr $1109			jsr 	ExternPrint
.112b	fa		plx				plx
.112c	68		pla				pla
.112d	60		rts				rts
.112e					_ECTable:
>112e	90						.byte 	144
>112f	1c						.byte 	28
>1130	1e						.byte 	30
>1131	9e						.byte 	158
>1132	1f						.byte 	31
>1133	9c						.byte 	156
>1134	9f						.byte 	159
>1135	05						.byte 	5
.1136					ExternInput:
.1136	a9 10		lda #$10			lda 	#(textBuffer & $FF)
.1138	85 14		sta $14				sta 	temp3
.113a	a9 08		lda #$08			lda 	#(textBuffer >> 8)
.113c	85 15		sta $15				sta 	temp3+1
.113e	20 cf ff	jsr $ffcf	_EIRead:jsr 	$FFCF
.1141	29 7f		and #$7f			and 	#$7F
.1143	c9 0d		cmp #$0d			cmp 	#13
.1145	f0 0a		beq $1151			beq 	_EIExit
.1147	92 14		sta ($14)			sta 	(temp3)
.1149	e6 14		inc $14				inc 	temp3
.114b	d0 f1		bne $113e			bne 	_EIRead
.114d	e6 15		inc $15				inc 	temp3+1
.114f	80 ed		bra $113e			bra 	_EIRead
.1151	a9 00		lda #$00	_EIExit:lda 	#0
.1153	92 14		sta ($14)			sta 	(temp3)
.1155	a9 0d		lda #$0d			lda 	#13
.1157	20 09 11	jsr $1109			jsr 	ExternPrint
.115a	60		rts				rts
.115b					ExternSave:
.115b	da		phx				phx
.115c	5a		phy				phy
.115d	85 12		sta $12				sta 	temp2 						; save start
.115f	84 13		sty $13				sty 	temp2+1
.1161	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1164	a6 14		ldx $14				ldx 	temp3
.1166	a4 15		ldy $15				ldy 	temp3+1
.1168	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.116b	a9 01		lda #$01			lda 	#1
.116d	a2 08		ldx #$08			ldx 	#8	 						; device #8
.116f	a0 00		ldy #$00			ldy 	#0
.1171	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1174	a6 10		ldx $10				ldx 	temp1 						; end address
.1176	a4 11		ldy $11				ldy 	temp1+1
.1178	a9 12		lda #$12			lda 	#temp2
.117a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.117d	b0 03		bcs $1182			bcs 	_ESSave
.117f	7a		ply				ply
.1180	fa		plx				plx
.1181	60		rts				rts
.1182					_ESSave:
.1182	20 20 10	jsr $1020			jsr 	ErrorHandler
>1185	53 41 56 45 20 46 41 49				.text 	"SAVE FAILED",0
>118d	4c 45 44 00
.1191					ExternLoad:
.1191	da		phx				phx 								; save XY
.1192	5a		phy				phy
.1193	48		pha				pha 								; save target
.1194	5a		phy				phy
.1195	20 c3 11	jsr $11c3			jsr 	EXGetLength 				; get length of file into A
.1198	a6 14		ldx $14				ldx 	temp3
.119a	a4 15		ldy $15				ldy 	temp3+1
.119c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.119f	a9 01		lda #$01			lda 	#1
.11a1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a3	a0 00		ldy #$00			ldy 	#0
.11a5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11a8	7a		ply				ply 								; restore target to YX and call load
.11a9	fa		plx				plx
.11aa	a9 00		lda #$00			lda 	#0 							; load command
.11ac	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11af	b0 03		bcs $11b4			bcs 	_ESLoad
.11b1	7a		ply				ply
.11b2	fa		plx				plx
.11b3	60		rts				rts
.11b4					_ESLoad:
.11b4	20 20 10	jsr $1020			jsr 	ErrorHandler
>11b7	4c 4f 41 44 20 46 41 49				.text 	"LOAD FAILED",0
>11bf	4c 45 44 00
.11c3					EXGetLength:
.11c3	b2 14		lda ($14)			lda 	(temp3) 					; get name length
.11c5	e6 14		inc $14				inc 	temp3 						; bump ptr past it
.11c7	d0 02		bne $11cb			bne 	_EXGLExit
.11c9	e6 15		inc $15				inc 	temp3+1
.11cb					_EXGLExit:
.11cb	60		rts				rts
.11cc					EXPrintString:
.11cc	48		pha				pha
.11cd	5a		phy				phy
.11ce	84 11		sty $11				sty 	temp1+1
.11d0	85 10		sta $10				sta 	temp1
.11d2	a0 00		ldy #$00			ldy 	#0
.11d4					_EXPSLoop:
.11d4	b1 10		lda ($10),y			lda 	(temp1),y
.11d6	f0 08		beq $11e0			beq 	_EXPSExit
.11d8	29 7f		and #$7f			and 	#$7F
.11da	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.11dd	c8		iny				iny
.11de	80 f4		bra $11d4			bra 	_EXPSLoop
.11e0					_EXPSExit:
.11e0	7a		ply				ply
.11e1	68		pla				pla
.11e2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/binary.src

.11e3					Add:
.11e3	7a		ply				ply
.11e4	68		pla				pla
.11e5	18		clc				clc
.11e6	65 06		adc $06				adc 	TOS
.11e8	85 06		sta $06				sta 	TOS
.11ea	98		tya				tya
.11eb	65 07		adc $07				adc 	TOS+1
.11ed	85 07		sta $07				sta 	TOS+1
.11ef	4c 00 00	jmp $0000			jmp 	Next
.11f2					Subtract:
.11f2	7a		ply				ply
.11f3	68		pla				pla
.11f4	38		sec				sec
.11f5	49 ff		eor #$ff			eor 	#$FF
.11f7	65 06		adc $06				adc 	TOS
.11f9	85 06		sta $06				sta 	TOS
.11fb	98		tya				tya
.11fc	49 ff		eor #$ff			eor 	#$FF
.11fe	65 07		adc $07				adc 	TOS+1
.1200	85 07		sta $07				sta 	TOS+1
.1202	4c 00 00	jmp $0000			jmp 	Next
.1205					And:
.1205	68		pla				pla
.1206	25 07		and $07				and 	TOS+1
.1208	85 07		sta $07				sta 	TOS+1
.120a	68		pla				pla
.120b	25 06		and $06				and 	TOS
.120d	85 06		sta $06				sta 	TOS
.120f	4c 00 00	jmp $0000			jmp 	Next
.1212					Xor:
.1212	68		pla				pla
.1213	45 07		eor $07				eor 	TOS+1
.1215	85 07		sta $07				sta 	TOS+1
.1217	68		pla				pla
.1218	45 06		eor $06				eor 	TOS
.121a	85 06		sta $06				sta 	TOS
.121c	4c 00 00	jmp $0000			jmp 	Next
.121f					LogOr:
.121f	68		pla				pla
.1220	05 07		ora $07				ora 	TOS+1
.1222	85 07		sta $07				sta 	TOS+1
.1224	68		pla				pla
.1225	05 06		ora $06				ora 	TOS
.1227	85 06		sta $06				sta 	TOS
.1229	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/compare.src

.122c					CheckNotEqual:
.122c	38		sec				sec
.122d	80 01		bra $1230			bra 	CECode
.122f					CheckEqual:
.122f	18		clc				clc
.1230					CECode:
.1230	86 10		stx $10				stx 	temp1
.1232	ba		tsx				tsx
.1233	08		php				php
.1234	a5 06		lda $06				lda 	TOS
.1236	5d 02 01	eor $0102,x			eor 	Stack2Low,x
.1239	d0 17		bne $1252			bne	 	CompareFalse
.123b	a5 07		lda $07				lda 	TOS+1
.123d	5d 01 01	eor $0101,x			eor 	Stack2High,x
.1240	d0 10		bne $1252			bne 	CompareFalse
.1242					CompareTrue:
.1242	a6 10		ldx $10				ldx 	temp1
.1244	28		plp				plp
.1245	b0 10		bcs $1257			bcs		CompareFalse2
.1247					CompareTrue2:
.1247	68		pla				pla
.1248	68		pla				pla
.1249	a9 ff		lda #$ff			lda 	#$FF
.124b	85 06		sta $06				sta 	TOS
.124d	85 07		sta $07				sta 	TOS+1
.124f	4c 00 00	jmp $0000			jmp 	Next
.1252					CompareFalse:
.1252	a6 10		ldx $10				ldx 	temp1
.1254	28		plp				plp
.1255	b0 f0		bcs $1247			bcs		CompareTrue2
.1257					CompareFalse2:
.1257	68		pla				pla
.1258	68		pla				pla
.1259	64 06		stz $06				stz 	TOS
.125b	64 07		stz $07				stz 	TOS+1
.125d	4c 00 00	jmp $0000			jmp 	Next
.1260					CheckGreaterEq:
.1260	38		sec				sec
.1261	80 01		bra $1264			bra		CLCode
.1263					CheckLess:
.1263	18		clc				clc
.1264	86 10		stx $10		CLCode:	stx 	temp1
.1266	ba		tsx				tsx
.1267	08		php				php
.1268	18		clc				clc
.1269	a5 06		lda $06				lda 	TOS
.126b	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.126e	a5 07		lda $07				lda 	TOS+1
.1270	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.1273	50 02		bvc $1277			bvc 	_CLNoFlip
.1275	49 80		eor #$80			eor 	#$80
.1277					_CLNoFlip:
.1277	0a		asl a				asl 	a
.1278	b0 d8		bcs $1252			bcs 	CompareFalse
.127a	80 c6		bra $1242			bra 	CompareTrue
.127c					CheckLessEq:
.127c	38		sec				sec
.127d	80 01		bra $1280			bra		CGCode
.127f					CheckGreater:
.127f	18		clc				clc
.1280					CGCode:
.1280	86 10		stx $10				stx 	temp1
.1282	ba		tsx				tsx
.1283	08		php				php
.1284	18		clc				clc
.1285	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.1288	e5 06		sbc $06				sbc 	TOS
.128a	bd 01 01	lda $0101,x			lda 	Stack2High,x
.128d	e5 07		sbc $07				sbc 	TOS+1
.128f	50 02		bvc $1293			bvc 	_CGNoFlip
.1291	49 80		eor #$80			eor 	#$80
.1293					_CGNoFlip:
.1293	0a		asl a				asl 	a
.1294	b0 bc		bcs $1252			bcs 	CompareFalse
.1296	80 aa		bra $1242			bra 	CompareTrue
.1298					Minimum:
.1298	a9 00		lda #$00			lda 	#0
.129a	80 02		bra $129e			bra 	MinMaxCode
.129c					Maximum:
.129c	a9 80		lda #$80			lda 	#$80
.129e					MinMaxCode:
.129e	85 11		sta $11				sta 	temp1+1
.12a0	86 10		stx $10				stx 	temp1
.12a2	ba		tsx				tsx
.12a3	38		sec				sec
.12a4	a5 06		lda $06				lda 	TOS
.12a6	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.12a9	a5 07		lda $07				lda 	TOS+1
.12ab	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.12ae	50 02		bvc $12b2			bvc 	_MMNoFlip
.12b0	49 80		eor #$80			eor 	#$80
.12b2					_MMNoFlip:
.12b2	45 11		eor $11				eor 	temp1+1
.12b4	30 0a		bmi $12c0			bmi 	_MMNoCopy
.12b6	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.12b9	85 06		sta $06				sta 	TOS
.12bb	bd 01 01	lda $0101,x			lda 	Stack2High,x
.12be	85 07		sta $07				sta 	TOS+1
.12c0					_MMNoCopy:
.12c0	a6 10		ldx $10				ldx 	temp1
.12c2	68		pla				pla
.12c3	68		pla				pla
.12c4	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/divide.src

.12c7					Divide16x16:
.12c7	86 12		stx $12				stx 	temp2
.12c9	ba		tsx				tsx
.12ca	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12cd	68		pla				pla
.12ce	85 07		sta $07				sta 	TOS+1
.12d0	68		pla				pla
.12d1	85 06		sta $06				sta 	TOS
.12d3	a6 12		ldx $12				ldx 	temp2
.12d5	4c 00 00	jmp $0000			jmp 	Next
.12d8					Modulus16x16:
.12d8	86 12		stx $12				stx 	temp2
.12da	ba		tsx				tsx
.12db	20 ed 12	jsr $12ed			jsr 	IntegerDivide
.12de	a6 12		ldx $12				ldx 	temp2
.12e0	68		pla				pla
.12e1	68		pla				pla
.12e2	a5 10		lda $10				lda 	temp1
.12e4	85 06		sta $06				sta 	TOS
.12e6	a5 11		lda $11				lda 	temp1+1
.12e8	85 07		sta $07				sta 	TOS+1
.12ea	4c 00 00	jmp $0000			jmp 	Next
.12ed					IntegerDivide:
.12ed	a5 06		lda $06				lda 	TOS 				; check for division by zero.
.12ef	05 07		ora $07				ora 	TOS+1
.12f1	d0 14		bne $1307			bne 	_BFDOkay
.12f3	20 20 10	jsr $1020			jsr 	ErrorHandler
>12f6	44 49 56 49 53 49 4f 4e				.text 	"DIVISION BY ZERO",0
>12fe	20 42 59 20 5a 45 52 4f 00
.1307					_BFDOkay:
.1307	64 10		stz $10				stz 	temp1 						; Q/Dividend/Left in +0
.1309	64 11		stz $11				stz 	temp1+1 					; M/Divisor/Right in +2
.130b	64 1a		stz $1a				stz 	SignCount 					; Count of signs.
.130d	20 48 13	jsr $1348			jsr 	CheckIntegerNegate 			; negate 2nd (and bump sign count)
.1310	20 62 13	jsr $1362			jsr 	CheckTOSNegate 				; negate TOS (and bump sign count)
.1313	5a		phy				phy 								; Y is the counter
.1314	a0 10		ldy #$10			ldy 	#16 						; 16 iterations of the loop.
.1316					_BFDLoop:
.1316	1e 02 01	asl $0102,x			asl 	Stack2Low,x 				; shift AQ left.
.1319	3e 01 01	rol $0101,x			rol 	Stack2High,x
.131c	26 10		rol $10				rol 	temp1
.131e	26 11		rol $11				rol 	temp1+1
.1320	38		sec				sec
.1321	a5 10		lda $10				lda 	temp1+0 					; Calculate A-M on stack.
.1323	e5 06		sbc $06				sbc 	TOS
.1325	48		pha				pha
.1326	a5 11		lda $11				lda 	temp1+1
.1328	e5 07		sbc $07				sbc 	TOS+1
.132a	90 0f		bcc $133b			bcc 	_BFDNoAdd
.132c	85 11		sta $11				sta 	temp1+1
.132e	68		pla				pla
.132f	85 10		sta $10				sta 	temp1+0
.1331	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; set Q bit 1.
.1334	09 01		ora #$01			ora 	#1
.1336	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1339	80 01		bra $133c			bra 	_BFDNext
.133b					_BFDNoAdd:
.133b	68		pla				pla 								; Throw away the intermediate calculations
.133c					_BFDNext:
.133c	88		dey				dey
.133d	d0 d7		bne $1316			bne 	_BFDLoop
.133f	7a		ply				ply 								; restore Y
.1340	46 1a		lsr $1a				lsr 	SignCount 					; if sign count odd,
.1342	90 03		bcc $1347			bcc 	_BFDUnsigned 				; then the result is signed
.1344	20 4e 13	jsr $134e			jsr		IntegerNegateAlways 		; negate the result
.1347					_BFDUnsigned:
.1347	60		rts				rts
.1348					CheckIntegerNegate:
.1348	bd 01 01	lda $0101,x			lda 	Stack2High,x 				; is it -ve = MSB set ?
.134b	30 01		bmi $134e			bmi 	IntegerNegateAlways 		; if so negate it
.134d	60		rts				rts
.134e					IntegerNegateAlways:
.134e	e6 1a		inc $1a				inc 	SignCount 					; bump the count of signs
.1350	38		sec				sec 								; negate
.1351	a9 00		lda #$00			lda 	#0
.1353	fd 02 01	sbc $0102,x			sbc 	Stack2Low,x
.1356	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1359	a9 00		lda #$00			lda 	#0
.135b	fd 01 01	sbc $0101,x			sbc 	Stack2High,x
.135e	9d 01 01	sta $0101,x			sta 	Stack2High,x
.1361	60		rts				rts
.1362					CheckTOSNegate:
.1362	a5 07		lda $07				lda 	TOS+1
.1364	10 0f		bpl $1375			bpl		CTNNoChange
.1366	e6 1a		inc $1a				inc 	SignCount
.1368					TOSNegateAlways:
.1368	38		sec				sec
.1369	a9 00		lda #$00			lda 	#0
.136b	e5 06		sbc $06				sbc 	TOS
.136d	85 06		sta $06				sta 	TOS
.136f	a9 00		lda #$00			lda 	#0
.1371	e5 07		sbc $07				sbc 	TOS+1
.1373	85 07		sta $07				sta 	TOS+1
.1375					CTNNoChange:
.1375	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/multiply.src

.1376					Multiply16x16:
.1376	86 10		stx $10				stx 	temp1
.1378	ba		tsx				tsx
.1379	bd 02 01	lda $0102,x			lda 	Stack2Low,x 				; 2nd value on stack to temp1
.137c	85 12		sta $12				sta 	temp2
.137e	bd 01 01	lda $0101,x			lda		Stack2High,x
.1381	85 13		sta $13				sta 	temp2+1
.1383	9e 02 01	stz $0102,x			stz 	Stack2Low,x 				; zero 2nd value on stack
.1386	9e 01 01	stz $0101,x			stz 	Stack2High,x
.1389					_MultLoop:
.1389	46 13		lsr $13				lsr 	temp2+1 					; ror temp2 into C
.138b	66 12		ror $12				ror 	temp2
.138d	90 11		bcc $13a0			bcc 	_MultNoAdd
.138f	18		clc				clc 								; add 1st to 2nd
.1390	a5 06		lda $06				lda 	TOS
.1392	7d 02 01	adc $0102,x			adc 	Stack2Low,x
.1395	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.1398	a5 07		lda $07				lda 	TOS+1
.139a	7d 01 01	adc $0101,x			adc 	Stack2High,x
.139d	9d 01 01	sta $0101,x			sta 	Stack2High,x
.13a0					_MultNoAdd:
.13a0	06 06		asl $06				asl 	TOS 						; shift 1st left
.13a2	26 07		rol $07				rol 	TOS+1
.13a4	a5 12		lda $12				lda 	temp2	 					; until zero
.13a6	05 13		ora $13				ora 	temp2+1
.13a8	d0 df		bne $1389			bne 	_MultLoop
.13aa	a6 10		ldx $10				ldx 	temp1 						; restore X load result
.13ac	68		pla				pla
.13ad	85 07		sta $07				sta 	TOS+1
.13af	68		pla				pla
.13b0	85 06		sta $06				sta 	TOS
.13b2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/arithmetic/unary.src

.13b5					Unary1Plus:
.13b5	e6 06		inc $06				inc 	TOS
.13b7	d0 02		bne $13bb			bne 	_U1PSkip
.13b9	e6 07		inc $07				inc 	TOS+1
.13bb					_U1PSkip:
.13bb	4c 00 00	jmp $0000			jmp 	Next
.13be					Unary2Plus:
.13be	18		clc				clc
.13bf	a5 06		lda $06				lda 	TOS
.13c1	69 02		adc #$02			adc 	#2
.13c3	85 06		sta $06				sta 	TOS
.13c5	90 02		bcc $13c9			bcc 	_U1PSkip
.13c7	e6 07		inc $07				inc 	TOS+1
.13c9					_U1PSkip:
.13c9	4c 00 00	jmp $0000			jmp 	Next
.13cc					Unary1Minus:
.13cc	a5 06		lda $06				lda 	TOS
.13ce	d0 02		bne $13d2			bne 	_U1MSkip
.13d0	c6 07		dec $07				dec 	TOS+1
.13d2					_U1MSkip:
.13d2	c6 06		dec $06				dec 	TOS
.13d4	4c 00 00	jmp $0000			jmp 	Next
.13d7					Unary2Minus:
.13d7	38		sec				sec
.13d8	a5 06		lda $06				lda 	TOS
.13da	e9 02		sbc #$02			sbc 	#2
.13dc	85 06		sta $06				sta 	TOS
.13de	b0 02		bcs $13e2			bcs 	_U1PSkip
.13e0	c6 07		dec $07				dec 	TOS+1
.13e2					_U1PSkip:
.13e2	4c 00 00	jmp $0000			jmp 	Next
.13e5					Absolute:
.13e5	a5 07		lda $07				lda 	TOS+1
.13e7	30 03		bmi $13ec			bmi 	Negate
.13e9	4c 00 00	jmp $0000			jmp 	Next
.13ec					Negate:
.13ec	38		sec				sec
.13ed	a9 00		lda #$00			lda 	#0
.13ef	e5 06		sbc $06				sbc 	TOS
.13f1	85 06		sta $06				sta 	TOS
.13f3	a9 00		lda #$00			lda 	#0
.13f5	e5 07		sbc $07				sbc 	TOS+1
.13f7	85 07		sta $07				sta 	TOS+1
.13f9	4c 00 00	jmp $0000			jmp 	Next
.13fc					OneComplement:
.13fc	a5 06		lda $06				lda 	TOS
.13fe	49 ff		eor #$ff			eor 	#$FF
.1400	85 06		sta $06				sta 	TOS
.1402	a5 07		lda $07				lda 	TOS+1
.1404	49 ff		eor #$ff			eor 	#$FF
.1406	85 07		sta $07				sta 	TOS+1
.1408	4c 00 00	jmp $0000			jmp 	Next
.140b					CheckMinus:
.140b	a5 07		lda $07				lda 	TOS+1
.140d	30 07		bmi $1416			bmi 	UnaryTrue
.140f					UnaryFalse:
.140f	64 06		stz $06				stz 	TOS
.1411	64 07		stz $07				stz 	TOS+1
.1413	4c 00 00	jmp $0000			jmp 	Next
.1416					UnaryTrue:
.1416	a9 ff		lda #$ff			lda 	#$FF
.1418	85 06		sta $06				sta 	TOS
.141a	85 07		sta $07				sta 	TOS+1
.141c	4c 00 00	jmp $0000			jmp 	Next
.141f					CheckZero:
.141f	a5 06		lda $06				lda 	TOS
.1421	05 07		ora $07				ora 	TOS+1
.1423	d0 ea		bne $140f			bne 	UnaryFalse
.1425	80 ef		bra $1416			bra 	UnaryTrue
.1427					SignTOS:
.1427	a5 07		lda $07				lda 	TOS+1
.1429	30 eb		bmi $1416			bmi		UnaryTrue
.142b	05 06		ora $06				ora 	TOS
.142d	f0 e0		beq $140f			beq 	UnaryFalse
.142f	a9 01		lda #$01			lda 	#1
.1431	85 06		sta $06				sta 	TOS
.1433	64 07		stz $07				stz		TOS+1
.1435	4c 00 00	jmp $0000			jmp 	Next
.1438					ByteSwap:
.1438	a5 06		lda $06				lda 	TOS
.143a	a4 07		ldy $07				ldy 	TOS+1
.143c	85 07		sta $07				sta 	TOS+1
.143e	84 06		sty $06				sty 	TOS
.1440	4c 00 00	jmp $0000			jmp 	Next
.1443					Times16:
.1443	06 06		asl $06				asl 	TOS
.1445	26 07		rol $07				rol 	TOS+1
.1447					Times8:
.1447	06 06		asl $06				asl 	TOS
.1449	26 07		rol $07				rol 	TOS+1
.144b					Times4:
.144b	06 06		asl $06				asl 	TOS
.144d	26 07		rol $07				rol 	TOS+1
.144f					Times2:
.144f	06 06		asl $06				asl 	TOS
.1451	26 07		rol $07				rol 	TOS+1
.1453	4c 00 00	jmp $0000			jmp 	Next
.1456					Divide16:
.1456	46 07		lsr $07				lsr 	TOS+1
.1458	66 06		ror $06				ror 	TOS
.145a					Divide8:
.145a	46 07		lsr $07				lsr 	TOS+1
.145c	66 06		ror $06				ror 	TOS
.145e					Divide4:
.145e	46 07		lsr $07				lsr 	TOS+1
.1460	66 06		ror $06				ror 	TOS
.1462					Divide2:
.1462	46 07		lsr $07				lsr 	TOS+1
.1464	66 06		ror $06				ror 	TOS
.1466	4c 00 00	jmp $0000			jmp 	Next
.1469					Times256:
.1469	a5 06		lda $06				lda 	TOS
.146b	85 07		sta $07				sta 	TOS+1
.146d	64 06		stz $06				stz 	TOS
.146f	4c 00 00	jmp $0000			jmp 	Next
.1472					Divide256:
.1472	a5 07		lda $07				lda 	TOS+1
.1474	85 06		sta $06				sta 	TOS
.1476	64 07		stz $07				stz 	TOS+1
.1478	4c 00 00	jmp $0000			jmp 	Next
.147b					RandomNumber:
.147b	a5 06		lda $06				lda 	TOS
.147d	48		pha				pha
.147e	a5 07		lda $07				lda 	TOS+1
.1480	48		pha				pha
.1481	a5 1b		lda $1b				lda 	randomSeed
.1483	05 1c		ora $1c				ora 	randomSeed+1
.1485	d0 08		bne $148f			bne 	_RH_NoInit
.1487	a9 7c		lda #$7c			lda 	#$7C
.1489	85 1b		sta $1b				sta 	randomSeed
.148b	a9 a1		lda #$a1			lda 	#$A1
.148d	85 1c		sta $1c				sta 	randomSeed+1
.148f					_RH_NoInit:
.148f	a5 1b		lda $1b				lda 	randomSeed
.1491	4a		lsr a		        lsr		a
.1492	26 1c		rol $1c		        rol 	randomSeed+1
.1494	90 02		bcc $1498	        bcc 	_RH_NoEor
.1496	49 b4		eor #$b4	        eor 	#$B4
.1498					_RH_NoEor:
.1498	85 1b		sta $1b		        sta 	randomSeed
.149a	45 1c		eor $1c		        eor 	randomSeed+1
.149c	85 07		sta $07		        sta 	TOS+1
.149e	a5 1b		lda $1b		        lda 	randomSeed
.14a0	85 06		sta $06		        sta 	TOS
.14a2	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/literals.src

.14a5					Constant0:
.14a5	a5 06		lda $06				lda 	TOS
.14a7	48		pha				pha
.14a8	a5 07		lda $07				lda 	TOS+1
.14aa	48		pha				pha
.14ab	64 06		stz $06				stz 	TOS
.14ad	64 07		stz $07				stz 	TOS+1
.14af	4c 00 00	jmp $0000			jmp 	Next
.14b2					ConstantMinus1:
.14b2	a5 06		lda $06				lda 	TOS
.14b4	48		pha				pha
.14b5	a5 07		lda $07				lda 	TOS+1
.14b7	48		pha				pha
.14b8	a9 ff		lda #$ff			lda 	#$FF
.14ba	85 06		sta $06				sta 	TOS
.14bc	85 07		sta $07				sta 	TOS+1
.14be	4c 00 00	jmp $0000			jmp 	Next
.14c1					C1:
.14c1	a0 01		ldy #$01			ldy 	#1
.14c3	80 24		bra $14e9			bra 	Const1Byte
.14c5					C2:
.14c5	a0 02		ldy #$02			ldy 	#2
.14c7	80 20		bra $14e9			bra 	Const1Byte
.14c9					C3:
.14c9	a0 03		ldy #$03			ldy 	#3
.14cb	80 1c		bra $14e9			bra 	Const1Byte
.14cd					C4:
.14cd	a0 04		ldy #$04			ldy 	#4
.14cf	80 18		bra $14e9			bra 	Const1Byte
.14d1					C5:
.14d1	a0 05		ldy #$05			ldy 	#5
.14d3	80 14		bra $14e9			bra 	Const1Byte
.14d5					C8:
.14d5	a0 08		ldy #$08			ldy 	#8
.14d7	80 10		bra $14e9			bra 	Const1Byte
.14d9					C10:
.14d9	a0 0a		ldy #$0a			ldy 	#10
.14db	80 0c		bra $14e9			bra 	Const1Byte
.14dd					C15:
.14dd	a0 0f		ldy #$0f			ldy 	#15
.14df	80 08		bra $14e9			bra 	Const1Byte
.14e1					C16:
.14e1	a0 10		ldy #$10			ldy 	#16
.14e3	80 04		bra $14e9			bra 	Const1Byte
.14e5					C24:
.14e5	a0 18		ldy #$18			ldy 	#24
.14e7	80 00		bra $14e9			bra 	Const1Byte
.14e9					Const1Byte:
.14e9	a5 06		lda $06				lda 	TOS
.14eb	48		pha				pha
.14ec	a5 07		lda $07				lda 	TOS+1
.14ee	48		pha				pha
.14ef	84 06		sty $06				sty 	TOS
.14f1	64 07		stz $07				stz 	TOS+1
.14f3	4c 00 00	jmp $0000			jmp 	Next
.14f6					C32:
.14f6	a0 20		ldy #$20			ldy 	#32
.14f8	80 ef		bra $14e9			bra 	Const1Byte
.14fa					C63:
.14fa	a0 3f		ldy #$3f			ldy 	#63
.14fc	80 eb		bra $14e9			bra 	Const1Byte
.14fe					C64:
.14fe	a0 40		ldy #$40			ldy 	#64
.1500	80 e7		bra $14e9			bra 	Const1Byte
.1502					C100:
.1502	a0 64		ldy #$64			ldy 	#100
.1504	80 e3		bra $14e9			bra 	Const1Byte
.1506					C127:
.1506	a0 7f		ldy #$7f			ldy 	#127
.1508	80 df		bra $14e9			bra 	Const1Byte
.150a					C128:
.150a	a0 80		ldy #$80			ldy 	#128
.150c	80 db		bra $14e9			bra 	Const1Byte
.150e					C255:
.150e	a0 ff		ldy #$ff			ldy 	#255
.1510	80 d7		bra $14e9			bra 	Const1Byte
.1512					Const2Byte:
.1512	85 06		sta $06				sta 	TOS
.1514	84 07		sty $07				sty 	TOS+1
.1516	4c 00 00	jmp $0000			jmp 	Next
.1519					C256:
.1519	a5 06		lda $06				lda 	TOS
.151b	48		pha				pha
.151c	a5 07		lda $07				lda 	TOS+1
.151e	48		pha				pha
.151f	a9 00		lda #$00			lda 	#(256) & $FF
.1521	a0 01		ldy #$01			ldy 	#(256) >> 8
.1523	80 ed		bra $1512			bra 	Const2Byte
.1525					C512:
.1525	a5 06		lda $06				lda 	TOS
.1527	48		pha				pha
.1528	a5 07		lda $07				lda 	TOS+1
.152a	48		pha				pha
.152b	a9 00		lda #$00			lda 	#(512) & $FF
.152d	a0 02		ldy #$02			ldy 	#(512) >> 8
.152f	80 e1		bra $1512			bra 	Const2Byte
.1531					C1024:
.1531	a5 06		lda $06				lda 	TOS
.1533	48		pha				pha
.1534	a5 07		lda $07				lda 	TOS+1
.1536	48		pha				pha
.1537	a9 00		lda #$00			lda 	#(1024) & $FF
.1539	a0 04		ldy #$04			ldy 	#(1024) >> 8
.153b	80 d5		bra $1512			bra 	Const2Byte
.153d					C4096:
.153d	a5 06		lda $06				lda 	TOS
.153f	48		pha				pha
.1540	a5 07		lda $07				lda 	TOS+1
.1542	48		pha				pha
.1543	a9 00		lda #$00			lda 	#(4096) & $FF
.1545	a0 10		ldy #$10			ldy 	#(4096) >> 8
.1547	80 c9		bra $1512			bra 	Const2Byte
.1549					C32767:
.1549	a5 06		lda $06				lda 	TOS
.154b	48		pha				pha
.154c	a5 07		lda $07				lda 	TOS+1
.154e	48		pha				pha
.154f	a9 ff		lda #$ff			lda 	#(32767) & $FF
.1551	a0 7f		ldy #$7f			ldy 	#(32767) >> 8
.1553	80 bd		bra $1512			bra 	Const2Byte
.1555					C32768:
.1555	a5 06		lda $06				lda 	TOS
.1557	48		pha				pha
.1558	a5 07		lda $07				lda 	TOS+1
.155a	48		pha				pha
.155b	a9 00		lda #$00			lda 	#(32768) & $FF
.155d	a0 80		ldy #$80			ldy 	#(32768) >> 8
.155f	80 b1		bra $1512			bra 	Const2Byte

;******  Return to file: kernel.asm


;******  Processing file: words/data/stack.src

.1561					Drop:
.1561	68		pla				pla
.1562	85 07		sta $07				sta 	TOS+1
.1564	68		pla				pla
.1565	85 06		sta $06				sta 	TOS
.1567	4c 00 00	jmp $0000			jmp 	Next
.156a					TestDup:
.156a	a5 06		lda $06				lda 	TOS
.156c	05 07		ora $07				ora 	TOS+1
.156e	d0 03		bne $1573			bne 	Dup
.1570	4c 00 00	jmp $0000			jmp 	Next
.1573					Dup:
.1573	a5 06		lda $06				lda 	TOS
.1575	48		pha				pha
.1576	a5 07		lda $07				lda 	TOS+1
.1578	48		pha				pha
.1579	4c 00 00	jmp $0000			jmp 	Next
.157c					Swap:
.157c	86 10		stx $10				stx 	temp1
.157e	7a		ply				ply
.157f	fa		plx				plx
.1580	a5 06		lda $06				lda 	TOS
.1582	48		pha				pha
.1583	a5 07		lda $07				lda 	TOS+1
.1585	48		pha				pha
.1586	86 06		stx $06				stx 	TOS
.1588	84 07		sty $07				sty 	TOS+1
.158a	a6 10		ldx $10				ldx 	temp1
.158c	4c 00 00	jmp $0000			jmp 	Next
.158f					Over:
.158f	a5 06		lda $06				lda 	TOS
.1591	48		pha				pha
.1592	a5 07		lda $07				lda 	TOS+1
.1594	48		pha				pha
.1595	86 10		stx $10				stx 	temp1
.1597	ba		tsx				tsx
.1598	bd 04 01	lda $0104,x			lda 	stack3low,x
.159b	85 06		sta $06				sta 	TOS
.159d	bd 03 01	lda $0103,x			lda 	stack3High,x
.15a0	85 07		sta $07				sta 	TOS+1
.15a2	a6 10		ldx $10				ldx 	temp1
.15a4	4c 00 00	jmp $0000			jmp 	Next
.15a7					Nip:
.15a7	68		pla				pla
.15a8	68		pla				pla
.15a9	4c 00 00	jmp $0000			jmp 	Next
.15ac					Rot:
.15ac	86 10		stx $10				stx 	temp1
.15ae	ba		tsx				tsx
.15af	bd 04 01	lda $0104,x			lda 	Stack3Low,x
.15b2	a8		tay				tay
.15b3	bd 02 01	lda $0102,x			lda 	Stack2Low,x
.15b6	9d 04 01	sta $0104,x			sta 	Stack3Low,x
.15b9	a5 06		lda $06				lda 	TOS
.15bb	9d 02 01	sta $0102,x			sta 	Stack2Low,x
.15be	84 06		sty $06				sty 	TOS
.15c0	bd 03 01	lda $0103,x			lda 	Stack3High,x
.15c3	a8		tay				tay
.15c4	bd 01 01	lda $0101,x			lda 	Stack2High,x
.15c7	9d 03 01	sta $0103,x			sta 	Stack3High,x
.15ca	a5 07		lda $07				lda 	TOS+1
.15cc	9d 01 01	sta $0101,x			sta 	Stack2High,x
.15cf	84 07		sty $07				sty 	TOS+1
.15d1	a6 10		ldx $10				ldx 	temp1
.15d3	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/data/memory.src

.15d6					ByteRead:
.15d6	b2 06		lda ($06)			lda 	(TOS)
.15d8	85 06		sta $06				sta 	TOS
.15da	64 07		stz $07				stz 	TOS+1
.15dc	4c 00 00	jmp $0000			jmp 	Next
.15df					WordRead:
.15df	a0 01		ldy #$01			ldy 	#1
.15e1	b1 06		lda ($06),y			lda 	(TOS),y
.15e3	a8		tay				tay
.15e4	b2 06		lda ($06)			lda 	(TOS)
.15e6	85 06		sta $06				sta 	TOS
.15e8	84 07		sty $07				sty 	TOS+1
.15ea	4c 00 00	jmp $0000			jmp 	Next
.15ed					ByteWrite:
.15ed	68		pla				pla
.15ee	68		pla				pla
.15ef	92 06		sta ($06)			sta 	(TOS)
.15f1	68		pla				pla
.15f2	85 07		sta $07				sta 	TOS+1
.15f4	68		pla				pla
.15f5	85 06		sta $06				sta 	TOS
.15f7	4c 00 00	jmp $0000			jmp 	Next
.15fa					WordWrite:
.15fa	68		pla				pla
.15fb	a0 01		ldy #$01			ldy 	#1
.15fd	91 06		sta ($06),y			sta 	(TOS),y
.15ff	68		pla				pla
.1600	92 06		sta ($06)			sta 	(TOS)
.1602	68		pla				pla
.1603	85 07		sta $07				sta 	TOS+1
.1605	68		pla				pla
.1606	85 06		sta $06				sta 	TOS
.1608	4c 00 00	jmp $0000			jmp 	Next
.160b					WordAdd:
.160b	7a		ply				ply
.160c	68		pla				pla
.160d	18		clc				clc
.160e	72 06		adc ($06)			adc 	(TOS)
.1610	92 06		sta ($06)			sta 	(TOS)
.1612	98		tya				tya
.1613	a0 01		ldy #$01			ldy 	#1
.1615	71 06		adc ($06),y			adc 	(TOS),y
.1617	91 06		sta ($06),y			sta 	(TOS),y
.1619	68		pla				pla
.161a	85 07		sta $07				sta 	TOS+1
.161c	68		pla				pla
.161d	85 06		sta $06				sta 	TOS
.161f	4c 00 00	jmp $0000			jmp 	Next
.1622					AllocateMemory:
.1622	a5 06		lda $06				lda 	TOS 						; save memory required on stack.
.1624	48		pha				pha
.1625	a5 07		lda $07				lda 	TOS+1
.1627	48		pha				pha
.1628	a5 0e		lda $0e				lda 	nextFreeMem 				; copy free mem address to TOS
.162a	85 06		sta $06				sta 	TOS
.162c	a5 0f		lda $0f				lda 	nextFreeMem+1
.162e	85 07		sta $07				sta 	TOS+1
.1630	7a		ply				ply 								; advance the free ram pointer
.1631	68		pla				pla
.1632	20 60 19	jsr $1960			jsr 	AdvanceFreeMem
.1635	4c 00 00	jmp $0000			jmp 	Next 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encode.src

.1638					EncodeTest:
.1638	a9 40		lda #$40			lda 	#(_EncTest & $FF)
.163a	a0 16		ldy #$16			ldy 	#(_EncTest >> 8)
.163c	20 52 16	jsr $1652			jsr 	EncodeProgram
>163f	ff						.byte 	$FF
.1640					_EncTest:
>1640	31 30 32 35 20					.text	"1025 "
>1645	22 53 54 52 22					.text 	'"STR"'
>164a	20 27 48 45 4c 4c 4f 00				.text	" 'HELLO",0
.1652					EncodeProgram:
.1652	48		pha				pha 								; save registers.
.1653	da		phx				phx
.1654	5a		phy				phy
.1655	84 09		sty $09				sty 	srcPtr+1					; save source pointer.
.1657	85 08		sta $08				sta		srcPtr
.1659	a9 03		lda #$03			lda 	#3 							; reset the encode Buffer
.165b	8d 10 09	sta $0910			sta 	encodeBuffer 				; this is also the write ptr/offset
.165e	9c 11 09	stz $0911			stz 	encodeBuffer+1 				; the line number
.1661	9c 12 09	stz $0912			stz 	encodeBuffer+2 				; which is initially zero.
.1664	b2 08		lda ($08)			lda 	(srcPtr) 					; check if first character is digit
.1666	20 0c 17	jsr $170c			jsr 	CheckIsDigit
.1669	90 09		bcc $1674			bcc 	_EPNoLineNumber 			; if so there is a line number
.166b	20 22 17	jsr $1722			jsr 	EncodeGetConstant 			; extract that constant from the source
.166e	8d 11 09	sta $0911			sta 	encodeBuffer+1 				; that is the line number
.1671	8c 12 09	sty $0912			sty 	encodeBuffer+2
.1674					_EPNoLineNumber:
.1674					EncodeLoop:
.1674	b2 08		lda ($08)			lda 	(srcPtr) 					; skip over spaces/ reached end
.1676	f0 0b		beq $1683			beq 	_EPEndEncode
.1678	c9 20		cmp #$20			cmp 	#32
.167a	d0 12		bne $168e			bne 	_EPNotSpace
.167c	a9 01		lda #$01			lda 	#1
.167e	20 18 17	jsr $1718			jsr 	EncodeAddSrcPtr
.1681	80 f1		bra $1674			bra	 	EncodeLoop
.1683					_EPEndEncode:
.1683	a9 49		lda #$49			lda 	#NextLine & $FF 			; compile $$nextline to mark eol
.1685	a0 1c		ldy #$1c			ldy 	#NextLine >> 8
.1687	20 f3 16	jsr $16f3			jsr 	EncodeWriteWord
.168a	7a		ply				ply									; restore and exit.
.168b	fa		plx				plx
.168c	68		pla				pla
.168d	60		rts				rts
.168e					_EPNotSpace:
.168e	b2 08		lda ($08)			lda 	(srcPtr)
.1690	c9 22		cmp #$22			cmp 	#'"'						; is it a quoted string or comment ?
.1692	f0 04		beq $1698			beq 	_EPIsComStr
.1694	c9 27		cmp #$27			cmp 	#"'"
.1696	d0 06		bne $169e			bne 	_EPNotComStr
.1698					_EPIsComStr:
.1698	20 9e 16	jsr $169e			jsr 	EncodeCommentString
.169b	80 d7		bra $1674			bra 	EncodeLoop
>169d	ff						.byte 	$FF
.169e					_EPNotComStr:

;******  Return to file: kernel.asm


;******  Processing file: words/encode/comstr.src

.169e					EncodeCommentString:
.169e	b2 08		lda ($08)			lda 	(srcPtr) 					; get first character
.16a0	64 10		stz $10				stz 	temp1 						; other terminator = EOL
.16a2	aa		tax				tax 								; save in X
.16a3	a9 60		lda #$60			lda 	#(SkipComment & $FF)		; get the routine to use
.16a5	a0 1c		ldy #$1c			ldy 	#(SkipComment >> 8)
.16a7	e0 27		cpx #$27			cpx 	#"'"
.16a9	f0 06		beq $16b1			beq 	_ECSGotCmd
.16ab	86 10		stx $10				stx		temp1 						; other terminator = "
.16ad	a9 ae		lda #$ae			lda 	#(LiteralString & $FF)
.16af	a0 10		ldy #$10			ldy 	#(LiteralString >> 8)
.16b1					_ECSGotCmd:
.16b1	20 f3 16	jsr $16f3			jsr 	EncodeWriteWord 			; write word out.
.16b4	ae 10 09	ldx $0910			ldx 	encodeBuffer 				; keep offset to buffer in X.
.16b7	a9 01		lda #$01			lda 	#1
.16b9	20 fd 16	jsr $16fd			jsr 	EncodeWriteByte 			; write total length, so far 1.
.16bc	a0 01		ldy #$01			ldy 	#1 							; for reading the actual text
.16be					_ECSCopyText:
.16be	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get next
.16c0	f0 18		beq $16da			beq 	_ECSEndOfLine 				; end of line ?
.16c2	c5 10		cmp $10				cmp 	temp1						; is it the other terminator
.16c4	f0 09		beq $16cf			beq 	_ECSEndOfString 			; if so must be closing quote.
.16c6	20 fd 16	jsr $16fd			jsr 	EncodeWriteByte 			; write the byte out
.16c9	fe 10 09	inc $0910,x			inc 	encodeBuffer,x				; increase length
.16cc	c8		iny				iny 								; next character
.16cd	80 ef		bra $16be			bra 	_ECSCopyText
.16cf					_ECSEndOfString:
.16cf	c8		iny				iny 								; skip closing quote.
.16d0	a9 00		lda #$00			lda 	#0 							; write out ASCIIZ
.16d2	20 fd 16	jsr $16fd			jsr 	EncodeWriteByte
.16d5	fe 10 09	inc $0910,x			inc 	encodeBuffer,x 				; fix the length up.
.16d8	80 0e		bra $16e8			bra 	_ECSComplete 				; and just patching up srcPtr to do.
.16da					_ECSEndOfLine:
.16da	a5 10		lda $10				lda 	temp1 						; missing closing quote
.16dc	f0 0a		beq $16e8			beq 	_ECSComplete 				; if we were doing a string.
.16de	20 20 10	jsr $1020			jsr 	ErrorHandler
>16e1	51 55 4f 54 45 3f 00				.text 	"QUOTE?",0
.16e8					_ECSComplete:
.16e8	98		tya				tya
.16e9	18		clc				clc
.16ea	65 08		adc $08				adc 	srcPtr
.16ec	85 08		sta $08				sta 	srcPtr
.16ee	90 02		bcc $16f2			bcc 	_ECSExit
.16f0	e6 09		inc $09				inc 	srcPtr+1
.16f2					_ECSExit:
.16f2	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/encode/encutils.src

.16f3					EncodeWriteWord:
.16f3	48		pha				pha
.16f4	20 fd 16	jsr $16fd			jsr 	EncodeWriteByte
.16f7	98		tya				tya
.16f8	20 fd 16	jsr $16fd			jsr 	EncodeWriteByte
.16fb	68		pla				pla
.16fc	60		rts				rts
.16fd					EncodeWriteByte:
.16fd	da		phx				phx
.16fe	ae 10 09	ldx $0910			ldx 	encodeBuffer
.1701	9d 10 09	sta $0910,x			sta 	encodeBuffer,x
.1704	9e 11 09	stz $0911,x			stz 	encodeBuffer+1,x
.1707	ee 10 09	inc $0910			inc 	encodeBuffer
.170a	fa		plx				plx
.170b	60		rts				rts
.170c					CheckIsDigit:
.170c	c9 30		cmp #$30			cmp 	#"0"						; return CC if 0..9
.170e	90 06		bcc $1716			bcc 	_CIDFail
.1710	c9 3a		cmp #$3a			cmp 	#"9"+1
.1712	b0 02		bcs $1716			bcs 	_CIDFail
.1714	38		sec				sec
.1715	60		rts				rts
.1716					_CIDFail:
.1716	18		clc				clc
.1717	60		rts				rts
.1718					EncodeAddSrcPtr:
.1718	18		clc				clc 								; add offset
.1719	65 08		adc $08				adc 	srcPtr
.171b	85 08		sta $08				sta 	srcPtr
.171d	90 02		bcc $1721			bcc 	_EASPNoCarry
.171f	e6 09		inc $09				inc 	srcPtr+1					; carry through
.1721					_EASPNoCarry:
.1721	60		rts				rts
.1722					EncodeGetConstant:
.1722	a5 08		lda $08				lda 	srcPtr 						; get source
.1724	a4 09		ldy $09				ldy 	srcPtr+1
.1726	20 bb 1b	jsr $1bbb			jsr 	ConvertToInteger 			; call converter
.1729	90 07		bcc $1732			bcc 	_EGCExit
.172b	20 18 17	jsr $1718			jsr 	EncodeAddSrcPtr 			; if passed add chars to src ptr
.172e	a5 14		lda $14				lda 	temp3 						; get result into YA
.1730	a4 15		ldy $15				ldy 	temp3+1
.1732					_EGCExit:
.1732	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/structures/fornext.src

.1733					ForHandler:
.1733	e6 05		inc $05				inc 	rsp 						; bump the RSP
.1735	a4 05		ldy $05				ldy 	rsp 						; get return stack and push TOS/$FF on it.
.1737	c0 40		cpy #$40			cpy 	#$40 						; overflow
.1739	f0 18		beq $1753			beq 	_FHOverflow
.173b	a5 07		lda $07				lda 	TOS+1
.173d	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.1740	a5 06		lda $06				lda 	TOS
.1742	99 00 07	sta $0700,y			sta 	returnStackLow,y
.1745	a9 ff		lda #$ff			lda 	#$FF
.1747	99 80 07	sta $0780,y			sta 	returnStackX,y
.174a	68		pla				pla
.174b	85 07		sta $07				sta 	TOS+1
.174d	68		pla				pla
.174e	85 06		sta $06				sta 	TOS
.1750	4c 00 00	jmp $0000			jmp 	Next
.1753					_FHOverflow:
.1753	20 20 10	jsr $1020			jsr 	ErrorHandler
>1756	46 4f 52 20 53 54 41 43				.text 	"FOR STACK?",0
>175e	4b 3f 00
.1761					NextHandler:
.1761	da		phx				phx
.1762	a6 05		ldx $05				ldx 	rsp 						; get current stack ptr
.1764	bd 80 07	lda $0780,x			lda 	returnStackX,x 				; check it's a FOR Loop
.1767	c9 ff		cmp #$ff			cmp 	#$FF
.1769	d0 21		bne $178c			bne 	NHNoFor
.176b	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; decrement the count
.176e	d0 03		bne $1773			bne 	_NHNoBorrow
.1770	de 40 07	dec $0740,x			dec 	returnStackHigh,x
.1773					_NHNoBorrow:
.1773	de 00 07	dec $0700,x			dec 	returnStackLow,x
.1776	bd 00 07	lda $0700,x			lda 	returnStackLow,x 			; have we reached the end ?
.1779	1d 40 07	ora $0740,x			ora 	returnStackHigh,x
.177c	fa		plx				plx 								; restore X and re-test
.177d	09 00		ora #$00			ora 	#0
.177f	f0 05		beq $1786			beq 	_NHComplete 				; if so then complete, else loop.
.1781	e8		inx				inx 								; advance to branch
.1782	e8		inx				inx
.1783	4c df 17	jmp $17df			jmp 	BranchAlways
.1786					_NHComplete:
.1786	e8		inx				inx 								; skip over the branch quantity
.1787	c6 05		dec $05				dec 	rsp 						; drop the indx
.1789	4c 00 00	jmp $0000			jmp 	Next
.178c					NHNoFor:
.178c	20 20 10	jsr $1020			jsr 	ErrorHandler
>178f	4e 4f 20 46 4f 52 3f 00				.text 	"NO FOR?",0
.1797					GetIndex:
.1797	a4 05		ldy $05				ldy 	rsp 						; get current stack ptr
.1799	b9 80 07	lda $0780,y			lda 	returnStackX,y 				; check it's a FOR Loop
.179c	c9 ff		cmp #$ff			cmp 	#$FF
.179e	d0 ec		bne $178c			bne 	NHNoFor
.17a0	a5 06		lda $06				lda 	TOS
.17a2	48		pha				pha
.17a3	a5 07		lda $07				lda 	TOS+1
.17a5	48		pha				pha
.17a6	b9 00 07	lda $0700,y			lda 	returnStackLow,y 			; put counter-1 out
.17a9	38		sec				sec
.17aa	e9 01		sbc #$01			sbc 	#1
.17ac	85 06		sta $06				sta 	TOS
.17ae	b9 40 07	lda $0740,y			lda 	returnStackHigh,y
.17b1	e9 00		sbc #$00			sbc 	#0
.17b3	85 07		sta $07				sta 	TOS+1
.17b5	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/ifelseendif.src

.17b8					IfHandler:
.17b8	4c c7 17	jmp $17c7			jmp 	BranchIfZero
.17bb					ElseHandler:
.17bb	4c dd 17	jmp $17dd			jmp 	BranchTestSucceedsNoPop
.17be					EndIfHandler:
.17be	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/structures/repeatuntil.src

.17c1					RepeatHandler:
.17c1	4c 00 00	jmp $0000			jmp 	Next
.17c4					UntilHandler:
.17c4	4c c7 17	jmp $17c7			jmp 	BranchIfZero

;******  Return to file: kernel.asm


;******  Processing file: words/system/branch.src

.17c7					BranchIfZero:
.17c7	a5 06		lda $06				lda 	TOS 						; check TOS = 0
.17c9	05 07		ora $07				ora 	TOS+1
.17cb	f0 0a		beq $17d7			beq 	BranchTestSucceeds
.17cd					BranchTestFails:
.17cd	68		pla				pla
.17ce	85 07		sta $07				sta 	TOS+1
.17d0	68		pla				pla
.17d1	85 06		sta $06				sta 	TOS
.17d3	e8		inx				inx 								; skip over the relative branch.
.17d4	4c 00 00	jmp $0000			jmp 	Next
.17d7					BranchTestSucceeds:
.17d7	68		pla				pla
.17d8	85 07		sta $07				sta 	TOS+1
.17da	68		pla				pla
.17db	85 06		sta $06				sta 	TOS
.17dd					BranchTestSucceedsNoPop:
.17dd	e8		inx				inx 								; advance by two, to the offset
.17de	e8		inx				inx
.17df					BranchAlways:
.17df	8a		txa				txa 								; A = Y = position
.17e0	a8		tay				tay 								; (IP),Y now points to the branch target
.17e1	b1 03		lda ($03),y			lda 	(IP),y 						; adjust the position
.17e3	aa		tax				tax 								; position back in this line.
.17e4	4c 02 00	jmp $0002			jmp 	Next+2 						; and continue

;******  Return to file: kernel.asm


;******  Processing file: words/system/callhandler.src

.17e7					CallHandler:
.17e7	e8		inx				inx									; bump X to the call address.
.17e8	e8		inx				inx
.17e9	e6 05		inc $05				inc 	rsp 						; bump the RSP (first time to zero)
.17eb	a4 05		ldy $05				ldy 	rsp 						; get return stack and push IP/X on it.
.17ed	c0 40		cpy #$40			cpy 	#$40 						; overflow
.17ef	f0 4b		beq $183c			beq 	_CHOverflow
.17f1	a5 04		lda $04				lda 	IP+1
.17f3	99 40 07	sta $0740,y			sta 	returnStackHigh,y
.17f6	a5 03		lda $03				lda 	IP
.17f8	99 00 07	sta $0700,y			sta 	returnStackLow,y
.17fb	8a		txa				txa
.17fc	99 80 07	sta $0780,y			sta 	returnStackX,y
.17ff	8a		txa				txa 								; get the line number into temp1.
.1800	a8		tay				tay
.1801	b1 03		lda ($03),y			lda 	(IP),y
.1803	85 10		sta $10				sta 	temp1
.1805	c8		iny				iny
.1806	b1 03		lda ($03),y			lda 	(IP),y
.1808	85 11		sta $11				sta 	temp1+1
.180a	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.180c	85 03		sta $03				sta 	0+(IP)
.180e	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1810	85 04		sta $04				sta 	1+(IP)
.1812	b2 03		lda ($03)			lda 	(IP)						; no program code ?
.1814	f0 17		beq $182d			beq 	_CHFail
.1816	a0 01		ldy #$01			ldy 	#1 							; Y = 1 throughout.
.1818					_CHSearch:
.1818	b1 03		lda ($03),y			lda 	(IP),y 						; check LSB of line number
.181a	c5 10		cmp $10				cmp 	temp1
.181c	f0 2d		beq $184b			beq 	_CHFoundLSB
.181e					_CHSearchNext:
.181e	18		clc				clc
.181f	a5 03		lda $03				lda 	IP
.1821	72 03		adc ($03)			adc 	(IP)
.1823	85 03		sta $03				sta 	IP
.1825	90 02		bcc $1829			bcc 	_NoCarryAdv
.1827	e6 04		inc $04				inc 	IP+1
.1829					_NoCarryAdv:
.1829	b2 03		lda ($03)			lda 	(IP)						; check reached the end.
.182b	d0 eb		bne $1818			bne 	_CHSearch
.182d					_CHFail:
.182d	20 20 10	jsr $1020			jsr 	ErrorHandler
>1830	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1838	4f 4e 3f 00
.183c					_CHOverflow:
.183c	20 20 10	jsr $1020			jsr 	ErrorHandler
>183f	53 54 41 43 4b 44 45 50				.text 	"STACKDEPTH?",0
>1847	54 48 3f 00
.184b					_CHFoundLSB:
.184b	c8		iny				iny 								; get MSB
.184c	b1 03		lda ($03),y			lda 	(IP),y
.184e	88		dey				dey
.184f	c5 11		cmp $11				cmp 	temp1+1 					; matches, if not contineu
.1851	d0 cb		bne $181e			bne 	_CHSearchNext
.1853	a0 03		ldy #$03			ldy 	#3	 						; check it begins with $$define
.1855	b1 03		lda ($03),y			lda 	(IP),y
.1857	c9 83		cmp #$83			cmp 	#DefineCode & $FF
.1859	d0 d2		bne $182d			bne 	_CHFail
.185b	c8		iny				iny
.185c	b1 03		lda ($03),y			lda 	(IP),y
.185e	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.1860	d0 cb		bne $182d			bne 	_CHFail
.1862	c8		iny				iny
.1863	b1 03		lda ($03),y			lda 	(IP),y 						; this is the length of the define name
.1865	18		clc				clc
.1866	69 05		adc #$05			adc 	#5 							; $$define token, line number, offset
.1868	aa		tax				tax
.1869	4c 02 00	jmp $0002			jmp 	Next+2 						; and execute
.186c					ReturnHandler:
.186c	a4 05		ldy $05				ldy 	rsp 						; get rsp
.186e	30 15		bmi $1885			bmi 	_RHUnderflow 				; if -ve underflowed
.1870	c6 05		dec $05				dec 	rsp 						; decrement rsp
.1872	b9 40 07	lda $0740,y			lda 	returnStackHigh,y 			; restore IP/X
.1875	85 04		sta $04				sta 	IP+1
.1877	b9 00 07	lda $0700,y			lda 	returnStackLow,y
.187a	85 03		sta $03				sta 	IP
.187c	b9 80 07	lda $0780,y			lda 	returnStackX,y
.187f	aa		tax				tax
.1880	f0 0e		beq $1890			beq 	_RHInLoop 					; this means you have done :something for ; next
.1882	4c 00 00	jmp $0000			jmp 	Next
.1885					_RHUnderflow:
.1885	20 20 10	jsr $1020			jsr 	ErrorHandler
>1888	52 45 54 55 52 4e 3f 00				.text 	"RETURN?",0
.1890					_RHInLoop:
.1890	20 20 10	jsr $1020			jsr 	ErrorHandler
>1893	52 45 54 55 52 4e 20 49				.text 	"RETURN IN LOOP?",0
>189b	4e 20 4c 4f 4f 50 3f 00
.18a3					CallHandlerDecode:
.18a3	a9 03		lda #$03			lda 	#CTH_Call					; space
.18a5	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.18a8	b1 08		lda ($08),y			lda 	(srcPtr),y 					; get line number into YA
.18aa	aa		tax				tax
.18ab	c8		iny				iny
.18ac	b1 08		lda ($08),y			lda 	(srcPtr),y
.18ae	a8		tay				tay
.18af	8a		txa				txa
.18b0	20 ed 18	jsr $18ed			jsr 	FindLine 					; try to locate that line.
.18b3	b0 11		bcs $18c6			bcs 	_CHDFound 					; if found .....
.18b5					_CHDLineOnly:
.18b5	48		pha				pha
.18b6	a9 3c		lda #$3c			lda 	#"<"
.18b8	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.18bb	68		pla				pla
.18bc	18		clc				clc 								; output unsigned
.18bd	20 85 1a	jsr $1a85			jsr 	DecodeYAToBuffer
.18c0	a9 3e		lda #$3e			lda 	#">"
.18c2	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.18c5	60		rts				rts
.18c6					_CHDFound:
.18c6	48		pha				pha 								; save YA
.18c7	5a		phy				phy
.18c8	a0 03		ldy #$03			ldy 	#3 							; check first is $$define
.18ca	b1 10		lda ($10),y			lda 	(temp1),y
.18cc	c9 83		cmp #$83			cmp 	#DefineCode & 255
.18ce	d0 07		bne $18d7			bne 	_CHDNoDefine
.18d0	c8		iny				iny
.18d1	b1 10		lda ($10),y			lda 	(temp1),y
.18d3	c9 1c		cmp #$1c			cmp 	#DefineCode >> 8
.18d5	f0 04		beq $18db			beq 	_CHDFoundDefine
.18d7					_CHDNoDefine:
.18d7	7a		ply				ply									; restore the line number and print it in <>
.18d8	68		pla				pla
.18d9	80 da		bra $18b5			bra 	_CHDLineOnly
.18db					_CHDFoundDefine:
.18db	68		pla				pla 								; throw saved line number.
.18dc	68		pla				pla
.18dd	a0 05		ldy #$05			ldy 	#5 							; 3,4 $$define 5 length, name has bit 7 set at end
.18df					_CHDOutName:
.18df	c8		iny				iny 								; next
.18e0	b1 10		lda ($10),y			lda 	(temp1),y 					; print char no bit 7
.18e2	48		pha				pha
.18e3	29 7f		and #$7f			and 	#$7F
.18e5	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.18e8	68		pla				pla
.18e9	0a		asl a				asl 	a 							; bit 7 to carry
.18ea	90 f3		bcc $18df			bcc 	_CHDOutName
.18ec	60		rts				rts
.18ed					FindLine:
.18ed	48		pha				pha 								; save registers
.18ee	da		phx				phx
.18ef	5a		phy				phy
.18f0	85 12		sta $12				sta 	temp2 						; temp2 = target line#
.18f2	84 13		sty $13				sty 	temp2+1
.18f4	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.18f6	85 10		sta $10				sta 	0+(temp1)
.18f8	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.18fa	85 11		sta $11				sta 	1+(temp1)
.18fc					_FLLoop:
.18fc	b2 10		lda ($10)			lda 	(temp1) 					; found end ?
.18fe	18		clc				clc									; if so exit with CC.
.18ff	f0 1d		beq $191e			beq 	_FLExit
.1901	a0 01		ldy #$01			ldy 	#1 							; check line # match
.1903	b1 10		lda ($10),y			lda 	(temp1),y
.1905	c5 12		cmp $12				cmp 	temp2
.1907	d0 08		bne $1911			bne 	_FLNext
.1909	c8		iny				iny
.190a	b1 10		lda ($10),y			lda 	(temp1),y
.190c	c5 13		cmp $13				cmp 	temp2+1
.190e	38		sec				sec 								; if so exit with CS
.190f	f0 0d		beq $191e			beq 	_FLExit
.1911					_FLNext:
.1911	18		clc				clc
.1912	a5 10		lda $10				lda 	temp1
.1914	72 10		adc ($10)			adc 	(temp1)
.1916	85 10		sta $10				sta 	temp1
.1918	90 02		bcc $191c			bcc 	_NoCarryAdv
.191a	e6 11		inc $11				inc 	temp1+1
.191c					_NoCarryAdv:
.191c	80 de		bra $18fc			bra 	_FLLoop 					; keep looking.
.191e					_FLExit:
.191e	7a		ply				ply
.191f	fa		plx				plx
.1920	68		pla				pla
.1921	60		rts				rts
.1922	18		clc				clc
.1923	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/clrnew.src

.1924					NewHandler:
.1924	9c 00 40	stz $4000			stz 	ProgramMemory 				; Make the first offset zero.
.1927	20 33 19	jsr $1933			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.192a	4c 00 00	jmp $0000			jmp 	Next
.192d					ClrHandler:
.192d	20 33 19	jsr $1933			jsr 	ClearVariableSpace 			; clear variables, reset pointers
.1930	4c 00 00	jmp $0000			jmp 	Next
.1933					ClearVariableSpace:
.1933	a9 ff		lda #$ff			lda 	#$FF 						; empty return stack
.1935	85 05		sta $05				sta 	rsp
.1937	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1939	85 0e		sta $0e				sta 	0+(nextFreeMem)
.193b	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.193d	85 0f		sta $0f				sta 	1+(nextFreeMem)
.193f	a0 1f		ldy #$1f			ldy 	#hashTableSize*2-1 			; erase the hash table (used for variables)
.1941					_CVSHashClear:
.1941	a9 00		lda #$00			lda 	#0 							; all the first record pointers are $00
.1943	99 40 06	sta $0640,y			sta 	hashTable,y
.1946	88		dey				dey
.1947	10 f8		bpl $1941			bpl 	_CVSHashClear
.1949					_CVSFindEnd:
.1949	18		clc				clc
.194a	a5 0e		lda $0e				lda 	nextFreeMem
.194c	72 0e		adc ($0e)			adc 	(nextFreeMem)
.194e	85 0e		sta $0e				sta 	nextFreeMem
.1950	90 02		bcc $1954			bcc 	_NoCarryAdv
.1952	e6 0f		inc $0f				inc 	nextFreeMem+1
.1954					_NoCarryAdv:
.1954	b2 0e		lda ($0e)			lda 	(nextFreeMem)
.1956	d0 f1		bne $1949			bne 	_CVSFindEnd
.1958	a9 08		lda #$08			lda 	#8 							; this puts a gap in, more for clarity than anything.
.195a	a0 00		ldy #$00			ldy 	#0
.195c	20 60 19	jsr $1960			jsr 	AdvanceFreeMem				; we need +1 because the previous code leaves the
.195f	60		rts				rts 								; free mem pointer pointing to the last zero offset
.1960					AdvanceFreeMem:
.1960	18		clc				clc
.1961	65 0e		adc $0e				adc 	nextFreeMem
.1963	85 0e		sta $0e				sta 	nextFreeMem
.1965	98		tya				tya
.1966	65 0f		adc $0f				adc 	nextFreeMem+1
.1968	85 0f		sta $0f				sta 	nextFreeMem+1
.196a	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/debug.src

.196b					ExitDump:
.196b	ba		tsx				tsx 								; save Data Stack in temp1
.196c	86 10		stx $10				stx 	temp1
.196e	4c ff ff	jmp $ffff			jmp 	$FFFF 						; makes the X16-Emulator dump-exit.
.1971					BreakCmd:
>1971	ff						.byte 	$FF
.1972	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/decode.src

.1975					DecodeLineIntoBufPtr:
.1975	48		pha				pha
.1976	da		phx				phx
.1977	5a		phy				phy
.1978	85 08		sta $08				sta 	srcPtr 						; save the source line.
.197a	84 09		sty $09				sty 	srcPtr+1
.197c	90 1b		bcc $1999			bcc 	_DecodeNoLineNumber
.197e	a0 01		ldy #$01			ldy 	#1 							; get line # to YA
.1980	b1 08		lda ($08),y			lda 	(srcPtr),y
.1982	aa		tax				tax
.1983	c8		iny				iny
.1984	b1 08		lda ($08),y			lda 	(srcPtr),y
.1986	a8		tay				tay
.1987	8a		txa				txa
.1988	18		clc				clc
.1989	20 85 1a	jsr $1a85			jsr 	DecodeYAToBuffer 			; convert to string in buffer
.198c	aa		tax				tax 								; count in X
.198d					_DecodeLineSpace:
.198d	e0 05		cpx #$05			cpx 	#5
.198f	f0 08		beq $1999			beq 	_DecodeNoLineNumber
.1991	a9 20		lda #$20			lda 	#" " 						; pad to 5 spaces
.1993	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1996	e8		inx				inx
.1997	80 f4		bra $198d			bra 	_DecodeLineSpace
.1999					_DecodeNoLineNumber:
.1999	a0 03		ldy #$03			ldy 	#3 							; initial position.
.199b					_DecodeLoop:
.199b	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy the current character to temp1
.199d	85 10		sta $10				sta 	temp1 						; must be an execution address.
.199f	c8		iny				iny
.19a0	b1 08		lda ($08),y			lda 	(srcPtr),y
.19a2	85 11		sta $11				sta 	temp1+1
.19a4	c8		iny				iny 								; y points to the byte after it.
.19a5	a5 10		lda $10				lda 	temp1
.19a7	c9 49		cmp #$49			cmp 	#NextLine & $FF
.19a9	d0 06		bne $19b1			bne 	_DecodeNotEOL
.19ab	a5 11		lda $11				lda 	temp1+1
.19ad	c9 1c		cmp #$1c			cmp 	#NextLine >> 8
.19af	f0 0b		beq $19bc			beq 	_DecodeEOL
.19b1					_DecodeNotEOL:
.19b1	20 c4 19	jsr $19c4			jsr 	IdentifyCodeWord
.19b4	20 0e 1a	jsr $1a0e			jsr 	DecodeFoundWord
.19b7	20 f8 19	jsr $19f8			jsr 	AdvanceToNext 				; advance to next entry in the line.
.19ba	80 df		bra $199b			bra 	_DecodeLoop 				; and go round again
.19bc					_DecodeEOL:
.19bc	a9 00		lda #$00			lda 	#0
.19be	92 0a		sta ($0a)			sta 	(bufPtr)
.19c0	7a		ply				ply 								; restore registers and exit
.19c1	fa		plx				plx
.19c2	68		pla				pla
.19c3	60		rts				rts
.19c4					IdentifyCodeWord:
.19c4	5a		phy				phy 								; save current position on the stack.
.19c5	a9 81		lda #$81			lda 	#(Dictionary) & $FF
.19c7	85 0c		sta $0c				sta 	0+(matchPtr)
.19c9	a9 1e		lda #$1e			lda 	#(Dictionary) >> 8
.19cb	85 0d		sta $0d				sta 	1+(matchPtr)
.19cd					_DecodeIdentify:
.19cd	a0 02		ldy #$02			ldy 	#2 							; have we found a match ?
.19cf	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.19d1	c5 10		cmp $10				cmp 	temp1
.19d3	d0 07		bne $19dc			bne 	_DecodeIdNext
.19d5	c8		iny				iny
.19d6	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.19d8	c5 11		cmp $11				cmp 	temp1+1
.19da	f0 1a		beq $19f6			beq 	_DecodeIdFound
.19dc					_DecodeIdNext:
.19dc	18		clc				clc
.19dd	b2 0c		lda ($0c)			lda 	(matchPtr)
.19df	f0 0a		beq $19eb			beq 	_DecodeIdIssue
.19e1	65 0c		adc $0c				adc 	matchPtr
.19e3	85 0c		sta $0c				sta 	matchPtr
.19e5	90 e6		bcc $19cd			bcc 	_DecodeIdentify
.19e7	e6 0d		inc $0d				inc 	matchPtr+1
.19e9	80 e2		bra $19cd			bra 	_DecodeIdentify
.19eb					_DecodeIdIssue:
.19eb	20 20 10	jsr $1020			jsr 	ErrorHandler
>19ee	44 45 43 4f 44 45 3f 00				.text 	"DECODE?",0
.19f6					_DecodeIdFound:
.19f6	7a		ply				ply 								; restore position.
.19f7	60		rts				rts
.19f8					AdvanceToNext:
.19f8	5a		phy				phy 								; get the parameter count from bits 0-1 of the type byte
.19f9	a0 01		ldy #$01			ldy 	#1
.19fb	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.19fd	29 03		and #$03			and 	#3 							; bits 0-1.
.19ff	7a		ply				ply
.1a00	c9 03		cmp #$03			cmp 	#3 							; is it n-bytes e.g. specified by the next byte
.1a02	d0 02		bne $1a06			bne 	_ATN012
.1a04	b1 08		lda ($08),y			lda 	(srcPtr),y 					; if so, use that byte as the overall length.
.1a06					_ATN012:
.1a06	85 12		sta $12				sta 	temp2 						; now add that to Y
.1a08	98		tya				tya
.1a09	18		clc				clc
.1a0a	65 12		adc $12				adc 	temp2
.1a0c	a8		tay				tay
.1a0d	60		rts				rts
.1a0e					DecodeFoundWord:
.1a0e	5a		phy				phy 								; save current position
.1a0f	84 12		sty $12				sty		temp2 						; put it in temp2 as well.
.1a11	a0 01		ldy #$01			ldy 	#1 							; get the type byte
.1a13	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; is there a special decoder check (bit 4 set) ?
.1a15	29 10		and #$10			and 	#$10
.1a17	d0 0e		bne $1a27			bne 	_DFWSpecialDecoder
.1a19	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; reget it.
.1a1b	30 08		bmi $1a25			bmi 	_DFWExit 					; if hidden word (bit 7 set)
.1a1d	a9 06		lda #$06			lda 	#CTH_Keyword				; output a space to the buffer
.1a1f	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1a22	20 40 1a	jsr $1a40			jsr 	DecodeCurrentWord 			; expand that.
.1a25					_DFWExit:
.1a25	7a		ply				ply 								; restore current position
.1a26	60		rts				rts
.1a27					_DFWSpecialDecoder:
.1a27	a0 04		ldy #$04			ldy 	#4 							; the decode word address is at offset 4,5
.1a29	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; copy this into temp2
.1a2b	85 12		sta $12				sta 	temp2
.1a2d	c8		iny				iny
.1a2e	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1a30	85 13		sta $13				sta 	temp2+1
.1a32	7a		ply				ply 	 							; restore current position into Y
.1a33	48		pha				pha 								; save registers
.1a34	da		phx				phx
.1a35	5a		phy				phy
.1a36	20 3d 1a	jsr $1a3d			jsr 	_DFWCallDecoder				; call the decoder routine
.1a39	7a		ply				ply 								; restore registers and exit
.1a3a	fa		plx				plx
.1a3b	68		pla				pla
.1a3c	60		rts				rts
.1a3d					_DFWCallDecoder:
.1a3d	6c 12 00	jmp ($0012)			jmp 	(temp2)
.1a40					DecodeCurrentWord:
.1a40	5a		phy				phy
.1a41	a0 01		ldy #$01			ldy 	#1 							; read type byte
.1a43	b1 0c		lda ($0c),y			lda 	(matchPtr),y
.1a45	a0 04		ldy #$04			ldy 	#4 							; original offset
.1a47	4a		lsr a				lsr 	a 							; encoder/decoder bits in 0-1
.1a48	4a		lsr a				lsr 	a 							; add 2 to Y for each encoder/decoder
.1a49	4a		lsr a				lsr 	a 							; bit set.
.1a4a	4a		lsr a				lsr 	a
.1a4b	4a		lsr a				lsr 	a 							; decoder bit
.1a4c	90 02		bcc $1a50			bcc 	_DWBNoDec
.1a4e	c8		iny				iny
.1a4f	c8		iny				iny
.1a50					_DWBNoDec:
.1a50	4a		lsr a				lsr 	a
.1a51	90 02		bcc $1a55			bcc 	_DWBNoEnc
.1a53	c8		iny				iny
.1a54	c8		iny				iny
.1a55					_DWBNoEnc:
.1a55					_DWBWordOut:
.1a55	b1 0c		lda ($0c),y			lda 	(matchPtr),y 				; output until bit 7 set.
.1a57	48		pha				pha
.1a58	29 7f		and #$7f			and 	#$7F
.1a5a	20 63 1a	jsr $1a63			jsr		DecodeWriteBuffer
.1a5d	c8		iny				iny
.1a5e	68		pla				pla
.1a5f	10 f4		bpl $1a55			bpl 	_DWBWordOut
.1a61	7a		ply				ply 								; restore Y and exit
.1a62	60		rts				rts
.1a63					DecodeWriteBuffer:
.1a63	92 0a		sta ($0a)			sta 	(bufPtr)
.1a65	e6 0a		inc $0a				inc 	bufPtr
.1a67	d0 02		bne $1a6b			bne 	_DWBNoCarry
.1a69	e6 0b		inc $0b				inc 	bufPtr+1
.1a6b					_DWBNoCarry:
.1a6b	60		rts				rts
.1a6c					DecodeOutputData:
.1a6c	48		pha				pha
.1a6d	da		phx				phx
.1a6e	5a		phy				phy
.1a6f	b1 08		lda ($08),y			lda 	(srcPtr),y 					; length + 1
.1a71	aa		tax				tax
.1a72					_DODLoop:
.1a72	ca		dex				dex 								; done it all ?
.1a73	f0 0c		beq $1a81			beq		_DODExit
.1a75	c8		iny				iny 								; output next character
.1a76	b1 08		lda ($08),y			lda 	(srcPtr),y
.1a78	29 7f		and #$7f			and 	#$7F
.1a7a	f0 f6		beq $1a72			beq 	_DODLoop 					; don't print NULL
.1a7c	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1a7f	80 f1		bra $1a72			bra 	_DODLoop
.1a81					_DODExit:
.1a81	7a		ply				ply
.1a82	fa		plx				plx
.1a83	68		pla				pla
.1a84	60		rts				rts
.1a85					DecodeYAToBuffer:
.1a85	da		phx				phx
.1a86	5a		phy				phy
.1a87	48		pha				pha
.1a88	a5 0a		lda $0a				lda 	bufPtr 						; copy bufPtr to temp2
.1a8a	85 12		sta $12				sta 	temp2
.1a8c	a5 0b		lda $0b				lda 	bufPtr+1
.1a8e	85 13		sta $13				sta 	temp2+1
.1a90	68		pla				pla
.1a91	20 c3 1c	jsr $1cc3			jsr 	ConvertToStringMain 		; convert YA to string there
.1a94	aa		tax				tax 								; chars output to X
.1a95	18		clc				clc
.1a96	65 0a		adc $0a				adc 	bufPtr 						; add to buffer pointer
.1a98	85 0a		sta $0a				sta 	bufPtr
.1a9a	90 02		bcc $1a9e			bcc 	_DYABNoCarry
.1a9c	e6 0b		inc $0b				inc 	bufPtr+1
.1a9e					_DYABNoCarry:
.1a9e	8a		txa				txa 								; count in A
.1a9f	7a		ply				ply									; restore and exit.
.1aa0	fa		plx				plx
.1aa1	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/list.src

.1aa2					ListCode:
.1aa2	64 1e		stz $1e				stz 	ListLowest 					; zero lowest line#
.1aa4	64 1f		stz $1f				stz 	ListLowest+1
.1aa6	a9 14		lda #$14			lda 	#20 						; show max 20 after lowest line
.1aa8	85 1d		sta $1d				sta 	ListCount
.1aaa	a9 00		lda #$00			lda 	#(ProgramMemory) & $FF
.1aac	85 18		sta $18				sta 	0+(listPtr)
.1aae	a9 40		lda #$40			lda 	#(ProgramMemory) >> 8
.1ab0	85 19		sta $19				sta 	1+(listPtr)
.1ab2	86 10		stx $10				stx 	temp1						; S->A
.1ab4	ba		tsx				tsx
.1ab5	8a		txa				txa
.1ab6	a6 10		ldx $10				ldx 	temp1
.1ab8	c9 80		cmp #$80			cmp 	#NumberStackBase
.1aba	f0 0e		beq $1aca			beq 	_LCLoop
.1abc	a5 06		lda $06				lda 	TOS 						; copy TOS to lowest
.1abe	85 1e		sta $1e				sta 	ListLowest
.1ac0	a5 07		lda $07				lda 	TOS+1
.1ac2	85 1f		sta $1f				sta 	ListLowest+1
.1ac4	68		pla				pla
.1ac5	85 07		sta $07				sta 	TOS+1
.1ac7	68		pla				pla
.1ac8	85 06		sta $06				sta 	TOS
.1aca					_LCLoop:
.1aca	b2 18		lda ($18)			lda 	(listPtr)					; reached end ?
.1acc	f0 4e		beq $1b1c			beq 	_LCExit
.1ace	a0 01		ldy #$01			ldy 	#1							; >= list lowest
.1ad0	b1 18		lda ($18),y			lda 	(listPtr),y
.1ad2	c5 1e		cmp $1e				cmp 	ListLowest
.1ad4	c8		iny				iny
.1ad5	b1 18		lda ($18),y			lda 	(listPtr),y
.1ad7	e5 1f		sbc $1f				sbc 	ListLowest+1
.1ad9	90 34		bcc $1b0f			bcc 	_LCNext
.1adb	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1add	85 0a		sta $0a				sta 	0+(bufPtr)
.1adf	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1ae1	85 0b		sta $0b				sta 	1+(bufPtr)
.1ae3	a5 18		lda $18				lda 	listPtr 					; output the line.
.1ae5	a4 19		ldy $19				ldy 	listPtr+1
.1ae7	38		sec				sec
.1ae8	20 75 19	jsr $1975			jsr 	DecodeLineIntoBufPtr
.1aeb	a9 02		lda #$02			lda 	#CTH_LineNo
.1aed	20 13 11	jsr $1113			jsr 	ExternColour
.1af0	a0 ff		ldy #$ff			ldy 	#255
.1af2					_LCLoop2:
.1af2	c8		iny				iny
.1af3	b9 10 08	lda $0810,y			lda 	textBuffer,y
.1af6	f0 0e		beq $1b06			beq 	_LCEnd
.1af8	c9 20		cmp #$20			cmp 	#32
.1afa	b0 05		bcs $1b01			bcs 	_LCPrint
.1afc	20 13 11	jsr $1113			jsr 	ExternColour
.1aff	a9 20		lda #$20			lda 	#32
.1b01					_LCPrint:
.1b01	20 09 11	jsr $1109			jsr 	ExternPrint
.1b04	80 ec		bra $1af2			bra 	_LCLoop2
.1b06	a9 0d		lda #$0d	_LCEnd:	lda 	#13 						; new line
.1b08	20 09 11	jsr $1109			jsr 	ExternPrint
.1b0b	c6 1d		dec $1d				dec 	ListCount					; done all the lines allowed
.1b0d	f0 0d		beq $1b1c			beq 	_LCExit
.1b0f					_LCNext:
.1b0f	18		clc				clc
.1b10	a5 18		lda $18				lda 	listPtr
.1b12	72 18		adc ($18)			adc 	(listPtr)
.1b14	85 18		sta $18				sta 	listPtr
.1b16	90 02		bcc $1b1a			bcc 	_NoCarryAdv
.1b18	e6 19		inc $19				inc 	listPtr+1
.1b1a					_NoCarryAdv:
.1b1a	80 ae		bra $1aca			bra 	_LCLoop 					; go round again.
.1b1c					_LCExit:
.1b1c	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/miscellany.src

.1b1f					RunProgram:
.1b1f	a2 80		ldx #$80			ldx 	#NumberStackBase
.1b21	9a		txs				txs
.1b22	20 33 19	jsr $1933			jsr 		ClearVariableSpace 		; clear variables etc.
.1b25	a2 00		ldx #$00			ldx			#ProgramMemory & $FF	; boot address
.1b27	a0 40		ldy #$40			ldy 		#ProgramMemory >>8
.1b29	20 75 10	jsr $1075			jsr 		InitialiseCoreCode 		; initialise the NEXT routine at $00
.1b2c	4c 00 00	jmp $0000			jmp 		Next
.1b2f					Call6502:
.1b2f	a5 06		lda $06				lda 	TOS 						; copy call address
.1b31	85 10		sta $10				sta 	temp1
.1b33	a5 07		lda $07				lda 	TOS+1
.1b35	85 11		sta $11				sta 	temp1+1
.1b37	68		pla				pla
.1b38	85 07		sta $07				sta 	TOS+1
.1b3a	68		pla				pla
.1b3b	85 06		sta $06				sta 	TOS
.1b3d	20 43 1b	jsr $1b43			jsr 	_CallTemp1 					; call it
.1b40	4c 00 00	jmp $0000			jmp 	Next
.1b43					_CallTemp1:
.1b43	6c 10 00	jmp ($0010)			jmp 	(temp1)
.1b46					AssertCode:
.1b46	a5 06		lda $06				lda 	TOS 						; TOS = 0
.1b48	05 07		ora $07				ora 	TOS+1
.1b4a	f0 09		beq $1b55			beq 	_ASFail 					; if zero fail
.1b4c	68		pla				pla
.1b4d	85 07		sta $07				sta 	TOS+1
.1b4f	68		pla				pla
.1b50	85 06		sta $06				sta 	TOS
.1b52	4c 00 00	jmp $0000			jmp 	Next
.1b55					_ASFail:
.1b55	20 20 10	jsr $1020			jsr 	ErrorHandler
>1b58	41 53 53 45 52 54 00				.text 	"ASSERT",0
.1b5f					StopCode:
.1b5f	20 20 10	jsr $1020			jsr 	ErrorHandler
>1b62	53 54 4f 50 00					.text 	"STOP",0
.1b67					EndProgram:
.1b67	4c 13 10	jmp $1013			jmp 	WarmStart
.1b6a					VlistCode:
.1b6a	a9 81		lda #$81			lda 	#(Dictionary) & $FF
.1b6c	85 10		sta $10				sta 	0+(temp1)
.1b6e	a9 1e		lda #$1e			lda 	#(Dictionary) >> 8
.1b70	85 11		sta $11				sta 	1+(temp1)
.1b72	a0 01		ldy #$01	_VLLoop:ldy 	#1							; type byte
.1b74	b1 10		lda ($10),y			lda 	(temp1),y
.1b76	a0 04		ldy #$04			ldy 	#4 							; Y = 4
.1b78	4a		lsr a				lsr 	a 							; shift bits 4 and 5 to 0,1
.1b79	4a		lsr a				lsr 	a
.1b7a	4a		lsr a				lsr		a
.1b7b	4a		lsr a				lsr 	a
.1b7c	4a		lsr a				lsr 	a 							; add those bits in
.1b7d	90 02		bcc $1b81			bcc 	_VLNoDec
.1b7f	c8		iny				iny
.1b80	c8		iny				iny
.1b81					_VLNoDec:
.1b81	4a		lsr a				lsr 	a
.1b82	90 02		bcc $1b86			bcc 	_VLNoEnc
.1b84	c8		iny				iny
.1b85	c8		iny				iny
.1b86					_VLNoEnc:
.1b86	b1 10		lda ($10),y			lda 	(temp1),y 					; remove $$ words
.1b88	c9 24		cmp #$24			cmp 	#"$"
.1b8a	d0 06		bne $1b92			bne 	_VLPrint
.1b8c	c8		iny				iny
.1b8d	51 10		eor ($10),y			eor 	(temp1),y
.1b8f	f0 13		beq $1ba4			beq 	_VLNext
.1b91	88		dey				dey
.1b92					_VLPrint:
.1b92	b1 10		lda ($10),y			lda 	(temp1),y
.1b94	48		pha				pha
.1b95	c8		iny				iny
.1b96	29 7f		and #$7f			and 	#$7F
.1b98	20 09 11	jsr $1109			jsr 	ExternPrint
.1b9b	68		pla				pla
.1b9c	0a		asl a				asl 	a
.1b9d	90 f3		bcc $1b92			bcc 	_VLPrint
.1b9f	a9 20		lda #$20			lda 	#32
.1ba1	20 09 11	jsr $1109			jsr 	ExternPrint
.1ba4					_VLNext:
.1ba4	18		clc				clc 								; go to next
.1ba5	b2 10		lda ($10)			lda 	(temp1)
.1ba7	65 10		adc $10				adc 	temp1
.1ba9	85 10		sta $10				sta 	temp1
.1bab	90 02		bcc $1baf			bcc 	_VLNoCarry
.1bad	e6 11		inc $11				inc 	temp1+1
.1baf					_VLNoCarry:
.1baf	b2 10		lda ($10)			lda 	(temp1)
.1bb1	d0 bf		bne $1b72			bne 	_VLLoop
.1bb3	a9 0d		lda #$0d			lda 	#13
.1bb5	20 09 11	jsr $1109			jsr 	ExternPrint
.1bb8	4c 00 00	jmp $0000			jmp 	Next

;******  Return to file: kernel.asm


;******  Processing file: words/system/toint.src

.1bbb					ConvertToInteger:
.1bbb	84 17		sty $17				sty 	temp4+1
.1bbd	85 16		sta $16				sta 	temp4
.1bbf	64 14		stz $14				stz 	temp3 						; reset value
.1bc1	64 15		stz $15				stz 	temp3+1
.1bc3	64 10		stz $10				stz 	temp1 						; temp1 = 0 (decimal) 255 (hex)
.1bc5	a0 00		ldy #$00			ldy 	#0 							; look at first character
.1bc7	b1 16		lda ($16),y			lda 	(temp4),y
.1bc9	49 2d		eor #$2d			eor 	#"-"						; zero if '-'
.1bcb	85 11		sta $11				sta 	temp1+1 					; save this in temp1+1
.1bcd	d0 01		bne $1bd0			bne 	_CTINotMinus
.1bcf	c8		iny				iny									; skip -
.1bd0					_CTINotMinus:
.1bd0	b1 16		lda ($16),y			lda 	(temp4),y
.1bd2	c9 24		cmp #$24			cmp		#'$'						; if $ then skip it and set hex flag
.1bd4	d0 03		bne $1bd9			bne 	_CTILoop
.1bd6	c6 10		dec $10				dec 	temp1
.1bd8	c8		iny				iny
.1bd9					_CTILoop:
.1bd9	b1 16		lda ($16),y			lda 	(temp4),y 					; next digit
.1bdb	29 7f		and #$7f			and 	#$7F 						; drop end of word flag
.1bdd	38		sec				sec
.1bde	e9 30		sbc #$30			sbc 	#'0' 						; put in range '0'+
.1be0	90 65		bcc $1c47			bcc 	_CTIFail 					; out of range.
.1be2	c9 0a		cmp #$0a			cmp 	#10 						; in 0-9 ?
.1be4	90 0b		bcc $1bf1			bcc 	_CTILegal
.1be6	c9 11		cmp #$11			cmp 	#'A'-'0'					; between 9 and A ?
.1be8	90 5d		bcc $1c47			bcc 	_CTIFail
.1bea	38		sec				sec
.1beb	e9 07		sbc #$07			sbc 	#7 							; hex adjust
.1bed	c9 10		cmp #$10			cmp 	#16 						; out of range ?
.1bef	b0 56		bcs $1c47			bcs 	_CTIFail
.1bf1					_CTILegal:
.1bf1	48		pha				pha 								; save digit value.
.1bf2	06 14		asl $14				asl 	temp3
.1bf4	26 15		rol $15				rol 	temp3+1
.1bf6	a5 14		lda $14				lda 	temp3 						; copy x2 into temp2
.1bf8	85 12		sta $12				sta 	temp2
.1bfa	a5 15		lda $15				lda 	temp3+1
.1bfc	85 13		sta $13				sta 	temp2+1
.1bfe	06 14		asl $14				asl 	temp3
.1c00	26 15		rol $15				rol 	temp3+1
.1c02	06 14		asl $14				asl 	temp3
.1c04	26 15		rol $15				rol 	temp3+1
.1c06	24 10		bit $10				bit 	temp1 						; hexadecimal
.1c08	10 07		bpl $1c11			bpl 	_CTIDecimal
.1c0a	06 14		asl $14				asl 	temp3
.1c0c	26 15		rol $15				rol 	temp3+1
.1c0e	68		pla				pla 								; get digit back
.1c0f	80 12		bra $1c23			bra 	_CTIAddLoop
.1c11					_CTIDecimal:
.1c11	18		clc				clc 								; x 8 + x 2 = x 10
.1c12	a5 14		lda $14				lda 	temp3
.1c14	65 12		adc $12				adc 	temp2
.1c16	85 14		sta $14				sta 	temp3
.1c18	a5 15		lda $15				lda 	temp3+1
.1c1a	65 13		adc $13				adc 	temp2+1
.1c1c	85 15		sta $15				sta 	temp3+1
.1c1e	68		pla				pla 								; check digit 0-9
.1c1f	c9 0a		cmp #$0a			cmp 	#10
.1c21	b0 24		bcs $1c47			bcs 	_CTIFail
.1c23					_CTIAddLoop:
.1c23	18		clc				clc
.1c24	65 14		adc $14				adc 	temp3
.1c26	85 14		sta $14				sta 	temp3
.1c28	90 02		bcc $1c2c			bcc 	_CTINoCarry
.1c2a	e6 15		inc $15				inc 	temp3+1
.1c2c					_CTINoCarry:
.1c2c	c8		iny				iny
.1c2d	b1 16		lda ($16),y			lda 	(temp4),y 					; was this the last character
.1c2f	c9 21		cmp #$21			cmp 	#32+1
.1c31	b0 a6		bcs $1bd9			bcs 	_CTILoop 					; no, go back.
.1c33	a5 11		lda $11				lda 	temp1+1 					; was it - ?
.1c35	d0 0d		bne $1c44			bne 	_CTIOkay
.1c37	38		sec				sec
.1c38	a9 00		lda #$00			lda 	#0 							; negate temp3.
.1c3a	e5 14		sbc $14				sbc 	temp3
.1c3c	85 14		sta $14				sta 	temp3
.1c3e	a9 00		lda #$00			lda 	#0
.1c40	e5 15		sbc $15				sbc 	temp3+1
.1c42	85 15		sta $15				sta 	temp3+1
.1c44					_CTIOkay:
.1c44	98		tya				tya
.1c45	38		sec				sec
.1c46	60		rts				rts
.1c47					_CTIFail:
.1c47	18		clc				clc
.1c48	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/skipper.src

.1c49					NextLine:
.1c49	18		clc				clc
.1c4a	a5 03		lda $03				lda 	IP
.1c4c	72 03		adc ($03)			adc 	(IP)
.1c4e	85 03		sta $03				sta 	IP
.1c50	90 02		bcc $1c54			bcc 	_NoCarryAdv
.1c52	e6 04		inc $04				inc 	IP+1
.1c54					_NoCarryAdv:
.1c54	b2 03		lda ($03)			lda 	(IP)						; is there any following program ?
.1c56	f0 05		beq $1c5d			beq 	_NLGoEnd
.1c58	a2 03		ldx #$03			ldx 	#3 							; start 3 in
.1c5a	4c 02 00	jmp $0002			jmp 	Next+2 						; avoid the first two INXs
.1c5d					_NLGoEnd:
.1c5d	4c 13 10	jmp $1013			jmp 	WarmStart
.1c60					SkipComment:
.1c60	e8		inx				inx									; (IP),X points to the length.
.1c61	e8		inx				inx
.1c62	8a		txa				txa
.1c63	a8		tay				tay 								; put into Y
.1c64	18		clc				clc
.1c65	71 03		adc ($03),y			adc 	(IP),y 						; add the length to X
.1c67	aa		tax				tax 								; put back in X
.1c68	4c 02 00	jmp $0002			jmp 	Next+2 						; continue skipping the pre-increment.
.1c6b					CommentDecoder:
.1c6b	a9 06		lda #$06			lda 	#CTH_Keyword
.1c6d	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c70	a9 27		lda #$27			lda 	#"'"
.1c72	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c75	a9 0b		lda #$0b			lda 	#CTH_Comment
.1c77	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c7a	20 6c 1a	jsr $1a6c			jsr 	DecodeOutputData
.1c7d	a9 20		lda #$20			lda 	#32
.1c7f	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c82	60		rts				rts
.1c83					DefineCode:
.1c83	20 20 10	jsr $1020			jsr 	ErrorHandler
>1c86	44 45 46 49 4e 49 54 49				.text 	"DEFINITION?",0
>1c8e	4f 4e 3f 00
.1c92					DefineDecoder:
.1c92	a9 07		lda #$07			lda 	#CTH_Definition
.1c94	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c97	a9 3a		lda #$3a			lda 	#":"
.1c99	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1c9c	20 6c 1a	jsr $1a6c			jsr 	DecodeOutputData
.1c9f	a9 20		lda #$20			lda 	#32
.1ca1	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1ca4	60		rts				rts

;******  Return to file: kernel.asm


;******  Processing file: words/system/tostr.src

.1ca5					IntToString:
.1ca5	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1ca7	85 12		sta $12				sta 	0+(temp2)
.1ca9	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1cab	85 13		sta $13				sta 	1+(temp2)
.1cad	a5 06		lda $06				lda 	TOS 						; value in YA
.1caf	a4 07		ldy $07				ldy 	TOS+1
.1cb1	20 bf 1c	jsr $1cbf			jsr 	ConvertToString
.1cb4	a9 10		lda #$10			lda 	#(textBuffer) & $FF
.1cb6	85 06		sta $06				sta 	0+(TOS)
.1cb8	a9 08		lda #$08			lda 	#(textBuffer) >> 8
.1cba	85 07		sta $07				sta 	1+(TOS)
.1cbc	4c 00 00	jmp $0000			jmp 	Next
.1cbf					ConvertToString:
.1cbf	38		sec				sec
.1cc0	80 01		bra $1cc3			bra 	ConvertToStringMain
.1cc2					ConvertToStringUnsigned:
.1cc2	18		clc				clc
.1cc3					ConvertToStringMain:
.1cc3	da		phx				phx									; save XY
.1cc4	5a		phy				phy
.1cc5	64 1a		stz $1a				stz 	SignCount 					; this is zero suppression
.1cc7	85 10		sta $10				sta 	temp1 						; save YA in temp1
.1cc9	84 11		sty $11				sty 	temp1+1
.1ccb	a0 00		ldy #$00			ldy 	#0 							; index to result.
.1ccd	90 16		bcc $1ce5			bcc 	_CTSUnsigned 				; if carry clear do not adjust for -
.1ccf	a5 11		lda $11				lda 	temp1+1 					; is it negative
.1cd1	10 12		bpl $1ce5			bpl 	_CTSUnsigned
.1cd3	a9 2d		lda #$2d			lda 	#"-"						; output - sign
.1cd5	91 12		sta ($12),y			sta 	(temp2),y
.1cd7	c8		iny				iny
.1cd8	38		sec				sec 								; negate temp1
.1cd9	a9 00		lda #$00			lda 	#0
.1cdb	e5 10		sbc $10				sbc 	temp1
.1cdd	85 10		sta $10				sta 	temp1
.1cdf	a9 00		lda #$00			lda 	#0
.1ce1	e5 11		sbc $11				sbc 	temp1+1
.1ce3	85 11		sta $11				sta 	temp1+1
.1ce5					_CTSUnsigned:
.1ce5	a2 00		ldx #$00			ldx 	#0 							; index into subtraction table
.1ce7					_CTSLoop:
.1ce7	a9 2f		lda #$2f			lda 	#"0"-1						; set the digit to '0' code.
.1ce9	91 12		sta ($12),y			sta 	(temp2),y
.1ceb					_CTSSubLoop:
.1ceb	b1 12		lda ($12),y			lda 	(temp2),y 					; bump the count
.1ced	1a		inc a				inc 	a
.1cee	91 12		sta ($12),y			sta 	(temp2),y
.1cf0	38		sec				sec 								; do subtraction saving interim result
.1cf1	a5 10		lda $10				lda 	temp1
.1cf3	fd 26 1d	sbc $1d26,x			sbc 	_CTSTable,x
.1cf6	48		pha				pha
.1cf7	a5 11		lda $11				lda 	temp1+1
.1cf9	fd 27 1d	sbc $1d27,x			sbc 	_CTSTable+1,x
.1cfc	90 07		bcc $1d05			bcc 	_CTSCantSubtract 			; end of subtraction.
.1cfe	85 11		sta $11				sta 	temp1+1 					; save result back
.1d00	68		pla				pla
.1d01	85 10		sta $10				sta 	temp1
.1d03	80 e6		bra $1ceb			bra 	_CTSSubLoop
.1d05					_CTSCantSubtract:
.1d05	68		pla				pla 								; throw away interim
.1d06	e8		inx				inx 								; next subtractor
.1d07	e8		inx				inx
.1d08	b1 12		lda ($12),y			lda 	(temp2),y 					; update leading zero
.1d0a	49 30		eor #$30			eor 	#"0"
.1d0c	05 1a		ora $1a				ora 	SignCount
.1d0e	85 1a		sta $1a				sta 	SignCount
.1d10	f0 01		beq $1d13			beq		_CTSLZ 						; if all zeros so far suppress.
.1d12	c8		iny				iny 								; next character
.1d13					_CTSLZ:
.1d13	e0 08		cpx #$08			cpx 	#_CTSTableEnd-_CTSTable 	; done them all ?
.1d15	d0 d0		bne $1ce7			bne 	_CTSLoop
.1d17					_CTSComplete:
.1d17	a5 10		lda $10				lda		temp1 						; get remainder 0-9
.1d19	09 30		ora #$30			ora 	#48 						; ASCII
.1d1b	91 12		sta ($12),y			sta 	(temp2),y					; write out
.1d1d	c8		iny				iny
.1d1e	a9 00		lda #$00			lda 	#0							; make ASCIIZ
.1d20	91 12		sta ($12),y			sta 	(temp2),y
.1d22	98		tya				tya 								; size in A
.1d23	7a		ply				ply									; pull and exit.
.1d24	fa		plx				plx
.1d25	60		rts				rts
.1d26					_CTSTable:
>1d26	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10 			; subtractors, this is a simple version.
.1d2e					_CTSTableEnd:

;******  Return to file: kernel.asm


;******  Processing file: words/system/varhandlers.src

.1d2e					VarAddressHandler:
.1d2e	18		clc				clc 								; find variable, error if it doesn't exist.
.1d2f	20 80 1d	jsr $1d80			jsr 	VariableFind
.1d32	a5 06		lda $06				lda 	TOS
.1d34	48		pha				pha
.1d35	a5 07		lda $07				lda 	TOS+1
.1d37	48		pha				pha
.1d38	a5 10		lda $10				lda 	temp1 						; the address is the new value
.1d3a	85 06		sta $06				sta 	TOS
.1d3c	a5 11		lda $11				lda		temp1+1
.1d3e	85 07		sta $07				sta 	TOS+1
.1d40	4c 00 00	jmp $0000			jmp 	Next
.1d43					VarAddrHandlerDecode:
.1d43	a9 26		lda #$26			lda 	#"&"
.1d45	4c 2e 1e	jmp $1e2e			jmp 	VarHandlerDecode
.1d48					VarReadHandler:
.1d48	18		clc				clc 								; find variable, error if it doesn't exist.
.1d49	20 80 1d	jsr $1d80			jsr 	VariableFind
.1d4c	a5 06		lda $06				lda 	TOS
.1d4e	48		pha				pha
.1d4f	a5 07		lda $07				lda 	TOS+1
.1d51	48		pha				pha
.1d52	b2 10		lda ($10)			lda 	(temp1)						; read variable address to TOS
.1d54	85 06		sta $06				sta 	TOS
.1d56	a0 01		ldy #$01			ldy 	#1
.1d58	b1 10		lda ($10),y			lda 	(temp1),y
.1d5a	85 07		sta $07				sta 	TOS+1
.1d5c	4c 00 00	jmp $0000			jmp 	Next
.1d5f					VarReadHandlerDecode:
.1d5f	a9 40		lda #$40			lda 	#"@"
.1d61	4c 2e 1e	jmp $1e2e			jmp 	VarHandlerDecode
.1d64					VarWriteHandler:
.1d64	38		sec				sec 								; find variable, create it if it doesn't exist.
.1d65	20 80 1d	jsr $1d80			jsr 	VariableFind
.1d68	a5 06		lda $06				lda 	TOS 						; write TOS to that address.
.1d6a	92 10		sta ($10)			sta 	(temp1)
.1d6c	a5 07		lda $07				lda 	TOS+1
.1d6e	a0 01		ldy #$01			ldy 	#1
.1d70	91 10		sta ($10),y			sta 	(temp1),y
.1d72	68		pla				pla
.1d73	85 07		sta $07				sta 	TOS+1
.1d75	68		pla				pla
.1d76	85 06		sta $06				sta 	TOS
.1d78	4c 00 00	jmp $0000			jmp 	Next
.1d7b					VarWriteHandlerDecode:
.1d7b	a9 21		lda #$21			lda 	#"!"
.1d7d	4c 2e 1e	jmp $1e2e			jmp 	VarHandlerDecode
.1d80					VariableFind:
.1d80	08		php				php 								; save autocreate flag.
.1d81	e8		inx				inx 								; advance to/over the variable name.
.1d82	e8		inx				inx
.1d83	8a		txa				txa 								; put in Y
.1d84	a8		tay				tay
.1d85	b1 03		lda ($03),y			lda 	(IP),y 						; copy name word into temp2
.1d87	85 12		sta $12				sta 	temp2
.1d89	c8		iny				iny
.1d8a	b1 03		lda ($03),y			lda 	(IP),y
.1d8c	85 13		sta $13				sta 	temp2+1
.1d8e	c9 1b		cmp #$1b			cmp 	#27 						; check for A-Z
.1d90	b0 0f		bcs $1da1			bcs 	_VFLong
.1d92	a5 13		lda $13				lda 	temp2+1
.1d94	d0 0b		bne $1da1			bne 	_VFLong
.1d96	a5 12		lda $12				lda 	temp2						; this is the index
.1d98	0a		asl a				asl 	a 							; double it
.1d99	85 10		sta $10				sta 	temp1
.1d9b	a9 06		lda #$06			lda 	#azVariables >> 8			; set the MSB
.1d9d	85 11		sta $11				sta 	temp1+1
.1d9f	28		plp				plp 								; throw creation flag, it always exists.
.1da0	60		rts				rts
.1da1					_VFLong:
.1da1	a5 12		lda $12				lda 	temp2 						; built a hash table index into temp3/temp4
.1da3	6a		ror a				ror 	a
.1da4	6a		ror a				ror 	a
.1da5	6a		ror a				ror 	a
.1da6	6a		ror a				ror 	a
.1da7	45 12		eor $12				eor 	temp2
.1da9	45 13		eor $13				eor 	temp2+1
.1dab	29 0f		and #$0f			and 	#(hashTableSize-1)			; force into range
.1dad	0a		asl a				asl 	a
.1dae	69 40		adc #$40			adc 	#hashTable & $FF 			; make an address of the head => temp1/3
.1db0	85 10		sta $10				sta 	temp1
.1db2	85 14		sta $14				sta 	temp3
.1db4	a9 06		lda #$06			lda 	#hashTable >> 8
.1db6	85 11		sta $11				sta 	temp1+1
.1db8	85 15		sta $15				sta 	temp3+1
.1dba					_VFSearch:
.1dba	a0 01		ldy #$01			ldy 	#1							; read MSB of first record
.1dbc	b1 10		lda ($10),y			lda 	(temp1),y
.1dbe	f0 23		beq $1de3			beq 	_VFNotFound 				; is MSB is zero, can't be a variable record
.1dc0	a8		tay				tay 								; follow the link through.
.1dc1	b2 10		lda ($10)			lda 	(temp1)
.1dc3	85 10		sta $10				sta 	temp1
.1dc5	84 11		sty $11				sty 	temp1+1
.1dc7	a0 04		ldy #$04			ldy 	#4							; check if the name matches
.1dc9	b1 10		lda ($10),y			lda 	(temp1),y
.1dcb	c5 12		cmp $12				cmp 	temp2
.1dcd	d0 eb		bne $1dba			bne 	_VFSearch 					; if it doesn't, follow the next link.
.1dcf	c8		iny				iny 								; same for 2nd byte of name
.1dd0	b1 10		lda ($10),y			lda 	(temp1),y
.1dd2	c5 13		cmp $13				cmp 	temp2+1
.1dd4	d0 e4		bne $1dba			bne 	_VFSearch
.1dd6	18		clc				clc
.1dd7	a5 10		lda $10				lda 	temp1 						; make temp1 point to the data at offset 2
.1dd9	69 02		adc #$02			adc 	#2
.1ddb	85 10		sta $10				sta 	temp1
.1ddd	90 02		bcc $1de1			bcc 	_VFNoPage1
.1ddf	e6 11		inc $11				inc 	temp1+1
.1de1					_VFNoPage1:
.1de1	28		plp				plp 								; don't need to worry about creation flag
.1de2	60		rts				rts
.1de3					_VFNotFound:
.1de3	28		plp				plp 								; was carry set, e.g. create a new record if not found ?
.1de4	b0 0d		bcs $1df3			bcs 	_VFCreate
.1de6	20 20 10	jsr $1020			jsr 	ErrorHandler
>1de9	56 41 52 49 41 42 4c 45				.text 	"VARIABLE?",0
>1df1	3f 00
.1df3					_VFCreate:
.1df3	a0 01		ldy #$01			ldy 	#1
.1df5	b2 14		lda ($14)			lda 	(temp3) 					; copy the head link to the first 2 bytes
.1df7	92 0e		sta ($0e)			sta 	(nextFreeMem)
.1df9	b1 14		lda ($14),y			lda 	(temp3),y
.1dfb	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1dfd	c8		iny				iny
.1dfe	a9 00		lda #$00			lda 	#0	 						; write zero initialised data out.
.1e00	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1e02	c8		iny				iny
.1e03	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1e05	c8		iny				iny
.1e06	a5 12		lda $12				lda 	temp2 						; copy the name out
.1e08	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1e0a	c8		iny				iny
.1e0b	a5 13		lda $13				lda 	temp2+1
.1e0d	91 0e		sta ($0e),y			sta 	(nextFreeMem),y
.1e0f	a0 01		ldy #$01			ldy 	#1
.1e11	a5 0e		lda $0e				lda 	nextFreeMem 				; update the head link
.1e13	92 14		sta ($14)			sta 	(temp3)
.1e15	a5 0f		lda $0f				lda 	nextFreeMem+1
.1e17	91 14		sta ($14),y			sta 	(temp3),y
.1e19	18		clc				clc
.1e1a	a5 0e		lda $0e				lda 	nextFreeMem 				; put nextFreeMem+2 in temp1 (data pointer)
.1e1c	69 02		adc #$02			adc 	#2
.1e1e	85 10		sta $10				sta 	temp1
.1e20	a5 0f		lda $0f				lda 	nextFreeMem+1
.1e22	69 00		adc #$00			adc 	#0
.1e24	85 11		sta $11				sta 	temp1+1
.1e26	a9 06		lda #$06			lda 	#6							; shift freemem pointer up 6
.1e28	a0 00		ldy #$00			ldy 	#0
.1e2a	20 60 19	jsr $1960			jsr 	AdvanceFreeMem
.1e2d	60		rts				rts
.1e2e					VarHandlerDecode:
.1e2e	48		pha				pha 								; save, leading space
.1e2f	a9 20		lda #$20			lda 	#" "
.1e31	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1e34	68		pla				pla 								; restore and write type
.1e35	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1e38	b1 08		lda ($08),y			lda 	(srcPtr),y 					; copy to temp1
.1e3a	85 10		sta $10				sta 	temp1
.1e3c	c8		iny				iny
.1e3d	b1 08		lda ($08),y			lda 	(srcPtr),y
.1e3f	85 11		sta $11				sta 	temp1+1
.1e41	a5 10		lda $10				lda 	temp1 						; output the first character
.1e43	29 1f		and #$1f			and 	#31
.1e45	20 70 1e	jsr $1e70			jsr 	VHOutVarChar
.1e48	a2 05		ldx #$05			ldx 	#5 							; divide temp1 by 32
.1e4a					_VHDShift:
.1e4a	46 11		lsr $11				lsr 	temp1+1
.1e4c	66 10		ror $10				ror 	temp1
.1e4e	ca		dex				dex
.1e4f	d0 f9		bne $1e4a			bne 	_VHDShift
.1e51	a2 ff		ldx #$ff			ldx 	#255 						; now divide that by 40 by repeated subtraction.
.1e53					_VHDDiv40:
.1e53	e8		inx				inx
.1e54	38		sec				sec
.1e55	a5 10		lda $10				lda 	temp1
.1e57	e9 28		sbc #$28			sbc 	#40
.1e59	a8		tay				tay
.1e5a	a5 11		lda $11				lda 	temp1+1
.1e5c	e9 00		sbc #$00			sbc 	#0
.1e5e	90 06		bcc $1e66			bcc 	_VHDivDone
.1e60	85 11		sta $11				sta 	temp1+1
.1e62	84 10		sty $10				sty 	temp1
.1e64	80 ed		bra $1e53			bra 	_VHDDiv40
.1e66					_VHDivDone:
.1e66	a5 10		lda $10				lda 	temp1 						; remainder
.1e68	20 70 1e	jsr $1e70			jsr 	VHOutVarChar
.1e6b	8a		txa				txa
.1e6c	20 70 1e	jsr $1e70			jsr 	VHOutVarChar 				; and result.
.1e6f	60		rts				rts
.1e70					VHOutVarChar:
.1e70	c9 00		cmp #$00			cmp 	#0
.1e72	f0 0c		beq $1e80			beq 	_VHOExit
.1e74	18		clc				clc
.1e75	69 40		adc #$40			adc 	#64 						; 65-90 A-Z 91-100 0-9
.1e77	c9 5b		cmp #$5b			cmp 	#91 						; convert back ?
.1e79	90 02		bcc $1e7d			bcc 	_VHOOut
.1e7b	e9 2b		sbc #$2b			sbc 	#91-48 						; adjust to digit
.1e7d					_VHOOut:
.1e7d	20 63 1a	jsr $1a63			jsr 	DecodeWriteBuffer
.1e80					_VHOExit:
.1e80	60		rts				rts

;******  Return to file: kernel.asm

.1e81					Dictionary:

;******  Processing file: generated/dictionary.inc

>1e81	05					.byte	_end1-*
>1e82	00					.byte	$00
>1e83	fa 15					.word	WordWrite
>1e85	a1					.byte	$a1
.1e86					_end1:
>1e86	10					.byte	_end2-*
>1e87	52					.byte	$52
>1e88	64 1d					.word	VarWriteHandler
>1e8a	7b 1d					.word	VarWriteHandlerDecode
>1e8c	24 24 21 48 41 4e 44 4c			.byte	$24,$24,$21,$48,$41,$4e,$44,$4c,$45,$d2
>1e94	45 d2
.1e96					_end2:
>1e96	10					.byte	_end3-*
>1e97	52					.byte	$52
>1e98	2e 1d					.word	VarAddressHandler
>1e9a	43 1d					.word	VarAddrHandlerDecode
>1e9c	24 24 26 48 41 4e 44 4c			.byte	$24,$24,$26,$48,$41,$4e,$44,$4c,$45,$d2
>1ea4	45 d2
.1ea6					_end3:
>1ea6	10					.byte	_end4-*
>1ea7	52					.byte	$52
>1ea8	48 1d					.word	VarReadHandler
>1eaa	5f 1d					.word	VarReadHandlerDecode
>1eac	24 24 40 48 41 4e 44 4c			.byte	$24,$24,$40,$48,$41,$4e,$44,$4c,$45,$d2
>1eb4	45 d2
.1eb6					_end4:
>1eb6	0c					.byte	_end5-*
>1eb7	52					.byte	$52
>1eb8	e7 17					.word	CallHandler
>1eba	a3 18					.word	CallHandlerDecode
>1ebc	24 24 43 41 4c cc			.byte	$24,$24,$43,$41,$4c,$cc
.1ec2					_end5:
>1ec2	0f					.byte	_end6-*
>1ec3	53					.byte	$53
>1ec4	60 1c					.word	SkipComment
>1ec6	6b 1c					.word	CommentDecoder
>1ec8	24 24 43 4f 4d 4d 45 4e			.byte	$24,$24,$43,$4f,$4d,$4d,$45,$4e,$d4
>1ed0	d4
.1ed1					_end6:
>1ed1	0e					.byte	_end7-*
>1ed2	53					.byte	$53
>1ed3	83 1c					.word	DefineCode
>1ed5	92 1c					.word	DefineDecoder
>1ed7	24 24 44 45 46 49 4e c5			.byte	$24,$24,$44,$45,$46,$49,$4e,$c5
.1edf					_end7:
>1edf	0f					.byte	_end8-*
>1ee0	52					.byte	$52
>1ee1	86 10					.word	Literal2Byte
>1ee3	9c 10					.word	Literal2ByteDecode
>1ee5	24 24 4c 49 54 45 52 41			.byte	$24,$24,$4c,$49,$54,$45,$52,$41,$cc
>1eed	cc
.1eee					_end8:
>1eee	0e					.byte	_end9-*
>1eef	80					.byte	$80
>1ef0	49 1c					.word	NextLine
>1ef2	24 24 4e 45 58 54 4c 49			.byte	$24,$24,$4e,$45,$58,$54,$4c,$49,$4e,$c5
>1efa	4e c5
.1efc					_end9:
>1efc	0e					.byte	_end10-*
>1efd	53					.byte	$53
>1efe	ae 10					.word	LiteralString
>1f00	cb 10					.word	LiteralStringDecoder
>1f02	24 24 53 54 52 49 4e c7			.byte	$24,$24,$53,$54,$52,$49,$4e,$c7
.1f0a					_end10:
>1f0a	05					.byte	_end11-*
>1f0b	00					.byte	$00
>1f0c	76 13					.word	Multiply16x16
>1f0e	aa					.byte	$aa
.1f0f					_end11:
>1f0f	05					.byte	_end12-*
>1f10	00					.byte	$00
>1f11	e3 11					.word	Add
>1f13	ab					.byte	$ab
.1f14					_end12:
>1f14	06					.byte	_end13-*
>1f15	00					.byte	$00
>1f16	0b 16					.word	WordAdd
>1f18	2b a1					.byte	$2b,$a1
.1f1a					_end13:
>1f1a	05					.byte	_end14-*
>1f1b	00					.byte	$00
>1f1c	f2 11					.word	Subtract
>1f1e	ad					.byte	$ad
.1f1f					_end14:
>1f1f	06					.byte	_end15-*
>1f20	00					.byte	$00
>1f21	b2 14					.word	ConstantMinus1
>1f23	2d b1					.byte	$2d,$b1
.1f25					_end15:
>1f25	05					.byte	_end16-*
>1f26	00					.byte	$00
>1f27	c7 12					.word	Divide16x16
>1f29	af					.byte	$af
.1f2a					_end16:
>1f2a	05					.byte	_end17-*
>1f2b	00					.byte	$00
>1f2c	a5 14					.word	Constant0
>1f2e	b0					.byte	$b0
.1f2f					_end17:
>1f2f	06					.byte	_end18-*
>1f30	00					.byte	$00
>1f31	0b 14					.word	CheckMinus
>1f33	30 bc					.byte	$30,$bc
.1f35					_end18:
>1f35	06					.byte	_end19-*
>1f36	00					.byte	$00
>1f37	1f 14					.word	CheckZero
>1f39	30 bd					.byte	$30,$bd
.1f3b					_end19:
>1f3b	05					.byte	_end20-*
>1f3c	00					.byte	$00
>1f3d	c1 14					.word	C1
>1f3f	b1					.byte	$b1
.1f40					_end20:
>1f40	06					.byte	_end21-*
>1f41	00					.byte	$00
>1f42	b5 13					.word	Unary1Plus
>1f44	31 ab					.byte	$31,$ab
.1f46					_end21:
>1f46	06					.byte	_end22-*
>1f47	00					.byte	$00
>1f48	cc 13					.word	Unary1Minus
>1f4a	31 ad					.byte	$31,$ad
.1f4c					_end22:
>1f4c	06					.byte	_end23-*
>1f4d	00					.byte	$00
>1f4e	d9 14					.word	C10
>1f50	31 b0					.byte	$31,$b0
.1f52					_end23:
>1f52	07					.byte	_end24-*
>1f53	00					.byte	$00
>1f54	02 15					.word	C100
>1f56	31 30 b0				.byte	$31,$30,$b0
.1f59					_end24:
>1f59	08					.byte	_end25-*
>1f5a	00					.byte	$00
>1f5b	31 15					.word	C1024
>1f5d	31 30 32 b4				.byte	$31,$30,$32,$b4
.1f61					_end25:
>1f61	07					.byte	_end26-*
>1f62	00					.byte	$00
>1f63	06 15					.word	C127
>1f65	31 32 b7				.byte	$31,$32,$b7
.1f68					_end26:
>1f68	07					.byte	_end27-*
>1f69	00					.byte	$00
>1f6a	0a 15					.word	C128
>1f6c	31 32 b8				.byte	$31,$32,$b8
.1f6f					_end27:
>1f6f	06					.byte	_end28-*
>1f70	00					.byte	$00
>1f71	dd 14					.word	C15
>1f73	31 b5					.byte	$31,$b5
.1f75					_end28:
>1f75	06					.byte	_end29-*
>1f76	00					.byte	$00
>1f77	e1 14					.word	C16
>1f79	31 b6					.byte	$31,$b6
.1f7b					_end29:
>1f7b	07					.byte	_end30-*
>1f7c	00					.byte	$00
>1f7d	43 14					.word	Times16
>1f7f	31 36 aa				.byte	$31,$36,$aa
.1f82					_end30:
>1f82	07					.byte	_end31-*
>1f83	00					.byte	$00
>1f84	56 14					.word	Divide16
>1f86	31 36 af				.byte	$31,$36,$af
.1f89					_end31:
>1f89	05					.byte	_end32-*
>1f8a	00					.byte	$00
>1f8b	c5 14					.word	C2
>1f8d	b2					.byte	$b2
.1f8e					_end32:
>1f8e	06					.byte	_end33-*
>1f8f	00					.byte	$00
>1f90	4f 14					.word	Times2
>1f92	32 aa					.byte	$32,$aa
.1f94					_end33:
>1f94	06					.byte	_end34-*
>1f95	00					.byte	$00
>1f96	be 13					.word	Unary2Plus
>1f98	32 ab					.byte	$32,$ab
.1f9a					_end34:
>1f9a	06					.byte	_end35-*
>1f9b	00					.byte	$00
>1f9c	d7 13					.word	Unary2Minus
>1f9e	32 ad					.byte	$32,$ad
.1fa0					_end35:
>1fa0	06					.byte	_end36-*
>1fa1	00					.byte	$00
>1fa2	62 14					.word	Divide2
>1fa4	32 af					.byte	$32,$af
.1fa6					_end36:
>1fa6	06					.byte	_end37-*
>1fa7	00					.byte	$00
>1fa8	e5 14					.word	C24
>1faa	32 b4					.byte	$32,$b4
.1fac					_end37:
>1fac	07					.byte	_end38-*
>1fad	00					.byte	$00
>1fae	0e 15					.word	C255
>1fb0	32 35 b5				.byte	$32,$35,$b5
.1fb3					_end38:
>1fb3	07					.byte	_end39-*
>1fb4	00					.byte	$00
>1fb5	19 15					.word	C256
>1fb7	32 35 b6				.byte	$32,$35,$b6
.1fba					_end39:
>1fba	08					.byte	_end40-*
>1fbb	00					.byte	$00
>1fbc	69 14					.word	Times256
>1fbe	32 35 36 aa				.byte	$32,$35,$36,$aa
.1fc2					_end40:
>1fc2	08					.byte	_end41-*
>1fc3	00					.byte	$00
>1fc4	72 14					.word	Divide256
>1fc6	32 35 36 af				.byte	$32,$35,$36,$af
.1fca					_end41:
>1fca	05					.byte	_end42-*
>1fcb	00					.byte	$00
>1fcc	c9 14					.word	C3
>1fce	b3					.byte	$b3
.1fcf					_end42:
>1fcf	06					.byte	_end43-*
>1fd0	00					.byte	$00
>1fd1	f6 14					.word	C32
>1fd3	33 b2					.byte	$33,$b2
.1fd5					_end43:
>1fd5	09					.byte	_end44-*
>1fd6	00					.byte	$00
>1fd7	49 15					.word	C32767
>1fd9	33 32 37 36 b7				.byte	$33,$32,$37,$36,$b7
.1fde					_end44:
>1fde	09					.byte	_end45-*
>1fdf	00					.byte	$00
>1fe0	55 15					.word	C32768
>1fe2	33 32 37 36 b8				.byte	$33,$32,$37,$36,$b8
.1fe7					_end45:
>1fe7	05					.byte	_end46-*
>1fe8	00					.byte	$00
>1fe9	cd 14					.word	C4
>1feb	b4					.byte	$b4
.1fec					_end46:
>1fec	06					.byte	_end47-*
>1fed	00					.byte	$00
>1fee	4b 14					.word	Times4
>1ff0	34 aa					.byte	$34,$aa
.1ff2					_end47:
>1ff2	06					.byte	_end48-*
>1ff3	00					.byte	$00
>1ff4	5e 14					.word	Divide4
>1ff6	34 af					.byte	$34,$af
.1ff8					_end48:
>1ff8	08					.byte	_end49-*
>1ff9	00					.byte	$00
>1ffa	3d 15					.word	C4096
>1ffc	34 30 39 b6				.byte	$34,$30,$39,$b6
.2000					_end49:
>2000	05					.byte	_end50-*
>2001	00					.byte	$00
>2002	d1 14					.word	C5
>2004	b5					.byte	$b5
.2005					_end50:
>2005	07					.byte	_end51-*
>2006	00					.byte	$00
>2007	25 15					.word	C512
>2009	35 31 b2				.byte	$35,$31,$b2
.200c					_end51:
>200c	06					.byte	_end52-*
>200d	00					.byte	$00
>200e	fa 14					.word	C63
>2010	36 b3					.byte	$36,$b3
.2012					_end52:
>2012	06					.byte	_end53-*
>2013	00					.byte	$00
>2014	fe 14					.word	C64
>2016	36 b4					.byte	$36,$b4
.2018					_end53:
>2018	05					.byte	_end54-*
>2019	00					.byte	$00
>201a	d5 14					.word	C8
>201c	b8					.byte	$b8
.201d					_end54:
>201d	06					.byte	_end55-*
>201e	00					.byte	$00
>201f	47 14					.word	Times8
>2021	38 aa					.byte	$38,$aa
.2023					_end55:
>2023	06					.byte	_end56-*
>2024	00					.byte	$00
>2025	5a 14					.word	Divide8
>2027	38 af					.byte	$38,$af
.2029					_end56:
>2029	05					.byte	_end57-*
>202a	40					.byte	$40
>202b	6c 18					.word	ReturnHandler
>202d	bb					.byte	$bb
.202e					_end57:
>202e	05					.byte	_end58-*
>202f	00					.byte	$00
>2030	63 12					.word	CheckLess
>2032	bc					.byte	$bc
.2033					_end58:
>2033	06					.byte	_end59-*
>2034	00					.byte	$00
>2035	7c 12					.word	CheckLessEq
>2037	3c bd					.byte	$3c,$bd
.2039					_end59:
>2039	06					.byte	_end60-*
>203a	00					.byte	$00
>203b	2c 12					.word	CheckNotEqual
>203d	3c be					.byte	$3c,$be
.203f					_end60:
>203f	05					.byte	_end61-*
>2040	00					.byte	$00
>2041	2f 12					.word	CheckEqual
>2043	bd					.byte	$bd
.2044					_end61:
>2044	05					.byte	_end62-*
>2045	00					.byte	$00
>2046	7f 12					.word	CheckGreater
>2048	be					.byte	$be
.2049					_end62:
>2049	06					.byte	_end63-*
>204a	00					.byte	$00
>204b	60 12					.word	CheckGreaterEq
>204d	3e bd					.byte	$3e,$bd
.204f					_end63:
>204f	08					.byte	_end64-*
>2050	00					.byte	$00
>2051	6a 15					.word	TestDup
>2053	3f 44 55 d0				.byte	$3f,$44,$55,$d0
.2057					_end64:
>2057	05					.byte	_end65-*
>2058	00					.byte	$00
>2059	df 15					.word	WordRead
>205b	c0					.byte	$c0
.205c					_end65:
>205c	07					.byte	_end66-*
>205d	00					.byte	$00
>205e	e5 13					.word	Absolute
>2060	41 42 d3				.byte	$41,$42,$d3
.2063					_end66:
>2063	09					.byte	_end67-*
>2064	00					.byte	$00
>2065	22 16					.word	AllocateMemory
>2067	41 4c 4c 4f c3				.byte	$41,$4c,$4c,$4f,$c3
.206c					_end67:
>206c	07					.byte	_end68-*
>206d	00					.byte	$00
>206e	05 12					.word	And
>2070	41 4e c4				.byte	$41,$4e,$c4
.2073					_end68:
>2073	0a					.byte	_end69-*
>2074	00					.byte	$00
>2075	46 1b					.word	AssertCode
>2077	41 53 53 45 52 d4			.byte	$41,$53,$53,$45,$52,$d4
.207d					_end69:
>207d	09					.byte	_end70-*
>207e	00					.byte	$00
>207f	38 14					.word	ByteSwap
>2081	42 53 57 41 d0				.byte	$42,$53,$57,$41,$d0
.2086					_end70:
>2086	06					.byte	_end71-*
>2087	00					.byte	$00
>2088	ed 15					.word	ByteWrite
>208a	43 a1					.byte	$43,$a1
.208c					_end71:
>208c	06					.byte	_end72-*
>208d	00					.byte	$00
>208e	d6 15					.word	ByteRead
>2090	43 c0					.byte	$43,$c0
.2092					_end72:
>2092	07					.byte	_end73-*
>2093	00					.byte	$00
>2094	2d 19					.word	ClrHandler
>2096	43 4c d2				.byte	$43,$4c,$d2
.2099					_end73:
>2099	08					.byte	_end74-*
>209a	00					.byte	$00
>209b	61 15					.word	Drop
>209d	44 52 4f d0				.byte	$44,$52,$4f,$d0
.20a1					_end74:
>20a1	07					.byte	_end75-*
>20a2	00					.byte	$00
>20a3	73 15					.word	Dup
>20a5	44 55 d0				.byte	$44,$55,$d0
.20a8					_end75:
>20a8	08					.byte	_end76-*
>20a9	01					.byte	$01
>20aa	bb 17					.word	ElseHandler
>20ac	45 4c 53 c5				.byte	$45,$4c,$53,$c5
.20b0					_end76:
>20b0	07					.byte	_end77-*
>20b1	00					.byte	$00
>20b2	67 1b					.word	EndProgram
>20b4	45 4e c4				.byte	$45,$4e,$c4
.20b7					_end77:
>20b7	09					.byte	_end78-*
>20b8	00					.byte	$00
>20b9	be 17					.word	EndIfHandler
>20bb	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
.20c0					_end78:
>20c0	07					.byte	_end79-*
>20c1	00					.byte	$00
>20c2	33 17					.word	ForHandler
>20c4	46 4f d2				.byte	$46,$4f,$d2
.20c7					_end79:
>20c7	06					.byte	_end80-*
>20c8	01					.byte	$01
>20c9	b8 17					.word	IfHandler
>20cb	49 c6					.byte	$49,$c6
.20cd					_end80:
>20cd	09					.byte	_end81-*
>20ce	00					.byte	$00
>20cf	97 17					.word	GetIndex
>20d1	49 4e 44 45 d8				.byte	$49,$4e,$44,$45,$d8
.20d6					_end81:
>20d6	08					.byte	_end82-*
>20d7	00					.byte	$00
>20d8	a2 1a					.word	ListCode
>20da	4c 49 53 d4				.byte	$4c,$49,$53,$d4
.20de					_end82:
>20de	07					.byte	_end83-*
>20df	00					.byte	$00
>20e0	9c 12					.word	Maximum
>20e2	4d 41 d8				.byte	$4d,$41,$d8
.20e5					_end83:
>20e5	07					.byte	_end84-*
>20e6	00					.byte	$00
>20e7	98 12					.word	Minimum
>20e9	4d 49 ce				.byte	$4d,$49,$ce
.20ec					_end84:
>20ec	07					.byte	_end85-*
>20ed	00					.byte	$00
>20ee	d8 12					.word	Modulus16x16
>20f0	4d 4f c4				.byte	$4d,$4f,$c4
.20f3					_end85:
>20f3	0a					.byte	_end86-*
>20f4	00					.byte	$00
>20f5	ec 13					.word	Negate
>20f7	4e 45 47 41 54 c5			.byte	$4e,$45,$47,$41,$54,$c5
.20fd					_end86:
>20fd	07					.byte	_end87-*
>20fe	00					.byte	$00
>20ff	24 19					.word	NewHandler
>2101	4e 45 d7				.byte	$4e,$45,$d7
.2104					_end87:
>2104	08					.byte	_end88-*
>2105	01					.byte	$01
>2106	61 17					.word	NextHandler
>2108	4e 45 58 d4				.byte	$4e,$45,$58,$d4
.210c					_end88:
>210c	07					.byte	_end89-*
>210d	00					.byte	$00
>210e	a7 15					.word	Nip
>2110	4e 49 d0				.byte	$4e,$49,$d0
.2113					_end89:
>2113	07					.byte	_end90-*
>2114	00					.byte	$00
>2115	fc 13					.word	OneComplement
>2117	4e 4f d4				.byte	$4e,$4f,$d4
.211a					_end90:
>211a	06					.byte	_end91-*
>211b	00					.byte	$00
>211c	1f 12					.word	LogOr
>211e	4f d2					.byte	$4f,$d2
.2120					_end91:
>2120	08					.byte	_end92-*
>2121	00					.byte	$00
>2122	8f 15					.word	Over
>2124	4f 56 45 d2				.byte	$4f,$56,$45,$d2
.2128					_end92:
>2128	0a					.byte	_end93-*
>2129	00					.byte	$00
>212a	c1 17					.word	RepeatHandler
>212c	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
.2132					_end93:
>2132	07					.byte	_end94-*
>2133	00					.byte	$00
>2134	7b 14					.word	RandomNumber
>2136	52 4e c4				.byte	$52,$4e,$c4
.2139					_end94:
>2139	07					.byte	_end95-*
>213a	00					.byte	$00
>213b	ac 15					.word	Rot
>213d	52 4f d4				.byte	$52,$4f,$d4
.2140					_end95:
>2140	07					.byte	_end96-*
>2141	00					.byte	$00
>2142	1f 1b					.word	RunProgram
>2144	52 55 ce				.byte	$52,$55,$ce
.2147					_end96:
>2147	07					.byte	_end97-*
>2148	00					.byte	$00
>2149	27 14					.word	SignTOS
>214b	53 47 ce				.byte	$53,$47,$ce
.214e					_end97:
>214e	08					.byte	_end98-*
>214f	00					.byte	$00
>2150	5f 1b					.word	StopCode
>2152	53 54 4f d0				.byte	$53,$54,$4f,$d0
.2156					_end98:
>2156	08					.byte	_end99-*
>2157	00					.byte	$00
>2158	7c 15					.word	Swap
>215a	53 57 41 d0				.byte	$53,$57,$41,$d0
.215e					_end99:
>215e	07					.byte	_end100-*
>215f	00					.byte	$00
>2160	2f 1b					.word	Call6502
>2162	53 59 d3				.byte	$53,$59,$d3
.2165					_end100:
>2165	0d					.byte	_end101-*
>2166	00					.byte	$00
>2167	a5 1c					.word	IntToString
>2169	54 4f 2e 53 54 52 49 4e			.byte	$54,$4f,$2e,$53,$54,$52,$49,$4e,$c7
>2171	c7
.2172					_end101:
>2172	09					.byte	_end102-*
>2173	01					.byte	$01
>2174	c4 17					.word	UntilHandler
>2176	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
.217b					_end102:
>217b	09					.byte	_end103-*
>217c	00					.byte	$00
>217d	6a 1b					.word	VlistCode
>217f	56 4c 49 53 d4				.byte	$56,$4c,$49,$53,$d4
.2184					_end103:
>2184	0a					.byte	_end104-*
>2185	40					.byte	$40
>2186	71 19					.word	BreakCmd
>2188	58 42 52 45 41 cb			.byte	$58,$42,$52,$45,$41,$cb
.218e					_end104:
>218e	09					.byte	_end105-*
>218f	00					.byte	$00
>2190	6b 19					.word	ExitDump
>2192	58 44 55 4d d0				.byte	$58,$44,$55,$4d,$d0
.2197					_end105:
>2197	07					.byte	_end106-*
>2198	00					.byte	$00
>2199	12 12					.word	Xor
>219b	58 4f d2				.byte	$58,$4f,$d2
.219e					_end106:
>219e	00					.byte	0

;******  Return to file: kernel.asm

>3fff	ff						.byte 	$FF
.4000					ProgramMemory:

;******  End of listing
